#include <a_samp>
#include <a_mysql>
#include <core>
#include <float>
#include <time>
#include <file>
#include <sscanf2>
#include <foreach>
#include <zcmd>
#include <streamer>
#include <Dini>
#include <progress>

//#include <mapandreas>
//Includes  moudulos isamp
#include "isamp-util.inc" 		//Contiene defines básicos utilizados en todo el GM
#include "isamp-database.inc" 	//Funciones varias para acceso a datos
#include "isamp-players.inc" 	//Contiene definiciones y lógica de negocio para todo lo que involucre a los jugadores (Debe ser incluido antes de cualquier include que dependa de playerInfo)
#include "isamp-drugs.inc" 		//Sistema de drogas
#include "isamp-admin.inc" 		//Sistema de admines
#include "isamp-inventory.inc" 	//Sistema de inventario y maletero
#include "isamp-jobs.inc" 		//Definiciones y funciones para los JOBS
#include "isamp-factions.inc" 	//Sistema de facciones
#include "isamp-business.inc" 	//Sistema de negocios
#include "isamp-houses.inc" 	//Sistema de casas
#include "isamp-vehicles.inc" 	//Sistema de vehiculos
#include "isamp-thiefjob.inc" 	//Sistema del job de ladron
#include "isamp-tazer.inc" 		//Sistema del tazer
#include "isamp-animations.inc" //Sistema de animaciones
#include "isamp-itemspma.inc"	//Sistema de items auxiliares para la pma (conos, barricadas, etc)
#include "isamp-sprintrace.inc" //Sistema de picadas (carreras)
#include "isamp-gangzones.inc"  //Sistema de control de barrios

// Configuraciones.
#define GAMEMODE				"MA:RP" 										
#define GAMEMODE_USE_VERSION	"No"
#define MAP_NAME				"Malos Aires" 									
#define SERVER_NAME				"Imperium Malos Aires RP BETA [0.3z] [ESPAÑOL]"
#define WEBSITE					"isamp.com.ar"
#define VERSION					"BETA" 											// Versión.
#define PASSWORD				"" 												// Contraseña del servidor.
#define SECPASS 	            "ELIMINADO"                                     // Contraseña para resetear los vehículos personales del servidor, seteandolos en tipo NONE.
#define TEST_SERVER             0                                               // Solo para el testserver, de lo contrario comentar.


#define MAX_BUILDINGS           100

#define HP_GAIN           		2         	                                	// Vida que ganas por segundo al estar hospitalizado.
#define HP_LOSS           		0.1	                                           	// Vida que perdés por segundo al agonizar.
#define GAS_UPDATE_TIME         15000                                           // Tiempo de actualizacion de la gasolina.
#define MAX_TEXTDRAWS           10
#define MAX_ZONE_NAME 			28
#define MAX_SPAWN_ATTEMPTS 		4 												// Cantidad de intentos de spawn.
#define MAX_LOGIN_ATTEMPTS      5
#define TUT_TIME                10000                                           // Tiempo para reintentar el tutorial.
#define JOB_WAITTIME            5												// Número de PayDays que tienes que esperar para poder tomar otro empleo.
#define SLOT_TYPE_LOCKER        1
#define MAX_LOCKER_SLOTS 		22

// Posiciones.
#define POS_BANK_X              2316.6213
#define POS_BANK_Y              -7.3026
#define POS_BANK_Z              26.7422
#define POS_BANK_A              270.00
#define POS_BANK_I              0
#define POS_BANK_W              16001

#define POS_POLICE_DUTY_X 		255.3861
#define POS_POLICE_DUTY_Y       77.2381
#define POS_POLICE_DUTY_Z       1003.6406

#define POS_SIDE_DUTY_X         261.8023
#define POS_SIDE_DUTY_Y			109.7926
#define POS_SIDE_DUTY_Z			1004.6172

#define POS_MEDIC_DUTY_X      	1131.0615
#define POS_MEDIC_DUTY_Y      	-1321.6823
#define POS_MEDIC_DUTY_Z      	1019.7036

#define POS_HOSP_HEAL_X			1163.6618
#define POS_HOSP_HEAL_Y			-1308.4156
#define POS_HOSP_HEAL_Z			1018.5358

#define POS_POLICE_ARREST_X 	257.9974
#define POS_POLICE_ARREST_Y     84.9305
#define POS_POLICE_ARREST_Z     1002.4453

// Dialogs.
#define DLG_LOGIN 				10000
#define DLG_REGISTER        	10001
#define DLG_TUT1                10002
#define DLG_TUT2                10003
#define DLG_TUT3                10004
#define DLG_TUT4                10005
#define DLG_TUT5                10006
#define DLG_TUT6                10007
#define DLG_TUT7                10008
#define DLG_TUT8                10009
#define DLG_TUT9                10010
#define DLG_TUT10               10011
#define DLG_TUT11               10012
#define DLG_TUT12               10013
#define DLG_TUT13               10014
#define DLG_RULES               10015
#define DLG_RULESMSG            10016
#define DLG_JOBS                10017
#define DLG_GUIDE               10018
#define DLG_247                 10019
#define DLG_TUNING              10020
#define DLG_TUNING_COLOR1       10021
#define DLG_TUNING_COLOR2       10022
#define DLG_TUNING_LLANTAS      10023

// Tiempos de jail.
#define DM_JAILTIME 			300 											// 5 minutos

// Precios.
#define PRICE_ADVERTISE         280
#define PRICE_FIGHTSTYLE        10000
#define PRICE_TEXT              2
#define PRICE_CALL              20  // Maximo de precio random TODO: Implementar costeo de llamadas segun tiempo
#define PRICE_TAXI 				2
#define PRICE_TAXI_INTERVAL		3   // Intervalo de tiempo de la bajada de taximetro (en segundos)
#define PRICE_TAXI_PERPASSENGER 600 // Dinero por pasajero.
#define PRICE_MATS              45
#define PRICE_UNLISTEDPHONE     4500
#define PRICE_DRUG_MAT          10
#define PRICE_BIZ_PROD          50
#define PRICE_TREATMENT         2000
#define PRICE_HOSP_HEAL        	300
#define PRICE_RADIO             600

// Combustible.
#define PRICE_FULLTANK          600
// 24-7
#define PRICE_CIGARETTES        40
#define PRICE_LIGHTER        	20
#define PRICE_PHONE             500
#define PRICE_PHONEBOOK			120
#define PRICE_ALFAJOR			30
#define PRICE_FUELCAN           100
#define PRICE_CAMERA            650
#define PRICE_SANDWICH          60
#define PRICE_ASPIRIN           35
#define PRICE_WATERBOTTLE       40

#define HEALTH_ASPIRIN          10

#define PRICE_PIZZA             60
#define PRICE_LIC_GUN       	30000
#define PRICE_LIC_DRIVING       3400
#define PRICE_LIC_SAILING       8400
#define PRICE_LIC_FLYING        25400
#define PRICE_CLOTHES1          250
#define PRICE_CLOTHES2          3500
// Materiales por unidad.
#define MATS_KNUCKLES           1
#define MATS_KNIFE              3
#define MATS_SHOVEL             5
#define MATS_KATANA             6
#define MATS_GRENADE            25
#define MATS_TEARGAS            12
#define MATS_MOLOTOV            8

// Materiales por arma con 50 balas.
#define MATS_9MM	            25
#define MATS_S9MM	            30
#define MATS_DEAGLE           	30
#define MATS_SHOTGUN            40
#define MATS_SAWNOFF            50
#define MATS_UZI        	    45
#define MATS_MP5	            50
#define MATS_AK47            	60
#define MATS_M4           		65
#define MATS_TEC9            	45
#define MATS_CRIFLE            	45
#define MATS_SRIFLE            	75

//====[TIPOS DE LOGS]===========================================================
#define LOG_ADMIN            	1
#define LOG_MONEY            	2
#define LOG_CHAT                3

//[OTHER DEFINES]
#define ResetMoneyBar 			ResetPlayerMoney
#define UpdateMoneyBar 			GivePlayerMoney

#define cAFKTime 				600000

/* Sistema de hambre y sed */
#define BASIC_NEEDS_MAX_TIME   	7000 // En segundos. Tiempo que tarda en bajar de 100 a 0
#define BASIC_NEEDS_UPDATE_TIME 360 // En segundos
#define BASIC_NEEDS_HP_LOSS  	5.0 // Vida que pierde en cada actualizacion si la sed en 0

#define OFFROAD_WHEEL_ID 1025
#define SHADOW_WHEEL_ID 1073
#define MEGA_WHEEL_ID 1074
#define RIMSHINE_WHEEL_ID 1075
#define WIRES_WHEEL_ID 1076
#define CLASSIC_WHEEL_ID 1077
#define TWIST_WHEEL_ID 1078
#define CUTTER_WHEEL_ID 1079
#define SWITCH_WHEEL_ID 1080
#define GROVE_WHEEL_ID 1081
#define IMPORT_WHEEL_ID 1082
#define DOLLAR_WHEEL_ID 1083
#define TRANCE_WHEEL_ID 1084
#define ATOMIC_WHEEL_ID 1085
#define AHAB_WHEEL_ID 1096
#define VIRTUAL_WHEEL_ID 1097
#define ACCESS_WHEEL_ID 1098

#define 						INTERIOR_WEATHER_ID						(1)
#define							MAX_WEATHER_POINTS						(9)

#define SELECTION_ITEMS 	18
#define ITEMS_PER_LINE  	6
#define DIALOG_BASE_X   	75.0
#define DIALOG_BASE_Y   	130.0
#define DIALOG_WIDTH    	550.0
#define DIALOG_HEIGHT   	180.0
#define SPRITE_DIM_X    	70.0
#define SPRITE_DIM_Y    	70.0
//==============================================================================

//====[ETC]=====================================================================
#define PRESSED(%0) 			(((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))
#define HOLDING(%0) 			((newkeys & (%0)) == (%0))
#define RELEASED(%0) 			(((newkeys & (%0)) != (%0)) && ((oldkeys & (%0)) == (%0)))
//==============================================================================

new
 	GEOF = 0,
 	STARS = 0,
    iGMXTick,
    SIDEGateTimer,
    TMTuneTimers[5],
	timersID[24],
	pSpeedoTimer[MAX_PLAYERS],
	// Menus.
	Menu:phoneMenu,
	Menu:licenseMenu,
	// Textdraws.
	Text:textdrawVariables[MAX_TEXTDRAWS],
	Text:RegTDBorder1,
	Text:RegTDBorder2,
	Text:RegTDBackground,
	Text:RegTDTitle,
	Text:TutTDBackground,
	Text:ThirstTD,
	Text:HungerTD,
	PlayerText:TutTD_Text[MAX_PLAYERS][8],
	PlayerText:RegTDGender[MAX_PLAYERS],
	PlayerText:RegTDSkin[MAX_PLAYERS],
	PlayerText:RegTDAge[MAX_PLAYERS],
	PlayerText:RegTDOrigin[MAX_PLAYERS],
	PlayerText:RegTDArrow[MAX_PLAYERS],
	PlayerText:PTD_Speedo[MAX_PLAYERS],
	PlayerText:PTD_Timer[MAX_PLAYERS],
	PlayerText:gCurrentPageTextDrawId[MAX_PLAYERS],
	PlayerText:gHeaderTextDrawId[MAX_PLAYERS],
	PlayerText:gBackgroundTextDrawId[MAX_PLAYERS],
	PlayerText:gNextButtonTextDrawId[MAX_PLAYERS],
	PlayerText:gPrevButtonTextDrawId[MAX_PLAYERS],
	PlayerText:gSelectionItems[MAX_PLAYERS][SELECTION_ITEMS],
	gSelectionItemsTag[MAX_PLAYERS][SELECTION_ITEMS],
	gItemAt[MAX_PLAYERS];

//[OBJETOS MOVILES] En los array, el valor 0 es el estado, abierto, cerrado, etc. El resto son los distintos objetos a mover.
new
	SIDEGate[7],
	MANGate,
	TMMAGate,
	HOSPGate,
 	/*
	BERTGate,
	CHINGate[2],
	FORZGate,
	*/
	PMGate,
	PMBarrier,
	PMHallDoor[3],
	PMWindow[2],
	PMJailMainDoor[2],
	PMJail1[2],
	PMJail2[2],
	PMJail3[2],
	TMTune[5][2],
	SIDEDoor[6][2],
	
	firstSpawn[MAX_PLAYERS],
	cheater[MAX_PLAYERS],
	
	bool:SeatBelt[MAX_PLAYERS],
	bool:smoking[MAX_PLAYERS],
    eventParam[MAX_PLAYERS],
	eventStep[MAX_PLAYERS],
    bool:jobDuty[MAX_PLAYERS],
    LastCP[MAX_PLAYERS],
	CollectedProds[MAX_PLAYERS],
	jobBreak[MAX_PLAYERS],
	bool:carryingProd[MAX_PLAYERS],
	bool:dyingCamera[MAX_PLAYERS],
	
	// Sistema de radios en autos
	bool:isHearingVehicleRedio[MAX_PLAYERS],
	
	// Sistema de hambre y sed
	Bar:pThirstBar[MAX_PLAYERS],
	Bar:pHungerBar[MAX_PLAYERS],
	
	// Sistema de apuestas en casino
	bool:isBetingRoulette[MAX_PLAYERS],
	bool:isBetingFortune[MAX_PLAYERS],
	
	// Sistema de entrevistas para CTR-MAN
	InterviewOffer[MAX_PLAYERS],
	bool:InterviewActive[MAX_PLAYERS],
	
	// Revision de usuarios
	ReviseOffer[MAX_PLAYERS],
	
	// Mecánico.
	MechanicCall = 999,
	MechanicCallTime[MAX_PLAYERS],
	RepairOffer[MAX_PLAYERS],
	RepairPrice[MAX_PLAYERS],
	TuningOffer[MAX_PLAYERS],
	TuningClient[MAX_PLAYERS],
	DestuningOffer[MAX_PLAYERS],
	
	// Taxi/Bus.
	TaxiCall = 999,
	TaxiCallTime[MAX_PLAYERS],
	TaxiAccepted[MAX_PLAYERS],
	TransportDriver[MAX_PLAYERS],
	TransportPassenger[MAX_PLAYERS],
	TransportCost[MAX_PLAYERS],
	TaxiTimer=PRICE_TAXI_INTERVAL,
	
	//Cargando Nafta
	bool:fillingFuel[MAX_PLAYERS],
	
	//Venta de casas
	bool:OfferingHouse[MAX_PLAYERS],
	HouseOfferPrice[MAX_PLAYERS],
	HouseOffer[MAX_PLAYERS],

	//workedTime[MAX_PLAYERS],
	lastPoliceCallNumber = 0,
	lastMedicCallNumber = 0,
	Float:lastPoliceCallPos[3],
	Float:lastMedicCallPos[3],
    LastDeath[MAX_PLAYERS],
	DeathSpam[MAX_PLAYERS char],
    AllowAdv[MAX_PLAYERS],
	RegCounter[MAX_PLAYERS],
	gPlayerLogged[MAX_PLAYERS],
	//JoinCounter,
	weatherVariables[2],
	gTime[3],
	SpawnAttempts[MAX_PLAYERS],
	FactionRequest[MAX_PLAYERS],
	Mobile[MAX_PLAYERS],
	PhoneOnline[MAX_PLAYERS],
	HospHealing[MAX_PLAYERS],
	Muted[MAX_PLAYERS],
	StartedCall[MAX_PLAYERS],
	OOCStatus = 0,
	PMsEnabled[MAX_PLAYERS],
	NewsEnabled[MAX_PLAYERS],
	RadioEnabled[MAX_PLAYERS],
	FactionEnabled[MAX_PLAYERS],
	TicketOffer[MAX_PLAYERS],
	TicketMoney[MAX_PLAYERS],
	MatsHolding[MAX_PLAYERS],
	DrugsHolding[MAX_PLAYERS],
	DrugsIntake[MAX_PLAYERS],
	TrackingPlayer[MAX_PLAYERS],
	UserExists[MAX_PLAYERS],
	CanDoTut[MAX_PLAYERS];

new Float:GUIDE_POS[][3] = {
	{1675.1625,-2245.8516,13.5655},
    {1495.5433,-1749.1760,15.4453}
};

new Float:cAFKPos[MAX_PLAYERS][9],  //Sistema de AFK
	cAFKTimer[MAX_PLAYERS],
	cAFK[MAX_PLAYERS],
	TAFKT[MAX_PLAYERS],
	cTomarVW[MAX_PLAYERS];

// Pickups
new
	P_BANK,
	P_FIGHT_STYLE,
	P_HOSP_HEAL,
	P_LICENSE_CENTER,
	P_HOSP_DUTY,
	P_POLICE_ARREST,
	P_POLICE_DUTY,
	P_SIDE_DUTY,
	P_JOB_CENTER,
	P_GUIDE[2],
	P_CAR_RENT1,
	P_CAR_RENT2,
	P_CAR_RENT3,
	P_MATS_SHOP,
	P_DRUGFARM_MATS,
	P_TUNE[5],
	P_PRODS_SHOP;

//====[ENUMS]===================================================================

enum pLicInfo {
	lDTaking,
	lDStep,
	lDTime,
	Float:lDMaxSpeed,
};
new playerLicense[MAX_PLAYERS][pLicInfo];

enum BuildingSystem {
	blID,
	blText[64],
	blText2[64],
	blEntranceFee,
	blLocked,
	Float:blOutsideX,
	Float:blOutsideY,
	Float:blOutsideZ,
	Float:blOutsideAngle,
	Float:blInsideX,
	Float:blInsideY,
	Float:blInsideZ,
	Float:blInsideAngle,
	blInsideInt,
	blOutsideInt,
	blPickupModel,
	// Datos temporales.
	bool:blLoaded,
	bool:blInsert,
	bool:blDelete,
	blInsideWorld,
	blOutsidePickup,
	blInsidePickup,
	blFaction,
	Text3D:blOutsideLabel,
	Text3D:blInsideLabel,
};

new Building[MAX_BUILDINGS][BuildingSystem];

enum SAZONE_MAIN {
		SAZONE_NAME[28],
		Float:SAZONE_AREA[6]
};

static const gSAZones[][SAZONE_MAIN] = {  // Majority of names and area coordinates adopted from Mabako's 'Zones Script' v0.2
	//	NAME                            AREA (Xmin,Ymin,Zmin,Xmax,Ymax,Zmax)
	{"The Big Ear",	                {-410.00,1403.30,-3.00,-137.90,1681.20,200.00}},
	{"Aldea Malvada",               {-1372.10,2498.50,0.00,-1277.50,2615.30,200.00}},
	{"Angel Pine",                  {-2324.90,-2584.20,-6.10,-1964.20,-2212.10,200.00}},
	{"Arco del Oeste",              {-901.10,2221.80,0.00,-592.00,2571.90,200.00}},
	{"Avispa Country Club",         {-2646.40,-355.40,0.00,-2270.00,-222.50,200.00}},
	{"Avispa Country Club",         {-2831.80,-430.20,-6.10,-2646.40,-222.50,200.00}},
	{"Avispa Country Club",         {-2361.50,-417.10,0.00,-2270.00,-355.40,200.00}},
	{"Avispa Country Club",         {-2667.80,-302.10,-28.80,-2646.40,-262.30,71.10}},
	{"Avispa Country Club",         {-2470.00,-355.40,0.00,-2270.00,-318.40,46.10}},
	{"Avispa Country Club",         {-2550.00,-355.40,0.00,-2470.00,-318.40,39.70}},
	{"Back o Beyond",               {-1166.90,-2641.10,0.00,-321.70,-1856.00,200.00}},
	{"Battery Point",               {-2741.00,1268.40,-4.50,-2533.00,1490.40,200.00}},
	{"Bayside",                     {-2741.00,2175.10,0.00,-2353.10,2722.70,200.00}},
	{"Bayside Marina",              {-2353.10,2275.70,0.00,-2153.10,2475.70,200.00}},
	{"Beacon Hill",                 {-399.60,-1075.50,-1.40,-319.00,-977.50,198.50}},
	{"Blackfield",                  {964.30,1203.20,-89.00,1197.30,1403.20,110.90}},
	{"Blackfield",                  {964.30,1403.20,-89.00,1197.30,1726.20,110.90}},
	{"Blackfield Chapel",           {1375.60,596.30,-89.00,1558.00,823.20,110.90}},
	{"Blackfield Chapel",           {1325.60,596.30,-89.00,1375.60,795.00,110.90}},
	{"Blackfield Intersection",     {1197.30,1044.60,-89.00,1277.00,1163.30,110.90}},
	{"Blackfield Intersection",     {1166.50,795.00,-89.00,1375.60,1044.60,110.90}},
	{"Blackfield Intersection",     {1277.00,1044.60,-89.00,1315.30,1087.60,110.90}},
	{"Blackfield Intersection",     {1375.60,823.20,-89.00,1457.30,919.40,110.90}},
	{"Blueberry",                   {104.50,-220.10,2.30,349.60,152.20,200.00}},
	{"Blueberry",                   {19.60,-404.10,3.80,349.60,-220.10,200.00}},
	{"Blueberry Acres",             {-319.60,-220.10,0.00,104.50,293.30,200.00}},
	{"Caligula's Palace",           {2087.30,1543.20,-89.00,2437.30,1703.20,110.90}},
	{"Caligula's Palace",           {2137.40,1703.20,-89.00,2437.30,1783.20,110.90}},
	{"Calton Heights",              {-2274.10,744.10,-6.10,-1982.30,1358.90,200.00}},
	{"Chinatown",                   {-2274.10,578.30,-7.60,-2078.60,744.10,200.00}},
	{"City Hall",                   {-2867.80,277.40,-9.10,-2593.40,458.40,200.00}},
	{"Come-A-Lot",                  {2087.30,943.20,-89.00,2623.10,1203.20,110.90}},
	{"Commerce",                    {1323.90,-1842.20,-89.00,1701.90,-1722.20,110.90}},
	{"Commerce",                    {1323.90,-1722.20,-89.00,1440.90,-1577.50,110.90}},
	{"Commerce",                    {1370.80,-1577.50,-89.00,1463.90,-1384.90,110.90}},
	{"Commerce",                    {1463.90,-1577.50,-89.00,1667.90,-1430.80,110.90}},
	{"Commerce",                    {1583.50,-1722.20,-89.00,1758.90,-1577.50,110.90}},
	{"Commerce",                    {1667.90,-1577.50,-89.00,1812.60,-1430.80,110.90}},
	{"Conference Center",           {1046.10,-1804.20,-89.00,1323.90,-1722.20,110.90}},
	{"Conference Center",           {1073.20,-1842.20,-89.00,1323.90,-1804.20,110.90}},
	{"Cranberry Station",           {-2007.80,56.30,0.00,-1922.00,224.70,100.00}},
	{"Creek",                       {2749.90,1937.20,-89.00,2921.60,2669.70,110.90}},
	{"Dillimore",                   {580.70,-674.80,-9.50,861.00,-404.70,200.00}},
	{"Doherty",                     {-2270.00,-324.10,-0.00,-1794.90,-222.50,200.00}},
	{"Doherty",                     {-2173.00,-222.50,-0.00,-1794.90,265.20,200.00}},
	{"Downtown",                    {-1982.30,744.10,-6.10,-1871.70,1274.20,200.00}},
	{"Downtown",                    {-1871.70,1176.40,-4.50,-1620.30,1274.20,200.00}},
	{"Downtown",                    {-1700.00,744.20,-6.10,-1580.00,1176.50,200.00}},
	{"Downtown",                    {-1580.00,744.20,-6.10,-1499.80,1025.90,200.00}},
	{"Downtown",                    {-2078.60,578.30,-7.60,-1499.80,744.20,200.00}},
	{"Downtown",                    {-1993.20,265.20,-9.10,-1794.90,578.30,200.00}},
	{"Downtown Los Santos",         {1463.90,-1430.80,-89.00,1724.70,-1290.80,110.90}},
	{"Downtown Los Santos",         {1724.70,-1430.80,-89.00,1812.60,-1250.90,110.90}},
	{"Downtown Los Santos",         {1463.90,-1290.80,-89.00,1724.70,-1150.80,110.90}},
	{"Downtown Los Santos",         {1370.80,-1384.90,-89.00,1463.90,-1170.80,110.90}},
	{"Downtown Los Santos",         {1724.70,-1250.90,-89.00,1812.60,-1150.80,110.90}},
	{"Downtown Los Santos",         {1370.80,-1170.80,-89.00,1463.90,-1130.80,110.90}},
	{"Downtown Los Santos",         {1378.30,-1130.80,-89.00,1463.90,-1026.30,110.90}},
	{"Downtown Los Santos",         {1391.00,-1026.30,-89.00,1463.90,-926.90,110.90}},
	{"Downtown Los Santos",         {1507.50,-1385.20,110.90,1582.50,-1325.30,335.90}},
	{"East Beach",                  {2632.80,-1852.80,-89.00,2959.30,-1668.10,110.90}},
	{"East Beach",                  {2632.80,-1668.10,-89.00,2747.70,-1393.40,110.90}},
	{"East Beach",                  {2747.70,-1668.10,-89.00,2959.30,-1498.60,110.90}},
	{"East Beach",                  {2747.70,-1498.60,-89.00,2959.30,-1120.00,110.90}},
	{"East Los Santos",             {2421.00,-1628.50,-89.00,2632.80,-1454.30,110.90}},
	{"East Los Santos",             {2222.50,-1628.50,-89.00,2421.00,-1494.00,110.90}},
	{"East Los Santos",             {2266.20,-1494.00,-89.00,2381.60,-1372.00,110.90}},
	{"East Los Santos",             {2381.60,-1494.00,-89.00,2421.00,-1454.30,110.90}},
	{"East Los Santos",             {2281.40,-1372.00,-89.00,2381.60,-1135.00,110.90}},
	{"East Los Santos",             {2381.60,-1454.30,-89.00,2462.10,-1135.00,110.90}},
	{"East Los Santos",             {2462.10,-1454.30,-89.00,2581.70,-1135.00,110.90}},
	{"Easter Basin",                {-1794.90,249.90,-9.10,-1242.90,578.30,200.00}},
	{"Easter Basin",                {-1794.90,-50.00,-0.00,-1499.80,249.90,200.00}},
	{"Easter Bay Airport",          {-1499.80,-50.00,-0.00,-1242.90,249.90,200.00}},
	{"Easter Bay Airport",          {-1794.90,-730.10,-3.00,-1213.90,-50.00,200.00}},
	{"Easter Bay Airport",          {-1213.90,-730.10,0.00,-1132.80,-50.00,200.00}},
	{"Easter Bay Airport",          {-1242.90,-50.00,0.00,-1213.90,578.30,200.00}},
	{"Easter Bay Airport",          {-1213.90,-50.00,-4.50,-947.90,578.30,200.00}},
	{"Easter Bay Airport",          {-1315.40,-405.30,15.40,-1264.40,-209.50,25.40}},
	{"Easter Bay Airport",          {-1354.30,-287.30,15.40,-1315.40,-209.50,25.40}},
	{"Easter Bay Airport",          {-1490.30,-209.50,15.40,-1264.40,-148.30,25.40}},
	{"Easter Bay Chemicals",        {-1132.80,-768.00,0.00,-956.40,-578.10,200.00}},
	{"Easter Bay Chemicals",        {-1132.80,-787.30,0.00,-956.40,-768.00,200.00}},
	{"El Castillo del Diablo",      {-464.50,2217.60,0.00,-208.50,2580.30,200.00}},
	{"El Castillo del Diablo",      {-208.50,2123.00,-7.60,114.00,2337.10,200.00}},
	{"El Castillo del Diablo",      {-208.50,2337.10,0.00,8.40,2487.10,200.00}},
	{"El Corona",                   {1812.60,-2179.20,-89.00,1970.60,-1852.80,110.90}},
	{"El Corona",                   {1692.60,-2179.20,-89.00,1812.60,-1842.20,110.90}},
	{"El Quebrados",                {-1645.20,2498.50,0.00,-1372.10,2777.80,200.00}},
	{"Esplanade East",              {-1620.30,1176.50,-4.50,-1580.00,1274.20,200.00}},
	{"Esplanade East",              {-1580.00,1025.90,-6.10,-1499.80,1274.20,200.00}},
	{"Esplanade East",              {-1499.80,578.30,-79.60,-1339.80,1274.20,20.30}},
	{"Esplanade North",             {-2533.00,1358.90,-4.50,-1996.60,1501.20,200.00}},
	{"Esplanade North",             {-1996.60,1358.90,-4.50,-1524.20,1592.50,200.00}},
	{"Esplanade North",             {-1982.30,1274.20,-4.50,-1524.20,1358.90,200.00}},
	{"Fallen Tree",                 {-792.20,-698.50,-5.30,-452.40,-380.00,200.00}},
	{"Fallow Bridge",               {434.30,366.50,0.00,603.00,555.60,200.00}},
	{"Fern Ridge",                  {508.10,-139.20,0.00,1306.60,119.50,200.00}},
	{"Financial",                   {-1871.70,744.10,-6.10,-1701.30,1176.40,300.00}},
	{"Fisher's Lagoon",             {1916.90,-233.30,-100.00,2131.70,13.80,200.00}},
	{"Flint Intersection",          {-187.70,-1596.70,-89.00,17.00,-1276.60,110.90}},
	{"Flint Range",                 {-594.10,-1648.50,0.00,-187.70,-1276.60,200.00}},
	{"Fort Carson",                 {-376.20,826.30,-3.00,123.70,1220.40,200.00}},
	{"Foster Valley",               {-2270.00,-430.20,-0.00,-2178.60,-324.10,200.00}},
	{"Foster Valley",               {-2178.60,-599.80,-0.00,-1794.90,-324.10,200.00}},
	{"Foster Valley",               {-2178.60,-1115.50,0.00,-1794.90,-599.80,200.00}},
	{"Foster Valley",               {-2178.60,-1250.90,0.00,-1794.90,-1115.50,200.00}},
	{"Frederick Bridge",            {2759.20,296.50,0.00,2774.20,594.70,200.00}},
	{"Gant Bridge",                 {-2741.40,1659.60,-6.10,-2616.40,2175.10,200.00}},
	{"Gant Bridge",                 {-2741.00,1490.40,-6.10,-2616.40,1659.60,200.00}},
	{"Ganton",                      {2222.50,-1852.80,-89.00,2632.80,-1722.30,110.90}},
	{"Ganton",                      {2222.50,-1722.30,-89.00,2632.80,-1628.50,110.90}},
	{"Garcia",                      {-2411.20,-222.50,-0.00,-2173.00,265.20,200.00}},
	{"Garcia",                      {-2395.10,-222.50,-5.30,-2354.00,-204.70,200.00}},
	{"Garver Bridge",               {-1339.80,828.10,-89.00,-1213.90,1057.00,110.90}},
	{"Garver Bridge",               {-1213.90,950.00,-89.00,-1087.90,1178.90,110.90}},
	{"Garver Bridge",               {-1499.80,696.40,-179.60,-1339.80,925.30,20.30}},
	{"Glen Park",                   {1812.60,-1449.60,-89.00,1996.90,-1350.70,110.90}},
	{"Glen Park",                   {1812.60,-1100.80,-89.00,1994.30,-973.30,110.90}},
	{"Glen Park",                   {1812.60,-1350.70,-89.00,2056.80,-1100.80,110.90}},
	{"Green Palms",                 {176.50,1305.40,-3.00,338.60,1520.70,200.00}},
	{"Greenglass College",          {964.30,1044.60,-89.00,1197.30,1203.20,110.90}},
	{"Greenglass College",          {964.30,930.80,-89.00,1166.50,1044.60,110.90}},
	{"Hampton Barns",               {603.00,264.30,0.00,761.90,366.50,200.00}},
	{"Hankypanky Point",            {2576.90,62.10,0.00,2759.20,385.50,200.00}},
	{"Harry Gold Parkway",          {1777.30,863.20,-89.00,1817.30,2342.80,110.90}},
	{"Hashbury",                    {-2593.40,-222.50,-0.00,-2411.20,54.70,200.00}},
	{"Hilltop Farm",                {967.30,-450.30,-3.00,1176.70,-217.90,200.00}},
	{"Hunter Quarry",               {337.20,710.80,-115.20,860.50,1031.70,203.70}},
	{"Idlewood",                    {1812.60,-1852.80,-89.00,1971.60,-1742.30,110.90}},
	{"Idlewood",                    {1812.60,-1742.30,-89.00,1951.60,-1602.30,110.90}},
	{"Idlewood",                    {1951.60,-1742.30,-89.00,2124.60,-1602.30,110.90}},
	{"Idlewood",                    {1812.60,-1602.30,-89.00,2124.60,-1449.60,110.90}},
	{"Idlewood",                    {2124.60,-1742.30,-89.00,2222.50,-1494.00,110.90}},
	{"Idlewood",                    {1971.60,-1852.80,-89.00,2222.50,-1742.30,110.90}},
	{"Jefferson",                   {1996.90,-1449.60,-89.00,2056.80,-1350.70,110.90}},
	{"Jefferson",                   {2124.60,-1494.00,-89.00,2266.20,-1449.60,110.90}},
	{"Jefferson",                   {2056.80,-1372.00,-89.00,2281.40,-1210.70,110.90}},
	{"Jefferson",                   {2056.80,-1210.70,-89.00,2185.30,-1126.30,110.90}},
	{"Jefferson",                   {2185.30,-1210.70,-89.00,2281.40,-1154.50,110.90}},
	{"Jefferson",                   {2056.80,-1449.60,-89.00,2266.20,-1372.00,110.90}},
	{"Julius Thruway East",         {2623.10,943.20,-89.00,2749.90,1055.90,110.90}},
	{"Julius Thruway East",         {2685.10,1055.90,-89.00,2749.90,2626.50,110.90}},
	{"Julius Thruway East",         {2536.40,2442.50,-89.00,2685.10,2542.50,110.90}},
	{"Julius Thruway East",         {2625.10,2202.70,-89.00,2685.10,2442.50,110.90}},
	{"Julius Thruway North",        {2498.20,2542.50,-89.00,2685.10,2626.50,110.90}},
	{"Julius Thruway North",        {2237.40,2542.50,-89.00,2498.20,2663.10,110.90}},
	{"Julius Thruway North",        {2121.40,2508.20,-89.00,2237.40,2663.10,110.90}},
	{"Julius Thruway North",        {1938.80,2508.20,-89.00,2121.40,2624.20,110.90}},
	{"Julius Thruway North",        {1534.50,2433.20,-89.00,1848.40,2583.20,110.90}},
	{"Julius Thruway North",        {1848.40,2478.40,-89.00,1938.80,2553.40,110.90}},
	{"Julius Thruway North",        {1704.50,2342.80,-89.00,1848.40,2433.20,110.90}},
	{"Julius Thruway North",        {1377.30,2433.20,-89.00,1534.50,2507.20,110.90}},
	{"Julius Thruway South",        {1457.30,823.20,-89.00,2377.30,863.20,110.90}},
	{"Julius Thruway South",        {2377.30,788.80,-89.00,2537.30,897.90,110.90}},
	{"Julius Thruway West",         {1197.30,1163.30,-89.00,1236.60,2243.20,110.90}},
	{"Julius Thruway West",         {1236.60,2142.80,-89.00,1297.40,2243.20,110.90}},
	{"Juniper Hill",                {-2533.00,578.30,-7.60,-2274.10,968.30,200.00}},
	{"Juniper Hollow",              {-2533.00,968.30,-6.10,-2274.10,1358.90,200.00}},
	{"K.A.C.C. Military Fuels",     {2498.20,2626.50,-89.00,2749.90,2861.50,110.90}},
	{"Kincaid Bridge",              {-1339.80,599.20,-89.00,-1213.90,828.10,110.90}},
	{"Kincaid Bridge",              {-1213.90,721.10,-89.00,-1087.90,950.00,110.90}},
	{"Kincaid Bridge",              {-1087.90,855.30,-89.00,-961.90,986.20,110.90}},
	{"King's",                      {-2329.30,458.40,-7.60,-1993.20,578.30,200.00}},
	{"King's",                      {-2411.20,265.20,-9.10,-1993.20,373.50,200.00}},
	{"King's",                      {-2253.50,373.50,-9.10,-1993.20,458.40,200.00}},
	{"LVA Freight Depot",           {1457.30,863.20,-89.00,1777.40,1143.20,110.90}},
	{"LVA Freight Depot",           {1375.60,919.40,-89.00,1457.30,1203.20,110.90}},
	{"LVA Freight Depot",           {1277.00,1087.60,-89.00,1375.60,1203.20,110.90}},
	{"LVA Freight Depot",           {1315.30,1044.60,-89.00,1375.60,1087.60,110.90}},
	{"LVA Freight Depot",           {1236.60,1163.40,-89.00,1277.00,1203.20,110.90}},
	{"Las Barrancas",               {-926.10,1398.70,-3.00,-719.20,1634.60,200.00}},
	{"Las Brujas",                  {-365.10,2123.00,-3.00,-208.50,2217.60,200.00}},
	{"Las Colinas",                 {1994.30,-1100.80,-89.00,2056.80,-920.80,110.90}},
	{"Las Colinas",                 {2056.80,-1126.30,-89.00,2126.80,-920.80,110.90}},
	{"Las Colinas",                 {2185.30,-1154.50,-89.00,2281.40,-934.40,110.90}},
	{"Las Colinas",                 {2126.80,-1126.30,-89.00,2185.30,-934.40,110.90}},
	{"Las Colinas",                 {2747.70,-1120.00,-89.00,2959.30,-945.00,110.90}},
	{"Las Colinas",                 {2632.70,-1135.00,-89.00,2747.70,-945.00,110.90}},
	{"Las Colinas",                 {2281.40,-1135.00,-89.00,2632.70,-945.00,110.90}},
	{"Las Payasadas",               {-354.30,2580.30,2.00,-133.60,2816.80,200.00}},
	{"Las Venturas Airport",        {1236.60,1203.20,-89.00,1457.30,1883.10,110.90}},
	{"Las Venturas Airport",        {1457.30,1203.20,-89.00,1777.30,1883.10,110.90}},
	{"Las Venturas Airport",        {1457.30,1143.20,-89.00,1777.40,1203.20,110.90}},
	{"Las Venturas Airport",        {1515.80,1586.40,-12.50,1729.90,1714.50,87.50}},
	{"Last Dime Motel",             {1823.00,596.30,-89.00,1997.20,823.20,110.90}},
	{"Leafy Hollow",                {-1166.90,-1856.00,0.00,-815.60,-1602.00,200.00}},
	{"Liberty City",                {-1000.00,400.00,1300.00,-700.00,600.00,1400.00}},
	{"Lil' Probe Inn",              {-90.20,1286.80,-3.00,153.80,1554.10,200.00}},
	{"Linden Side",                 {2749.90,943.20,-89.00,2923.30,1198.90,110.90}},
	{"Linden Station",              {2749.90,1198.90,-89.00,2923.30,1548.90,110.90}},
	{"Linden Station",              {2811.20,1229.50,-39.50,2861.20,1407.50,60.40}},
	{"Little Mexico",               {1701.90,-1842.20,-89.00,1812.60,-1722.20,110.90}},
	{"Little Mexico",               {1758.90,-1722.20,-89.00,1812.60,-1577.50,110.90}},
	{"Los Flores",                  {2581.70,-1454.30,-89.00,2632.80,-1393.40,110.90}},
	{"Los Flores",                  {2581.70,-1393.40,-89.00,2747.70,-1135.00,110.90}},
	{"Los Santos International",    {1249.60,-2394.30,-89.00,1852.00,-2179.20,110.90}},
	{"Los Santos International",    {1852.00,-2394.30,-89.00,2089.00,-2179.20,110.90}},
	{"Los Santos International",    {1382.70,-2730.80,-89.00,2201.80,-2394.30,110.90}},
	{"Los Santos International",    {1974.60,-2394.30,-39.00,2089.00,-2256.50,60.90}},
	{"Los Santos International",    {1400.90,-2669.20,-39.00,2189.80,-2597.20,60.90}},
	{"Los Santos International",    {2051.60,-2597.20,-39.00,2152.40,-2394.30,60.90}},
	{"Marina",                      {647.70,-1804.20,-89.00,851.40,-1577.50,110.90}},
	{"Marina",                      {647.70,-1577.50,-89.00,807.90,-1416.20,110.90}},
	{"Marina",                      {807.90,-1577.50,-89.00,926.90,-1416.20,110.90}},
	{"Market",                      {787.40,-1416.20,-89.00,1072.60,-1310.20,110.90}},
	{"Market",                      {952.60,-1310.20,-89.00,1072.60,-1130.80,110.90}},
	{"Market",                      {1072.60,-1416.20,-89.00,1370.80,-1130.80,110.90}},
	{"Market",                      {926.90,-1577.50,-89.00,1370.80,-1416.20,110.90}},
	{"Market Station",              {787.40,-1410.90,-34.10,866.00,-1310.20,65.80}},
	{"Martin Bridge",               {-222.10,293.30,0.00,-122.10,476.40,200.00}},
	{"Missionary Hill",             {-2994.40,-811.20,0.00,-2178.60,-430.20,200.00}},
	{"Montgomery",                  {1119.50,119.50,-3.00,1451.40,493.30,200.00}},
	{"Montgomery",                  {1451.40,347.40,-6.10,1582.40,420.80,200.00}},
	{"Montgomery Intersection",     {1546.60,208.10,0.00,1745.80,347.40,200.00}},
	{"Montgomery Intersection",     {1582.40,347.40,0.00,1664.60,401.70,200.00}},
	{"Mulholland",                  {1414.00,-768.00,-89.00,1667.60,-452.40,110.90}},
	{"Mulholland",                  {1281.10,-452.40,-89.00,1641.10,-290.90,110.90}},
	{"Mulholland",                  {1269.10,-768.00,-89.00,1414.00,-452.40,110.90}},
	{"Mulholland",                  {1357.00,-926.90,-89.00,1463.90,-768.00,110.90}},
	{"Mulholland",                  {1318.10,-910.10,-89.00,1357.00,-768.00,110.90}},
	{"Mulholland",                  {1169.10,-910.10,-89.00,1318.10,-768.00,110.90}},
	{"Mulholland",                  {768.60,-954.60,-89.00,952.60,-860.60,110.90}},
	{"Mulholland",                  {687.80,-860.60,-89.00,911.80,-768.00,110.90}},
	{"Mulholland",                  {737.50,-768.00,-89.00,1142.20,-674.80,110.90}},
	{"Mulholland",                  {1096.40,-910.10,-89.00,1169.10,-768.00,110.90}},
	{"Mulholland",                  {952.60,-937.10,-89.00,1096.40,-860.60,110.90}},
	{"Mulholland",                  {911.80,-860.60,-89.00,1096.40,-768.00,110.90}},
	{"Mulholland",                  {861.00,-674.80,-89.00,1156.50,-600.80,110.90}},
	{"Mulholland Intersection",     {1463.90,-1150.80,-89.00,1812.60,-768.00,110.90}},
	{"North Rock",                  {2285.30,-768.00,0.00,2770.50,-269.70,200.00}},
	{"Ocean Docks",                 {2373.70,-2697.00,-89.00,2809.20,-2330.40,110.90}},
	{"Ocean Docks",                 {2201.80,-2418.30,-89.00,2324.00,-2095.00,110.90}},
	{"Ocean Docks",                 {2324.00,-2302.30,-89.00,2703.50,-2145.10,110.90}},
	{"Ocean Docks",                 {2089.00,-2394.30,-89.00,2201.80,-2235.80,110.90}},
	{"Ocean Docks",                 {2201.80,-2730.80,-89.00,2324.00,-2418.30,110.90}},
	{"Ocean Docks",                 {2703.50,-2302.30,-89.00,2959.30,-2126.90,110.90}},
	{"Ocean Docks",                 {2324.00,-2145.10,-89.00,2703.50,-2059.20,110.90}},
	{"Ocean Flats",                 {-2994.40,277.40,-9.10,-2867.80,458.40,200.00}},
	{"Ocean Flats",                 {-2994.40,-222.50,-0.00,-2593.40,277.40,200.00}},
	{"Ocean Flats",                 {-2994.40,-430.20,-0.00,-2831.80,-222.50,200.00}},
	{"Octane Springs",              {338.60,1228.50,0.00,664.30,1655.00,200.00}},
	{"Old Venturas Strip",          {2162.30,2012.10,-89.00,2685.10,2202.70,110.90}},
	{"Palisades",                   {-2994.40,458.40,-6.10,-2741.00,1339.60,200.00}},
	{"Palomino Creek",              {2160.20,-149.00,0.00,2576.90,228.30,200.00}},
	{"Paradiso",                    {-2741.00,793.40,-6.10,-2533.00,1268.40,200.00}},
	{"Pershing Square",             {1440.90,-1722.20,-89.00,1583.50,-1577.50,110.90}},
	{"Pilgrim",                     {2437.30,1383.20,-89.00,2624.40,1783.20,110.90}},
	{"Pilgrim",                     {2624.40,1383.20,-89.00,2685.10,1783.20,110.90}},
	{"Pilson Intersection",         {1098.30,2243.20,-89.00,1377.30,2507.20,110.90}},
	{"Pirates in Men's Pants",      {1817.30,1469.20,-89.00,2027.40,1703.20,110.90}},
	{"Playa del Seville",           {2703.50,-2126.90,-89.00,2959.30,-1852.80,110.90}},
	{"Prickle Pine",                {1534.50,2583.20,-89.00,1848.40,2863.20,110.90}},
	{"Prickle Pine",                {1117.40,2507.20,-89.00,1534.50,2723.20,110.90}},
	{"Prickle Pine",                {1848.40,2553.40,-89.00,1938.80,2863.20,110.90}},
	{"Prickle Pine",                {1938.80,2624.20,-89.00,2121.40,2861.50,110.90}},
	{"Queens",                      {-2533.00,458.40,0.00,-2329.30,578.30,200.00}},
	{"Queens",                      {-2593.40,54.70,0.00,-2411.20,458.40,200.00}},
	{"Queens",                      {-2411.20,373.50,0.00,-2253.50,458.40,200.00}},
	{"Randolph Industrial Estate",  {1558.00,596.30,-89.00,1823.00,823.20,110.90}},
	{"Redsands East",               {1817.30,2011.80,-89.00,2106.70,2202.70,110.90}},
	{"Redsands East",               {1817.30,2202.70,-89.00,2011.90,2342.80,110.90}},
	{"Redsands East",               {1848.40,2342.80,-89.00,2011.90,2478.40,110.90}},
	{"Redsands West",               {1236.60,1883.10,-89.00,1777.30,2142.80,110.90}},
	{"Redsands West",               {1297.40,2142.80,-89.00,1777.30,2243.20,110.90}},
	{"Redsands West",               {1377.30,2243.20,-89.00,1704.50,2433.20,110.90}},
	{"Redsands West",               {1704.50,2243.20,-89.00,1777.30,2342.80,110.90}},
	{"Regular Tom",                 {-405.70,1712.80,-3.00,-276.70,1892.70,200.00}},
	{"Richman",                     {647.50,-1118.20,-89.00,787.40,-954.60,110.90}},
	{"Richman",                     {647.50,-954.60,-89.00,768.60,-860.60,110.90}},
	{"Richman",                     {225.10,-1369.60,-89.00,334.50,-1292.00,110.90}},
	{"Richman",                     {225.10,-1292.00,-89.00,466.20,-1235.00,110.90}},
	{"Richman",                     {72.60,-1404.90,-89.00,225.10,-1235.00,110.90}},
	{"Richman",                     {72.60,-1235.00,-89.00,321.30,-1008.10,110.90}},
	{"Richman",                     {321.30,-1235.00,-89.00,647.50,-1044.00,110.90}},
	{"Richman",                     {321.30,-1044.00,-89.00,647.50,-860.60,110.90}},
	{"Richman",                     {321.30,-860.60,-89.00,687.80,-768.00,110.90}},
	{"Richman",                     {321.30,-768.00,-89.00,700.70,-674.80,110.90}},
	{"Robada Intersection",         {-1119.00,1178.90,-89.00,-862.00,1351.40,110.90}},
	{"Roca Escalante",              {2237.40,2202.70,-89.00,2536.40,2542.50,110.90}},
	{"Roca Escalante",              {2536.40,2202.70,-89.00,2625.10,2442.50,110.90}},
	{"Rockshore East",              {2537.30,676.50,-89.00,2902.30,943.20,110.90}},
	{"Rockshore West",              {1997.20,596.30,-89.00,2377.30,823.20,110.90}},
	{"Rockshore West",              {2377.30,596.30,-89.00,2537.30,788.80,110.90}},
	{"Rodeo",                       {72.60,-1684.60,-89.00,225.10,-1544.10,110.90}},
	{"Rodeo",                       {72.60,-1544.10,-89.00,225.10,-1404.90,110.90}},
	{"Rodeo",                       {225.10,-1684.60,-89.00,312.80,-1501.90,110.90}},
	{"Rodeo",                       {225.10,-1501.90,-89.00,334.50,-1369.60,110.90}},
	{"Rodeo",                       {334.50,-1501.90,-89.00,422.60,-1406.00,110.90}},
	{"Rodeo",                       {312.80,-1684.60,-89.00,422.60,-1501.90,110.90}},
	{"Rodeo",                       {422.60,-1684.60,-89.00,558.00,-1570.20,110.90}},
	{"Rodeo",                       {558.00,-1684.60,-89.00,647.50,-1384.90,110.90}},
	{"Rodeo",                       {466.20,-1570.20,-89.00,558.00,-1385.00,110.90}},
	{"Rodeo",                       {422.60,-1570.20,-89.00,466.20,-1406.00,110.90}},
	{"Rodeo",                       {466.20,-1385.00,-89.00,647.50,-1235.00,110.90}},
	{"Rodeo",                       {334.50,-1406.00,-89.00,466.20,-1292.00,110.90}},
	{"Royal Casino",                {2087.30,1383.20,-89.00,2437.30,1543.20,110.90}},
	{"San Andreas Sound",           {2450.30,385.50,-100.00,2759.20,562.30,200.00}},
	{"Santa Flora",                 {-2741.00,458.40,-7.60,-2533.00,793.40,200.00}},
	{"Santa Maria Beach",           {342.60,-2173.20,-89.00,647.70,-1684.60,110.90}},
	{"Santa Maria Beach",           {72.60,-2173.20,-89.00,342.60,-1684.60,110.90}},
	{"Shady Cabin",                 {-1632.80,-2263.40,-3.00,-1601.30,-2231.70,200.00}},
	{"Shady Creeks",                {-1820.60,-2643.60,-8.00,-1226.70,-1771.60,200.00}},
	{"Shady Creeks",                {-2030.10,-2174.80,-6.10,-1820.60,-1771.60,200.00}},
	{"Sobell Rail Yards",           {2749.90,1548.90,-89.00,2923.30,1937.20,110.90}},
	{"Spinybed",                    {2121.40,2663.10,-89.00,2498.20,2861.50,110.90}},
	{"Starfish Casino",             {2437.30,1783.20,-89.00,2685.10,2012.10,110.90}},
	{"Starfish Casino",             {2437.30,1858.10,-39.00,2495.00,1970.80,60.90}},
	{"Starfish Casino",             {2162.30,1883.20,-89.00,2437.30,2012.10,110.90}},
	{"Temple",                      {1252.30,-1130.80,-89.00,1378.30,-1026.30,110.90}},
	{"Temple",                      {1252.30,-1026.30,-89.00,1391.00,-926.90,110.90}},
	{"Temple",                      {1252.30,-926.90,-89.00,1357.00,-910.10,110.90}},
	{"Temple",                      {952.60,-1130.80,-89.00,1096.40,-937.10,110.90}},
	{"Temple",                      {1096.40,-1130.80,-89.00,1252.30,-1026.30,110.90}},
	{"Temple",                      {1096.40,-1026.30,-89.00,1252.30,-910.10,110.90}},
	{"The Camel's Toe",             {2087.30,1203.20,-89.00,2640.40,1383.20,110.90}},
	{"The Clown's Pocket",          {2162.30,1783.20,-89.00,2437.30,1883.20,110.90}},
	{"The Emerald Isle",            {2011.90,2202.70,-89.00,2237.40,2508.20,110.90}},
	{"The Farm",                    {-1209.60,-1317.10,114.90,-908.10,-787.30,251.90}},
	{"The Four Dragons Casino",     {1817.30,863.20,-89.00,2027.30,1083.20,110.90}},
	{"The High Roller",             {1817.30,1283.20,-89.00,2027.30,1469.20,110.90}},
	{"The Mako Span",               {1664.60,401.70,0.00,1785.10,567.20,200.00}},
	{"The Panopticon",              {-947.90,-304.30,-1.10,-319.60,327.00,200.00}},
	{"The Pink Swan",               {1817.30,1083.20,-89.00,2027.30,1283.20,110.90}},
	{"The Sherman Dam",             {-968.70,1929.40,-3.00,-481.10,2155.20,200.00}},
	{"The Strip",                   {2027.40,863.20,-89.00,2087.30,1703.20,110.90}},
	{"The Strip",                   {2106.70,1863.20,-89.00,2162.30,2202.70,110.90}},
	{"The Strip",                   {2027.40,1783.20,-89.00,2162.30,1863.20,110.90}},
	{"The Strip",                   {2027.40,1703.20,-89.00,2137.40,1783.20,110.90}},
	{"The Visage",                  {1817.30,1863.20,-89.00,2106.70,2011.80,110.90}},
	{"The Visage",                  {1817.30,1703.20,-89.00,2027.40,1863.20,110.90}},
	{"Unity Station",               {1692.60,-1971.80,-20.40,1812.60,-1932.80,79.50}},
	{"Valle Ocultado",              {-936.60,2611.40,2.00,-715.90,2847.90,200.00}},
	{"Verdant Bluffs",              {930.20,-2488.40,-89.00,1249.60,-2006.70,110.90}},
	{"Verdant Bluffs",              {1073.20,-2006.70,-89.00,1249.60,-1842.20,110.90}},
	{"Verdant Bluffs",              {1249.60,-2179.20,-89.00,1692.60,-1842.20,110.90}},
	{"Verdant Meadows",             {37.00,2337.10,-3.00,435.90,2677.90,200.00}},
	{"Verona Beach",                {647.70,-2173.20,-89.00,930.20,-1804.20,110.90}},
	{"Verona Beach",                {930.20,-2006.70,-89.00,1073.20,-1804.20,110.90}},
	{"Verona Beach",                {851.40,-1804.20,-89.00,1046.10,-1577.50,110.90}},
	{"Verona Beach",                {1161.50,-1722.20,-89.00,1323.90,-1577.50,110.90}},
	{"Verona Beach",                {1046.10,-1722.20,-89.00,1161.50,-1577.50,110.90}},
	{"Vinewood",                    {787.40,-1310.20,-89.00,952.60,-1130.80,110.90}},
	{"Vinewood",                    {787.40,-1130.80,-89.00,952.60,-954.60,110.90}},
	{"Vinewood",                    {647.50,-1227.20,-89.00,787.40,-1118.20,110.90}},
	{"Vinewood",                    {647.70,-1416.20,-89.00,787.40,-1227.20,110.90}},
	{"Whitewood Estates",           {883.30,1726.20,-89.00,1098.30,2507.20,110.90}},
	{"Whitewood Estates",           {1098.30,1726.20,-89.00,1197.30,2243.20,110.90}},
	{"Willowfield",                 {1970.60,-2179.20,-89.00,2089.00,-1852.80,110.90}},
	{"Willowfield",                 {2089.00,-2235.80,-89.00,2201.80,-1989.90,110.90}},
	{"Willowfield",                 {2089.00,-1989.90,-89.00,2324.00,-1852.80,110.90}},
	{"Willowfield",                 {2201.80,-2095.00,-89.00,2324.00,-1989.90,110.90}},
	{"Willowfield",                 {2541.70,-1941.40,-89.00,2703.50,-1852.80,110.90}},
	{"Willowfield",                 {2324.00,-2059.20,-89.00,2541.70,-1852.80,110.90}},
	{"Willowfield",                 {2541.70,-2059.20,-89.00,2703.50,-1941.40,110.90}},
	{"Yellow Bell Station",         {1377.40,2600.40,-21.90,1492.40,2687.30,78.00}},
	// Main Zones
	{"Los Santos",                  {44.60,-2892.90,-242.90,2997.00,-768.00,900.00}},
	{"Las Venturas",                {869.40,596.30,-242.90,2997.00,2993.80,900.00}},
	{"Bone County",                 {-480.50,596.30,-242.90,869.40,2993.80,900.00}},
	{"Tierra Robada",               {-2997.40,1659.60,-242.90,-480.50,2993.80,900.00}},
	{"Tierra Robada",               {-1213.90,596.30,-242.90,-480.50,1659.60,900.00}},
	{"San Fierro",                  {-2997.40,-1115.50,-242.90,-1213.90,1659.60,900.00}},
	{"Red County",                  {-1213.90,-768.00,-242.90,2997.00,596.30,900.00}},
	{"Flint County",                {-1213.90,-2892.90,-242.90,44.60,-768.00,900.00}},
	{"Whetstone",                   {-2997.40,-2892.90,-242.90,-1213.90,-1115.50,900.00}}
};

static const itemPrice[] = { // Base, armería.
	0,
	190,
	220,
 	300,
	250,
	250,
	300,
	300,
	6000,
	15000,
	150,
	120,
	140,
	120,
	50,
	200,
	1000,
	200,
	450,
	0,
	0,
	0,
	// Para armas con munición el precio es por cada bala.
	35,
	75,
	150,
	70,
	120,
	200,
	50,
	95, // MP-5
	170,
	170,
	50,
	60,
	550,
	5000,
	10000,
	250,
	0,
	0,
	10,
	20,
	10,
	25,
	0,
	0,
	0 // Paracaídas.
};

// Timers
forward Float:GetDistance(Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2);
forward theftTimer(playerid, type, biz);
forward matsFinish(playerid, matsCount);
forward eventStepTimer(playerid);
forward garbageTimer(playerid, garbcp);
forward matsTimer(playerid);
forward buyMatsTimer(playerid, amount);
forward buyDrugsTimer(playerid, amount);
forward buyProductsTimer(playerid, amount);
forward robberyCancel(playerid);
forward fuelCar(playerid, refillprice, refillamount, refilltype, validslot);
forward fuelCarWithCan(playerid, vehicleid, totalfuel);
forward antiCheatTimer();
forward globalUpdate();
forward eventTimer(playerid);
forward accountTimer();
forward restartTimer(type);
forward vehicleTimer();
forward speedoTimer(playerid);
forward jobBreakTimer(playerid, job);
forward licenseTimer(playerid, lic);
forward TutTimer(playerid);
forward fuelTimer();
forward healTimer(playerid);
forward cantSaveItems(playerid);
forward kickTimer(playerid);
forward banTimer(playerid);

forward GiveJobExp(playerid, job, exp);
forward BackupClear(playerid, calledbytimer);
forward FixHour(hour);
forward CloseGate(gateID);
forward CloseTuneGate0();
forward CloseTuneGate1();
forward CloseTuneGate2();
forward CloseTuneGate3();
forward CloseTuneGate4();
forward AllowAd(playerid);
forward Reparacion(playerid);
forward Unfreeze(playerid);
forward AntiBH(playerid);
forward OnPlayerPrivmsg(playerid, recieverid, text[]);

forward SendFactionMessage(faction, color, string[]);
forward SetPlayerToFactionSkin(playerid);
forward SetPlayerToTeamColor(playerid);
forward SaveAccount(playerid);
forward SetPlayerSpawn(playerid);
forward PayDay(playerid);
forward ResetStats(playerid);
forward ShowStats(playerid, targetid, bool:admin);
forward BanPlayer(playerid, issuerid,reason[]);
forward KickPlayer(playerid,kickedby[MAX_PLAYER_NAME],reason[]);
forward KickLog(string[]);
forward ProxDetectorS(Float:radi, playerid, targetid);
forward KickLog(string[]);
forward PlayerActionLog(string[]);
forward PlayerLocalLog(string[]);
forward TalkLog(string[]);
forward FactionChatLog(string[]);
forward SMSLog(string[]);
forward DonatorLog(string[]);
forward PMLog(string[]);
forward ReportLog(string[]);
forward OOCLog(string[]);
forward HangupTimer(playerid);
forward IsACopSkin(skinid);
forward JailTimer();
forward PhoneAnimation(playerid);
forward GetClosestPlayer(p1);
forward Float:GetDistanceBetweenPlayers(p1,p2);
forward SetPlayerWantedLevelEx(playerid, level);
forward GetPlayerWantedLevelEx(playerid);
forward ResetPlayerWantedLevelEx(playerid);
forward IsAtBar(playerid);
forward ClearCheckpointsForPlayer(playerid);
forward OnPlayerConnectEx(playerid);
forward AFKc(playerid);
forward AFKText(playerid);
forward CopTraceAvailable(playerid);
//==============================================================================

main() {
    AntiDeAMX();
	return 1;
}

public OnGameModeInit() {
	mysql_debug(1);
	print("HELP");
    loadMySQLcfg();
	print("HELP");
	if(!mysql_ping()) mysql_connect(MYSQL_HOST, MYSQL_USER, MYSQL_DB, MYSQL_PASS);
    LoadTDs();
    LoadMap();
	LoadPickups();
	LoadGangZones();
	
	//MapAndreas_Init(MAP_ANDREAS_MODE_FULL);

	EnableStuntBonusForAll(0);
    DisableInteriorEnterExits();
    AllowInteriorWeapons(1);
	ManualVehicleEngineAndLights();
	new sendcmd[128];

	if (!strcmp("Yes", GAMEMODE_USE_VERSION, true)) { format(sendcmd, sizeof(sendcmd), "%s - %s", GAMEMODE,VERSION); SetGameModeText(sendcmd); }
	else { SetGameModeText(GAMEMODE); }
	format(sendcmd, sizeof(sendcmd), "hostname %s", SERVER_NAME);
	SendRconCommand(sendcmd);
	format(sendcmd, sizeof(sendcmd), "mapname %s", MAP_NAME);
	SendRconCommand(sendcmd);
	format(sendcmd, sizeof(sendcmd), "weburl %s", WEBSITE);
	SendRconCommand(sendcmd);
	if (strlen(PASSWORD) != 0) { format(sendcmd, sizeof(sendcmd), "password %s", PASSWORD); SendRconCommand(sendcmd); }

	AddPlayerClass(0,1958.3783,1343.1572,1100.3746,269.1425,-1,-1,-1,-1,-1,-1);

	LoadServerInfo();
	LoadFactions();
	LoadVehicles();
	LoadHouses();
	LoadJobs();
	LoadBusiness();
	loadBuildings();
	LoadLockersSlotsInfo();
	LoadTrunksSlotsInfo();

    weatherVariables[0] = validWeatherIDs[random(sizeof(validWeatherIDs))];
	//SetWeather(weatherVariables[0]);

	//===================================[TIMERS]===============================
	timersID[0] = SetTimer("accountTimer", 1200000, 1); 						// 20 min. 	- Guardado de cuentas.
	timersID[1] = SetTimer("fuelTimer", GAS_UPDATE_TIME, 1); 					// 15 seg.   - Actualiza la gasolina de los vehículos.
	timersID[2] = SetTimer("globalUpdate", 1000, 1);							// 1 seg.   - Actualiza el score y la hora/fecha.
	timersID[5] = SetTimer("JailTimer", 1000, 1);                               // 1 seg.   - Actualiza el jail de los jugadores.
	timersID[6] = SetTimer("vehicleTimer", 3400, 1);                            // 3 seg.	- Actualiza motores dañados.
	timersID[8] = SetTimer("antiCheatTimer", 500, 1);
	timersID[12] = SetTimer("rentRespawn", 1000 * 60 * 20, 1);                  // Respawn de vehículos de renta.
	timersID[13] = SetTimer("UpdatePlayerAdiction", ADICTION_UPDATE_TIME * 1000, 1);   // 5 min.	- Sistema de drogas.
	timersID[14] = SetTimer("UpdatePlayerBasicNeeds", BASIC_NEEDS_UPDATE_TIME * 1000, 1); // 5 min.		- Sistema de hambre y sed.
	//====[MENUS]===============================================================
	new
		price[32];

	// Negocio de teléfonos
	phoneMenu = CreateMenu("Telefonos", 2, 200.0, 100.0, 150.0, 150.0);

	AddMenuItem(phoneMenu, 0, "Telefono");
	AddMenuItem(phoneMenu, 0, "Telefono (sin listar)");

	format(price, sizeof(price), "$%d", PRICE_PHONE);
	AddMenuItem(phoneMenu, 1, price);
	format(price, sizeof(price), "$%d", PRICE_UNLISTEDPHONE);
	AddMenuItem(phoneMenu, 1, price);

	// Centro de licencias
	licenseMenu = CreateMenu("Licencias", 2, 200.0, 100.0, 150.0, 150.0);

	AddMenuItem(licenseMenu, 0, "Lic. de conduccion");
	AddMenuItem(licenseMenu, 0, "Lic. de navegacion");
	AddMenuItem(licenseMenu, 0, "Lic. de vuelo");

	format(price, sizeof(price), "$%d", PRICE_LIC_DRIVING);
	AddMenuItem(licenseMenu, 1, price);
	format(price, sizeof(price), "$%d", PRICE_LIC_SAILING);
	AddMenuItem(licenseMenu, 1, price);
	format(price, sizeof(price), "$%d", PRICE_LIC_FLYING);
	AddMenuItem(licenseMenu, 1, price);
	//==========================================================================
	SetNameTagDrawDistance(30.0);
	return 1;
}

public OnGameModeExit() {
	KillTimer(timersID[0]);
	KillTimer(timersID[1]);
	KillTimer(timersID[2]);
	KillTimer(timersID[3]);
	KillTimer(timersID[4]);
	KillTimer(timersID[5]);
	KillTimer(timersID[6]);
	KillTimer(timersID[9]);
	KillTimer(timersID[10]);

	foreach(new i : Player) {
		KillTimer(pSpeedoTimer[i]);
	}

	KillTimer(timersID[12]);
	KillTimer(timersID[13]);
	KillTimer(timersID[14]);
	TextDrawDestroy(RegTDBorder1);
	TextDrawDestroy(RegTDBorder2);
	TextDrawDestroy(RegTDBackground);
	TextDrawDestroy(RegTDTitle);
	TextDrawDestroy(TutTDBackground);
	TextDrawDestroy(ThirstTD);
	TextDrawDestroy(HungerTD);
	DestroyAllDynamic3DTextLabels();
	DestroyAllDynamicPickups();
	DestroyAllDynamicObjects();
	DestroyGangZones();
	//mysql_close();
	return 1;
}

public OnPlayerRequestSpawn(playerid) {
	if(gPlayerLogged[playerid] == 1) {
		return 1;
	} else {
	    if(SpawnAttempts[playerid] >= MAX_SPAWN_ATTEMPTS) {
	        KickPlayer(playerid, "el sistema", "intentos repetidos de spawn sin iniciar sesión");
			return 1;
	    }
		SpawnAttempts[playerid] ++;
		return 0;
	}
}

public OnPlayerConnect(playerid) {
	ResetStats(playerid);
	SetPlayerCameraPos(playerid, 1466.869506, -1575.771972, 109.123466);
	SetPlayerCameraLookAt(playerid, 1470.403442, -1574.002441, 109.740196);
    // Usamos un timer para evitar que el mensaje "Connected to X" salga luego del resto.
	if(RPName(playerid))
    	SetTimerEx("OnPlayerConnectEx", 300, false, "i", playerid);
	return 1;
}

public OnPlayerConnectEx(playerid) {
	new
		name[MAX_PLAYER_NAME],
		query[128];

	name = PlayerName(playerid);

    ClearScreen(playerid);

	// Comprobamos si está registrado.
	format(query, sizeof(query), "SELECT `Id` FROM `accounts` WHERE `Name` = '%s'", name);
 	mysql_function_query(dbHandle, query, true, "OnPlayerNameCheck", "i", playerid);

 	syncPlayerTime(playerid);
	SetPlayerWeather(playerid, weatherVariables[0]);

	SetPlayerMapIcon(playerid, 98, 1480.9200,-1772.3136,18.7958, 56, 0, MAPICON_LOCAL); // Ayuntamiento.

	SetPlayerMapIcon(playerid, 99, 1470.79, -1177.43, 23.9241, 52, 0, MAPICON_LOCAL); 	// Banco.
	
	// Cancha de futbol
	RemoveBuildingForPlayer(playerid, 946, 2290.6406, -1541.6094, 28.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 946, 2290.5781, -1514.2734, 28.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 946, 2316.9375, -1541.6094, 26.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 946, 2316.9375, -1514.2734, 26.5000, 0.25);
	
	/* Exterior de la S.I.D.E */
	RemoveBuildingForPlayer(playerid, 1525, 1271.4844, -1662.3203, 20.2500, 0.25);
	
	// Villa.
    RemoveBuildingForPlayer(playerid, 1412, 1658.8359, -2114.9609, 13.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 1413, 1658.8359, -2109.6875, 13.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 3669, 1669.9141, -2126.1563, 15.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 3670, 1668.7266, -2096.1953, 15.1875, 0.25);
	RemoveBuildingForPlayer(playerid, 3634, 1669.9141, -2126.1563, 15.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 3635, 1668.7266, -2096.1953, 15.1875, 0.25);
	
	// Barrio La Plazita
	RemoveBuildingForPlayer(playerid, 1408, 2273.3359, -1767.3438, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1307, 2232.5156, -1766.0547, 12.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 3695, 2239.9297, -1790.6953, 17.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 3695, 2282.9922, -1790.6953, 17.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 3695, 2314.8203, -1790.6953, 17.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 3695, 2352.7188, -1790.6953, 17.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 3695, 2387.8203, -1790.6953, 17.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 3584, 2239.9297, -1790.6953, 17.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 1307, 2249.8672, -1815.4141, 12.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 669, 2254.7266, -1827.4375, 12.5625, 0.25);
	RemoveBuildingForPlayer(playerid, 645, 2259.2656, -1773.2422, 11.1250, 0.25);
	RemoveBuildingForPlayer(playerid, 17886, 2264.0391, -1789.2578, 20.7734, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2265.2969, -1770.0469, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2265.2969, -1775.5078, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2265.2969, -1780.9844, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2275.3906, -1820.7266, 12.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2268.1875, -1810.0313, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2273.6953, -1810.0313, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 3584, 2282.9922, -1790.6953, 17.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2267.8125, -1767.2734, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 645, 2285.7578, -1762.1250, 12.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2305.0625, -1810.0313, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2302.1719, -1807.3281, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2302.1719, -1801.8672, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2302.1719, -1791.0000, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2302.1719, -1796.4531, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 3584, 2314.8203, -1790.6953, 17.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2302.1719, -1775.5078, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2302.1719, -1770.0469, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2302.1719, -1780.9844, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1307, 2322.6484, -1815.4141, 12.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2341.7578, -1810.0313, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2338.8672, -1807.3281, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2338.8672, -1801.8672, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2338.8672, -1791.0000, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2338.8672, -1796.4531, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2338.8672, -1775.5078, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2338.8672, -1780.9844, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 17887, 2343.6094, -1784.5078, 20.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2338.8672, -1770.0469, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2341.3828, -1767.2734, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 3584, 2352.7188, -1790.6953, 17.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2374.1016, -1800.4688, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2374.1016, -1805.9297, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2376.9922, -1813.9297, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2374.1016, -1811.3828, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2374.1016, -1780.9844, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2374.1016, -1789.6016, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2374.1016, -1795.0547, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2376.6172, -1767.2734, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2374.1016, -1770.0469, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2374.1016, -1775.5078, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 3584, 2387.8203, -1790.6953, 17.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 645, 2387.0234, -1763.6406, 12.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 17518, 2361.9375, -1699.9375, 15.9219, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2265.2969, -1791.0000, 13.1563, 0.25);
	
	// Transfenders y lugares de tuneo.
	RemoveBuildingForPlayer(playerid, 9093, 2386.6563, 1043.6016, 11.5938, 0.25);
	RemoveBuildingForPlayer(playerid, 11313, -1935.8594, 239.5313, 35.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 5340, 2644.8594, -2039.2344, 14.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 5779, 1041.3516, -1025.9297, 32.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 10575, -2716.3516, 217.4766, 5.3828, 0.25);

	// Bloqueo salida faro.
	RemoveBuildingForPlayer(playerid, 4504, 56.3828, -1531.4531, 6.7266, 0.25);
	
	//----------------------REMOVS SHOPPING-------------------------------------
	RemoveBuildingForPlayer(playerid, 6130, 1117.5859, -1490.0078, 32.7188, 0.25);
	RemoveBuildingForPlayer(playerid, 6255, 1117.5859, -1490.0078, 32.7188, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1128.7344, -1518.4922, 15.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1111.2578, -1512.3594, 15.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1106.4375, -1501.3750, 15.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1144.3984, -1512.7891, 15.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1118.0156, -1467.4688, 15.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1139.9219, -1467.4688, 15.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1139.9219, -1456.4375, 15.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1118.0156, -1456.4375, 15.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1139.9219, -1445.1016, 15.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1118.0156, -1445.1016, 15.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1139.9219, -1434.0703, 15.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1118.0156, -1434.0703, 15.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 615, 1110.5469, -1416.7266, 13.9531, 0.25);
	RemoveBuildingForPlayer(playerid, 615, 1147.6016, -1416.8750, 13.9531, 0.25);
	//----------------------FIN REMOVE SHOPPING---------------------------------
	
	//REMOVE CRUCE CON PIEDRAS DE AVENIDA
	RemoveBuildingForPlayer(playerid, 647, 1407.4375, -1436.5859, 14.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1405.7656, -1424.2500, 13.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1406.6797, -1405.3984, 14.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1411.3672, -1437.7656, 14.1406, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1409.7969, -1429.2734, 14.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1411.6250, -1430.1328, 13.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1408.5313, -1425.3984, 14.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1409.8672, -1418.1328, 14.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1411.5703, -1416.5391, 12.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1409.1875, -1410.3281, 14.6250, 0.25);
	
	// WORLD OF COQ
	RemoveBuildingForPlayer(playerid, 18017, 449.2109, -16.9688, 1000.4375, 0.25);
	RemoveBuildingForPlayer(playerid, 18016, 451.2578, -10.6250, 1001.9766, 0.25);

	// CASINO EXTERIOR 1
	RemoveBuildingForPlayer(playerid, 4747, 1671.5078, -1343.3359, 87.5391, 0.25);

    //REMOVE VIEJA REJA CHINA
	RemoveBuildingForPlayer(playerid, 13862, 359.2500, -1125.8281, 80.8516, 0.25);
	//REMOVE POSTE DE LUZ MOLESTO TANA
	RemoveBuildingForPlayer(playerid, 1294, 1378.5938, -869.6953, 43.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1294, 1378.5938, -869.6953, 43.6250, 0.25);
	
	// ESTACION DE SERVICIO PIG PEN
	RemoveBuildingForPlayer(playerid, 17535, 2364.0547, -1391.5313, 41.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 17965, 2322.2813, -1355.1953, 25.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 1266, 2317.5859, -1355.8281, 37.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 17970, 2364.0547, -1391.5313, 41.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 17543, 2322.2813, -1355.1953, 25.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 1260, 2317.5938, -1355.8203, 37.2266, 0.25);
	// ESTACION DE SERVICIO FARO
	RemoveBuildingForPlayer(playerid, 1215, 616.7656, -1495.7734, 14.3203, 0.25);
	// ESTACION DE SERVICIO PUERTO
	RemoveBuildingForPlayer(playerid, 3744, 2264.0703, -2451.9844, 14.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 3574, 2264.0703, -2451.9844, 14.8125, 0.25);
	// ESTACION DE SERVICIO AYUNTA
	RemoveBuildingForPlayer(playerid, 4051, 1371.8203, -1754.8203, 19.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 4021, 1371.8203, -1754.8203, 19.0469, 0.25);

	// PASILLO DE LA MERCA
	RemoveBuildingForPlayer(playerid, 5524, 2025.3750, -1773.9531, 16.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 5628, 2025.3750, -1773.9531, 16.6797, 0.25);
	
	// Taller mecanico mercury
	RemoveBuildingForPlayer(playerid, 4124, 1653.4844, -1826.6406, 23.9219, 0.25);
	RemoveBuildingForPlayer(playerid, 4212, 1661.8047, -1826.7188, 24.8281, 0.25);
	RemoveBuildingForPlayer(playerid, 4214, 1589.4531, -1817.5625, 22.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 4223, 1596.5547, -1817.2969, 21.0313, 0.25);
	RemoveBuildingForPlayer(playerid, 4227, 1614.6328, -1862.2109, 14.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 3988, 1596.5547, -1817.2969, 21.0313, 0.25);
	RemoveBuildingForPlayer(playerid, 4123, 1653.4844, -1826.6406, 23.9219, 0.25);
	
	// Forza.
	RemoveBuildingForPlayer(playerid, 620, 241.1953, -1395.0313, 51.4922, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 244.0313, -1387.2109, 51.7969, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 230.2266, -1379.2109, 51.5469, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 228.4375, -1368.7500, 51.8594, 0.25);
	
	// Transportistas.
	RemoveBuildingForPlayer(playerid, 3744, 2193.2578, -2286.2891, 14.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 5305, 2198.8516, -2213.9219, 14.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 3747, 2234.3906, -2244.8281, 14.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 3747, 2226.9688, -2252.1406, 14.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 3747, 2219.4219, -2259.5234, 14.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 3747, 2212.0938, -2267.0703, 14.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 3747, 2204.6328, -2274.4141, 14.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 3578, 2165.0703, -2288.9688, 13.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 3574, 2193.2578, -2286.2891, 14.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 3569, 2204.6328, -2274.4141, 14.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 3569, 2212.0938, -2267.0703, 14.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 3569, 2219.4219, -2259.5234, 14.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 3578, 2194.4766, -2242.8750, 13.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 3569, 2226.9688, -2252.1406, 14.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 3569, 2234.3906, -2244.8281, 14.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 3578, 2235.1641, -2231.8516, 13.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 5244, 2198.8516, -2213.9219, 14.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 13477, -21.9453, 101.3906, 4.5313, 0.25);
	RemoveBuildingForPlayer(playerid, 12914, -75.1797, 12.1719, 3.7188, 0.25);
	RemoveBuildingForPlayer(playerid, 672, -15.2109, 94.8438, 3.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 3374, -41.2500, 98.4141, 3.4609, 0.25);
	RemoveBuildingForPlayer(playerid, 3374, -36.0156, 96.1875, 3.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 12913, -21.9453, 101.3906, 4.5313, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, -34.9297, 131.5469, 2.9531, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, -51.7188, 145.9609, 2.9531, 0.25);
	
 	// Exterior del hospital
    RemoveBuildingForPlayer(playerid, 1440, 1141.9844, -1346.1094, 13.2656, 0.25);
	
	//Aeropuerto
	RemoveBuildingForPlayer(playerid, 4990, 1646.1953, -2414.0703, 17.9297, 0.25);
	RemoveBuildingForPlayer(playerid, 5010, 1646.1953, -2414.0703, 17.9297, 0.25);
	RemoveBuildingForPlayer(playerid, 5011, 1874.2109, -2286.5313, 17.9297, 0.25);
	RemoveBuildingForPlayer(playerid, 3672, 1921.6406, -2206.3906, 18.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 3672, 2030.0547, -2249.0234, 18.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 3672, 2030.0547, -2315.4297, 18.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 3672, 2030.0547, -2382.1406, 18.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 3672, 2112.9375, -2384.6172, 18.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 3672, 1889.6563, -2666.0078, 18.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 3672, 1822.7344, -2666.0078, 18.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 3672, 1682.7266, -2666.0078, 18.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 3672, 1617.2813, -2666.0078, 18.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 3672, 1754.1719, -2666.0078, 18.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 3769, 1961.4453, -2216.1719, 14.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 3744, 2061.5313, -2209.8125, 14.9766, 0.25);
	RemoveBuildingForPlayer(playerid, 3744, 2082.4063, -2370.0156, 14.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 1290, 1607.0156, -2439.9766, 18.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 3629, 1617.2813, -2666.0078, 18.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 1290, 1649.0625, -2641.4063, 18.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 3663, 1664.4531, -2439.8047, 14.4688, 0.25);
	RemoveBuildingForPlayer(playerid, 3629, 1682.7266, -2666.0078, 18.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 1290, 1686.4453, -2439.9766, 18.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 3629, 1754.1719, -2666.0078, 18.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 1290, 1766.7969, -2439.9766, 18.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 3629, 1822.7344, -2666.0078, 18.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 3663, 1832.4531, -2388.4375, 14.4688, 0.25);
	RemoveBuildingForPlayer(playerid, 1290, 1855.7969, -2641.4063, 18.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 3629, 1889.6563, -2666.0078, 18.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 1290, 1922.2031, -2641.4063, 18.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 3663, 1882.2656, -2395.7813, 14.4688, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 1980.9219, -2413.8750, 13.0625, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 1980.9219, -2355.2109, 13.0625, 0.25);
	RemoveBuildingForPlayer(playerid, 3629, 2030.0547, -2382.1406, 18.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 3664, 2042.7734, -2442.1875, 19.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 2057.7344, -2402.9922, 12.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 1290, 2088.6094, -2422.1719, 18.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 3574, 2082.4063, -2370.0156, 14.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 2089.3047, -2359.7578, 12.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 1290, 2146.0156, -2409.3516, 18.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 3629, 2112.9375, -2384.6172, 18.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 5006, 1874.2109, -2286.5313, 17.9297, 0.25);
	RemoveBuildingForPlayer(playerid, 1290, 1899.4219, -2328.1406, 18.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 1290, 1899.4219, -2244.5078, 18.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 1983.8594, -2281.7109, 13.0625, 0.25);
	RemoveBuildingForPlayer(playerid, 3664, 1960.6953, -2236.4297, 19.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 1290, 2003.4531, -2281.3984, 18.3828, 0.25);
	RemoveBuildingForPlayer(playerid, 5031, 2037.0469, -2313.5469, 18.7109, 0.25);
	RemoveBuildingForPlayer(playerid, 3629, 2030.0547, -2315.4297, 18.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 3629, 2030.0547, -2249.0234, 18.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 2057.0547, -2315.4688, 12.7422, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 2057.5391, -2270.0703, 12.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 2089.3047, -2332.5547, 12.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 2089.7813, -2244.4922, 12.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 3629, 1921.6406, -2206.3906, 18.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1949.3438, -2227.5156, 13.6563, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1944.0625, -2227.5156, 13.6563, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1954.6172, -2227.4844, 13.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1965.1719, -2227.4141, 13.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1959.8984, -2227.4453, 13.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 3625, 1961.4453, -2216.1719, 14.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1975.7266, -2227.4141, 13.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1970.4453, -2227.4141, 13.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1981.0000, -2227.4141, 13.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1996.8281, -2227.3828, 13.7891, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1991.5547, -2227.4141, 13.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1986.2813, -2227.4141, 13.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 1983.8047, -2224.1641, 12.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2002.1094, -2227.3438, 13.8281, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 2018.0313, -2224.1641, 12.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2055.0547, -2224.3828, 13.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2055.0547, -2219.1094, 13.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 2056.8281, -2224.1641, 12.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2054.9844, -2213.7891, 13.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2054.9219, -2208.4609, 13.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2054.9219, -2203.1875, 13.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 3574, 2061.5313, -2209.8125, 14.9766, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2054.9297, -2181.3594, 13.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2054.9297, -2186.6328, 13.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 1290, 1525.0078, -2439.9766, 18.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 3663, 1580.0938, -2433.8281, 14.5703, 0.25);

	// Interior Ayuntamiento
	RemoveBuildingForPlayer(playerid, 1502, 365.7969, 189.6172, 1007.3750, 0.25);

	// Cárcel de LSPD.
	RemoveBuildingForPlayer(playerid, 14843, 266.3516, 81.1953, 1001.2813, 0.25);

	// Cartel del exterior LSPD.
	RemoveBuildingForPlayer(playerid, 1266, 1538.5234, -1609.8047, 19.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 4229, 1597.9063, -1699.7500, 30.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 4230, 1597.9063, -1699.7500, 30.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1541.4531, -1709.6406, 13.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1547.5703, -1689.9844, 13.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1547.5703, -1661.0313, 13.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1541.4531, -1642.0313, 13.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 1260, 1538.5234, -1609.8047, 19.8438, 0.25);

	// Eliminamos algunos árboles que aparecen en interiores.
	RemoveBuildingForPlayer(playerid, 762, 1175.3594, -1420.1875, 19.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 615, 1166.3516, -1417.6953, 13.9531, 0.25);

	// Creamos los textdraws
	for(new i = 0; i < 7; i++) {
		TutTD_Text[playerid][i] = CreatePlayerTextDraw(playerid, 24.000000, 339 + i * 9, " ");
		PlayerTextDrawAlignment(playerid, TutTD_Text[playerid][i], 1);
		PlayerTextDrawBackgroundColor(playerid, TutTD_Text[playerid][i], 255);
		PlayerTextDrawFont(playerid, TutTD_Text[playerid][i], 1);
		PlayerTextDrawLetterSize(playerid, TutTD_Text[playerid][i], 0.340000, 1.000000);
		PlayerTextDrawColor(playerid, TutTD_Text[playerid][i], -1);
		PlayerTextDrawSetOutline(playerid, TutTD_Text[playerid][i], 0);
		PlayerTextDrawSetProportional(playerid, TutTD_Text[playerid][i], 1);
		PlayerTextDrawSetShadow(playerid, TutTD_Text[playerid][i], 1);
		PlayerTextDrawTextSize(playerid, TutTD_Text[playerid][i], 621.000000, 290.000000);
	}
	
	PTD_Speedo[playerid] = CreatePlayerTextDraw(playerid, 620.000000, 376.000000, " ");
	PlayerTextDrawAlignment(playerid, PTD_Speedo[playerid], 3);
	PlayerTextDrawBackgroundColor(playerid, PTD_Speedo[playerid], 255);
	PlayerTextDrawFont(playerid, PTD_Speedo[playerid], 1);
	PlayerTextDrawLetterSize(playerid, PTD_Speedo[playerid], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid, PTD_Speedo[playerid], -1);
	PlayerTextDrawSetOutline(playerid, PTD_Speedo[playerid], 0);
	PlayerTextDrawSetProportional(playerid, PTD_Speedo[playerid], 1);
	PlayerTextDrawSetShadow(playerid, PTD_Speedo[playerid], 1);

	PTD_Timer[playerid] = CreatePlayerTextDraw(playerid, 496, 103, " ");
	PlayerTextDrawBackgroundColor(playerid, PTD_Timer[playerid], 255);
	PlayerTextDrawFont(playerid, PTD_Timer[playerid], 1);
	PlayerTextDrawLetterSize(playerid, PTD_Timer[playerid], 0.5, 1.9);
	PlayerTextDrawColor(playerid, PTD_Timer[playerid], -421075226);
	PlayerTextDrawSetOutline(playerid, PTD_Timer[playerid], 0);
	PlayerTextDrawSetProportional(playerid, PTD_Timer[playerid], 1);
	PlayerTextDrawSetShadow(playerid, PTD_Timer[playerid], 1);

	RegTDGender[playerid] = CreatePlayerTextDraw(playerid, 513.000000, 121.000000, "Genero: masculino");
	PlayerTextDrawBackgroundColor(playerid, RegTDGender[playerid], 255);
	PlayerTextDrawFont(playerid, RegTDGender[playerid], 2);
	PlayerTextDrawLetterSize(playerid, RegTDGender[playerid], 0.270000, 1.200000);
	PlayerTextDrawColor(playerid, RegTDGender[playerid], -1);
	PlayerTextDrawSetOutline(playerid, RegTDGender[playerid], 1);
	PlayerTextDrawSetProportional(playerid, RegTDGender[playerid], 1);

	RegTDSkin[playerid] = CreatePlayerTextDraw(playerid, 513.000000, 132.000000, "Apariencia: -");
	PlayerTextDrawBackgroundColor(playerid, RegTDSkin[playerid], 255);
	PlayerTextDrawFont(playerid, RegTDSkin[playerid], 2);
	PlayerTextDrawLetterSize(playerid, RegTDSkin[playerid], 0.270000, 1.200000);
	PlayerTextDrawColor(playerid, RegTDSkin[playerid], -1);
	PlayerTextDrawSetOutline(playerid, RegTDSkin[playerid], 1);
	PlayerTextDrawSetProportional(playerid, RegTDSkin[playerid], 1);

	RegTDAge[playerid] = CreatePlayerTextDraw(playerid, 513.000000, 143.000000, "Edad: -");
	PlayerTextDrawBackgroundColor(playerid, RegTDAge[playerid], 255);
	PlayerTextDrawFont(playerid, RegTDAge[playerid], 2);
	PlayerTextDrawLetterSize(playerid, RegTDAge[playerid], 0.270000, 1.200000);
	PlayerTextDrawColor(playerid, RegTDAge[playerid], -1);
	PlayerTextDrawSetOutline(playerid, RegTDAge[playerid], 1);
	PlayerTextDrawSetProportional(playerid, RegTDAge[playerid], 1);

	RegTDOrigin[playerid] = CreatePlayerTextDraw(playerid, 513.000000, 154.000000, "Origen: -");
	PlayerTextDrawBackgroundColor(playerid, RegTDOrigin[playerid], 255);
	PlayerTextDrawFont(playerid, RegTDOrigin[playerid], 2);
	PlayerTextDrawLetterSize(playerid, RegTDOrigin[playerid], 0.270000, 1.200000);
	PlayerTextDrawColor(playerid, RegTDOrigin[playerid], -1);
	PlayerTextDrawSetOutline(playerid, RegTDOrigin[playerid], 1);
	PlayerTextDrawSetProportional(playerid, RegTDOrigin[playerid], 1);

	RegTDArrow[playerid] = CreatePlayerTextDraw(playerid, 501.000000, 122.000000, "~>~");
	PlayerTextDrawAlignment(playerid, RegTDArrow[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid, RegTDArrow[playerid], 255);
	PlayerTextDrawFont(playerid, RegTDArrow[playerid], 2);
	PlayerTextDrawLetterSize(playerid, RegTDArrow[playerid], 0.260000, 0.899999);
	PlayerTextDrawColor(playerid, RegTDArrow[playerid], -1);
	PlayerTextDrawSetOutline(playerid, RegTDArrow[playerid], 1);
	PlayerTextDrawSetProportional(playerid, RegTDArrow[playerid], 1);
	return 1;
}

public ResetStats(playerid) {
    MedDuty[playerid] = 0;
    OfferingVehicle[playerid] = false;
    VehicleOfferPrice[playerid] = -1;
    VehicleOffer[playerid] = INVALID_PLAYER_ID;
    VehicleOfferID[playerid] = -1;
    
    //Venta de casas
    OfferingHouse[playerid] = false;
	HouseOfferPrice[playerid] = -1;
	HouseOffer[playerid] = INVALID_PLAYER_ID;

	// s0beit detector.
	firstSpawn[playerid] = 1;
	cheater[playerid] = 0;
	
	SeatBelt[playerid] = false;
	smoking[playerid] = false;
	eventStep[playerid] = 0;
    eventParam[playerid] = 0;
	LastVeh[playerid] = 0;
	AllowAdv[playerid] = 1;

	LastCP[playerid] = -1;
	CollectedProds[playerid] = 0;
	jobBreak[playerid] = 80;
	RepairOffer[playerid] = 999;
	RepairPrice[playerid] = 0;
	
	/* Sistema de Tuning */
	TuningOffer[playerid] = 999;
	TuningClient[playerid] = 999;
	DestuningOffer[playerid] = 999;
	
	// Revision de usuarios
	ReviseOffer[playerid] = 999;
	
	/* Sistema de máscaras */
	isUsingMaskInSlot[playerid] = -1;
	
	/* Sistema de Picadas */
	resetSprintRace(playerid);

	/* Sistema de radios para autos */
	isHearingVehicleRedio[playerid] = false;
	
	/* Sistema de entrevistas para CTRMAN */
	InterviewOffer[playerid] = 999;
	InterviewActive[playerid] = false;
	
	/* Cargando Nafta */
	fillingFuel[playerid] = false;
	
	/* Sistema de casino */
	isBetingRoulette[playerid] = false;
	isBetingFortune[playerid] = false;
	
	/* Sistema de hambre y sed */
    PlayerInfo[playerid][pThirst] = 100.0;
	PlayerInfo[playerid][pHunger] = 100.0;
	
	/* Sistema de Adiccion y Drogas */
	RehabOffer[playerid] = 999;
 	DrugOfferType[playerid] = 0;
 	DrugOffer[playerid] = INVALID_PLAYER_ID;
	DrugOfferAmount[playerid] = 0;
	SellingDrugs[playerid] = false;
	DrugEffectEcstasy[playerid] = false;
	DrugEffectLSD[playerid] = false;
	DrugEffectCocaine[playerid] = false;
	DrugEffectMarijuana[playerid] = false;
	PlayerInfo[playerid][pAdictionPercent] = 0.0;
	PlayerInfo[playerid][pAdictionAbstinence] = 999999999;
	
	resetTazer(playerid);

	MechanicCallTime[playerid] = 0;
	TaxiCallTime[playerid] = 0;
	TaxiAccepted[playerid] = 999;
	TransportPassenger[playerid] = 999;
	TransportDriver[playerid] = 999;
	TransportCost[playerid] = 0;

    dyingCamera[playerid] = false;
	carryingProd[playerid] = false;
    jobDuty[playerid] = false;
	RegCounter[playerid] = 1;
	CanDoTut[playerid] = 1;
	Choice[playerid] = 0;
	UserExists[playerid] = 0;
	TrackingPlayer[playerid] = 0;
	DrugsIntake[playerid] = 0;
	DrugsHolding[playerid] = 0;
	MatsHolding[playerid] = 0;
	TicketOffer[playerid] = 999;
	TicketMoney[playerid] = 0;
	PlayerCuffed[playerid] = 0;
	CopDuty[playerid] = 0;
	SIDEDuty[playerid] = 0;
	PMsEnabled[playerid] = 1;
	NewsEnabled[playerid] = 1;
	RadioEnabled[playerid] = 1;
	FactionEnabled[playerid] = 1;
	AdminDuty[playerid] = 0;
	StartedCall[playerid] = 0;
	Muted[playerid] = 0;
	PhoneOnline[playerid] = 0;
	HospHealing[playerid] = 0;
	ShowFuel[playerid] = 1;
	SetPlayerColor(playerid, COLOR_NOTLOGGED);
	SpawnAttempts[playerid] = 0;
	FactionRequest[playerid] = 0;
	Mobile[playerid] = 255;
	gPlayerLogged[playerid] = 0;

	resetAuxiliarItemsPMA(playerid);

	cAFK[playerid] = 0; //Sistema de AFK

	playerLicense[playerid][lDStep] = 0;
	playerLicense[playerid][lDTaking] = 0;
	playerLicense[playerid][lDTime] = 0;
	playerLicense[playerid][lDMaxSpeed] = 0.0;
	
	PlayerInfo[playerid][pMarijuana] = 0;
	PlayerInfo[playerid][pLSD] = 0;
	PlayerInfo[playerid][pEcstasy] = 0;
	PlayerInfo[playerid][pCocaine] = 0;
	PlayerInfo[playerid][pCigarettes] = 0;
	PlayerInfo[playerid][pLighter] = 0;
	
	PlayerInfo[playerid][pFightStyle] = 0;
	PlayerInfo[playerid][pMuteB] = 0;

	resetThiefVariables(playerid);

	PlayerInfo[playerid][pCantWork] = 0;
	PlayerInfo[playerid][pWantedLevel] = 0;
	PlayerInfo[playerid][pBizKey] = 0;
	PlayerInfo[playerid][pWarnings] = 0;
	PlayerInfo[playerid][pRegStep] = 0;
	PlayerInfo[playerid][pLevel] = 1;
	PlayerInfo[playerid][pName] = "BUGBUGBUGBUGBUGBUGBUGBU";
	PlayerInfo[playerid][pLastConnected] = "BUGBUGBUGBUGBUGBUGBUGBUG";
	PlayerInfo[playerid][pIP] = "BUG.BUG.BUG.BUG";
	PlayerInfo[playerid][pAdmin] = 0;
	PlayerInfo[playerid][pAccountBlocked] = 0;
	PlayerInfo[playerid][pTutorial] = 0;
	PlayerInfo[playerid][pSex] = 1;
	PlayerInfo[playerid][pAge] = 0;
	PlayerInfo[playerid][pExp] = 0;
	PlayerInfo[playerid][pCash] = 0;
	PlayerInfo[playerid][pBank] = 0;
	PlayerInfo[playerid][pSkin] = 0;
	PlayerInfo[playerid][pMask] = 0;
	PlayerInfo[playerid][pRadio] = 0;
	PlayerInfo[playerid][pJob] = 0;
	PlayerInfo[playerid][pJobTime] = 0;
	PlayerInfo[playerid][pJobAllowed] = 1;
	PlayerInfo[playerid][pPlayingHours] = 0;
	PlayerInfo[playerid][pPayCheck] = 0;
	PlayerInfo[playerid][pFaction] = 0;
	PlayerInfo[playerid][pRank] = 0;
	PlayerInfo[playerid][pHouseKey] = 0;
	PlayerInfo[playerid][pBizKey] = 0;
	PlayerInfo[playerid][pWarnings] = 0;
	PlayerInfo[playerid][pCarLic] = 0;
	PlayerInfo[playerid][pWepLic] = 0;
	PlayerInfo[playerid][pFlyLic] = 0;
	PlayerInfo[playerid][pPhoneNumber] = 0;
	PlayerInfo[playerid][pPhoneC] = 255;
	PlayerInfo[playerid][pPhoneBook] = 0;
	PlayerInfo[playerid][pListNumber] = 1;
	PlayerInfo[playerid][pJailed] = 0;
	PlayerInfo[playerid][pJailTime] = 0;
	PlayerInfo[playerid][pX] = 1481.2136;
	PlayerInfo[playerid][pY] = -1751.6758;
	PlayerInfo[playerid][pZ] = 15.4453;
	PlayerInfo[playerid][pA] = 358.1794;
	PlayerInfo[playerid][pInterior] = 0;
	PlayerInfo[playerid][pVirtualWorld] = 0;
	PlayerInfo[playerid][pVeh1] = 0;
	PlayerInfo[playerid][pVeh2] = 0;
	PlayerInfo[playerid][pHospitalized] = 0;
	PlayerInfo[playerid][pHealth] = 100.0;
	PlayerInfo[playerid][pArmour] = 0;
	PlayerInfo[playerid][pSpectating] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pRentCarID] = 0;
	PlayerInfo[playerid][pRentCarRID] = 0;

    gHeaderTextDrawId[playerid] = PlayerText:INVALID_TEXT_DRAW;
    gBackgroundTextDrawId[playerid] = PlayerText:INVALID_TEXT_DRAW;
    gCurrentPageTextDrawId[playerid] = PlayerText:INVALID_TEXT_DRAW;
    gNextButtonTextDrawId[playerid] = PlayerText:INVALID_TEXT_DRAW;
    gPrevButtonTextDrawId[playerid] = PlayerText:INVALID_TEXT_DRAW;

    for(new x=0; x < SELECTION_ITEMS; x++) {
        gSelectionItems[playerid][x] = PlayerText:INVALID_TEXT_DRAW;
	}

	gItemAt[playerid] = 0;
	return 0;
}
public OnPlayerDisconnect(playerid, reason) {
	new
		string[64];

    TextDrawHideForPlayer(playerid, textdrawVariables[1]);

    KillTimer(timersID[10]);
    KillTimer(GetPVarInt(playerid, "CancelVehicleTransfer"));
    KillTimer(GetPVarInt(playerid, "CancelDrugTransfer"));
    KillTimer(GetPVarInt(playerid, "jobBreakTimerID"));
    KillTimer(GetPVarInt(playerid, "tutTimer"));
    KillTimer(GetPVarInt(playerid, "garbT"));
    KillTimer(GetPVarInt(playerid, "eventTimer"));
    KillTimer(GetPVarInt(playerid, "eventStepTimer"));
    KillTimer(GetPVarInt(playerid, "matsTimer"));
    KillTimer(GetPVarInt(playerid, "buyMatsTimer"));
    KillTimer(GetPVarInt(playerid, "buyDrugsTimer"));
    KillTimer(GetPVarInt(playerid, "matsFinish"));
    KillTimer(GetPVarInt(playerid, "robberyCancel"));
    KillTimer(GetPVarInt(playerid, "theftTimer"));
    KillTimer(GetPVarInt(playerid, "fuelCar"));
	KillTimer(GetPVarInt(playerid, "fuelCarWithCan"));
	KillTimer(cAFKTimer[playerid]);
	
	if(GetPlayerSpecialAction(Mobile[playerid] == SPECIAL_ACTION_USECELLPHONE && !IsPlayerInAnyVehicle(Mobile[playerid]))) {
		SetPlayerSpecialAction(Mobile[playerid], SPECIAL_ACTION_STOPUSECELLPHONE);
	}
    
    if(cAFK[playerid] == 1) {
		SetPlayerVirtualWorld(playerid, (cTomarVW[playerid]));
	}
    
   	if(DrugEffectLSD[playerid] == true)// Para que no se guarde con la vida extra del LSD
	{
		new Float:playerHealth;
		GetPlayerHealthEx(playerid, playerHealth);
		if(playerHealth > 100.0)
	    	SetPlayerHealthEx(playerid, 100.0);
    }
    
    foreach(new i : Player) {
		if(TaxiAccepted[i] < 999) {
			if(TaxiAccepted[i] == playerid) {
				TaxiAccepted[i] = 999;
				GameTextForPlayer(i, "~w~El cliente~r~ha dejado el juego", 2000, 1);
				TaxiCallTime[i] = 0;
				DisablePlayerCheckpoint(i);
			}
		}

		if(PlayerInfo[i][pSpectating] == playerid) {
			PlayerInfo[i][pSpectating] = INVALID_PLAYER_ID;
			TogglePlayerSpectating(i, false);
			SetCameraBehindPlayer(i);
			SetPlayerPos(i, PlayerInfo[i][pX], PlayerInfo[i][pY], PlayerInfo[i][pZ]);
			SetPlayerInterior(i, PlayerInfo[i][pInterior]);
			SetPlayerVirtualWorld(i, PlayerInfo[i][pVirtualWorld]);
			TextDrawHideForPlayer(i, textdrawVariables[0]);
			SendClientMessage(i, COLOR_WHITE, "{878EE7}[INFO]:{C8C8C8} el jugador al que estabas specteando se ha desconectado.");
		}
	}

	if(jobDuty[playerid]) {
	    if(PlayerInfo[playerid][pJob] == JOB_TAXI && TransportPassenger[playerid] < 999) {
			SendClientMessage(TransportPassenger[playerid], COLOR_YELLOW2, "El conductor ha dejado el juego, por favor espera a que se reconecte.");
			TransportDriver[TransportPassenger[playerid]] = 999;
		} else if(PlayerInfo[playerid][pJob] == JOB_GARB) {
			SetVehicleToRespawn(GetPVarInt(playerid, "jobVehicle"));
		}
	}
	
	if(TransportDriver[playerid] < 999) {
		if(TransportCost[TransportDriver[playerid]] > 0) {
			if(IsPlayerConnected(TransportDriver[playerid])) {
				format(string, sizeof(string), "~w~El pasajero~r~ha dejado el juego~n~~g~Dinero ganado: $%d", TransportCost[TransportDriver[playerid]]);
				GameTextForPlayer(TransportDriver[playerid], string, 2000, 1);
				if(GetPVarInt(TransportDriver[playerid], "pJobLimitCounter") <= JOB_TAXI_MAXPASSENGERS) {
				    SetPVarInt(TransportDriver[playerid], "pJobLimitCounter", GetPVarInt(TransportDriver[playerid], "pJobLimitCounter") + 1);
					PlayerInfo[TransportDriver[playerid]][pPayCheck] += PRICE_TAXI_PERPASSENGER;
				}
				GivePlayerCash(playerid, -TransportCost[TransportDriver[playerid]]);
				GivePlayerCash(TransportDriver[playerid], TransportCost[TransportDriver[playerid]]);
				TransportCost[TransportDriver[playerid]] = 0;
				TransportPassenger[TransportDriver[playerid]] = 999;
				TransportDriver[playerid] = 999;
			}
		}
	}
	
    if(gPlayerLogged[playerid]) {
		switch(reason) {
	        case 0,2:{
				PlayerLocalMessage(playerid, 30.0, "se ha desconectado (razón: crash).");
			}
			case 1:{
			    PlayerLocalMessage(playerid, 30.0, "se ha desconectado (razón: a voluntad).");
			}
	    }
		SaveAccount(playerid);
	}
	
	deleteAuxiliarItemsPMA(playerid, PMA_CONE_ITEM);
	deleteAuxiliarItemsPMA(playerid, PMA_BARRICATE_ITEM);

	deleteAbandonedSprintRace(playerid);
	
	if(isHearingVehicleRedio[playerid])
		StopAudioStreamForPlayer(playerid);
		
	DeletePlayerBasicNeeds(playerid); // Destruimos las barras de hambre y sed, y ocultamos los textdraws
	
	PlayerTextDrawHide(playerid, PTD_Speedo[playerid]);
	KillTimer(pSpeedoTimer[playerid]); // Si se desonectó estando arriba del auto, borramos el timer recursivo de la gasolina
	
	HideGangZonesToPlayer(playerid);
	
	return 1;
}

// Selector de skins.
stock GetNumberOfPages(skintype) {
	new totalItems;

	switch(skintype) {
	    case 1: totalItems = SKINS_M_1;
	    case 2: totalItems = SKINS_M_2;
	    case 3: totalItems = SKINS_F_1;
	    case 4: totalItems = SKINS_F_2;
	}
	
	if((totalItems >= SELECTION_ITEMS) && (totalItems % SELECTION_ITEMS) == 0) {
		return (totalItems / SELECTION_ITEMS);
	}
	else return (totalItems / SELECTION_ITEMS) + 1;
}

PlayerText:CreateCurrentPageTextDraw(playerid, Float:Xpos, Float:Ypos) {
	new PlayerText:txtInit;
   	txtInit = CreatePlayerTextDraw(playerid, Xpos, Ypos, "0/0");
   	PlayerTextDrawUseBox(playerid, txtInit, 0);
	PlayerTextDrawLetterSize(playerid, txtInit, 0.4, 1.1);
	PlayerTextDrawFont(playerid, txtInit, 1);
	PlayerTextDrawSetShadow(playerid, txtInit, 0);
    PlayerTextDrawSetOutline(playerid, txtInit, 1);
    PlayerTextDrawColor(playerid, txtInit, 0xACCBF1FF);
    PlayerTextDrawShow(playerid, txtInit);
    return txtInit;
}

PlayerText:CreatePlayerDialogButton(playerid, Float:Xpos, Float:Ypos, Float:Width, Float:Height, button_text[]) {
 	new PlayerText:txtInit;
   	txtInit = CreatePlayerTextDraw(playerid, Xpos, Ypos, button_text);
   	PlayerTextDrawUseBox(playerid, txtInit, 1);
   	PlayerTextDrawBoxColor(playerid, txtInit, 0x000000FF);
   	PlayerTextDrawBackgroundColor(playerid, txtInit, 0x000000FF);
	PlayerTextDrawLetterSize(playerid, txtInit, 0.4, 1.1);
	PlayerTextDrawFont(playerid, txtInit, 1);
	PlayerTextDrawSetShadow(playerid, txtInit, 0); // no shadow
    PlayerTextDrawSetOutline(playerid, txtInit, 0);
    PlayerTextDrawColor(playerid, txtInit, 0x4A5A6BFF);
    PlayerTextDrawSetSelectable(playerid, txtInit, 1);
    PlayerTextDrawAlignment(playerid, txtInit, 2);
    PlayerTextDrawTextSize(playerid, txtInit, Height, Width); // The width and height are reversed for centering.. something the game does <g>
    PlayerTextDrawShow(playerid, txtInit);
    return txtInit;
}

PlayerText:CreatePlayerHeaderTextDraw(playerid, Float:Xpos, Float:Ypos, header_text[]) {
	new PlayerText:txtInit;
   	txtInit = CreatePlayerTextDraw(playerid, Xpos, Ypos, header_text);
   	PlayerTextDrawUseBox(playerid, txtInit, 0);
	PlayerTextDrawLetterSize(playerid, txtInit, 1.25, 3.0);
	PlayerTextDrawFont(playerid, txtInit, 0);
	PlayerTextDrawSetShadow(playerid, txtInit, 0);
    PlayerTextDrawSetOutline(playerid, txtInit, 1);
    PlayerTextDrawColor(playerid, txtInit, 0xACCBF1FF);
    PlayerTextDrawShow(playerid, txtInit);
    return txtInit;
}

PlayerText:CreatePlayerBackgroundTextDraw(playerid, Float:Xpos, Float:Ypos, Float:Width, Float:Height) {
	new PlayerText:txtBackground = CreatePlayerTextDraw(playerid, Xpos, Ypos,
	"                                            ~n~"); // enough space for everyone
    PlayerTextDrawUseBox(playerid, txtBackground, 1);
    PlayerTextDrawBoxColor(playerid, txtBackground, 0x4A5A6BBB);
	PlayerTextDrawLetterSize(playerid, txtBackground, 5.0, 5.0);
	PlayerTextDrawFont(playerid, txtBackground, 0);
	PlayerTextDrawSetShadow(playerid, txtBackground, 0);
    PlayerTextDrawSetOutline(playerid, txtBackground, 0);
    PlayerTextDrawColor(playerid, txtBackground,0x000000FF);
    PlayerTextDrawTextSize(playerid, txtBackground, Width, Height);
   	PlayerTextDrawBackgroundColor(playerid, txtBackground, 0x4A5A6BBB);
    PlayerTextDrawShow(playerid, txtBackground);
    return txtBackground;
}

PlayerText:CreateModelPreviewTextDraw(playerid, modelindex, Float:Xpos, Float:Ypos, Float:width, Float:height) {
    new PlayerText:txtPlayerSprite = CreatePlayerTextDraw(playerid, Xpos, Ypos, ""); // it has to be set with SetText later
    PlayerTextDrawFont(playerid, txtPlayerSprite, TEXT_DRAW_FONT_MODEL_PREVIEW);
    PlayerTextDrawColor(playerid, txtPlayerSprite, 0xFFFFFFFF);
    PlayerTextDrawBackgroundColor(playerid, txtPlayerSprite, 0x88888899);
    PlayerTextDrawTextSize(playerid, txtPlayerSprite, width, height); // Text size is the Width:Height
    PlayerTextDrawSetPreviewModel(playerid, txtPlayerSprite, modelindex);
    PlayerTextDrawSetSelectable(playerid, txtPlayerSprite, 1);
    PlayerTextDrawShow(playerid,txtPlayerSprite);
    return txtPlayerSprite;
}

DestroyPlayerModelPreviews(playerid) {
	new x=0;
	while(x != SELECTION_ITEMS) {
	    if(gSelectionItems[playerid][x] != PlayerText:INVALID_TEXT_DRAW) {
			PlayerTextDrawDestroy(playerid, gSelectionItems[playerid][x]);
			gSelectionItems[playerid][x] = PlayerText:INVALID_TEXT_DRAW;
		}
		x++;
	}
}

ShowPlayerModelPreviews(playerid, skintype) {
	new totalItems;
    new x=0;
	new Float:BaseX = DIALOG_BASE_X;
	new Float:BaseY = DIALOG_BASE_Y - (SPRITE_DIM_Y * 0.33); // down a bit
	new linetracker = 0;

	new itemat = GetPVarInt(playerid, "skinc_page") * SELECTION_ITEMS;

	// Destroy any previous ones created
	DestroyPlayerModelPreviews(playerid);
	
	switch(skintype) {
	    case 1: totalItems = SKINS_M_1;
	    case 2: totalItems = SKINS_M_2;
	    case 3: totalItems = SKINS_F_1;
	    case 4: totalItems = SKINS_F_2;
	}

	while(x != SELECTION_ITEMS && itemat < totalItems) {
	    if(linetracker == 0) {
	        BaseX = DIALOG_BASE_X + 25.0; // in a bit from the box
	        BaseY += SPRITE_DIM_Y + 1.0; // move on the Y for the next line
		}
		switch(skintype) {
		    case 1: {
		    	gSelectionItems[playerid][x] = CreateModelPreviewTextDraw(playerid, maleSkins1[itemat], BaseX, BaseY, SPRITE_DIM_X, SPRITE_DIM_Y);
  				gSelectionItemsTag[playerid][x] = maleSkins1[itemat];
		    }
		    case 2: {
		    	gSelectionItems[playerid][x] = CreateModelPreviewTextDraw(playerid, maleSkins2[itemat], BaseX, BaseY, SPRITE_DIM_X, SPRITE_DIM_Y);
  				gSelectionItemsTag[playerid][x] = maleSkins2[itemat];
		    }
		    case 3: {
		    	gSelectionItems[playerid][x] = CreateModelPreviewTextDraw(playerid, femaleSkins1[itemat], BaseX, BaseY, SPRITE_DIM_X, SPRITE_DIM_Y);
  				gSelectionItemsTag[playerid][x] = femaleSkins1[itemat];
		    }
		    case 4:  {
		    	gSelectionItems[playerid][x] = CreateModelPreviewTextDraw(playerid, femaleSkins2[itemat], BaseX, BaseY, SPRITE_DIM_X, SPRITE_DIM_Y);
  				gSelectionItemsTag[playerid][x] = femaleSkins2[itemat];
		    }
		}
		BaseX += SPRITE_DIM_X + 1.0; // move on the X for the next sprite
		linetracker++;
		if(linetracker == ITEMS_PER_LINE) linetracker = 0;
		itemat++;
		x++;
	}
}

UpdatePageTextDraw(playerid, skintype) {
	new PageText[64+1];
	format(PageText, 64, "%d/%d", GetPVarInt(playerid,"skinc_page") + 1, GetNumberOfPages(skintype));
	PlayerTextDrawSetString(playerid, gCurrentPageTextDrawId[playerid], PageText);
}

CreateSelectionMenu(playerid, skintype) {
	new string[128];
    gBackgroundTextDrawId[playerid] = CreatePlayerBackgroundTextDraw(playerid, DIALOG_BASE_X, DIALOG_BASE_Y + 20.0, DIALOG_WIDTH, DIALOG_HEIGHT);
    switch(skintype) {
		case 1, 3: format(string, sizeof(string), "Ropa urbana $%d", PRICE_CLOTHES1);
		case 2, 4: format(string, sizeof(string), "Ropa fina $%d", PRICE_CLOTHES2);
	}
	gHeaderTextDrawId[playerid] = CreatePlayerHeaderTextDraw(playerid, DIALOG_BASE_X, DIALOG_BASE_Y, string);
    gCurrentPageTextDrawId[playerid] = CreateCurrentPageTextDraw(playerid, DIALOG_WIDTH - 30.0, DIALOG_BASE_Y + 15.0);
    gNextButtonTextDrawId[playerid] = CreatePlayerDialogButton(playerid, DIALOG_WIDTH - 30.0, DIALOG_BASE_Y+DIALOG_HEIGHT+100.0, 50.0, 16.0, ">>>>");
    gPrevButtonTextDrawId[playerid] = CreatePlayerDialogButton(playerid, DIALOG_WIDTH - 90.0, DIALOG_BASE_Y+DIALOG_HEIGHT+100.0, 50.0, 16.0, "<<<<");

    ShowPlayerModelPreviews(playerid, skintype);
    UpdatePageTextDraw(playerid, skintype);
}

DestroySelectionMenu(playerid) {
    TogglePlayerControllable(playerid, true);
    
	DestroyPlayerModelPreviews(playerid);

	PlayerTextDrawDestroy(playerid, gHeaderTextDrawId[playerid]);
	PlayerTextDrawDestroy(playerid, gBackgroundTextDrawId[playerid]);
	PlayerTextDrawDestroy(playerid, gCurrentPageTextDrawId[playerid]);
	PlayerTextDrawDestroy(playerid, gNextButtonTextDrawId[playerid]);
	PlayerTextDrawDestroy(playerid, gPrevButtonTextDrawId[playerid]);

	gHeaderTextDrawId[playerid] = PlayerText:INVALID_TEXT_DRAW;
    gBackgroundTextDrawId[playerid] = PlayerText:INVALID_TEXT_DRAW;
    gCurrentPageTextDrawId[playerid] = PlayerText:INVALID_TEXT_DRAW;
    gNextButtonTextDrawId[playerid] = PlayerText:INVALID_TEXT_DRAW;
    gPrevButtonTextDrawId[playerid] = PlayerText:INVALID_TEXT_DRAW;
}

HandlePlayerItemSelection(playerid, selecteditem, skintype) {
	// In this case we change the player's skin
  	if(gSelectionItemsTag[playerid][selecteditem] >= 0 && gSelectionItemsTag[playerid][selecteditem] < 300)
	{
		switch(skintype)
		{
			case 1, 3:
			{
				if(GetPlayerCash(playerid) < PRICE_CLOTHES1)
				{
				    SendFMessage(playerid, COLOR_YELLOW2, "No tienes el dinero necesario ($%d).", PRICE_CLOTHES1);
					return 1;
				}
				GivePlayerCash(playerid, -PRICE_CLOTHES1);
				new business = GetPlayerBusiness(playerid);
		        if(business != 0 && Business[business][bType] == BIZ_CLOT)
		        {
					Business[business][bTill] += PRICE_CLOTHES1;
					Business[business][bProducts]--;
					saveBusiness(business);
				}
			}
			case 2, 4:
			{
			    if(GetPlayerCash(playerid) < PRICE_CLOTHES2)
			    {
					SendFMessage(playerid, COLOR_YELLOW2, "No tienes el dinero necesario ($%d).", PRICE_CLOTHES2);
					return 1;
   				}
     			GivePlayerCash(playerid, -PRICE_CLOTHES2);
	       		new business = GetPlayerBusiness(playerid);
		        if(business != 0 && Business[business][bType] == BIZ_CLOT2)
		        {
					Business[business][bTill] += PRICE_CLOTHES2;
					Business[business][bProducts]--;
					saveBusiness(business);
				}
			}
		}
        SetPlayerSkin(playerid, gSelectionItemsTag[playerid][selecteditem]);
        PlayerActionMessage(playerid, 15.0, "compra unas vestimentas en el negocio y se las viste en el probador.");
        PlayerInfo[playerid][pSkin] = gSelectionItemsTag[playerid][selecteditem];
		return 1;
	}
	return 1;
}
//

public OnPlayerSpawn(playerid) {

    //---------------PRE CARGA DE LAS LIBRERIAS DE LAS ANIMACIONES--------------
	ApplyAnimation(playerid, "ATTRACTORS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BLOWJOBZ", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BOMBER", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "COP_AMBIENT", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CRACK", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "DANCING", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "DEALER", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "DODGE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FOOD", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GANGS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GHANDS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GRAFFITI", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GRAVEYARD", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GRENADE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "HEIST9", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "INT_HOUSE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "INT_SHOP", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "KISSING", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "KNIFE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "LOWRIDER", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "MD_CHASE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "MEDIC", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "MISC", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "MUSCULAR", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "PARK", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "PAULNMAC", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "PED", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "POLICE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "RAPPING", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "RIOT", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SHOP", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SMOKING", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SWAT", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SWEET", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "WUZI", "null", 0.0, 0, 0, 0, 0, 0);
	//--------------FIN PRE CARGA DE LAS LIBRERIAS DE LAS ANIMACIONES-----------

    KillTimer(cAFKTimer[playerid]); //sistema de afk
	cAFKTimer[playerid] = SetTimerEx("AFKc", cAFKTime, 1, "i", playerid);

	if(gPlayerLogged[playerid]) {
	    SetPlayerSpawn(playerid);
	    TextDrawShowForPlayer(playerid, textdrawVariables[1]);

	    SetPVarInt(playerid, "died", 0);
		if(PlayerInfo[playerid][pHospitalized] >= 1) {
		    initiateHospital(playerid);
		}
	}
	/*}*/
	return 1;
}

public OnPlayerDeath(playerid, killerid, reason) {
	new string[128], time = gettime();
	SetPVarInt(playerid, "died", 1);
	SetPVarInt(playerid, "disabled", DISABLE_NONE);
 	switch(time - LastDeath[playerid]) {
        case 0 .. 3: {
            DeathSpam{playerid}++;
            if(DeathSpam{playerid} == 3) {
				return BanPlayer(playerid, INVALID_PLAYER_ID, "fake kills cheat");
			}
        }
        default: DeathSpam{playerid} = 0;
    }
    LastDeath[playerid] = time;
    PlayerInfo[playerid][pArmour] = 0;

    if(PlayerInfo[playerid][pJailed] == 1) {
		GetPlayerPos(playerid, PlayerInfo[playerid][pX], PlayerInfo[playerid][pY], PlayerInfo[playerid][pZ]);
    }
    
	if(AdminDuty[playerid] == 1) {
		GetPlayerPos(playerid, PlayerInfo[playerid][pX], PlayerInfo[playerid][pY], PlayerInfo[playerid][pZ]);
		return 1;
	}
	if(IsPlayerConnected(killerid) && killerid != INVALID_PLAYER_ID)	{
	    if(PlayerInfo[killerid][pJailed] == 2) {
	        format(string, sizeof(string), "{878EE7}[INFO]:{C8C8C8} tu condena ha sido aumentada en %d segundos, razón: DM.", DM_JAILTIME);
		    SendClientMessage(killerid,COLOR_LIGHTYELLOW2, string);
	        PlayerInfo[killerid][pJailTime] += DM_JAILTIME;
	    } else if(killerid != playerid) {
	    	//SetPlayerWantedLevelEx(killerid, GetPlayerWantedLevelEx(playerid)+1);

            //SetPlayerPos(playerid, 1181.2686, -1323.3832, 13.5842,271.5834);

            if(PlayerInfo[playerid][pWantedLevel] > 0 && PlayerInfo[killerid][pFaction] == FAC_PMA && CopDuty[killerid] == 1) {
				SendFMessage(killerid, COLOR_WHITE, "Has reducido a %s y ha sido arrestado por miembros del departamento de policía.", GetPlayerNameEx(playerid));
				PlayerInfo[playerid][pJailTime] = PlayerInfo[playerid][pWantedLevel] * 3 * 60;
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Has sido reducido y arrestado por miembros de la policía perdiendo todas las armas y drogas en el inventario.");
				format(string, sizeof(string), "[PMA]: %s ha reducido y arrestado al criminal %s (%d minutos).", GetPlayerNameEx(killerid), GetPlayerNameEx(playerid), PlayerInfo[playerid][pJailTime] / 60);
				SendFactionMessage(FAC_PMA, COLOR_PMA, string);
				PlayerInfo[playerid][pJailed] = 1;
				PlayerInfo[playerid][pX] = 264.6383;
				PlayerInfo[playerid][pY] = 81.9991;
				PlayerInfo[playerid][pZ] = 1001.0391;
				PlayerInfo[playerid][pA] = 267.0318;
				
				ResetPlayerWantedLevelEx(playerid);
				resetInv(playerid);
				FactionInfo[FAC_PMA][fBank] += PlayerInfo[playerid][pJailTime];
				SaveFactions();
			}
	    }
 	}
 	
	if(PlayerInfo[playerid][pJailed] == 0) {
		PlayerInfo[playerid][pHospitalized] = 1;
	}
	
	CopDuty[playerid] = 0;
	SIDEDuty[playerid] = 0;
	
	if(isHearingVehicleRedio[playerid])
		StopAudioStreamForPlayer(playerid);
		
	return 1;
}

public OnPlayerText(playerid, text[]) {
	new
		idx,
		string[128],
		tmp[256];

    if(!gPlayerLogged[playerid]) return 0;

	if(Muted[playerid])	{
		SendClientMessage(playerid, COLOR_RED, "{FF4600}[Error]:{C8C8C8} no puedes hablar, has sido silenciado.");
		return 0;
	}

	tmp = strtok(text, idx);

 	if((strcmp("(", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("("))) {
	    if(text[1] != 0) {
            PlayerLocalMessage(playerid, 15.0, text);
	   		return 0;
   		}
	}

	new name[24]; // Para ver si mandar mensajes desde la mascara
	if(isUsingMaskInSlot[playerid] == -1)
	    name = GetPlayerNameEx(playerid);
	else
		name = "Enmascarado";

	if(Mobile[playerid] == NUM_MISSION) {
		if((strcmp("si", text, true, strlen(text)) == 0) && (strlen(text) == strlen("si"))) {
			SendClientMessage(playerid, COLOR_FADE1, "Anónimo dice: ¡vamos, súbete a la van y di 'listo' una vez arriba!");
            Mobile[playerid] = NUM_MISSION2;
            jobDuty[playerid] = true;
            SetVehicleParamsForPlayer(FactionInfo[PlayerInfo[playerid][pFaction]][fMissionVeh], playerid, 1, 0);
		} else if((strcmp("no", text, true, strlen(text)) == 0) && (strlen(text) == strlen("no"))) {
			SendClientMessage(playerid, COLOR_FADE1, "Anónimo dice: tú te lo pierdes, adiós...");
            Mobile[playerid] = 255;
            PlayerActionMessage(playerid, 15.0, "guarda su teléfono celular en el bolsillo.");
		    eventStep[playerid] = 0;
		} else {
			SendClientMessage(playerid, COLOR_FADE1, "Anónimo dice: ¡no tengo tiempo para vueltas, di 'si' o 'no'!");
		}
		return 0;
	} else if(Mobile[playerid] == NUM_MISSION2) {
		if((strcmp("listo", text, true, strlen(text)) == 0) && (strlen(text) == strlen("listo"))) {
		    if(GetPlayerVehicleID(playerid) == FactionInfo[PlayerInfo[playerid][pFaction]][fMissionVeh]) {
				SendClientMessage(playerid, COLOR_FADE1, "Anónimo dice: te he marcado la localización en el GPS, vé a buscar los paquetes y llévalos a tu HQ.");
	            SetPlayerCheckpoint(playerid, 2792.4609, -2417.5508, 13.7599, 5.4);
	            eventStep[playerid] = 2;
	            Mobile[playerid] = 255;
				PlayerActionMessage(playerid, 15.0, "guarda su teléfono celular en el bolsillo.");
			} else {
			    SendClientMessage(playerid, COLOR_FADE1, "Anónimo dice: ¡súbete a la van, no tengo tiempo para vueltas!");
			}
		} else {
			SendClientMessage(playerid, COLOR_FADE1, "Anónimo dice: ¡no tengo tiempo para vueltas, di 'listo' una vez arriba!");
		}
		return 0;
	} else if(Mobile[playerid] == 911) {
		if((strcmp("policia", text, true, strlen(text)) == 0) && (strlen(text) == strlen("policia"))) {
			SendClientMessage(playerid, COLOR_FADE1, "Operadora dice: policía metropolitana, por favor de un breve informe de lo ocurrido.");
			Mobile[playerid] = 912;
			format(string, sizeof(string), "%s dice por teléfono: %s", name, text);
			ProxDetector(15.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		} else if((strcmp("paramedico", text, true, strlen(text)) == 0) && (strlen(text) == strlen("paramedico"))) {
			SendClientMessage(playerid, COLOR_FADE1, "Operadora dice: departamento de emergencias, por favor de un breve informe de lo ocurrido.");
			Mobile[playerid] = 913;
			format(string, sizeof(string), "%s dice por teléfono: %s", name, text);
			ProxDetector(15.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		} else {
			SendClientMessage(playerid, COLOR_FADE1, "Operadora dice: no le entiendo solo diga, policia o paramedico.");
		}
		return 0;
	} else if(Mobile[playerid] == 912) {
		if(!strlen(text)) {
			SendClientMessage(playerid, COLOR_FADE1, "Operadora dice: disculpe, no le entiendo...");
		} else {
			format(string, sizeof(string), "%s dice por teléfono: %s", name, text);
			ProxDetector(15.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			SendClientMessage(playerid, COLOR_FADE1, "Operadora dice: gracias, hemos alertado a todas las unidades en el área, mantenga la calma.");
            format(string, sizeof(string), "[Llamada al 911 del %d]: %s", PlayerInfo[playerid][pPhoneNumber], text);
			SendFactionMessage(FAC_PMA, COLOR_WHITE, string);
			Mobile[playerid] = 255;
			lastPoliceCallNumber = PlayerInfo[playerid][pPhoneNumber];
			GetPlayerPos(playerid, lastPoliceCallPos[0], lastPoliceCallPos[1], lastPoliceCallPos[2]);
		}
		return 0;
	} else if(Mobile[playerid] == 913) {
		if(!strlen(text)) {
			SendClientMessage(playerid, COLOR_FADE1, "Operadora dice: disculpe, no le entiendo...");
		} else {
			format(string, sizeof(string), "%s dice por teléfono: %s", name, text);
			ProxDetector(15.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			SendClientMessage(playerid, COLOR_FADE1, "Operadora dice: gracias, hemos alertado a todas las unidades, mantenga la calma.");
            format(string, sizeof(string), "[Llamada al 911 del %d]: %s", PlayerInfo[playerid][pPhoneNumber], text);
			SendFactionMessage(FAC_HOSP, COLOR_WHITE, string);
			Mobile[playerid] = 255;
			lastMedicCallNumber = PlayerInfo[playerid][pPhoneNumber];
			GetPlayerPos(playerid, lastMedicCallPos[0], lastMedicCallPos[1], lastMedicCallPos[2]);
		}
		return 0;
	} else if(Mobile[playerid] == 555) {
	    foreach(new i : Player) {
	        if(PlayerInfo[i][pFaction] == FAC_MECH && PlayerInfo[i][pJailed] == 0 && jobDuty[i]) {
	            SendFMessage(i, COLOR_GREEN, "Nuevo mensaje del %d: %s", PlayerInfo[playerid][pPhoneNumber], text);
				SendClientMessage(i, COLOR_WHITE, "Use /aceptar mecanico para aceptar la llamada.");
			}
	    }
		MechanicCall = playerid;
		Mobile[playerid] = 255;
		format(string, sizeof(string), "%s dice por teléfono: %s", name, text);
		ProxDetector(15.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
	    SendClientMessage(playerid,COLOR_WHITE,"Telefonista: un mecánico debería llegar a su posición en un momento, adiós.");
		return 0;
	} else if(Mobile[playerid] == 444) {
	    foreach(new i : Player) {
	        if(PlayerInfo[i][pJob] == JOB_TAXI && PlayerInfo[i][pJailed] == 0 && jobDuty[i]) {
	            SendClientMessage(i,COLOR_GREEN,"Se ha recibido un mensaje:");
				format(string,sizeof(string),"Voz al telefono: %s", text);
				SendClientMessage(i,COLOR_WHITE,string);
				SendClientMessage(i,COLOR_WHITE,"Use /aceptar taxi para aceptar la llamada.");
				SendClientMessage(playerid,COLOR_WHITE,"Telefonista: enviaremos un vehículo a su posición, por favor aguarde.");
				TaxiCall = playerid;
				Mobile[playerid] = 255;
			}
	    }
		return 0;
	} else if(Mobile[playerid] != 255) {
		format(string, sizeof(string), "%s dice por teléfono: %s", name, text);
		ProxDetector(15.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		if(IsPlayerConnected(Mobile[playerid]))
		{
		    format(string, sizeof(string), "[Voz al teléfono]: %s", text);
		    if(Mobile[Mobile[playerid]] == playerid)
				SendClientMessage(Mobile[playerid], COLOR_WHITE, string);
		} else {
			SendClientMessage(playerid, COLOR_LIGHTYELLOW2,"{FF4600}[Error]:{C8C8C8} no hay nadie en la línea.");
		}
		format(string, sizeof(string), "[IC-TELE] %s a %s (DBID: %d) : %s", GetPlayerNameEx(playerid), GetPlayerNameEx(Mobile[playerid]), PlayerInfo[Mobile[playerid]][pID], text);
		log(playerid, LOG_CHAT, string);
		return 0;
	}
	
  	if(!IsPlayerInAnyVehicle(playerid) || GetVehicleType(GetPlayerVehicleID(playerid)) != VTYPE_CAR) {
		format(string, sizeof(string), "%s dice: %s", name, text);
		ProxDetector(15.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		format(string, sizeof(string), "[IC-LOCAL] %s: %s", GetPlayerNameEx(playerid), text);
		log(playerid, LOG_CHAT, string);
	} else {
	    if(CarWindowStatus[GetPlayerVehicleID(playerid)] == 1) {
			format(string, sizeof(string), "[Ventanillas cerradas] %s dice: %s", name, text);
			ProxDetector(5.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		} else {
			format(string, sizeof(string), "[Ventanillas abiertas] %s dice: %s", name, text);
			ProxDetector(15.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		}
		format(string, sizeof(string), "[IC-LOCAL] %s: %s", GetPlayerNameEx(playerid), text);
		log(playerid, LOG_CHAT, string);
	}
	return 0;
}

public OnPlayerPrivmsg(playerid, recieverid, text[])
{
	new string[128];
	
	if(!PMsEnabled[recieverid] && !AdminDuty[playerid])
		return SendClientMessage(playerid,COLOR_LIGHTYELLOW2,"{FF4600}[Error]:{C8C8C8} el usuario ha bloqueado los susurros.");

	foreach(new i : Player)	{
		if(GetPVarInt(i, "pms") == 1)
			SendFMessage(i, 0x00D67FFF, "[OOC]: MP de %s(%d) a %s(%d): %s", GetPlayerNameEx(playerid),playerid,GetPlayerNameEx(recieverid),recieverid, text);
	}
	SendFMessage(recieverid, COLOR_MEDIUMBLUE, "[OOC]: MP de %s(%d): %s", GetPlayerNameEx(playerid),playerid, text);
	SendFMessage(playerid, COLOR_MEDIUMBLUE, "[OOC]: MP a %s(%d): %s", GetPlayerNameEx(recieverid),recieverid, text);
	log(playerid, LOG_CHAT, string);
	return 0;
}

public OnPlayerCommandPerformed(playerid, cmdtext[], success) {
	new string[128];
	new cmd[256];
	new idx;
	cmd = strtok(cmdtext, idx);
	new tmp[256];

	if(gPlayerLogged[playerid] == 1)
	{
		//===================================================[DYNAMIC HOUSES SYSTEM]=================================================
	 	if(strcmp(cmd, "/acdisp", true) == 0)
		{
			if(PlayerInfo[playerid][pAdmin] == 20)
			{
                for(new c=1;c<MAX_HOUSES;c++)
				{
				    if(House[c][HousePrice] == 0)
				    {
				    	format(string, sizeof(string), "{878EE7}[INFO]:{C8C8C8} la próxima casa disponible para su colocación es la: %d.", c);
						SendClientMessage(playerid, COLOR_ADMINCMD, string);
						return 1;
					}
				}
			}
			return 1;
		}
		if(strcmp(cmd, "/acinterior", true) == 0)
		{
		    if(IsPlayerConnected(playerid))
		    {
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /acinterior [idcasa] [id (1-42)]");
					return 1;
				}
				if (PlayerInfo[playerid][pAdmin] == 20)
				{
					new id;
					id = strval(tmp);
					tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /acinterior [idcasa] [id (1-42)]");
						return 1;
					}
					new id2;
					id2 = strval(tmp);
					if(id2 < 1 || id2 > 42) { SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{FF4600}[Error]:{C8C8C8} el interior debe estar entre 1-42."); return 1; }

					if(id2 == 1)
					{
						House[id][ExitX] = 235.508994;
						House[id][ExitY] = 1189.169897;
						House[id][ExitZ] = 1080.339966;
						//House[id][ExitAngle] = angle + 180;
						House[id][ExitInterior] = 3;
						format(string, sizeof string, "Casa: %d - descripción: grande - 3 dormitorios", id,id2);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     				else if(id2 == 2)
					{
						House[id][ExitX] = 225.756989;
						House[id][ExitY] = 1240.000000;
						House[id][ExitZ] = 1082.149902;
						House[id][ExitInterior] = 2;
						format(string, sizeof string, "Casa: %d - descripción: mediana - 1 dormitorios", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
					else if(id2 == 3)
					{
						House[id][ExitX] = 223.043991;
						House[id][ExitY] = 1289.259888;
						House[id][ExitZ] = 1082.199951;
						House[id][ExitInterior] = 1;
						format(string, sizeof string, "Casa: %d - descripción: pequeña - 1 dormitorio", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
         			else if(id2 == 4)
					{
						House[id][ExitX] = 225.630997; House[id][ExitY] = 1022.479980; House[id][ExitZ] = 1084.069946;
						House[id][ExitInterior] = 7;
						format(string, sizeof string, "Casa: %d - descripción: muy grande - 4 dormitorios", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     				else if(id2 == 5)
					{
						House[id][ExitX] = 295.138977; House[id][ExitY] = 1474.469971; House[id][ExitZ] = 1080.519897;
						House[id][ExitInterior] = 15;
						format(string, sizeof string, "Casa: %d - descripción: pequeña - 2 dormitorios", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     				else if(id2 == 6)
					{
						House[id][ExitX] = 327.9199;
						House[id][ExitY] = 1477.7240;
						House[id][ExitZ] = 1084.4375;
						House[id][ExitAngle] = 177.3231 + 180;
						House[id][ExitInterior] = 15;
						format(string, sizeof string, "Casa: %d - descripción: pequeña - 2 dormitorios", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
         			else if(id2 == 7)
				 	{
						House[id][ExitX] = 387.2003;
						House[id][ExitY] = 1471.7095;
						House[id][ExitZ] = 1080.1949;
						House[id][ExitAngle] = 270.7622 + 180;
						House[id][ExitInterior] = 15;
						format(string, sizeof string, "Casa: %d - descripción: pequeña - 1 dormitorio", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     				else if(id2 == 8)
					{
						House[id][ExitX] = 375.971985; House[id][ExitY] = 1417.269897; House[id][ExitZ] = 1081.409912;
						House[id][ExitInterior] = 15;
						format(string, sizeof string, "Casa: %d - descripción: pequeña - 1 dormitorio", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     				else if(id2 == 9)
					{
						House[id][ExitX] = 490.810974; House[id][ExitY] = 1401.489990; House[id][ExitZ] = 1080.339966;
						House[id][ExitInterior] = 2;
						format(string, sizeof string, "Casa: %d - descripción: grande - 3 dormitorios", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     			 	else if(id2 == 10)
					{
						House[id][ExitX] = 447.734985; House[id][ExitY] = 1400.439941; House[id][ExitZ] = 1084.339966;
						House[id][ExitInterior] = 2;
						format(string, sizeof string, "Casa: %d - descripción: mediana - 2 dormitorios", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     				else if(id2 == 11)
					{
						House[id][ExitX] = 227.722992; House[id][ExitY] = 1114.389893; House[id][ExitZ] = 1081.189941;
						House[id][ExitInterior] = 5;
						format(string, sizeof string, "Casa: %d - descripción: grande - 4 dormitorios", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     				else if(id2 == 12)
					{
						House[id][ExitX] = 260.983978; House[id][ExitY] = 1286.549927; House[id][ExitZ] = 1080.299927;
						House[id][ExitInterior] = 4;
						format(string, sizeof string, "Casa: %d - descripción: pequeña - 1 dormitorio", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     				else if(id2 == 13)
					{
						House[id][ExitX] = 221.666992; House[id][ExitY] = 1143.389893; House[id][ExitZ] = 1082.679932;
						House[id][ExitInterior] = 4;
						format(string, sizeof string, "Casa: %d - descripción: pequeña - 1 dormitorio", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
         			else if(id2 == 14)
					{
						House[id][ExitX] = 27.132700; House[id][ExitY] = 1341.149902; House[id][ExitZ] = 1084.449951;
						House[id][ExitInterior] = 10;
						format(string, sizeof string, "Casa: %d - descripción: mediana - 1 dormitorio", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
         			else if(id2 == 15)
					{
						House[id][ExitX] = -262.601990; House[id][ExitY] = 1456.619995; House[id][ExitZ] = 1084.449951;
						House[id][ExitInterior] = 4;
						format(string, sizeof string, "Casa: %d - descripción: grande - 1 dormitorio", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
         			else if(id2 == 16)
					{
						House[id][ExitX] = 22.778299; House[id][ExitY] = 1404.959961; House[id][ExitZ] = 1084.449951;
						House[id][ExitInterior] = 5;
						format(string, sizeof string, "Casa: %d - descripción: mediana - 2 dormitorios", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     				else if(id2 == 17)
					{
						House[id][ExitX] = 140.278000; House[id][ExitY] = 1368.979980; House[id][ExitZ] = 1083.969971;
						House[id][ExitInterior] = 5;
						format(string, sizeof string, "Casa: %d - descripción: grande - 4 dormitorios", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
         			else if(id2 == 18)
					{
						House[id][ExitX] = 234.045990; House[id][ExitY] = 1064.879883; House[id][ExitZ] = 1084.309937;
						House[id][ExitInterior] = 6;
						format(string, sizeof string, "Casa: %d - descripción: grande - 3 dormitorios", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     				else if(id2 == 19)
					{
						House[id][ExitX] = -68.294098; House[id][ExitY] = 1353.469971; House[id][ExitZ] = 1080.279907;
						House[id][ExitInterior] = 6;
						format(string, sizeof string, "Casa: %d - descripción: pequeña - ningún dormitorio", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
         			else if(id2 == 20)
					{
						House[id][ExitX] = -285.548981; House[id][ExitY] = 1470.979980; House[id][ExitZ] = 1084.449951;
						House[id][ExitInterior] = 15;
						format(string, sizeof string, "Casa: %d - descripción: mediana - 1 dormitorio - 1 living room - 1 cocina", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     				else if(id2 == 21)
					{
						House[id][ExitX] = -42.581997; House[id][ExitY] = 1408.109985; House[id][ExitZ] = 1084.449951;
						House[id][ExitInterior] = 8;
						format(string, sizeof string, "Casa: %d - descripción: pequeña - ningún dormitorio", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     				else if(id2 == 22)
				 	{
						House[id][ExitX] = 83.0659;
						House[id][ExitY] = 1322.3271;
						House[id][ExitZ] = 1083.8662;
						House[id][ExitAngle] = 175.1501 + 180;
						House[id][ExitInterior] = 9;
						format(string, sizeof string, "Casa: %d - descripción: mediana - 2 dormitorios", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     				else if(id2 == 23)
					{
						House[id][ExitX] = 260.941986; House[id][ExitY] = 1238.509888; House[id][ExitZ] = 1084.259888;
						House[id][ExitInterior] = 9;
						format(string, sizeof string, "Casa: %d - descripción: pequeña - 1 dormitorio", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     				else if(id2 == 24)
					{
						House[id][ExitX] = 244.411987; House[id][ExitY] = 305.032990; House[id][ExitZ] = 999.231995;
						House[id][ExitInterior] = 1;
						format(string, sizeof string, "Casa: %d - descripción: Denise's Bedroom", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     				else if(id2 == 25)
					{
						House[id][ExitX] = 271.884979; House[id][ExitY] = 306.631989; House[id][ExitZ] = 999.325989;
						House[id][ExitInterior] = 2;
						format(string, sizeof string, "Casa: %d - descripción: Katie's Bedroom", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
      		 		else if(id2 == 26)
					{
						House[id][ExitX] = 291.282990; House[id][ExitY] = 310.031982; House[id][ExitZ] = 999.154968;
						House[id][ExitInterior] = 3;
						format(string, sizeof string, "Casa: %d - descripción: Helena's Bedroom (barn) - limited movement.", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
         			else if(id2 == 27)
					{
						House[id][ExitX] = 302.181000; House[id][ExitY] = 300.722992; House[id][ExitZ] = 999.231995;
						House[id][ExitInterior] = 4;
						format(string, sizeof string, "Casa: %d - descripción: Michelle's Bedroom.", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
         			else if(id2 == 28)
					{
						House[id][ExitX] = 322.197998; House[id][ExitY] = 302.497986; House[id][ExitZ] = 999.231995;
						House[id][ExitInterior] = 5;
						format(string, sizeof string, "Casa: %d - descripción: Barbara's Bedroom.", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
         			else if(id2 == 29)
					{
						House[id][ExitX] = 346.870025; House[id][ExitY] = 309.259033; House[id][ExitZ] = 999.155700;
						House[id][ExitInterior] = 6;
						format(string, sizeof string, "Casa: %d - descripción: Millie's Bedroom.", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
         			else if(id2 == 30)
					{
						House[id][ExitX] = 2496.049805; House[id][ExitY] = -1693.929932; House[id][ExitZ] = 1014.750000;
						House[id][ExitInterior] = 3;
						format(string, sizeof string, "Casa: %d - descripción: CJ's Mom's House.", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     				else if(id2 == 31)
					{
						House[id][ExitX] = 1263.079956; House[id][ExitY] = -785.308960; House[id][ExitZ] = 1091.959961;
						House[id][ExitInterior] = 5;
						format(string, sizeof string, "Casa: %d - descripción: Madd Dogg's Mansion (West door).", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
         			else if(id2 == 32)
					{
						House[id][ExitX] = 2464.109863; House[id][ExitY] = -1698.659912; House[id][ExitZ] = 1013.509949;
						House[id][ExitInterior] = 2;
						format(string, sizeof string, "Casa: %d - descripción: Ryder's house.", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
         			else if(id2 == 33)
					{
						House[id][ExitX] = 2526.459961; House[id][ExitY] = -1679.089966; House[id][ExitZ] = 1015.500000;
						House[id][ExitInterior] = 1;
						format(string, sizeof string, "Casa: %d - descripción: Sweet's House (South side of house is fucked).", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     				else if(id2 == 34)
					{
						House[id][ExitX] = 2543.659912; House[id][ExitY] = -1303.629883; House[id][ExitZ] = 1025.069946;
						House[id][ExitInterior] = 2;
						format(string, sizeof string, "Casa: %d - descripción: Big Smoke's Crack Factory (Ground Floor).", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     				else if(id2 == 35)
					{
						House[id][ExitX] = 744.542969; House[id][ExitY] = 1437.669922; House[id][ExitZ] = 1102.739990;
						House[id][ExitInterior] = 6;
						format(string, sizeof string, "Casa: %d - descripción: Fanny Batter's Whore House.", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     				else if(id2 == 36)
					{
						House[id][ExitX] = 964.106995; House[id][ExitY] = -53.205498; House[id][ExitZ] = 1001.179993;
						House[id][ExitInterior] = 3;
						format(string, sizeof string, "Casa: %d - descripción: Tiger Skin Rug Brothel.", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     				else if(id2 == 37)
					{
						House[id][ExitX] = 2350.339844; House[id][ExitY] = -1181.649902; House[id][ExitZ] = 1028.000000;
						House[id][ExitInterior] = 5;
						format(string, sizeof string, "Casa: %d - descripción: Burning Desire Gang House.", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
         			else if(id2 == 38)
					{
						House[id][ExitX] = 2807.619873; House[id][ExitY] = -1171.899902; House[id][ExitZ] = 1025.579956;
						House[id][ExitInterior] = 8;
						format(string, sizeof string, "Casa: %d - descripción: Colonel Furhberger's House.", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
         			else if(id2 == 39)
					{
						House[id][ExitX] = 318.564972; House[id][ExitY] = 1118.209961; House[id][ExitZ] = 1083.979980;
						House[id][ExitInterior] = 5;
						format(string, sizeof string, "Casa: %d - descripción: Crack Den.", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
         			else if(id2 == 40)
					{
						House[id][ExitX] = 2324.419922; House[id][ExitY] = -1147.539917; House[id][ExitZ] = 1050.719971;
						House[id][ExitInterior] = 12;
						format(string, sizeof string, "Casa: %d - descripción: Unused Safe House.", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     				else if(id2 == 41)
					{
						House[id][ExitX] = 446.622986; House[id][ExitY] = 509.318970; House[id][ExitZ] = 1001.419983;
						House[id][ExitInterior] = 12;
						format(string, sizeof string, "Casa: %d - descripción: habitación motel Budget Inn.", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
         			else if(id2 == 42)
					{
						House[id][ExitX] = 2216.339844; House[id][ExitY] = -1150.509888; House[id][ExitZ] = 1025.799927;
						House[id][ExitInterior] = 15;
						format(string, sizeof string, "Casa: %d - descripción: Jefferson Motel. (REALLY EXPENSIVE)", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
					saveHouse(id);
				}
			}
			return 1;
		}
	 	if(strcmp(cmd, "/acprecio", true) == 0)
		{
		    if(IsPlayerConnected(playerid))
		    {
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /acprecio [idcasa] [price]");
					return 1;
				}
				if (PlayerInfo[playerid][pAdmin] == 20)
				{
						new id;
						id = strval(tmp);
						tmp = strtok(cmdtext, idx);
						if(!strlen(tmp))
						{
							SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /acprecio [idcasa] [price]");
							return 1;
						}
						new id2;
						id2 = strval(tmp);
						House[id][HousePrice] = id2;
						new form[128];
						format(form, sizeof form, "{878EE7}[INFO]:{C8C8C8} el precio de la casa %d ha sido ajustado a $%d.", id,id2);
						resetLocker(id);
						SendClientMessage(playerid, COLOR_ADMINCMD,form);
						saveHouse(id);
				}
			}
			return 1;
		}
	 	if(strcmp(cmd, "/acvender", true) == 0)
		{
		    if(IsPlayerConnected(playerid))
		    {
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /acvender [idcasa]");
					return 1;
				}
				new id = strval(tmp);
				if(PlayerInfo[playerid][pAdmin] == 20)
				{
				    new pconnected = 0;
					if(House[id][Owned] == 1) {
			 			foreach(new i : Player)	{
							if(PlayerInfo[i][pHouseKey] == id) {
							    PlayerInfo[i][pHouseKey] = 0;
							    pconnected = 1;
							}
						}
						if(pconnected == 0)	{
      						format(string, sizeof(string), "UPDATE `accounts` SET `HouseKey` = 0 WHERE `Name` = '%s' AND `HouseKey` = %d", House[id][Owner], id);
							mysql_function_query(dbHandle, string, false, "", "");
						}
					}
					House[id][Locked] = 1;
					House[id][Owned] = 0;
					strmid(House[id][Owner], "Ninguno", 0, strlen("Ninguno"), 255);
					saveHouse(id);
					new form[128];
					format(form, sizeof(form), "{878EE7}[INFO]:{C8C8C8} la casa %d ha sido vendida.", id);
					SendClientMessage(playerid, COLOR_ADMINCMD, form);
				}
			}
			return 1;
		}
		if(strcmp(cmd, "/acentrada", true) == 0)
		{
		    if(IsPlayerConnected(playerid))
		    {
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /acentrada [idcasa]");
					return 1;
				}
				new id = strval(tmp);
				if (PlayerInfo[playerid][pAdmin] == 20)
				{
					new Float:x,Float:y,Float:z;
					GetPlayerPos(playerid, x, y, z);
					House[id][EntranceX] = x;
					House[id][EntranceY] = y;
					House[id][EntranceZ] = z;
					House[id][EntranceInterior] = GetPlayerInterior(playerid);
	  				new Float:angle;
					GetPlayerFacingAngle(playerid, angle);
					House[id][EntranceAngle] = angle + 180;

					saveHouse(id);
				}
			}
			return 1;
		}
		if(strcmp(cmd, "/acsalida", true) == 0)
		{
		    if(IsPlayerConnected(playerid))
		    {
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /acsalida [idcasa]");
					return 1;
				}
				new id = strval(tmp);
				if (PlayerInfo[playerid][pAdmin] == 20)
				{
					new Float:x,Float:y,Float:z;
					GetPlayerPos(playerid, x, y, z);
					House[id][ExitX] = x;
					House[id][ExitY] = y;
					House[id][ExitZ] = z;
					House[id][ExitInterior] = GetPlayerInterior(playerid);
	  				new Float:angle;
					GetPlayerFacingAngle(playerid, angle);
					House[id][ExitAngle] = angle + 180;
					saveHouse(id);
					new form[128];
					format(form, sizeof(form), "{878EE7}[INFO]:{C8C8C8} la salida de la casa %d ha sido cambiada a tu posición.", id);
					SendClientMessage(playerid, COLOR_ADMINCMD, form);
				}
			}
			return 1;
		}
	 	if(strcmp(cmd, "/acdesc", true) == 0)
		{
		    if(IsPlayerConnected(playerid))
		    {
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /acdesc [idcasa] [descripción]");
					return 1;
				}
				new id = strval(tmp);
				if (PlayerInfo[playerid][pAdmin] == 20)
				{
					new length = strlen(cmdtext);
					while ((idx < length) && (cmdtext[idx] <= ' '))
					{
						idx++;
					}
					new offset = idx;
					new result[128];
					while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
					{
						result[idx - offset] = cmdtext[idx];
						idx++;
					}
					result[idx - offset] = EOS;
					if(!strlen(result))
					{
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /acdesc [idcasa] [descripción]");
						return 1;
					}
					if(strfind( result , "|" , true ) == -1)
	    			{
			   			strmid(House[id][Description], (result), 0, strlen((result)), 128);
						format(string, sizeof(string), "{878EE7}[INFO]:{C8C8C8} la descripción de la casa %d ha sido cambiada a %s.", id,(result));
						SendClientMessage(playerid, COLOR_ADMINCMD, string);
						saveHouse(id);
					}
	 				else
					{
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{FF4600}[Error]:{C8C8C8} el símbolo | no está permitido.");
					}
				}
			}
			return 1;
		}
		//==========================================================================================================================
		if(strcmp(cmdtext,"/sinfo",true)==0)
		{
			if (PlayerInfo[playerid][pAdmin] >= 4)
			{
				new form[128];
				SendClientMessage(playerid, COLOR_WHITE,"Server Statistics:");
				format(form, sizeof form, "{878EE7}[INFO]:{C8C8C8} Total Objects: %d.", GetObjectCount());
				SendClientMessage(playerid, COLOR_LIGHTYELLOW2,form);
				format(form, sizeof form, "{878EE7}[INFO]:{C8C8C8} Total Vehicles: %d.", GetVehicleCount());
				SendClientMessage(playerid, COLOR_LIGHTYELLOW2,form);
				//format(form, sizeof form, "{878EE7}[INFO]:{C8C8C8} Total Pickups: %d.", CountStreamPickups());
				//SendClientMessage(playerid, COLOR_LIGHTYELLOW2,form);
			}
			else
			{
				SendClientMessage(playerid, COLOR_RED,"Your not an administrator or an administrator with the required level.");
			}
			return 1;
		}
	//--------------------------------------------------------------------------------------------------------------------------
	//=====================================================================================================================
		if(strcmp(cmd,"/toggle",true)==0)
		{
	 	if(IsPlayerConnected(playerid))
	 	{
			new x_info[128];
			x_info = strtok(cmdtext, idx);
			if(!strlen(x_info))
			{
				SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /toggle [gasoil - mps - telefono - noticias - faccion - radio]");
				return 1;
			}
			if(strcmp(x_info,"gasoil",true) == 0)
			{
				if(ShowFuel[playerid] == 1)
				{
					SendClientMessage(playerid,COLOR_LIGHTYELLOW2, "Ya no verás información de la gasolina.");
					ShowFuel[playerid] = 0;
				}
				else
				{
				    SendClientMessage(playerid,COLOR_LIGHTYELLOW2, "Ahora verás información de la gasolina.");
				    ShowFuel[playerid] = 1;
				}
			}
	  		else if(strcmp(x_info,"mps",true) == 0)
			{
				if(PMsEnabled[playerid])
				{
				    SendClientMessage(playerid,COLOR_LIGHTYELLOW2, "Ya no recibirás mensajes privados.");
				    PMsEnabled[playerid] = 0;
				}
				else
				{
					SendClientMessage(playerid,COLOR_LIGHTYELLOW2, "Ahora recibirás mensajes privados.");
				    PMsEnabled[playerid] = 1;
				}
			}
	  		else if(strcmp(x_info,"noticias",true) == 0)
			{
				if(NewsEnabled[playerid])
				{
				    SendClientMessage(playerid,COLOR_LIGHTYELLOW2, "Ya no recibirás noticias de CTR-MAN.");
				    NewsEnabled[playerid] = 0;
				}
				else
				{
					SendClientMessage(playerid,COLOR_LIGHTYELLOW2, "Ahora recibirás noticias de CTR-MAN.");
				    NewsEnabled[playerid] = 1;
				}
			}
 			else if(strcmp(x_info,"faccion",true) == 0)
			{
				if(FactionEnabled[playerid])
				{
				    SendClientMessage(playerid,COLOR_LIGHTYELLOW2, "Ya no recibirás mensajes OOC de tu facción.");
				    FactionEnabled[playerid] = 0;
				}
				else
				{
					SendClientMessage(playerid,COLOR_LIGHTYELLOW2, "Ahora recibirás mensajes OOC de tu facción.");
				    FactionEnabled[playerid] = 1;
				}
			}
 			else if(strcmp(x_info,"radio",true) == 0)
			{
				if(RadioEnabled[playerid])
				{
				    SendClientMessage(playerid,COLOR_LIGHTYELLOW2, "Has apagado tu radio.");
				    RadioEnabled[playerid] = 0;
				}
				else
				{
					SendClientMessage(playerid,COLOR_LIGHTYELLOW2, "Has encendido tu radio.");
				    RadioEnabled[playerid] = 1;
				}
			}
	  		else if(strcmp(x_info,"telefono",true) == 0)
			{
				if(PhoneOnline[playerid])
				{
				    SendClientMessage(playerid,COLOR_LIGHTYELLOW2, "Has encendido tu teléfono.");
		            PhoneOnline[playerid] = 0;
				}
				else
				{
					SendClientMessage(playerid,COLOR_LIGHTYELLOW2, "Has apagado tu teléfono.");
				    PhoneOnline[playerid] = 1;
				}
			}
		}
		return 1;
		}
		if(strcmp(cmd, "/togglegooc", true) == 0)
		{
		    if(IsPlayerConnected(playerid))
		    {
				if (PlayerInfo[playerid][pAdmin] >= 2)
				{
				    if(OOCStatus)
				    {
				        OOCStatus = 0;
				        format(string, sizeof(string), "[OOC Global]: desactivado por %s.", GetPlayerNameEx(playerid));
						SendClientMessageToAll(COLOR_ADMINCMD, string);
					}
					else
					{
						OOCStatus = 1;
						format(string, sizeof(string), "[OOC Global]: activado por %s.", GetPlayerNameEx(playerid));
						SendClientMessageToAll(COLOR_ADMINCMD, string);
					}
					log(playerid, LOG_ADMIN, string);
				}
			}
			return 1;
		}
	 	if(strcmp(cmd, "/id", true) == 0)
		{
		    if(IsPlayerConnected(playerid))
		    {
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /id [ID/Jugador]");
					return 1;
				}
				new target;
				target = ReturnUser(tmp);
				new sstring[70];
				if(IsPlayerConnected(target))
				{
				    if(target != INVALID_PLAYER_ID)
				    {
						format(sstring, sizeof(sstring), "{878EE7}[INFO]:{C8C8C8} Nombre: %s (ID: %d).",GetPlayerNameEx(target),target);
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, sstring);
					}
				}
			}
			return 1;
		}
		if(strcmp(cmd, "/ppvehiculos", true) == 0)
		{
		    if(IsPlayerConnected(playerid))
		    {
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /ppvehiculos [porcentaje del precio]");
					return 1;
				}
				new perc = strval(tmp);
				if(PlayerInfo[playerid][pAdmin] >= 20)
				{
					if(perc <= 1000 && perc >= 1)
					{
					    ServerInfo[sVehiclePricePercent] = perc;
					    format(string, sizeof(string), "{878EE7}[INFO]:{C8C8C8} el porcentaje de costo de los vehículos ha sido ajustado a %d por ciento.", perc);
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, string);
					}
					else
					{
					    SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{FF4600}[Error]:{C8C8C8} el porcentaje no puede ser menor a 1 o mayor a 1000.");
					}
				}
			}
			return 1;
		}
		if(strcmp(cmd, "/admins", true) == 0)
		{
	        if(IsPlayerConnected(playerid))
		    {
		        new count = 0;
				SendClientMessage(playerid, COLOR_LIGHTGREEN, "====================[ADMINISTRADORES EN SERVICIO]===================");
				foreach(new i : Player) {
				    if(PlayerInfo[i][pAdmin] >= 1 && AdminDuty[i] == 1) {
						format(string, 256, "Administrador: %s", GetPlayerNameEx(i));
						SendClientMessage(playerid, COLOR_WHITE, string);
						count++;
					}
				}
				if(count == 0)
				{
					SendClientMessage(playerid,COLOR_WHITE,"{878EE7}[INFO]:{C8C8C8} No hay administradores en servicio.");
				}
            	SendClientMessage(playerid, COLOR_LIGHTGREEN, "===================================================================");
			}
			return 1;
		}
	 	if(strcmp(cmd, "/changepass", true) == 0)
		{
		    if(IsPlayerConnected(playerid))
		    {
				if (gPlayerLogged[playerid])
				{
					new length = strlen(cmdtext);
					while ((idx < length) && (cmdtext[idx] <= ' '))
					{
						idx++;
					}
					new offset = idx;
					new result[128];
					while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
					{
						result[idx - offset] = cmdtext[idx];
						idx++;
					}
					result[idx - offset] = EOS;
					if(!strlen(result))
					{
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /changepass [nueva contraseña]");
						return 1;
					}
					mysql_real_escape_string(result, result);
		   			strmid(PlayerInfo[playerid][pKey], (result), 0, strlen((result)), 128);
					format(string, sizeof(string), "{878EE7}[INFO]:{C8C8C8} has cambiado tu contraseña.");
					SendClientMessage(playerid, COLOR_ADMINCMD, string);
                    format(string, sizeof(string), "UPDATE accounts SET Password=MD5('%s') WHERE Id=%d;", result, PlayerInfo[playerid][pID]);
					mysql_function_query(dbHandle, string, false, "", "");
				}
			}
			return 1;
		}
	 	if(strcmp(cmd, "/do", true) == 0)
		{
		    if(IsPlayerConnected(playerid))
		    {
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[128];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /do [acción]");
					return 1;
				}
				new form[128];
				format(form, sizeof(form), "%s", result);
				PlayerDoMessage(playerid, 15.0, form);
			}
			return 1;
		}
		if(strcmp(cmd, "/stats", true) == 0)
		{
			ShowStats(playerid,playerid, false);
			return 1;
		}
		if(strcmp(cmd, "/aeconomia", true) == 0)
		{
			SendClientMessage(playerid,COLOR_LIGHTYELLOW2,"[Nivel 20]: /ppvehiculos");
			return 1;
		}
	 	if(strcmp(cmd, "/donar", true) == 0)
		{
		    if(IsPlayerConnected(playerid))
		    {
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /donar [cantidad]");
					return 1;
				}
				new moneys;
				moneys = strval(tmp);
				if(moneys < 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{FF4600}[Error]:{C8C8C8} cantidad inválida.");
					return 1;
				}
				if(GetPlayerCash(playerid) < moneys)
				{
				    SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{FF4600}[Error]:{C8C8C8} ¡no tienes esa cantidad!");
					return 1;
				}
				GivePlayerCash(playerid, -moneys);
				format(string, sizeof(string), "{878EE7}[INFO]:{C8C8C8} %s ha donado $%d.", GetPlayerNameEx(playerid), moneys);
				AdministratorMessage(COLOR_LIGHTYELLOW2, string, 1);
				log(playerid, LOG_MONEY, string);
			}
			return 1;
		}
	 	if(strcmp(cmd, "/up", true) == 0)
		{
		    if(IsPlayerConnected(playerid))
		    {
				if (PlayerInfo[playerid][pAdmin] >= 1)
				{
					new Float:slx, Float:sly, Float:slz;
					GetPlayerPos(playerid, slx, sly, slz);
					SetPlayerPos(playerid, slx, sly, slz+2);
					return 1;
				}
			}
			return 1;
		}
	 	if(strcmp(cmd, "/gametext", true) == 0)
		{
		    if(IsPlayerConnected(playerid))
		    {
				if (PlayerInfo[playerid][pAdmin] >= 4)
				{
					new length = strlen(cmdtext);
					while ((idx < length) && (cmdtext[idx] <= ' '))
					{
						idx++;
					}
					new offset = idx;
					new result[64];
					while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
					{
						result[idx - offset] = cmdtext[idx];
						idx++;
					}
					result[idx - offset] = EOS;
					if(!strlen(result))
					{
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /gametext [textformat ~n~=Newline ~r~=Red ~g~=Green ~b~=Blue ~w~=White ~y~=Yellow]");
						return 1;
					}
					format(string, sizeof(string), "~b~%s: ~w~%s",GetPlayerNameEx(playerid),result);
					foreach(new i : Player)
					{
						GameTextForPlayer(i, string, 5000, 6);
					}
					return 1;
				}
			}
			return 1;
		}
	 	/*if (strcmp(cmd, "/logoutall", true) ==0 )
		{
		    if(IsPlayerConnected(playerid))
		    {
				if (PlayerInfo[playerid][pAdmin] >= 10)
				{
					foreach(new i : Player)
					{
						gPlayerLogged[i] = 0;
					}
					SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[SUCCESS]: All players logged out.");
				}
			}
			return 1;
		}*/
		if(strcmp(cmd, "/unknowngametext", true) == 0)
		{
		    if(IsPlayerConnected(playerid))
		    {
				if (PlayerInfo[playerid][pAdmin] >= 20)
				{
					tmp = strtok(cmdtext, idx);
					new txtid;
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /unknowngametext ");
						return 1;
					}
					txtid = strval(tmp);
					if(txtid == 2)
					{
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{FF4600}[Error]:{C8C8C8} ");
						return 1;
					}
					new length = strlen(cmdtext);
					while ((idx < length) && (cmdtext[idx] <= ' '))
					{
						idx++;
					}
					new offset = idx;
					new result[128];
					while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
					{
						result[idx - offset] = cmdtext[idx];
						idx++;
					}
					result[idx - offset] = EOS;
					if(!strlen(result))
					{
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /unknowngametext <type> [cnnc textformat ~n~=Newline ~r~=Red ~g~=Green ~b~=Blue ~w~=White ~y~=Yellow]");
						return 1;
					}
					format(string, sizeof(string), "~w~%s",result);
					foreach(new i : Player)
					{

							GameTextForPlayer(i, string, 5000, txtid);

					}
					return 1;
				}
			}
			return 1;
		}
	}
	else
	{
		return 1;
	}
	/*if(success == 0)
	{
		SendClientMessage(playerid,COLOR_LIGHTBLUE,"{878EE7}[INFO]:{C8C8C8} comando inválido, escribe /ayuda para ver una lista con los mismos.");
	}*/
	return 1;
}

public OnPlayerCommandReceived(playerid, cmdtext[]) {
    return 1;
}

forward tutorial(playerid, step);
public tutorial(playerid, step) {
	for(new i = 0; i < 7; i++) {
	    PlayerTextDrawShow(playerid, TutTD_Text[playerid][i]);
	    PlayerTextDrawSetString(playerid, TutTD_Text[playerid][i], " ");
	}
	TextDrawShowForPlayer(playerid, TutTDBackground);
	
	switch(step) {
	    case 1: {
	        PlayAudioStreamForPlayer(playerid, "http://www.isamp.com.ar/streamtest.mp3");
	        
	        for(new i = 0; i < 32; i++) {
	            SendClientMessage(playerid, COLOR_WHITE, " ");
	        }
			
	    	SetPlayerCameraPos(playerid, 1466.869506, -1575.771972, 109.123466);
			SetPlayerCameraLookAt(playerid, 1470.403442, -1574.002441, 109.740196);
			PlayerTextDrawSetString(playerid, TutTD_Text[playerid][0], "~b~~h~~h~Bienvenido a Malos Aires");
            PlayerTextDrawSetString(playerid, TutTD_Text[playerid][1], "~w~El breve tutorial a continuacion te guiara por los conceptos basicos del RolePlay.");
            PlayerTextDrawSetString(playerid, TutTD_Text[playerid][2], "~w~Al finalizar deberas responder con verdadero o falso una serie de preguntas para asegurarnos que lo hayas entendido correctamente.");
			SetPVarInt(playerid, "tutTimer", SetTimerEx("tutorial", 15000, false, "ii", playerid, step + 1));
	    }
	    case 2: {
			InterpolateCameraPos(playerid, 1466.869506, -1575.771972, 109.123466, 1481.400268, -1576.889038, 90.823272, 3000, 1);
			InterpolateCameraLookAt(playerid, 1470.403442, -1574.002441, 109.740196, 1481.267700, -1580.246704, 88.653373, 3000, 1);

			PlayerTextDrawSetString(playerid, TutTD_Text[playerid][0], "~b~~h~~h~Concepto de RolePlay:~w~ MARP es un servidor basado en la ciudad ficticia de Malos Aires. Dentro");
			PlayerTextDrawSetString(playerid, TutTD_Text[playerid][1], "~w~de un juego de rol tu personaje debe actuar como lo haria un humano en la vida real, es decir, se debe");
			PlayerTextDrawSetString(playerid, TutTD_Text[playerid][2], "~w~comportar como una persona comun y corriente que vive dentro de un mundo PARALELO.");
			PlayerTextDrawSetString(playerid, TutTD_Text[playerid][3], "~w~Recuerda los siguientes terminos:");
			PlayerTextDrawSetString(playerid, TutTD_Text[playerid][4], "~b~~h~~h~OOC:~w~ fuera del personaje en ingles (/b, /gooc).");
			PlayerTextDrawSetString(playerid, TutTD_Text[playerid][5], "~b~~h~~h~IC:~w~ dentro del personaje (local, /gritar).");
					
			SetPVarInt(playerid, "tutTimer", SetTimerEx("tutorial", 15000, false, "ii", playerid, step + 1));
	    }
		case 3: {
			PlayerTextDrawSetString(playerid, TutTD_Text[playerid][0], "~b~~h~~h~Normas basicas a respetar:");
            PlayerTextDrawSetString(playerid, TutTD_Text[playerid][1], "~w~Lo siguiente esta prohibido y sera sancionado dentro del servidor.");
			PlayerTextDrawSetString(playerid, TutTD_Text[playerid][2], "~b~~h~~h~MetaGaming [MG]:~w~ utilizar informacion ~b~OOC~w~ dentro de un canal ~b~IC~w~.");
			PlayerTextDrawSetString(playerid, TutTD_Text[playerid][3], "~w~Ejemplo: nombrar a otro personaje solo con verle el tag encima de su cabeza en vez de preguntarselo.");
			PlayerTextDrawSetString(playerid, TutTD_Text[playerid][4], "~b~~h~~h~DeathMatch [DM]:~w~ agredir fisicamente a otro personaje sin ninguna razon rolera.");
			PlayerTextDrawSetString(playerid, TutTD_Text[playerid][5], "~b~~h~~h~PowerGaming [PG]:~w~ realizar hazanas imposibles, como arrojarse de un precipicio y salir ileso o");
			PlayerTextDrawSetString(playerid, TutTD_Text[playerid][6], "~w~forzar el rol de otro personaje. Es posible caer de dicho precipicio si el hecho es roleado correctamente.");
			PlayerTextDrawSetString(playerid, TutTD_Text[playerid][7], "~w~Si ves a otra persona incumpliendo con las normas utiliza ~b~~h~~h~~h~~h~/reportar");

			SetPVarInt(playerid, "tutTimer", SetTimerEx("tutorial", 15000, false, "ii", playerid, step + 1));
	    }
	    case 4: {
	        PlayerTextDrawSetString(playerid, TutTD_Text[playerid][0], "~w~En la ciudad de Malos Aires, hay una gran cantidad de empleos y roles disponibles. Como por ejemplo...");
	    	SetPVarInt(playerid, "tutTimer", SetTimerEx("tutorial", 15000, false, "ii", playerid, step + 1));
	    }
	    case 5: {
	    	InterpolateCameraPos(playerid, 1481.400268, -1576.889038, 90.823272, 1494.139770, -1643.703613, 60.716976, 3000, 1);
			InterpolateCameraLookAt(playerid, 1481.267700, -1580.246704, 88.653373, 1497.297119, -1644.638916, 58.446140, 3000, 1);
	    
	        PlayerTextDrawSetString(playerid, TutTD_Text[playerid][0], "~w~En la ciudad de Malos Aires, hay una gran cantidad de empleos y roles disponibles. Como por ejemplo...");
	        PlayerTextDrawSetString(playerid, TutTD_Text[playerid][1], "~b~~h~~h~ - oficial de policia");

			SetPVarInt(playerid, "tutTimer", SetTimerEx("tutorial", 15000, false, "ii", playerid, step + 1));
	    }
	    case 6: {
	    	InterpolateCameraPos(playerid, 1494.139770, -1643.703613, 60.716976, 1288.580200, -1241.240356, 95.973281, 3000, CAMERA_CUT);
			InterpolateCameraLookAt(playerid, 1497.297119, -1644.638916, 58.446140, 1285.706665, -1243.337768, 94.144744, 3000, CAMERA_CUT);
			InterpolateCameraPos(playerid, 1288.580200, -1241.240356, 95.973281, 1211.487670, -1293.440307, 27.860240, 3000, 1);
			InterpolateCameraLookAt(playerid, 1285.706665, -1243.337768, 94.144744, 1208.612304, -1295.868041, 26.504356, 3000, 1);
			
			PlayerTextDrawSetString(playerid, TutTD_Text[playerid][0], "~w~En la ciudad de Malos Aires, hay una gran cantidad de empleos y roles disponibles. Como por ejemplo...");
			PlayerTextDrawSetString(playerid, TutTD_Text[playerid][1], "~b~~h~~h~ - oficial de policia");
			PlayerTextDrawSetString(playerid, TutTD_Text[playerid][2], "~b~~h~~h~ - paramedico");

			SetPVarInt(playerid, "tutTimer", SetTimerEx("tutorial", 15000, false, "ii", playerid, step + 1));
	    }
	    case 7: {
	        InterpolateCameraPos(playerid, 1211.487670, -1293.440307, 27.860240, 1892.619873, -1798.850219, 68.025955, 3000, CAMERA_CUT);
			InterpolateCameraLookAt(playerid, 1208.612304, -1295.868041, 26.504356, 1889.938354, -1801.596801, 66.900779, 3000, CAMERA_CUT);
			InterpolateCameraPos(playerid, 1892.619873, -1798.850219, 68.025955, 1830.553344, -1882.067016, 33.868297, 3000, 1);
			InterpolateCameraLookAt(playerid, 1889.938354, -1801.596801, 66.900779, 1827.444335, -1883.833740, 32.075828, 3000, 1);
			
			PlayerTextDrawSetString(playerid, TutTD_Text[playerid][0], "~w~En la ciudad de Malos Aires, hay una gran cantidad de empleos y roles disponibles. Como por ejemplo...");
			PlayerTextDrawSetString(playerid, TutTD_Text[playerid][1], "~b~~h~~h~ - oficial de policia");
			PlayerTextDrawSetString(playerid, TutTD_Text[playerid][2], "~b~~h~~h~ - paramedico");
			PlayerTextDrawSetString(playerid, TutTD_Text[playerid][3], "~b~~h~~h~ - taxista");

			SetPVarInt(playerid, "tutTimer", SetTimerEx("tutorial", 15000, false, "ii", playerid, step + 1));
	    }
	    case 8: {
	    	InterpolateCameraPos(playerid, 1830.553344, -1882.067016, 33.868297, 2217.920654, -2129.320312, 59.432971, 3000, CAMERA_CUT);
			InterpolateCameraLookAt(playerid, 1827.444335, -1883.833740, 32.075828, 2218.117675, -2133.008789, 57.897941, 3000, CAMERA_CUT);
			InterpolateCameraPos(playerid, 2217.920654, -2129.320312, 59.432971, 2246.860839, -2233.512207, 23.764274, 3000, 1);
			InterpolateCameraLookAt(playerid, 2218.117675, -2133.008789, 57.897941, 2243.064697, -2232.351562, 23.272230, 3000, 1);

			PlayerTextDrawSetString(playerid, TutTD_Text[playerid][0], "~w~En la ciudad de Malos Aires, hay una gran cantidad de empleos y roles disponibles. Como por ejemplo...");
			PlayerTextDrawSetString(playerid, TutTD_Text[playerid][1], "~b~~h~~h~ - oficial de policia");
			PlayerTextDrawSetString(playerid, TutTD_Text[playerid][2], "~b~~h~~h~ - paramedico");
			PlayerTextDrawSetString(playerid, TutTD_Text[playerid][3], "~b~~h~~h~ - taxista");
			PlayerTextDrawSetString(playerid, TutTD_Text[playerid][4], "~b~~h~~h~ - camionero");

			SetPVarInt(playerid, "tutTimer", SetTimerEx("tutorial", 15000, false, "ii", playerid, step + 1));
	    }
	    case 9: {
	    	InterpolateCameraPos(playerid, 2246.860839, -2233.512207, 23.764274, 60.416469, -198.172134, 64.205131, 3000, CAMERA_CUT);
			InterpolateCameraLookAt(playerid, 2243.064697, -2232.351562, 23.272230, 58.964233, -194.497375, 63.582897, 3000, CAMERA_CUT);
	    	InterpolateCameraPos(playerid, 60.416469, -198.172134, 64.205131, -37.132026, 123.020172, 33.543777, 5000, 1);
			InterpolateCameraLookAt(playerid, 58.964233, -194.497375, 63.582897, -37.137905, 119.544448, 31.564058, 5000, 1);
			
			PlayerTextDrawSetString(playerid, TutTD_Text[playerid][0], "~w~En la ciudad de Malos Aires, hay una gran cantidad de empleos y roles disponibles. Como por ejemplo...");
			PlayerTextDrawSetString(playerid, TutTD_Text[playerid][1], "~b~~h~~h~ - oficial de policia");
			PlayerTextDrawSetString(playerid, TutTD_Text[playerid][2], "~b~~h~~h~ - paramedico");
			PlayerTextDrawSetString(playerid, TutTD_Text[playerid][3], "~b~~h~~h~ - taxista");
			PlayerTextDrawSetString(playerid, TutTD_Text[playerid][4], "~b~~h~~h~ - camionero");
			PlayerTextDrawSetString(playerid, TutTD_Text[playerid][5], "~b~~h~~h~ - granjero");

			SetPVarInt(playerid, "tutTimer", SetTimerEx("tutorial", 15000, false, "ii", playerid, step + 1));
	    }
	    case 10: {
	    	SetPlayerCameraPos(playerid, 1466.869506, -1575.771972, 109.123466);
			SetPlayerCameraLookAt(playerid, 1470.403442, -1574.002441, 109.740196);
			InterpolateCameraPos(playerid, 1466.869506, -1575.771972, 109.123466, 1481.400268, -1576.889038, 90.823272, 3000, 1);
			InterpolateCameraLookAt(playerid, 1470.403442, -1574.002441, 109.740196, 1481.267700, -1580.246704, 88.653373, 3000, 1);
			
			PlayerTextDrawSetString(playerid, TutTD_Text[playerid][0], "~w~En la ciudad de Malos Aires, hay una gran cantidad de empleos y roles disponibles. Como por ejemplo...");
			PlayerTextDrawSetString(playerid, TutTD_Text[playerid][1], "~b~~h~~h~ - oficial de policia");
			PlayerTextDrawSetString(playerid, TutTD_Text[playerid][2], "~b~~h~~h~ - paramedico");
			PlayerTextDrawSetString(playerid, TutTD_Text[playerid][3], "~b~~h~~h~ - taxista");
			PlayerTextDrawSetString(playerid, TutTD_Text[playerid][4], "~b~~h~~h~ - camionero");
			PlayerTextDrawSetString(playerid, TutTD_Text[playerid][5], "~b~~h~~h~ - granjero");
			PlayerTextDrawSetString(playerid, TutTD_Text[playerid][6], "~b~~h~~h~ - entre muchos otros...");
			PlayerTextDrawSetString(playerid, TutTD_Text[playerid][7], "~w~Pero tambien puedes crear los tuyos contratando a otras personas o trabajando para ellas.");
			
			SetPVarInt(playerid, "tutTimer", SetTimerEx("tutorial", 15000, false, "ii", playerid, step + 1));
	    }
	    case 11: {
			for(new i = 0; i < 7; i++) {
			    PlayerTextDrawHide(playerid, TutTD_Text[playerid][i]);
			}
			TextDrawHideForPlayer(playerid, TutTDBackground);
	        ShowPlayerDialog(playerid, DLG_TUT1, DIALOG_STYLE_LIST, "Escoge una forma válida para averiguar el nombre de un personaje", "Le pregunto por un canal IC\nLe pregunto discretamente por un canal OOC\nLe pregunto por facebook\nLe pregunto roleramente por /b\nLe robo la billetera", "Siguiente", "");
		}
	}
	return 1;
}

OnPlayerLogin(playerid, password[]) {
	new
		name[24],
		query[256];

	GetPlayerName(playerid, name, 24);
    mysql_real_escape_string(password, password);

    format(query, sizeof(query), "SELECT * FROM `accounts` WHERE UCASE(`Name`) = UCASE('%s') AND `Password` = MD5('%s')", name, password);
	mysql_function_query(dbHandle, query, true, "OnPlayerDataLoad", "i", playerid);
	return 1;
}

forward OnPlayerDataLoad(playerid);
public OnPlayerDataLoad(playerid) {
   	new
   	    query[128],
		result[128],
		rows,
		fields;

	cache_get_data(rows, fields);

	if(rows) {
		DeletePVar(playerid, "LoginAttempts");


        cache_get_field_content(0, "Id", result); 				PlayerInfo[playerid][pID] 				= strval(result);
    	cache_get_field_content(0, "Level", result); 			PlayerInfo[playerid][pLevel] 			= strval(result);
		cache_get_field_content(0, "AdminLevel", result); 		PlayerInfo[playerid][pAdmin] 			= strval(result);
		cache_get_field_content(0, "AccountBlocked", result); 	PlayerInfo[playerid][pAccountBlocked] 	= strval(result);
		cache_get_field_content(0, "pRegStep", result); 		PlayerInfo[playerid][pRegStep] 			= strval(result);
		cache_get_field_content(0, "Tutorial", result); 		PlayerInfo[playerid][pTutorial] 		= strval(result);
		cache_get_field_content(0, "Sex", result); 				PlayerInfo[playerid][pSex] 				= strval(result);
		cache_get_field_content(0, "Age", result); 				PlayerInfo[playerid][pAge] 				= strval(result);
		cache_get_field_content(0, "Exp", result); 				PlayerInfo[playerid][pExp] 				= strval(result);
		cache_get_field_content(0, "CashMoney", result); 		PlayerInfo[playerid][pCash] 			= strval(result);
		cache_get_field_content(0, "BankMoney", result); 		PlayerInfo[playerid][pBank] 			= strval(result);
		cache_get_field_content(0, "Skin", result); 			PlayerInfo[playerid][pSkin] 			= strval(result);
  		cache_get_field_content(0, "pThirst", result); 			PlayerInfo[playerid][pThirst] 			= float(strval(result));
		cache_get_field_content(0, "pHunger", result); 			PlayerInfo[playerid][pHunger]			= float(strval(result));
		cache_get_field_content(0, "Job", result); 				PlayerInfo[playerid][pJob] 				= strval(result);
		cache_get_field_content(0, "JobTime", result); 			PlayerInfo[playerid][pJobTime] 			= strval(result);
		cache_get_field_content(0, "pJobAllowed", result); 		PlayerInfo[playerid][pJobAllowed] 		= strval(result);
		cache_get_field_content(0, "PlayingHours", result); 	PlayerInfo[playerid][pPlayingHours] 	= strval(result);
		cache_get_field_content(0, "PayCheck", result); 		PlayerInfo[playerid][pPayCheck]			= strval(result);
		cache_get_field_content(0, "pPayTime", result);         SetPVarInt(playerid, "pPayTime", strval(result));
		cache_get_field_content(0, "Faction", result); 			PlayerInfo[playerid][pFaction] 			= strval(result);
		cache_get_field_content(0, "Rank", result); 			PlayerInfo[playerid][pRank] 			= strval(result);
		cache_get_field_content(0, "HouseKey", result); 		PlayerInfo[playerid][pHouseKey] 		= strval(result);
		cache_get_field_content(0, "BizKey", result); 			PlayerInfo[playerid][pBizKey] 			= strval(result);
		cache_get_field_content(0, "Warnings", result); 		PlayerInfo[playerid][pWarnings] 		= strval(result);
		cache_get_field_content(0, "CarLic", result); 			PlayerInfo[playerid][pCarLic] 			= strval(result);
		cache_get_field_content(0, "FlyLic", result); 			PlayerInfo[playerid][pFlyLic] 			= strval(result);
		cache_get_field_content(0, "WepLic", result); 			PlayerInfo[playerid][pWepLic] 			= strval(result);
		cache_get_field_content(0, "PhoneNumber", result); 		PlayerInfo[playerid][pPhoneNumber] 		= strval(result);
		cache_get_field_content(0, "PhoneCompany", result); 	PlayerInfo[playerid][pPhoneC] 			= strval(result);
		cache_get_field_content(0, "PhoneBook", result); 		PlayerInfo[playerid][pPhoneBook] 		= strval(result);
		cache_get_field_content(0, "ListNumber", result);		PlayerInfo[playerid][pListNumber] 		= strval(result);
		cache_get_field_content(0, "Jailed", result); 			PlayerInfo[playerid][pJailed]			= strval(result);
		cache_get_field_content(0, "JailedTime", result); 		PlayerInfo[playerid][pJailTime] 		= strval(result);
		cache_get_field_content(0, "pInterior", result);		PlayerInfo[playerid][pInterior] 		= strval(result);
		cache_get_field_content(0, "pWorld", result); 			PlayerInfo[playerid][pVirtualWorld] 	= strval(result);
		cache_get_field_content(0, "pVeh1", result); 			PlayerInfo[playerid][pVeh1] 			= strval(result);
		cache_get_field_content(0, "pVeh2", result); 			PlayerInfo[playerid][pVeh2] 			= strval(result);
        cache_get_field_content(0, "pHospitalized", result); 	PlayerInfo[playerid][pHospitalized] 	= strval(result);
		cache_get_field_content(0, "pWantedLevel", result); 	PlayerInfo[playerid][pWantedLevel] 		= strval(result);
		cache_get_field_content(0, "pCantWork", result); 		PlayerInfo[playerid][pCantWork]			= strval(result);
		cache_get_field_content(0, "pJobLimitCounter", result); SetPVarInt(playerid, "pJobLimitCounter", strval(result));
		cache_get_field_content(0, "pMuteB", result); 			PlayerInfo[playerid][pMuteB] 			= strval(result);
		cache_get_field_content(0, "pRentCarID", result); 		PlayerInfo[playerid][pRentCarID] 		= strval(result);
		cache_get_field_content(0, "pRentCarRID", result); 		PlayerInfo[playerid][pRentCarRID] 		= strval(result);
		cache_get_field_content(0, "pMarijuana", result); 		PlayerInfo[playerid][pMarijuana] 		= strval(result);
		cache_get_field_content(0, "pLSD", result); 			PlayerInfo[playerid][pLSD] 				= strval(result);
		cache_get_field_content(0, "pEcstasy", result); 			PlayerInfo[playerid][pEcstasy] 			= strval(result);
		cache_get_field_content(0, "pCocaine", result); 		PlayerInfo[playerid][pCocaine] 			= strval(result);
		cache_get_field_content(0, "pCigarettes", result); 		PlayerInfo[playerid][pCigarettes] 		= strval(result);
		cache_get_field_content(0, "pLighter", result); 		PlayerInfo[playerid][pLighter] 			= strval(result);
		cache_get_field_content(0, "pRadio", result); 			PlayerInfo[playerid][pRadio] 			= strval(result);
    	cache_get_field_content(0, "pMask", result); 			PlayerInfo[playerid][pMask] 			= strval(result);
		cache_get_field_content(0, "pFightStyle", result); 		PlayerInfo[playerid][pFightStyle] 		= strval(result);
        cache_get_field_content(0, "pAdictionAbstinence", result); 		PlayerInfo[playerid][pAdictionAbstinence] 		= strval(result);
		
		cache_get_field_content(0, "Name", 						PlayerInfo[playerid][pName]);
		cache_get_field_content(0, "LastConnected", 			PlayerInfo[playerid][pLastConnected]);
		cache_get_field_content(0, "pInv0", 					InvInfo[playerid][inv0]);
		cache_get_field_content(0, "pInv1", 					InvInfo[playerid][inv1]);
		cache_get_field_content(0, "pAccusedOf", 				PlayerInfo[playerid][pAccusedOf]);
		cache_get_field_content(0, "pAccusedBy", 				PlayerInfo[playerid][pAccusedBy]);

		cache_get_field_content(0, "pX", result); 				PlayerInfo[playerid][pX] 				= floatstr(result);
		cache_get_field_content(0, "pY", result); 				PlayerInfo[playerid][pY] 				= floatstr(result);
		cache_get_field_content(0, "pZ", result); 				PlayerInfo[playerid][pZ] 				= floatstr(result);
		cache_get_field_content(0, "pA", result);				PlayerInfo[playerid][pA] 				= floatstr(result);
		cache_get_field_content(0, "pHealth", result); 			PlayerInfo[playerid][pHealth] 			= floatstr(result);
		cache_get_field_content(0, "pArmour", result); 			PlayerInfo[playerid][pArmour] 			= floatstr(result);
 		cache_get_field_content(0, "pAdictionPercent", result); 	PlayerInfo[playerid][pAdictionPercent] 			= floatstr(result);

        gPlayerLogged[playerid] = 1;

        loadThiefJobData(playerid,PlayerInfo[playerid][pID]);
        
       	CreatePlayerBasicNeeds(playerid);
       	
       	if(PlayerInfo[playerid][pFaction] != 0)
       	{
       		if(FactionInfo[PlayerInfo[playerid][pFaction]][fType] == FAC_TYPE_GANG)
       		    ShowGangZonesToPlayer(playerid);
		}

		GetPlayerIp(playerid, PlayerInfo[playerid][pIP], 16);

	    format(query, sizeof(query),"SELECT * FROM `bans` WHERE (pID = %d OR pIP = '%s') AND banActive = 1", PlayerInfo[playerid][pID], PlayerInfo[playerid][pIP]);
		mysql_function_query(dbHandle, query, true, "OnBanDataLoad", "i", playerid);

        SetPVarInt(playerid, "eventTimer", SetTimerEx("eventTimer", 60 * 1000 * JOB_EVENT_TIMER + random(JOB_EVENT_MAXTIMER), true, "i", playerid));

        // Seteamos el dinero del jugador.
        SetPlayerCash(playerid,PlayerInfo[playerid][pCash]);
        SetPlayerWantedLevelEx(playerid, PlayerInfo[playerid][pWantedLevel]);
        
		// Cuenta bloqueada.
		if(PlayerInfo[playerid][pAccountBlocked] == 1) {
			SendClientMessage(playerid,COLOR_LIGHTYELLOW2,"{878EE7}[INFO]:{C8C8C8} personaje bloqueado, los administradores están analizando tu cuenta.");
			Kick(playerid);
		}

		if(!PlayerInfo[playerid][pTutorial]) {
			TogglePlayerSpectating(playerid, true);
      		SetPVarInt(playerid, "tutTimer", SetTimerEx("tutorial", 200, false, "ii", playerid, 1));
		    SetPlayerHealthEx(playerid, 100.00);
		    PlayerInfo[playerid][pArmour] = 0.0;
		} else if(PlayerInfo[playerid][pRegStep] > 0) {
			TextDrawShowForPlayer(playerid, RegTDBorder1);
			TextDrawShowForPlayer(playerid, RegTDBorder2);
			TextDrawShowForPlayer(playerid, RegTDTitle);
			TextDrawShowForPlayer(playerid, RegTDBackground);
			PlayerTextDrawShow(playerid, RegTDGender[playerid]);
			PlayerTextDrawShow(playerid, RegTDSkin[playerid]);
			PlayerTextDrawShow(playerid, RegTDAge[playerid]);
			PlayerTextDrawShow(playerid, RegTDOrigin[playerid]);

			PlayerInfo[playerid][pSex] = 1;
			PlayerInfo[playerid][pSkin] = SkinRegMale[0][0];
			PlayerInfo[playerid][pRegStep] = 1;

			SetPlayerInterior(playerid, 14);
	     	SetPlayerVirtualWorld(playerid, random(100000) + 44000);

			SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "Presiona ~k~~PED_SPRINT~ para seleccionar una opción, ~k~~VEHICLE_ENTER_EXIT~ para finalizar.");
			SetSpawnInfo(playerid, 0, SkinRegMale[0][0], -1828.2881, -30.3119, 1061.1436, 182.0051, 0, 0, 0, 0, 0, 0);
			//TogglePlayerSpectating(playerid, false);
			return 1;
		}

		SetPlayerArmour(playerid, PlayerInfo[playerid][pArmour]);
		
		SetSpawnInfo(playerid, 0, PlayerInfo[playerid][pSkin], PlayerInfo[playerid][pX], PlayerInfo[playerid][pY], PlayerInfo[playerid][pZ], PlayerInfo[playerid][pA], 0, 0, 0, 0, 0, 0);
		if(PlayerInfo[playerid][pTutorial] == 1 && PlayerInfo[playerid][pRegStep] == 0) {

			if(PlayerInfo[playerid][pAdmin] > 0) {
			    SendClientMessage(playerid, COLOR_YELLOW2, "{878EE7}[INFO]:{C8C8C8} bienvenido, para ver los comandos de administración escribe /acmds.");
			} else {
			    SendClientMessage(playerid, COLOR_YELLOW2, "{878EE7}[INFO]:{C8C8C8} bienvenido, para ver los comandos escribe /ayuda.");
			}
			
			if(PlayerInfo[playerid][pRentCarID] > 0)
			{
			    if(RentCarInfo[PlayerInfo[playerid][pRentCarRID]][rRented] == 1 && RentCarInfo[PlayerInfo[playerid][pRentCarRID]][rOwnerSQLID] == PlayerInfo[playerid][pID])
			        SendFMessage(playerid, COLOR_WHITE, "Te quedan %d minutos de renta del vehículo que alquilaste.", RentCarInfo[PlayerInfo[playerid][pRentCarRID]][rTime]);
				else
				    {
				    	PlayerInfo[playerid][pRentCarRID] = 0;
				    	PlayerInfo[playerid][pRentCarID] = 0;
				    	SendClientMessage(playerid, COLOR_WHITE, "Se ha acabado el tiempo de renta de tu vehículo alquilado.");
					}
			}
			
			SendClientMessage(playerid, COLOR_YELLOW2, " ");
			SpawnPlayer(playerid);
		}
	} else {
	    SetPVarInt(playerid, "LoginAttempts", GetPVarInt(playerid, "LoginAttempts") + 1);
	    if(GetPVarInt(playerid, "LoginAttempts") > MAX_LOGIN_ATTEMPTS) {
	        KickPlayer(playerid,"el sistema","demasiados intentos de iniciar sesión");
	        return 1;
	    } else {
			ShowPlayerDialog(playerid, DLG_LOGIN, DIALOG_STYLE_PASSWORD, "¡Contraseña incorrecta!","Ingresa tu contraseña a continuación:","Ingresar","");
		}
	}
	return 1;
}

forward OnBanDataLoad(playerid);
public OnBanDataLoad(playerid) {
   	new
		issuerName[MAX_PLAYER_NAME],
   	    banReason[128],
		result[128],
		rows,
		fields;

	cache_get_data(rows, fields);

	if(rows) {
		if(strval(result) >= 1) {
	    	KickPlayer(playerid,"el sistema","cuenta baneada");
		}
		cache_get_field_content(0, "issuerName", result);
	    cache_get_field_content(0, "banReason", banReason);
	    ClearScreen(playerid);
	    SendFMessage(playerid, COLOR_ADMINCMD, "Te encuentras baneado/a por %s, razón: %s", issuerName, banReason);
	    SendClientMessage(playerid, COLOR_WHITE, "Para más información pasa por nuestros foros www.isamp.com.ar");
		SetTimerEx("kickTimer", 1000, false, "d", playerid);
	}
	return 1;
}

forward OnUnbanDataLoad(playerid, type, target[32]);
public OnUnbanDataLoad(playerid, type, target[32]) {
	new rows;
	new fields;
	new string[128];
	new query[128];
	
    cache_get_data(rows, fields);

	if (type == 0) {
	    if (rows) {
			format(string, sizeof(string), "[Staff] el administrador %s ha removido el BAN a '%s'.", GetPlayerNameEx(playerid), target);

			format(query, sizeof(query), "UPDATE `bans` SET `banActive` = '0' WHERE `pName` = '%s'", target);
		} else {
		    SendFMessage(playerid, COLOR_YELLOW2, "No se ha encontrado ningún ban ACTIVO relacionado con el nombre '%s' en la base de datos.", target);
		    return 1;
		}
	} else if (type == 1) {
		if (rows) {
			format(string, sizeof(string), "[Staff] el administrador %s ha removido el BAN a todas las cuentas con la IP '%s'.", GetPlayerNameEx(playerid), target);

			format(query, sizeof(query), "UPDATE `bans` SET `banActive` = '0' WHERE `pIP` = '%s'", target);
		} else {
		    SendFMessage(playerid, COLOR_YELLOW2, "No se ha encontrado ningún ban ACTIVO relacionado con la IP '%s' en la base de datos.", target);
		    return 1;
		}
	}
	mysql_function_query(dbHandle, query, false, "", "");
    AdministratorMessage(COLOR_ADMINCMD, string, 1);
	return 1;
}

AntiDeAMX() {
    new b;
    #emit load.pri b
    #emit stor.pri b
}

forward OnPlayerNameCheck(playerid);
public OnPlayerNameCheck(playerid) {
    new
        rows,
		fields,
        string[128],
        name[MAX_PLAYER_NAME],
		PlayerIP[20];

	cache_get_data(rows, fields);

    GetPlayerName(playerid, name, sizeof(name));
	GetPlayerIp(playerid, PlayerIP, 20);

	if(rows == 0) {
		format(string, sizeof(string), "** %s (%d) ha iniciado sesión. IP: %s. Registrado: no. **", name, playerid, PlayerIP);
		AdministratorMessage(COLOR_GREY, string, 1);
		// Checkeamos si el nombre cumple con los requisitos.
		if(RPName(playerid)) {
			ShowPlayerDialog(playerid,DLG_REGISTER,DIALOG_STYLE_PASSWORD,"¡Bienvenido! - nombre no registrado.","Para registrar esta cuenta, ingresa una contraseña a continuación: \r\n- Debe tener un mínimo de 6 caracteres y no mas de 16.","Registar","");
		}
	} else {
	    format(string, sizeof(string), "** %s (%d) ha iniciado sesión. IP: %s. Registrado: si. **", name, playerid, PlayerIP);
		AdministratorMessage(COLOR_GREY, string, 1);
		// Checkeamos si el nombre cumple con los requisitos.
		if(RPName(playerid)) {
			ShowPlayerDialog(playerid,DLG_LOGIN,DIALOG_STYLE_PASSWORD,"¡Bienvenido de nuevo!","Ingresa tu contraseña a continuación:","Ingresar","");
		}
	}
	return 1;
}

forward OnJobDataLoad(id);
public OnJobDataLoad(id) {
   	new
   	    string[128],
		result[128],
		rows,
		fields;

	cache_get_data(rows, fields);

	if(rows) {
		cache_get_field_content(0, "jTakeW", result); 				JobInfo[id][jTakeW] 			= strval(result);
		cache_get_field_content(0, "jType", result); 				JobInfo[id][jType] 				= strval(result);
		cache_get_field_content(0, "jTakeI", result);				JobInfo[id][jTakeI]				= strval(result);
		cache_get_field_content(0, "jSkin", result); 				JobInfo[id][jSkin] 				= strval(result);

		cache_get_field_content(0, "jName", 						JobInfo[id][jName]);

		cache_get_field_content(0, "jTakeX", result); 				JobInfo[id][jTakeX] 			= floatstr(result);
		cache_get_field_content(0, "jTakeY", result); 				JobInfo[id][jTakeY] 			= floatstr(result);
		cache_get_field_content(0, "jTakeZ", result); 				JobInfo[id][jTakeZ] 			= floatstr(result);

		if(JobInfo[id][jType] == 0) {
			JobInfo[id][jTakePID] = CreateDynamicPickup(1274, 1, JobInfo[id][jTakeX], JobInfo[id][jTakeY], JobInfo[id][jTakeZ], JobInfo[id][jTakeW], JobInfo[id][jTakeI], -1);
            format(string, sizeof(string), "Escribe /tomarempleo \npara tomar el empleo de %s", JobInfo[id][jName]);
            CreateDynamic3DTextLabel(string, COLOR_WHITE, JobInfo[id][jTakeX], JobInfo[id][jTakeY], JobInfo[id][jTakeZ] + 0.75, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0, -1, 100.0);
		}
	}
	return 1;
}

forward OnBusinessDataLoad(id);
public OnBusinessDataLoad(id) {
   	new
		result[128],
		rows,
		fields;

	cache_get_data(rows, fields);

    if(rows) {
        Business[id][bInsideWorld] = id + 17000;
		cache_get_field_content(0, "bOwnerID", result); 			Business[id][bOwnerSQLID] 		= strval(result);
		cache_get_field_content(0, "bEnterable", result); 			Business[id][bEnterable] 		= strval(result);
		cache_get_field_content(0, "bOutsideInt", result); 			Business[id][bOutsideInt] 		= strval(result);
		cache_get_field_content(0, "bInsideInt", result); 			Business[id][bInsideInt] 		= strval(result);
		cache_get_field_content(0, "bPrice", result); 				Business[id][bPrice] 			= strval(result);
		cache_get_field_content(0, "bEntranceCost", result); 		Business[id][bEntranceFee] 		= strval(result);
		cache_get_field_content(0, "bTill", result); 				Business[id][bTill] 			= strval(result);
		cache_get_field_content(0, "bLocked", result); 				Business[id][bLocked] 			= strval(result);
		cache_get_field_content(0, "bType", result); 				Business[id][bType] 			= strval(result);
		cache_get_field_content(0, "bProducts", result); 			Business[id][bProducts] 		= strval(result);

		cache_get_field_content(0, "bOwnerName", 					Business[id][bOwner]);
        cache_get_field_content(0, "bName", 						Business[id][bName]);

		cache_get_field_content(0, "bOutsideX", result);	 		Business[id][bOutsideX] 		= floatstr(result);
		cache_get_field_content(0, "bOutsideY", result); 			Business[id][bOutsideY] 		= floatstr(result);
		cache_get_field_content(0, "bOutsideZ", result); 			Business[id][bOutsideZ] 		= floatstr(result);
		cache_get_field_content(0, "bOutsideAngle", result); 		Business[id][bOutsideAngle] 	= floatstr(result);
		cache_get_field_content(0, "bInsideX", result); 			Business[id][bInsideX] 			= floatstr(result);
		cache_get_field_content(0, "bInsideY", result); 			Business[id][bInsideY] 			= floatstr(result);
		cache_get_field_content(0, "bInsideZ", result); 			Business[id][bInsideZ] 			= floatstr(result);
		cache_get_field_content(0, "bInsideAngle", result); 		Business[id][bInsideAngle] 		= floatstr(result);
		Business[id][bLoaded] = true;
	} else {
	    Business[id][bLoaded] = false;
	}
	ReloadBizIcon(id);
	openBizPermission[id] = true;
	return 1;
}

forward OnHouseDataLoad(id);
public OnHouseDataLoad(id) {
   	new
		result[128],
		rows,
		fields;

	cache_get_data(rows, fields);

    if(rows) {
		House[id][InsideWorld] = id + 15000;
		cache_get_field_content(0, "EntranceInterior", result); 	House[id][EntranceInterior]		= strval(result);
		cache_get_field_content(0, "ExitInterior", result); 		House[id][ExitInterior] 		= strval(result);
		cache_get_field_content(0, "Owned", result); 				House[id][Owned] 				= strval(result);
		cache_get_field_content(0, "HousePrice", result); 			House[id][HousePrice] 			= strval(result);
		cache_get_field_content(0, "Money", result); 				House[id][Money] 				= strval(result);
		cache_get_field_content(0, "Locked", result); 				House[id][Locked]				= strval(result);
		
		cache_get_field_content(0, "Marijuana", result); 			House[id][Marijuana]			= strval(result);
		cache_get_field_content(0, "LSD", result); 					House[id][LSD]					= strval(result);
		cache_get_field_content(0, "Cocaine", result); 				House[id][Cocaine]				= strval(result);
		cache_get_field_content(0, "Ecstasy", result); 				House[id][Ecstasy]				= strval(result);

		cache_get_field_content(0, "Description", 					House[id][Description]);
		cache_get_field_content(0, "Owner", 						House[id][Owner]);

		cache_get_field_content(0, "EntranceX", result); 			House[id][EntranceX] 			= floatstr(result);
		cache_get_field_content(0, "EntranceY", result); 			House[id][EntranceY] 			= floatstr(result);
		cache_get_field_content(0, "EntranceZ", result); 			House[id][EntranceZ] 			= floatstr(result);
		cache_get_field_content(0, "EntranceAngle", result); 		House[id][EntranceAngle] 		= floatstr(result);
		cache_get_field_content(0, "ExitX", result); 				House[id][ExitX] 				= floatstr(result);
		cache_get_field_content(0, "ExitY", result); 				House[id][ExitY] 				= floatstr(result);
		cache_get_field_content(0, "ExitZ", result); 				House[id][ExitZ] 				= floatstr(result);
		cache_get_field_content(0, "ExitAngle", result); 			House[id][ExitAngle] 			= floatstr(result);
	}
	ReloadHouseIcon(id);
	return 1;
}

forward OnBuildingDataLoad(id);
public OnBuildingDataLoad(id) {
   	new
		result[128],
		rows,
		fields;

	cache_get_data(rows, fields);

    if(rows) {
		cache_get_field_content(0, "blEntranceFee", result); 		Building[id][blEntranceFee] 		= strval(result);
		cache_get_field_content(0, "blOutsideInt", result); 		Building[id][blOutsideInt] 			= strval(result);
		cache_get_field_content(0, "blInsideInt", result); 			Building[id][blInsideInt] 			= strval(result);
		cache_get_field_content(0, "blLocked", result); 			Building[id][blLocked] 				= strval(result);
  		cache_get_field_content(0, "blPickupModel", result); 		Building[id][blPickupModel] 		= strval(result);
  		
  		cache_get_field_content(0, "blFaction", result); 			Building[id][blFaction] 			= strval(result);
		cache_get_field_content(0, "blInsideWorld", result); 		Building[id][blInsideWorld] 		= strval(result);

		cache_get_field_content(0, "blText", 						Building[id][blText]);
		cache_get_field_content(0, "blText2", 						Building[id][blText2]);

		cache_get_field_content(0, "blOutsideX", result); 			Building[id][blOutsideX] 			= floatstr(result);
		cache_get_field_content(0, "blOutsideY", result); 			Building[id][blOutsideY] 			= floatstr(result);
		cache_get_field_content(0, "blOutsideZ", result); 			Building[id][blOutsideZ] 			= floatstr(result);
		cache_get_field_content(0, "blOutsideAngle", result); 		Building[id][blOutsideAngle] 		= floatstr(result);
		cache_get_field_content(0, "blInsideX", result); 			Building[id][blInsideX] 			= floatstr(result);
		cache_get_field_content(0, "blInsideY", result);			Building[id][blInsideY] 			= floatstr(result);
		cache_get_field_content(0, "blInsideZ", result);			Building[id][blInsideZ] 			= floatstr(result);
		cache_get_field_content(0, "blInsideAngle", result);		Building[id][blInsideAngle] 		= floatstr(result);
        Building[id][blLoaded] = true;
	} else {
	    Building[id][blLoaded] = false;
	}
	ReloadBlIcon(id);
	return 1;
}

forward OnServerDataLoad();
public OnServerDataLoad() {
    new
		result[128],
		rows,
		fields;
	cache_get_data(rows, fields);

    if(rows) {
	    cache_get_field_content(0, "sVehiclePricePercent", result); ServerInfo[sVehiclePricePercent] = strval(result);
	    cache_get_field_content(0, "sPlayersRecord", result); ServerInfo[sPlayersRecord] = strval(result);
	    cache_get_field_content(0, "svLevelExp", result); ServerInfo[svLevelExp] = strval(result);
	    cache_get_field_content(0, "sDrugRawMats", result); ServerInfo[sDrugRawMats] = strval(result);
	}
	return 1;
}

forward OnFactionDataLoad(id);
public OnFactionDataLoad(id) {
    new
		result[128],
		rows,
		fields;

	cache_get_data(rows, fields);

    if(rows) {
		cache_get_field_content(0, "Type", result); 					FactionInfo[id][fType] 		= strval(result);
		cache_get_field_content(0, "Materials", result);				FactionInfo[id][fMaterials] = strval(result);
		cache_get_field_content(0, "Bank", result); 					FactionInfo[id][fBank] 		= strval(result);
		cache_get_field_content(0, "AllowJob", result); 				FactionInfo[id][fAllowJob] 	= strval(result);
		cache_get_field_content(0, "fMissionVeh", result); 				FactionInfo[id][fMissionVeh]= strval(result);
		cache_get_field_content(0, "Skin1", result); 					FactionInfo[id][fSkin1] 	= strval(result);
		cache_get_field_content(0, "Skin2", result); 					FactionInfo[id][fSkin2] 	= strval(result);
		cache_get_field_content(0, "Skin3", result);				 	FactionInfo[id][fSkin3] 	= strval(result);
		cache_get_field_content(0, "Skin4", result); 					FactionInfo[id][fSkin4] 	= strval(result);
		cache_get_field_content(0, "Skin5", result); 					FactionInfo[id][fSkin5] 	= strval(result);
		cache_get_field_content(0, "Skin6", result); 					FactionInfo[id][fSkin6] 	= strval(result);
		cache_get_field_content(0, "Skin7", result); 					FactionInfo[id][fSkin7] 	= strval(result);
		cache_get_field_content(0, "Skin8", result);					FactionInfo[id][fSkin8] 	= strval(result);
		cache_get_field_content(0, "Skin9", result);					FactionInfo[id][fSkin9] 	= strval(result);
		cache_get_field_content(0, "Skin10", result); 					FactionInfo[id][fSkin10] 	= strval(result);
		cache_get_field_content(0, "JoinRank", result); 				FactionInfo[id][fJoinRank] 	= strval(result);
		cache_get_field_content(0, "UsesSkins", result); 				FactionInfo[id][fUseSkins] 	= strval(result);
		cache_get_field_content(0, "RankAmount", result); 				FactionInfo[id][fRankAmount]= strval(result);
		cache_get_field_content(0, "Name",								FactionInfo[id][fName]);
		cache_get_field_content(0, "Rank1", 							FactionInfo[id][fRank1]);
		cache_get_field_content(0, "Rank2", 							FactionInfo[id][fRank2]);
		cache_get_field_content(0, "Rank3", 							FactionInfo[id][fRank3]);
		cache_get_field_content(0, "Rank4", 							FactionInfo[id][fRank4]);
		cache_get_field_content(0, "Rank5", 							FactionInfo[id][fRank5]);
		cache_get_field_content(0, "Rank6", 							FactionInfo[id][fRank6]);
		cache_get_field_content(0, "Rank7", 							FactionInfo[id][fRank7]);
		cache_get_field_content(0, "Rank8", 							FactionInfo[id][fRank8]);
		cache_get_field_content(0, "Rank9", 							FactionInfo[id][fRank9]);
		cache_get_field_content(0, "Rank10", 							FactionInfo[id][fRank10]);
	}
	return 1;
}

forward OnVehicleDataLoad(id);
public OnVehicleDataLoad(id) {
   	new
		result[128],
		rows,
		fields;

	cache_get_data(rows, fields);

    if(rows) {
	    cache_get_field_content(0, "VehSQLID", result); 				VehicleInfo[id][VehSQLID] 		= strval(result);
		cache_get_field_content(0, "VehModel", result); 				VehicleInfo[id][VehModel] 		= strval(result);
		cache_get_field_content(0, "VehColor1", result); 				VehicleInfo[id][VehColor1] 		= strval(result);
		cache_get_field_content(0, "VehColor2", result); 				VehicleInfo[id][VehColor2] 		= strval(result);
		cache_get_field_content(0, "VehFaction", result); 				VehicleInfo[id][VehFaction] 	= strval(result);
		cache_get_field_content(0, "VehJob", result); 					VehicleInfo[id][VehJob] 		= strval(result);
		cache_get_field_content(0, "VehDamage1", result); 				VehicleInfo[id][VehDamage1] 	= strval(result);
		cache_get_field_content(0, "VehDamage2", result); 				VehicleInfo[id][VehDamage2] 	= strval(result);
		cache_get_field_content(0, "VehDamage3", result); 				VehicleInfo[id][VehDamage3] 	= strval(result);
		cache_get_field_content(0, "VehDamage4", result); 				VehicleInfo[id][VehDamage4]	 	= strval(result);
		cache_get_field_content(0, "VehFuel", result); 					VehicleInfo[id][VehFuel] 		= strval(result);
		cache_get_field_content(0, "VehType", result); 					VehicleInfo[id][VehType] 		= strval(result);
		cache_get_field_content(0, "VehOwnerID", result); 				VehicleInfo[id][VehOwnerSQLID] 	= strval(result);
		cache_get_field_content(0, "VehLocked", result);	 			VehicleInfo[id][VehLocked] 		= strval(result);
		cache_get_field_content(0, "VehLights", result); 				VehicleInfo[id][VehLights] 		= strval(result);
		cache_get_field_content(0, "VehEngine", result); 				VehicleInfo[id][VehEngine] 		= strval(result);
		cache_get_field_content(0, "VehBonnet", result); 				VehicleInfo[id][VehBonnet] 		= strval(result);
		cache_get_field_content(0, "VehBoot", result); 					VehicleInfo[id][VehBoot] 		= strval(result);
		cache_get_field_content(0, "VehOwnerSlot", result); 			VehicleInfo[id][VehOwnerSlot] 	= strval(result);
		cache_get_field_content(0, "VehMarijuana", result); 			VehicleInfo[id][VehMarijuana] 	= strval(result);
		cache_get_field_content(0, "VehLSD", result); 					VehicleInfo[id][VehLSD] 		= strval(result);
		cache_get_field_content(0, "VehEcstasy", result); 				VehicleInfo[id][VehEcstasy] 		= strval(result);
		cache_get_field_content(0, "VehCocaine", result); 				VehicleInfo[id][VehCocaine] 	= strval(result);
		cache_get_field_content(0, "VehPosX", result); 					VehicleInfo[id][VehPosX] 		= floatstr(result);
		cache_get_field_content(0, "VehPosY", result); 					VehicleInfo[id][VehPosY] 		= floatstr(result);
		cache_get_field_content(0, "VehPosZ", result); 					VehicleInfo[id][VehPosZ] 		= floatstr(result);
	 	cache_get_field_content(0, "VehAngle", result); 				VehicleInfo[id][VehAngle] 		= floatstr(result);
	 	cache_get_field_content(0, "VehHP", result); 					VehicleInfo[id][VehHP] 			= floatstr(result);
		cache_get_field_content(0, "VehPlate",							VehicleInfo[id][VehPlate]);
		cache_get_field_content(0, "VehOwnerName",						VehicleInfo[id][VehOwnerName]);
		
		if(VehicleInfo[id][VehType] == VEH_OWNED) {
		    cache_get_field_content(0, "VehCompSlot0", result); 		VehicleInfo[id][VehCompSlot][0] = strval(result);
		    cache_get_field_content(0, "VehCompSlot1", result); 		VehicleInfo[id][VehCompSlot][1] = strval(result);
		    cache_get_field_content(0, "VehCompSlot2", result); 		VehicleInfo[id][VehCompSlot][2] = strval(result);
		    cache_get_field_content(0, "VehCompSlot3", result); 		VehicleInfo[id][VehCompSlot][3] = strval(result);
		    cache_get_field_content(0, "VehCompSlot4", result); 		VehicleInfo[id][VehCompSlot][4] = strval(result);
		    cache_get_field_content(0, "VehCompSlot5", result); 		VehicleInfo[id][VehCompSlot][5] = strval(result);
		    cache_get_field_content(0, "VehCompSlot6", result); 		VehicleInfo[id][VehCompSlot][6] = strval(result);
		    cache_get_field_content(0, "VehCompSlot7", result); 		VehicleInfo[id][VehCompSlot][7] = strval(result);
		    cache_get_field_content(0, "VehCompSlot8", result); 		VehicleInfo[id][VehCompSlot][8] = strval(result);
		    cache_get_field_content(0, "VehCompSlot9", result); 		VehicleInfo[id][VehCompSlot][9] = strval(result);
		    cache_get_field_content(0, "VehCompSlot10", result); 		VehicleInfo[id][VehCompSlot][10] = strval(result);
		    cache_get_field_content(0, "VehCompSlot11", result); 		VehicleInfo[id][VehCompSlot][11] = strval(result);
		    cache_get_field_content(0, "VehCompSlot12", result); 		VehicleInfo[id][VehCompSlot][12] = strval(result);
		    cache_get_field_content(0, "VehCompSlot13", result); 		VehicleInfo[id][VehCompSlot][13] = strval(result);
		}

		if(VehicleInfo[id][VehType] == VEH_NONE || VehicleInfo[id][VehModel] < 400 || VehicleInfo[id][VehModel] > 611) {
 			CreateVehicle(411, 9999.0, 9999.0, 0.0, 0.0, 1, 1, -1);

		} else {
			if(VehicleInfo[id][VehType] == VEH_DEALERSHIP || VehicleInfo[id][VehType] == VEH_DEALERSHIP2 || VehicleInfo[id][VehType] == VEH_SHIPYARD) {
			    // Vehículos de consecionaria.
                VehicleInfo[id][VehColor1] = random(255);
				VehicleInfo[id][VehColor2] = random(255);
				CreateVehicle(VehicleInfo[id][VehModel], VehicleInfo[id][VehPosX], VehicleInfo[id][VehPosY], VehicleInfo[id][VehPosZ], VehicleInfo[id][VehAngle], VehicleInfo[id][VehColor1], VehicleInfo[id][VehColor2], 1800);

			} else if(VehicleInfo[id][VehType] == VEH_RENT) {
			    // Vehículos de renta.
			    for(new i = 1; i < MAX_RENTCAR; i++) {
			    	if(RentCarInfo[i][rVehicleID] < 1) { // Si ese slot no está cargado
                    	RentCarInfo[i][rVehicleID] = id;
                    	RentCarInfo[i][rOwnerSQLID] = 0;
                    	RentCarInfo[i][rTime] = 0;
                    	RentCarInfo[i][rRented] = 0;
                    	break; // Salimos porque ya lo cargamos en el primero libre
                    }
				}
				VehicleInfo[id][VehLocked] = 0;
    			VehicleInfo[id][VehColor1] = random(255);
				VehicleInfo[id][VehColor2] = random(255);
                CreateVehicle(VehicleInfo[id][VehModel], VehicleInfo[id][VehPosX], VehicleInfo[id][VehPosY], VehicleInfo[id][VehPosZ], VehicleInfo[id][VehAngle], VehicleInfo[id][VehColor1], VehicleInfo[id][VehColor2], -1);

			} else if(VehicleInfo[id][VehType] == VEH_JOB) {
			    // Vehículos de empleo.
                CreateVehicle(VehicleInfo[id][VehModel], VehicleInfo[id][VehPosX], VehicleInfo[id][VehPosY], VehicleInfo[id][VehPosZ], VehicleInfo[id][VehAngle], VehicleInfo[id][VehColor1], VehicleInfo[id][VehColor2], 1800);

			} else if(VehicleInfo[id][VehType] == VEH_SCHOOL) {
			    // Vehículos de licencia.
                CreateVehicle(VehicleInfo[id][VehModel], VehicleInfo[id][VehPosX], VehicleInfo[id][VehPosY], VehicleInfo[id][VehPosZ], VehicleInfo[id][VehAngle], VehicleInfo[id][VehColor1], VehicleInfo[id][VehColor2], 1800);

			} else if(VehicleInfo[id][VehType] == VEH_FACTION) {
			    // Vehículos de facción.
                CreateVehicle(VehicleInfo[id][VehModel], VehicleInfo[id][VehPosX], VehicleInfo[id][VehPosY], VehicleInfo[id][VehPosZ], VehicleInfo[id][VehAngle], VehicleInfo[id][VehColor1], VehicleInfo[id][VehColor2], 3600);

			} else {
			    // Otros.
			    CreateVehicle(VehicleInfo[id][VehModel], VehicleInfo[id][VehPosX], VehicleInfo[id][VehPosY], VehicleInfo[id][VehPosZ], VehicleInfo[id][VehAngle], VehicleInfo[id][VehColor1], VehicleInfo[id][VehColor2], -1);
			}

			SetVehicleParamsEx(id, 0, VehicleInfo[id][VehLights], VehicleInfo[id][VehAlarm], 0, VehicleInfo[id][VehBonnet], VehicleInfo[id][VehBoot], VehicleInfo[id][VehObjective]);
			if(VehicleInfo[id][VehJob] == JOB_TAXI && VehicleInfo[id][VehModel] == 466) {
	   			new
	   			    objectID,
				   	Float:wWide,
				    Float:wLong,
					Float:height;

				GetVehicleModelInfo(VehicleInfo[id][VehModel], VEHICLE_MODEL_INFO_SIZE, wWide, wLong, height);
	   			objectID = CreateObject(19308, 0.0047, -0.1224, 0.9479, 0.0000, 0.0000, 90.0000);
				AttachObjectToVehicle(objectID, id, 0.0047, -0.1224, 0.9479, 0.0000, 0.0000, 90.0000);
			}
		}
		SetVehicleNumberPlate(id, VehicleInfo[id][VehPlate]);
		SetVehicleToRespawn(id);
    }
	return 1;
}

OnPlayerRegister(playerid, password[]) {
    if(IsPlayerConnected(playerid))	{
		new query[128],
			name[MAX_PLAYER_NAME],
			playersqlid;

		GetPlayerName(playerid, name, sizeof(name));
		mysql_real_escape_string(name, name);
		mysql_real_escape_string(password, password);
		format(query,sizeof(query),"INSERT INTO `accounts` (`Name`, `Password`) VALUES ('%s', MD5('%s'))", name, password);
  		mysql_function_query(dbHandle, query, false, "", "");
		strmid(PlayerInfo[playerid][pKey], password, 0, strlen(password), 128);
		
		//Create ThiefJob
		playersqlid=mysql_insert_id(dbHandle);
		createThiefJob(playersqlid);
		
		OnPlayerLogin(playerid, password);
		return 1;
	}
	return 0;
}

public SaveAccount(playerid) {
	if(dontsave) return 1;

	if(gPlayerLogged[playerid] && !cheater[playerid]) {
		new name[MAX_PLAYER_NAME],
			query[1536],
			day,
			month,
			year,
			hour,
			minute,
			second;

		getdate(year,month,day);
		gettime(hour,minute,second);

		GetPlayerName(playerid, name, 24);
		mysql_real_escape_string(name, name);
		
        if(AdminDuty[playerid]) {
			PlayerInfo[playerid][pHealth] = GetPVarFloat(playerid, "tempHealth");
		} else if(CopDuty[playerid]) {
		} else {
		    GetPlayerArmour(playerid, PlayerInfo[playerid][pArmour]);
		}

		if(PlayerInfo[playerid][pSpectating] == INVALID_PLAYER_ID) {
			GetPlayerPos(playerid, PlayerInfo[playerid][pX], PlayerInfo[playerid][pY], PlayerInfo[playerid][pZ]);
			GetPlayerFacingAngle(playerid, PlayerInfo[playerid][pA]);
			PlayerInfo[playerid][pInterior] = GetPlayerInterior(playerid);
			PlayerInfo[playerid][pVirtualWorld] = GetPlayerVirtualWorld(playerid);
		}

		// String.
		format(query, sizeof(query), "UPDATE accounts SET Ip = '%s', Name = '%s', pInv0 = '%s', pInv1 = '%s'",
			PlayerInfo[playerid][pIP],
			name,
			InvInfo[playerid][inv0],
			InvInfo[playerid][inv1]
		);

		// Integer.
		format(query,sizeof(query),"%s,Level=%d,AdminLevel=%d,AccountBlocked=%d,pRegStep=%d,Tutorial=%d,Sex=%d,Age=%d,Exp=%d,CashMoney=%d,BankMoney=%d,Skin=%d,pMask=%d,pHunger=%d,Job=%d,pJobAllowed=%d,JobTime=%d,PlayingHours=%d,PayCheck=%d,pPayTime=%d,Faction=%d,Rank=%d,HouseKey=%d,BizKey=%d,Warnings=%d",
			query,
			PlayerInfo[playerid][pLevel],
			PlayerInfo[playerid][pAdmin],
			PlayerInfo[playerid][pAccountBlocked],
			PlayerInfo[playerid][pRegStep],
			PlayerInfo[playerid][pTutorial],
			PlayerInfo[playerid][pSex],
			PlayerInfo[playerid][pAge],
			PlayerInfo[playerid][pExp],
			PlayerInfo[playerid][pCash],
			PlayerInfo[playerid][pBank],
			PlayerInfo[playerid][pSkin],
			PlayerInfo[playerid][pMask],
			floatround(PlayerInfo[playerid][pHunger]),
			PlayerInfo[playerid][pJob],
			PlayerInfo[playerid][pJobAllowed],
			PlayerInfo[playerid][pJobTime],
			PlayerInfo[playerid][pPlayingHours],
			PlayerInfo[playerid][pPayCheck],
			GetPVarInt(playerid, "pPayTime"),
			PlayerInfo[playerid][pFaction],
			PlayerInfo[playerid][pRank],
			PlayerInfo[playerid][pHouseKey],
			PlayerInfo[playerid][pBizKey],
			PlayerInfo[playerid][pWarnings]
		);

		format(query,sizeof(query),"%s,pMuteB=%d,pRentCarID=%d,pRentCarRID=%d,pMarijuana=%d,pLSD=%d,pEcstasy=%d,pCocaine=%d,pCigarettes=%d,pLighter=%d,pRadio=%d,pFightStyle=%d,pAdictionAbstinence=%d",
		    query,
			PlayerInfo[playerid][pMuteB],
			PlayerInfo[playerid][pRentCarID],
			PlayerInfo[playerid][pRentCarRID],
			PlayerInfo[playerid][pMarijuana],
			PlayerInfo[playerid][pLSD],
			PlayerInfo[playerid][pEcstasy],
			PlayerInfo[playerid][pCocaine],
			PlayerInfo[playerid][pCigarettes],
			PlayerInfo[playerid][pLighter],
			PlayerInfo[playerid][pRadio],
			PlayerInfo[playerid][pFightStyle],
			PlayerInfo[playerid][pAdictionAbstinence]
		);
		format(query,sizeof(query),"%s, `CarLic`='%d', `FlyLic`='%d', `WepLic`='%d', `PhoneNumber`='%d', `PhoneCompany`='%d', `PhoneBook`='%d', `ListNumber`='%d', `Jailed`='%d', `JailedTime`='%d', `pThirst`='%d', `pInterior`='%d', `pWorld`='%d', `pVeh1`='%d', `pVeh2`='%d', `pHospitalized`='%d', `pWantedLevel`='%d', `pCantWork`='%d', `pJobLimitCounter`='%d'",
			query,
			PlayerInfo[playerid][pCarLic],
			PlayerInfo[playerid][pFlyLic],
			PlayerInfo[playerid][pWepLic],
			PlayerInfo[playerid][pPhoneNumber],
			PlayerInfo[playerid][pPhoneC],
			PlayerInfo[playerid][pPhoneBook],
			PlayerInfo[playerid][pListNumber],
			PlayerInfo[playerid][pJailed],
			PlayerInfo[playerid][pJailTime],
			floatround(PlayerInfo[playerid][pThirst]),
			PlayerInfo[playerid][pInterior],
			PlayerInfo[playerid][pVirtualWorld],
			PlayerInfo[playerid][pVeh1],
			PlayerInfo[playerid][pVeh2],
			PlayerInfo[playerid][pHospitalized],
			PlayerInfo[playerid][pWantedLevel],
   			PlayerInfo[playerid][pCantWork],
   			GetPVarInt(playerid, "pJobLimitCounter")
		);

		// Date.
		format(query, sizeof(query), "%s,LastConnected='%02d-%02d-%02d %02d:%02d:%02d',pAccusedOf='%s',pAccusedBy='%s'",
			query,
			year,
			month,
			day,
			hour,
			minute,
			second,
			PlayerInfo[playerid][pAccusedOf],
			PlayerInfo[playerid][pAccusedBy]);

		// Si está agonizando le seteamos la vida a 24 para que al relogear no le permita andar libremente como si estuviera curado.
		if(PlayerInfo[playerid][pHealth] == 25 || GetPVarInt(playerid, "disabled") == DISABLE_DYING)
		    PlayerInfo[playerid][pHealth] = 24;
		    
		// Float.
		format(query,sizeof(query),"%s, `pX`='%f', `pY`='%f', `pZ`='%f', `pA`='%f', `pAdictionPercent`='%f', `pHealth`='%f', `pArmour`='%f' WHERE `Id` = %d",
		    query,
		    PlayerInfo[playerid][pX],
		    PlayerInfo[playerid][pY],
		    PlayerInfo[playerid][pZ],
		    PlayerInfo[playerid][pA],
		    PlayerInfo[playerid][pAdictionPercent],
		    PlayerInfo[playerid][pHealth],
		    PlayerInfo[playerid][pArmour],
		    PlayerInfo[playerid][pID]);


		mysql_function_query(dbHandle, query, false, "", "");
	}
	return 1;
}


stock GetPlayerSpeed(playerid, bool:kmh) {
    new
		Float:Vx,
		Float:Vy,
		Float:Vz,
		Float:rtn;

    if(IsPlayerInAnyVehicle(playerid)) {
		GetVehicleVelocity(GetPlayerVehicleID(playerid),Vx,Vy,Vz);
	} else {
		GetPlayerVelocity(playerid,Vx,Vy,Vz);
	}
    rtn = floatsqroot(floatabs(floatpower(Vx + Vy + Vz,2)));
    return kmh?floatround(rtn * 100 * 1.61):floatround(rtn * 100);
}

stock GetPlayerBusiness(playerid) {
	for(new i = 1; i < MAX_BUSINESS; i++) {
	    if(Business[i][bInsideInt] == GetPlayerInterior(playerid) && Business[i][bInsideWorld] == GetPlayerVirtualWorld(playerid) && Business[i][bInsideWorld] != 0) {
			return i;
		}
	}
	return 0;
}

stock GetPlayerBuilding(playerid) {
	for(new i = 1; i < MAX_BUILDINGS; i++) {
	    if(Building[i][blInsideInt] == GetPlayerInterior(playerid) && Building[i][blInsideWorld] == GetPlayerVirtualWorld(playerid) && Building[i][blInsideWorld] != 0) {
			return i;
		}
	}
	return 0;
}

stock GetPlayerHouse(playerid) {
	for(new i = 1; i < MAX_HOUSES; i++) {
	    if(House[i][ExitInterior] == GetPlayerInterior(playerid) && House[i][InsideWorld] == GetPlayerVirtualWorld(playerid) && House[i][InsideWorld] != 0) {
			return i;
		}
	}
	return 0;
}

//=========================INGRESOS POR ENTORNO A NEGOCIOS======================

GetBusinessPayCheck(bizID)
{
	new payDayMoney;
	switch(Business[bizID][bType])
	{
		case BIZ_REST: 	payDayMoney = Business[bizID][bPrice] / 434; // 0.23 porciento
		case BIZ_CLUB: 	payDayMoney = Business[bizID][bPrice] / 500; // 0.20 porciento
		case BIZ_CLUB2:	payDayMoney = Business[bizID][bPrice] / 384; // 0.26 porciento
		case BIZ_CASINO: payDayMoney = Business[bizID][bPrice] / 454; // 0.22 porciento
		case BIZ_HARD:  payDayMoney = Business[bizID][bPrice] / 500; // 0.20 porciento
		case BIZ_AMMU: 	payDayMoney = Business[bizID][bPrice] / 357; // 0.28 porciento
		case BIZ_247: 	payDayMoney = Business[bizID][bPrice] / 333; // 0.30 porciento
		case BIZ_PHON: 	payDayMoney = Business[bizID][bPrice] / 400; // 0.25 porciento
		case BIZ_ADVE: 	payDayMoney = Business[bizID][bPrice] / 434; // 0.23 porciento
		case BIZ_CLOT2: payDayMoney = Business[bizID][bPrice] / 454; // 0.22 porciento
		case BIZ_CLOT: 	payDayMoney = Business[bizID][bPrice] / 500; // 0.20 porciento
		default: 		payDayMoney = 0;
	}
	payDayMoney += GetBusinessTaxes(bizID); // 0.25 porciento adicional que nos va a cobrar de impuestos
	payDayMoney += 50 * PRICE_BIZ_PROD; // lo que nos saca de productos el entorno
	return payDayMoney;
}

GetBusinessTaxes(bizID)
{
	return Business[bizID][bPrice] / 400; // 0.25 porciento del valor de compra
}

//===================================PAYDAY=====================================

public PayDay(playerid) {
    if(gPlayerLogged[playerid]) {
        switch(PlayerInfo[playerid][pFaction]) {
            case FAC_PMA: {
                switch(PlayerInfo[playerid][pRank]) {
	                case 1: PlayerInfo[playerid][pPayCheck] += 10000;
	                case 2: PlayerInfo[playerid][pPayCheck] += 9500;
	                case 3: PlayerInfo[playerid][pPayCheck] += 9500;
	                case 4: PlayerInfo[playerid][pPayCheck] += 8500;
	                case 5: PlayerInfo[playerid][pPayCheck] += 7500;
	                case 6: PlayerInfo[playerid][pPayCheck] += 5000;
	                case 7: PlayerInfo[playerid][pPayCheck] += 4300;
	                case 8: PlayerInfo[playerid][pPayCheck] += 3500;
	                case 9: PlayerInfo[playerid][pPayCheck] += 5000;
	                case 10: PlayerInfo[playerid][pPayCheck] += 6500;
	            }
            }
            case FAC_HOSP: {
                switch(PlayerInfo[playerid][pRank]) {
	                case 1: PlayerInfo[playerid][pPayCheck] += 10000;
	                case 2: PlayerInfo[playerid][pPayCheck] += 8000;
	                case 3: PlayerInfo[playerid][pPayCheck] += 7000;
	                case 4: PlayerInfo[playerid][pPayCheck] += 6500;
	                case 5: PlayerInfo[playerid][pPayCheck] += 6000;
	                case 6: PlayerInfo[playerid][pPayCheck] += 5500;
	                case 7: PlayerInfo[playerid][pPayCheck] += 4500;
	                case 8: PlayerInfo[playerid][pPayCheck] += 3500;
	                case 9: PlayerInfo[playerid][pPayCheck] += 1000;
	                case 10: PlayerInfo[playerid][pPayCheck] += 1000;
	            }
            }
            case FAC_MECH: {
                switch(PlayerInfo[playerid][pRank]) {
	                case 1: PlayerInfo[playerid][pPayCheck] += 7000;
	                case 2: PlayerInfo[playerid][pPayCheck] += 6000;
	                case 3: PlayerInfo[playerid][pPayCheck] += 5000;
	                case 4: PlayerInfo[playerid][pPayCheck] += 4500;
	                case 5: PlayerInfo[playerid][pPayCheck] += 3000;
	                case 6: PlayerInfo[playerid][pPayCheck] += 1000;
	                case 7: PlayerInfo[playerid][pPayCheck] += 1000;
	                case 8: PlayerInfo[playerid][pPayCheck] += 1000;
	                case 9: PlayerInfo[playerid][pPayCheck] += 1000;
	                case 10: PlayerInfo[playerid][pPayCheck] += 1000;
	            }
            }
            case FAC_MAN: {
                switch(PlayerInfo[playerid][pRank]) {
	                case 1: PlayerInfo[playerid][pPayCheck] += 7000;
	                case 2: PlayerInfo[playerid][pPayCheck] += 6000;
	                case 3: PlayerInfo[playerid][pPayCheck] += 5000;
	                case 4: PlayerInfo[playerid][pPayCheck] += 4500;
	                case 5: PlayerInfo[playerid][pPayCheck] += 3000;
	                case 6: PlayerInfo[playerid][pPayCheck] += 1000;
	                case 7: PlayerInfo[playerid][pPayCheck] += 1000;
	                case 8: PlayerInfo[playerid][pPayCheck] += 1000;
	                case 9: PlayerInfo[playerid][pPayCheck] += 1000;
	                case 10: PlayerInfo[playerid][pPayCheck] += 1000;
	            }
            }
            case FAC_SIDE: {
                switch(PlayerInfo[playerid][pRank]) {
	                case 1: PlayerInfo[playerid][pPayCheck] += 12000;
	                case 2: PlayerInfo[playerid][pPayCheck] += 7000;
	                case 3: PlayerInfo[playerid][pPayCheck] += 6000;
	                case 4: PlayerInfo[playerid][pPayCheck] += 5500;
	                case 5: PlayerInfo[playerid][pPayCheck] += 4000;
	                case 6: PlayerInfo[playerid][pPayCheck] += 2000;
	                case 7: PlayerInfo[playerid][pPayCheck] += 2000;
	                case 8: PlayerInfo[playerid][pPayCheck] += 2000;
	                case 9: PlayerInfo[playerid][pPayCheck] += 2000;
	                case 10: PlayerInfo[playerid][pPayCheck] += 2000;
	            }
            }
            default: {
            	if(PlayerInfo[playerid][pJob] == 0 || // Si no tiene empleo realmente
					PlayerInfo[playerid][pJob] == JOB_FELON || // Si para el estado el sujeto no tiene empleo (job ilegal)
					PlayerInfo[playerid][pJob] == JOB_DRUGF  || // Si para el estado el sujeto no tiene empleo (job ilegal)
					PlayerInfo[playerid][pJob] == JOB_DRUGD) // Si para el estado el sujeto no tiene empleo (job ilegal)
            		PlayerInfo[playerid][pPayCheck] += 800 + random(400); // ASIGNACION A LOS DESEMPLEADOS
			}
        }
        
		//===========================IMPUESTOS==================================

		new tax = 0;
		if(PlayerInfo[playerid][pVeh1] != 0)
		    tax += GetVehiclePrice(PlayerInfo[playerid][pVeh1], 1) / 4;
		if(PlayerInfo[playerid][pVeh2] != 0)
		    tax += GetVehiclePrice(PlayerInfo[playerid][pVeh2], 1) / 4;
		if(PlayerInfo[playerid][pHouseKey] != 0)
		    tax += ( House[PlayerInfo[playerid][pHouseKey]][HousePrice] / 100 ) / 4;
		    
		//============================NEGOCIOS==================================
		
		new bizID = PlayerInfo[playerid][pBizKey], bizPay = 0, bizTax = 0;
		if(bizID != 0)
		{
		    bizTax = GetBusinessTaxes(bizID);
  			Business[bizID][bTill] -= bizTax;
		    openBizPermission[bizID] = true;
		    if(Business[bizID][bLocked] == 0 && Business[bizID][bProducts] >= 50)
		    {
		        bizPay = GetBusinessPayCheck(bizID);
			    Business[bizID][bTill] += bizPay;
		     	Business[bizID][bProducts] -= 50; // minimo que se descuenta para obtener ganancias del entorno
			}
		}
		
		//========================CONTROL DE BARRIOS============================
		
		new gangProfits = 0;
		if(PlayerInfo[playerid][pFaction] != 0)
		{
		    if(FactionInfo[PlayerInfo[playerid][pFaction]][fType] == FAC_TYPE_GANG && PlayerInfo[playerid][pRank] == 1)
			{
			    gangProfits = GetGangZoneLiderIncome(playerid);
			    FactionInfo[PlayerInfo[playerid][pFaction]][fBank] += gangProfits;
			}
		}
        
        //========================COSTOS BANCARIOS==============================

		new banktax = 0;
		banktax = (PlayerInfo[playerid][pBank] / 100) / 34; // 0.030% del dinero en la cuenta
		if(banktax < 50)
		    banktax = 50; // Mínimo de 50 pesos por tener la cuenta abierta
        
        //============================INGRESOS==================================

		new randextra = 20 + random(180);
	    new newbank = PlayerInfo[playerid][pBank] + PlayerInfo[playerid][pPayCheck] - tax + randextra;

		if(PlayerInfo[playerid][pCantWork] == 1 && PlayerInfo[playerid][pJailed] == 0) {
		    PlayerInfo[playerid][pCantWork] = 0;
		}
		SetPVarInt(playerid, "pJobLimitCounter", 0);
		SendClientMessage(playerid, COLOR_YELLOW, "============================[DIA DE PAGO]============================");
	    SendFMessage(playerid, COLOR_WHITE, "- Salario: $%d + $%d - Impuestos: $%d - Servicios bancarios: $%d", PlayerInfo[playerid][pPayCheck], randextra, tax, banktax);
	    SendFMessage(playerid, COLOR_WHITE, "- Balance anterior: $%d - Nuevo balance: $%d", PlayerInfo[playerid][pBank], newbank);
		SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{878EE7}[INFO]:{C8C8C8} El dinero ha sido depositado en su cuenta bancaria.");
		if(bizID != 0) {
			    SendFMessage(playerid, COLOR_WHITE, "[Negocio %s] Ingresos: $%d - Impuestos: $%d - Balance de caja: $%d - Productos: %d", Business[bizID][bName], bizPay, bizTax, Business[bizID][bTill], Business[bizID][bProducts]);
	        	SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{878EE7}[INFO]:{C8C8C8} Si tu negocio está cerrado o con falta de stock (mín 50 prod), no dejará ganancias en la caja.");
		}
		if(gangProfits > 0)
		    SendFMessage(playerid, COLOR_WHITE, "[Facción %s] Los barrios nos han generado ingresos por $%d a la cuenta de la facción.", FactionInfo[PlayerInfo[playerid][pFaction]][fName], gangProfits);
	    PlayerInfo[playerid][pBank] = newbank;
		PlayerInfo[playerid][pPayCheck] = 0;
		PlayerInfo[playerid][pExp]++;
		PlayerInfo[playerid][pPlayingHours] += 1;
		if(PlayerInfo[playerid][pJobTime] > 0)	{
			PlayerInfo[playerid][pJobTime]--; // Reducimos la cantidad de tiempo que tiene que esperar para poder tomar otro empleo.
		}

		new
			expamount = (PlayerInfo[playerid][pLevel] + 1) * ServerInfo[svLevelExp];

		if(PlayerInfo[playerid][pExp] < expamount) {
			SendFMessage(playerid, COLOR_WHITE, "(( Tienes %d/%d puntos de respeto. ))", PlayerInfo[playerid][pExp], expamount);
		} else {
		    PlayerInfo[playerid][pExp] = 0;
		    PlayerInfo[playerid][pLevel]++;
		    expamount = (PlayerInfo[playerid][pLevel] + 1) * ServerInfo[svLevelExp];
		    SendFMessage(playerid, COLOR_WHITE, "(( ¡Su cuenta es ahora nivel %d! ¡Acumula %d puntos de experiencia para el proximo nivel! ))", PlayerInfo[playerid][pLevel],expamount);
		}
		SendClientMessage(playerid, COLOR_YELLOW, "===================================================================");
	}
}

public accountTimer()
{
    foreach(new playerid : Player)
	{
	    if(gPlayerLogged[playerid]) {
			SaveAccount(playerid);
		}
	}
}

stock syncPlayerTime(const playerid)
{
	if(GetPVarInt(playerid, "drugEffect") > 0)
	{ // No se hace nada
	} else
		if(GetPlayerInterior(playerid) == 0 && GetPlayerVirtualWorld(playerid) == 0 )
		{
			SetPlayerWeather(playerid, weatherVariables[0]);
		} else
			SetPlayerWeather(playerid, INTERIOR_WEATHER_ID);
	return SetPlayerTime(playerid, gTime[0], gTime[1]);
}

public BackupClear(playerid, calledbytimer) {
	if(IsPlayerConnected(playerid)) {
		if(PlayerInfo[playerid][pFaction] != FAC_SIDE && PlayerInfo[playerid][pFaction] != FAC_PMA && PlayerInfo[playerid][pFaction] != FAC_HOSP) return 1;

		if(CopDuty[playerid] == 0 && SIDEDuty[playerid] == 0 && MedDuty[playerid] == 0) {
	    	SendClientMessage(playerid, COLOR_YELLOW2, "¡Debes estar en servicio!");
	    	return 1;
		}
		if(GetPVarInt(playerid, "requestingBackup") == 1) {
			foreach(Player, i) {
				if(PlayerInfo[i][pFaction] == 1 || PlayerInfo[i][pFaction] == 2) {
					SetPlayerMarkerForPlayer(i, playerid, 0xFFFFFF00);
				}
			}
			if(calledbytimer != 1)	{
				SendClientMessage(playerid, COLOR_YELLOW2, "Su solicitud de refuerzos ha sido eliminada.");
			} else {
				SendClientMessage(playerid, COLOR_YELLOW2, "Su solicitud de refuerzos ha sido eliminada automáticamente.");
			}
			DeletePVar(playerid, "requestingBackup");
		} else {
			if(calledbytimer != 1)	{
				SendClientMessage(playerid, COLOR_YELLOW2, "¡No tienes ninguna solicitud activa todavía!");
			}
		}
	}
	return 1;
}

stock chargeTaxis(){
	if(--TaxiTimer<0){
		new string[128];
		TaxiTimer=PRICE_TAXI_INTERVAL;
		foreach(new playerid : Player) {
			if(gPlayerLogged[playerid]) {
				if(PlayerInfo[playerid][pJob] == JOB_TAXI && jobDuty[playerid] && TransportPassenger[playerid] < 999 && TaxiTimer==PRICE_TAXI_INTERVAL) {
				    if(GetPlayerCash(TransportPassenger[playerid]) >= PRICE_TAXI) {
						TransportCost[playerid] += PRICE_TAXI;
						format(string, sizeof(string), "~w~Tarifa: ~g~$%d", TransportCost[playerid]);
						GameTextForPlayer(playerid, string , 1000, 4);
						format(string, sizeof(string), "~r~Tarifa: ~g~$%d", TransportCost[playerid]);
					    GameTextForPlayer(TransportPassenger[playerid], string, 1000, 4);
					} else {
					    GameTextForPlayer(playerid, "~r~El pasajero se ha quedado sin efectivo..." , 1000, 4);
					    GameTextForPlayer(TransportPassenger[playerid], "~r~Te has quedado sin dinero...", 1000, 4);
					}
				}
			}
		}
  	}
}

public OnPlayerTakeDamage(playerid, issuerid, Float: amount, weaponid, bodypart) {
	new Float:armour;
    GetPlayerArmour(playerid, armour);

    if(issuerid != INVALID_PLAYER_ID)
	{
 		if(weaponid == 41) // hacemos que el spray solo te inutilize para evitar abusos
            return 1;
	
		if(checkTazer(playerid,issuerid,amount,weaponid))
		    return 1;

		if(weaponid == 0)
		{
		    if(DrugEffectEcstasy[issuerid] == false || DrugEffectMarijuana[playerid] == false)  // Si no tienen los 2 la droga contraria
		    {
			    if(DrugEffectEcstasy[issuerid] == true)
			    {
			    	amount = (amount / 10) * 17; // subimos 70 porciento el daño a trompadas que inflige si esta drogado con LSD
	    			if(armour > 0)
						SetPlayerHealthEx(playerid, PlayerInfo[playerid][pHealth] - (amount / (armour / 2)) );
					else
						SetPlayerHealthEx(playerid, PlayerInfo[playerid][pHealth] - amount);
					return 1;
				}
				if(DrugEffectMarijuana[playerid] == true)
				{
	                amount = (amount / 2); // reducimos 50 porciento el daño a trompadas que recibe si esta drogado con marihuana
					if(armour > 0)
						SetPlayerHealthEx(playerid, PlayerInfo[playerid][pHealth] - (amount / (armour / 2)));
					else
						SetPlayerHealthEx(playerid, PlayerInfo[playerid][pHealth] - amount);
					return 1;
				}
			}
		}
	}
	if(armour > 0)
	{
		SetPlayerHealthEx(playerid, PlayerInfo[playerid][pHealth] - (amount / (armour / 2)));
	} else
 	{
 		SetPlayerHealthEx(playerid, PlayerInfo[playerid][pHealth] - amount);
	}


    return 1;
}

stock SetPlayerHealthEx(playerid, Float:health) {
	PlayerInfo[playerid][pHealth] = health;
	return 1;
}

stock GetPlayerHealthEx(playerid, &Float:health) {
	health = PlayerInfo[playerid][pHealth];
	return 1;
}

stock isWeaponAllowed(weapon) {
	if(weapon == 44 || weapon == 35 || weapon == 36 || weapon == 37 || weapon == 38 || weapon == 39 || weapon == 40) {
	    return 0;
	}
	return 1;
}

public antiCheatTimer() {
	new
	    string[128];
	    
	foreach(new playerid : Player) {
	    new weapon = GetPlayerWeapon(playerid);

	    //
		if(gPlayerLogged[playerid] == 1) {
		    if(PlayerInfo[playerid][pAdmin] < 1) {
				if(!isWeaponAllowed(weapon)) {
				    format(string, sizeof(string), "arma %d [%s] ", weapon, itemName[weapon]);
					KickPlayer(playerid, "el sistema", string);
				}
			}
			
			if(GetPVarInt(playerid, "died") != 1) {
				SetPlayerHealth(playerid, PlayerInfo[playerid][pHealth]);
			}
			
			if(GetPlayerCash(playerid) != GetPlayerMoney(playerid)) {
 				new hack = GetPlayerMoney(playerid) - GetPlayerCash(playerid);
		  		if(hack >= 5000) {
				    format(string, sizeof(string), "[Advertencia]: %s (ID:%d) intentó editarse $%d.",GetPlayerNameEx(playerid), playerid, hack);
				    AdministratorMessage(COLOR_WHITE, string, 1);
				    log(playerid, LOG_MONEY, string);
		  		}
		 		ResetMoneyBar(playerid);
				UpdateMoneyBar(playerid,PlayerInfo[playerid][pCash]);
			}

		    if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USEJETPACK && PlayerInfo[playerid][pAdmin] < 1) {
		        BanPlayer(playerid, INVALID_PLAYER_ID, "cheat");
		    }
		}
	}
}

public fuelCar(playerid, refillprice, refillamount, refilltype, validslot)
{
	if(refilltype == 1)
	{
    	VehicleInfo[GetPlayerVehicleID(playerid)][VehFuel] += refillamount;
		SendFMessage(playerid, COLOR_WHITE, "El tanque de su vehículo ha sido cargado al %d porciento por $%d.", VehicleInfo[GetPlayerVehicleID(playerid)][VehFuel], refillprice);
	} else
		if(refilltype == 2)
		{
		    setInvParam(playerid, validslot, getInvParam(playerid, validslot) + refillamount);
		    SendFMessage(playerid, COLOR_WHITE, "Has cargado nafta en tu bidón de combustible al %d porciento por $%d.", getInvParam(playerid, validslot), refillprice);
	    }
	GivePlayerCash(playerid,-refillprice);
	PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
	TogglePlayerControllable(playerid, true);
	fillingFuel[playerid] = false;
	return 1;
}

public fuelCarWithCan(playerid, vehicleid, totalfuel)
{
    VehicleInfo[vehicleid][VehFuel] = totalfuel;
    PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
    TogglePlayerControllable(playerid, true);
	return 1;
}

public eventTimer(playerid) {
	new
		bool:alreadyMission = false,
	    faction = PlayerInfo[playerid][pFaction];
	    
	if(PlayerInfo[playerid][pJailed] == 0) {
		if(random(3) == 1) {
			if(faction > 0 && FactionInfo[faction][fType] == FAC_TYPE_ILLEGAL && eventStep[playerid] == 0) {
			    foreach(new i : Player) {
			        if(PlayerInfo[i][pFaction] == faction && eventStep[i] > 0) {
			            alreadyMission = true;
			            break;
			        }
			    }
			    if(!alreadyMission) {
					PlayerDoMessage(playerid, 15.0, "Un teléfono ha comenzado a sonar.");
					SendClientMessage(playerid, COLOR_WHITE, "Tienes una llamada, utiliza /atender o /colgar.");
					SetPVarInt(playerid, "eventStepTimer", SetTimerEx("eventStepTimer", 35000, false, "i", playerid));
					eventStep[playerid] = 1;
				}
			}
		}
	}
	return 1;
}

public eventStepTimer(playerid) {
	PlayerDoMessage(playerid, 15.0, "Han colgado...");
	eventStep[playerid] = 0;
	return 1;
}

public globalUpdate() {
	new
	    playerCount = 0,
		string[128];
	/* --------------------- HORA - CLIMA --------------------- */
	gettime(gTime[0], gTime[1], gTime[2]);



	if(gTime[1] >= 59 && gTime[2] >= 59) {
	
	

		weatherVariables[1] += random(3) + 1; // Weather changes aren't regular.

		SetWorldTime(gTime[0]); // Set the world time to keep the worldtime variable updated (and ensure it syncs instantly for connecting players).

		/*if(weatherVariables[1] >= MAX_WEATHER_POINTS) {
			weatherVariables[0] = validWeatherIDs[random(sizeof(validWeatherIDs))];
			foreach(Player, i) {
				if(!GetPlayerInterior(i)) {
					SetPlayerWeather(i, weatherVariables[0]);
				}
				else SetPlayerWeather(i, INTERIOR_WEATHER_ID);
			}
			weatherVariables[1] = 0;
		}*/
	}
	/* -------------------------------------------------------- */

	chargeTaxis();
	
	foreach(new playerid : Player) {
	    playerCount++;
	    
	    if(GetPVarInt(playerid, "drugEffect") > 0) {
	        SetPVarInt(playerid, "drugEffect", GetPVarInt(playerid, "drugEffect") - 1);
	        if(GetPVarInt(playerid, "drugEffect") == 0) {
	            syncPlayerTime(playerid);
	        }
	    }
	    
	    if(playerCount > ServerInfo[sPlayersRecord]) {
	        ServerInfo[sPlayersRecord] = playerCount;
	       	format(string, sizeof(string), "[Staff]: ¡hemos superado el record de usuarios online! (%d jugadores)", playerCount);
			AdministratorMessage(COLOR_LIGHTORANGE, string, 1);
		}
		
		SetPlayerScore(playerid, PlayerInfo[playerid][pLevel]);
		if(gTime[2] >= 59)
			syncPlayerTime(playerid);
		
		if(gPlayerLogged[playerid] && PlayerInfo[playerid][pTutorial] == 1 && PlayerInfo[playerid][pRegStep] == 0) {
			if(MechanicCallTime[playerid] > 0) {
				if(MechanicCallTime[playerid] == 90) { MechanicCallTime[playerid] = 0; DisablePlayerCheckpoint(playerid); PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0); GameTextForPlayer(playerid, "~r~El marcador desaparecio", 2500, 1); }
				else {
					format(string, sizeof(string), "%d", 90 - MechanicCallTime[playerid]);
					GameTextForPlayer(playerid, string, 1500, 6);
					MechanicCallTime[playerid] += 1;
				}
			}
			
			if(cAFK[playerid] == 0 && PlayerInfo[playerid][pJailed] != 2) // Si no está AFK ni en Jail OOC
			{
				SetPVarInt(playerid, "pPayTime", GetPVarInt(playerid, "pPayTime") + 1);
				if(GetPVarInt(playerid, "pPayTime") >= 3600) {
					SetPVarInt(playerid, "pPayTime", 0);
					PayDay(playerid);
				}
				
    			//Contadores
				updateThiefCounters(playerid);
				
				if(PlayerInfo[playerid][pMuteB] > 0)
				    PlayerInfo[playerid][pMuteB]--;
				//
				
			}
			
			GetPlayerCameraPos(playerid, cAFKPos[playerid][6], cAFKPos[playerid][7], cAFKPos[playerid][8]);
			if(cAFKPos[playerid][6] != cAFKPos[playerid][3] && cAFKPos[playerid][7] != cAFKPos[playerid][4] && cAFKPos[playerid][8] != cAFKPos[playerid][5])
			{
				if(cAFK[playerid] == 1)
				{
					SetPlayerVirtualWorld(playerid, (cTomarVW[playerid]));
					cAFK[playerid] = 0;
					KillTimer(cAFKTimer[playerid]);
					KillTimer(TAFKT[playerid]);
					cAFKTimer[playerid] = SetTimerEx("AFKc", cAFKTime, 1, "i", playerid);
				}
			}
			
			if(PlayerInfo[playerid][pSpectating] != INVALID_PLAYER_ID) {
				if(GetPlayerInterior(playerid) != GetPlayerInterior(PlayerInfo[playerid][pSpectating])){
					SetPlayerInterior(playerid, GetPlayerInterior(PlayerInfo[playerid][pSpectating]));
				}
				if(GetPlayerVirtualWorld(playerid) != GetPlayerVirtualWorld(PlayerInfo[playerid][pSpectating])){
					SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(PlayerInfo[playerid][pSpectating]));
				}
			}
			
			if(PlayerInfo[playerid][pHospitalized] == 0 && PlayerInfo[playerid][pJailed] != 2) {
                // Camara normal si se curó o si esta arriba de un auto
				if( ( PlayerInfo[playerid][pHealth] > 25 || IsPlayerInAnyVehicle(playerid) ) && dyingCamera[playerid] == true)
				{
					dyingCamera[playerid] = false;
					SetCameraBehindPlayer(playerid);
				}
				// -----------------------------
				
		        if(PlayerInfo[playerid][pHealth] > 0 && PlayerInfo[playerid][pHealth] < 25 && GetPVarInt(playerid, "disabled") != DISABLE_DYING && GetPVarInt(playerid, "disabled") != DISABLE_DEATHBED) {
		         	TogglePlayerControllable(playerid, false);
		            if(!IsPlayerInAnyVehicle(playerid)) {
						ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
                        SetPlayerHealthEx(playerid, 25);
					}

		            SendClientMessage(playerid, COLOR_LIGHTBLUE, "¡Te encuentras herido e incapaz de moverte!, con cada segundo que pase perderás algo de sangre.");
		            SetPVarInt(playerid, "disabled", DISABLE_DYING);
		            
		            if(GetPlayerInterior(playerid) == 0 && GetPlayerVirtualWorld(playerid) == 0) // Solo sirve para exteriores
		            {
			            // Camara panoramica al agonizar
			            new Float:dyingX, Float:dyingY, Float:dyingZ;
			            GetPlayerPos(playerid, dyingX, dyingY, dyingZ);
			            SetPlayerCameraPos(playerid, dyingX - 5.0, dyingY - 5.0, dyingZ + 6.0);
			            SetPlayerCameraLookAt(playerid, dyingX, dyingY, dyingZ, CAMERA_MOVE);
			            dyingCamera[playerid] = true;
			            // -----------------------------
						if(random(10) < 8)
						{
	                        new Float:playerMedicPos[3];
							GetPlayerPos(playerid, playerMedicPos[0], playerMedicPos[1], playerMedicPos[2]);
							foreach(new play : Player)
							{
				               	if(PlayerInfo[play][pFaction] == FAC_HOSP || (PlayerInfo[play][pFaction] == FAC_PMA && CopDuty[play]) )
								{
	                                if(PlayerInfo[play][pFaction] == FAC_PMA)
				               			SendClientMessage(play, COLOR_PMA, "[Llamado al 911]: ¡Atención! Un ciudadano ha reportado a un herido de gravedad. Lo marcamos en su GPS.");
									else
									    SendClientMessage(play, COLOR_WHITE, "[Hospital]: ¡Atención! Hemos marcado en su GPS la ubicación de una llamada de emergencia que requiere asistencia.");
									SetPlayerCheckpoint(play, playerMedicPos[0], playerMedicPos[1], playerMedicPos[2], 4.0);
								}
		     				}
		     				SendClientMessage(playerid, COLOR_YELLOW2, "¡Un ciudadano notó tu agonía y ha reportado tu situacion al 911!");
						} else {
	                        SendClientMessage(playerid, COLOR_YELLOW2, "Desafortunadamente nadie ha notado tu agonía.");
						}
					}
		        } else if(PlayerInfo[playerid][pHealth] > 25 && GetPVarInt(playerid, "disabled") == DISABLE_DYING) {
		            SendClientMessage(playerid, COLOR_WHITE, "¡Has sido curado!, ten más cuidado la próxima vez.");
		            TogglePlayerControllable(playerid, true);
                    SetPVarInt(playerid, "disabled", DISABLE_NONE);
                } else if(PlayerInfo[playerid][pHealth] > 1.0 && GetPVarInt(playerid, "disabled") == DISABLE_DYING) {
					PlayerInfo[playerid][pHealth] -= HP_LOSS;
				} else if(PlayerInfo[playerid][pHealth] <= 1.0 && PlayerInfo[playerid][pHealth] > 0.0 && GetPVarInt(playerid, "disabled") != DISABLE_DEATHBED) {
					TogglePlayerControllable(playerid, false);
					ApplyAnimation(playerid, "CRACK", "crckdeth2", 2.0, 1, 0, 0, 0, 0);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "Estás en tu lecho de muerte por lo que ya no podran salvarte, puedes utilizar {FFFFFF}/morir{87CEFA} o continuar roleando.");
                    SetPVarInt(playerid, "disabled", DISABLE_DEATHBED);
          		}
		    } else if(PlayerInfo[playerid][pHospitalized] >= 2) {
		        PlayerInfo[playerid][pHospitalized]++;
		        
		        SetPlayerHealthEx(playerid, PlayerInfo[playerid][pHealth] + HP_GAIN);

		        if(PlayerInfo[playerid][pHealth] >= 100) {
		            switch(GetPVarInt(playerid, "hosp")) {
		           	 	case 1: {
		                    PlayerInfo[playerid][pX] = 1178.9762;
							PlayerInfo[playerid][pY] = -1323.5491;
							PlayerInfo[playerid][pZ] = 14.1466;
							PlayerInfo[playerid][pA] = 270.0892;
		                }
		                case 2: {
		                    PlayerInfo[playerid][pX] = 2001.6489;
							PlayerInfo[playerid][pY] = -1446.1147;
							PlayerInfo[playerid][pZ] = 13.5611;
							PlayerInfo[playerid][pA] = 137.1013;
		                }
		            }
		            
					SendFMessage(playerid, COLOR_YELLOW2, "Has sido dado de alta. Te cobraron $%d por tu tratamiento. Lo que te quede a pagar se descontará de tu cuenta bancaria.", PRICE_TREATMENT);
		            if(GetPlayerCash(playerid) > PRICE_TREATMENT)
						GivePlayerCash(playerid, -PRICE_TREATMENT); // se cobra 2 mil por el tratamiento
					else
						if(GetPlayerCash(playerid) > 0)
						{
							PlayerInfo[playerid][pBank] -= PRICE_TREATMENT - GetPlayerCash(playerid);
						    ResetPlayerCash(playerid);
						} else
						    PlayerInfo[playerid][pBank] -= PRICE_TREATMENT;
					FactionInfo[FAC_HOSP][fBank] += PRICE_TREATMENT / 8;
					
					RefillPlayerBasicNeeds(playerid);
		            ResetPlayerWeapons(playerid);
		            DeletePVar(playerid, "hosp");
		            SetPlayerHealthEx(playerid, 100);
		            PlayerInfo[playerid][pHospitalized] = 0;
					PlayerInfo[playerid][pArmour] = 0;
					PlayerInfo[playerid][pVirtualWorld] = 0;
					PlayerInfo[playerid][pInterior] = 0;
		            SpawnPlayer(playerid);
				}
			}
		}
	}
	return 1;
}

stock ini_GetKey( line[] )
{
	new keyRes[256];

	keyRes[0] = 0;
    if ( strfind( line , "=" , true ) == -1 ) return keyRes;
    strmid( keyRes , line , 0 , strfind( line , "=" , true ) , sizeof( keyRes) );
    return keyRes;
}

stock ini_GetValue(line[]) {
	new valRes[256];
	valRes[0]=0;
	if ( strfind( line , "=" , true ) == -1 ) return valRes;
	strmid( valRes , line , strfind( line , "=" , true )+1 , strlen( line ) , sizeof( valRes ) );
	return valRes;
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid) {
	if(newinteriorid == 0) {
		SetPlayerWeather(playerid, weatherVariables[0]);
		SetPlayerVirtualWorld(playerid, 0);
	}
	else SetPlayerWeather(playerid, INTERIOR_WEATHER_ID);
	return 1;
}

public OnVehicleMod(playerid, vehicleid, componentid) {
    if(GetPlayerInterior(playerid) == 0) {
        BanPlayer(playerid, INVALID_PLAYER_ID, "Cheat [T]");
	}
	
	if(GetPlayerCash(playerid) >= 4500) {
	    GivePlayerCash(playerid, -4500);
		FactionInfo[FAC_MECH][fBank] += 4500 / 10;
	    SendClientMessage(playerid, COLOR_WHITE, "Las modificaciones han sido guardadas (excepto nitro, pintura, llantas y suspension hidraulica).");
	} else {
	    SendClientMessage(playerid, COLOR_WHITE, "No tienes el dinero suficiente ($4500), las modificaciones no serán almacenadas.");
		return 1;
	}
	
	if(GetVehicleComponentType(componentid) == 5 || // Si es nitro
	    GetVehicleComponentType(componentid) == 7 || // Si es llantas
	    GetVehicleComponentType(componentid) == 9) // Si es suspension
  		return 1;

    if(VehicleInfo[vehicleid][VehType] == VEH_OWNED) {
		VehicleInfo[vehicleid][VehCompSlot][GetVehicleComponentType(componentid)] = componentid;
    }
    return 1;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger) {

	if(AdminDuty[playerid]) {
	    return 1;
	}

	if(VehicleInfo[vehicleid][VehLocked] == 1) {
		if(GetVehicleType(vehicleid) == VTYPE_BMX || GetVehicleType(vehicleid) == VTYPE_BIKE || GetVehicleType(vehicleid) == VTYPE_QUAD) {
		    return 1;
		}
		new Float:pos[3];
		GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		SetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		GameTextForPlayer(playerid, "~w~Vehiculo cerrado", 1000, 4);
	}

	return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid) {
	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate) {
	new	string[128];
	new vehicleid = LastVeh[playerid];
		
	if(playerid == INVALID_PLAYER_ID) {
	    return 1;
	}
	
	if(newstate == PLAYER_STATE_ONFOOT) {
		if(SeatBelt[playerid])	{
			new vType = GetVehicleType(vehicleid);
			if(vType == VTYPE_BIKE || vType == VTYPE_BMX || vType == VTYPE_QUAD) {
            	PlayerActionMessage(playerid, 15.0, "se saca el casco.");
            } else if(vType == VTYPE_CAR || vType == VTYPE_HEAVY || vType == VTYPE_MONSTER) {
                PlayerActionMessage(playerid, 15.0, "se saca el cinturón de seguridad.");
            }
			SeatBelt[playerid] = true;
			return 1;
		}
	}
	if(newstate == PLAYER_STATE_ONFOOT && oldstate == PLAYER_STATE_PASSENGER) {
	    if(VehicleInfo[vehicleid][VehJob] == JOB_TAXI) {
			if(TransportCost[TransportDriver[playerid]] > 0 && TransportDriver[playerid] < 999) {
				if(IsPlayerConnected(TransportDriver[playerid])) {
					format(string, sizeof(string), "~w~El viaje costo ~r~$%d", TransportCost[TransportDriver[playerid]]);
					GameTextForPlayer(playerid, string, 5000, 1);
					format(string, sizeof(string), "~w~El pasajero dejo el taxi~n~~g~Has ganado $%d", TransportCost[TransportDriver[playerid]]);
					GameTextForPlayer(TransportDriver[playerid], string, 5000, 1);
					GivePlayerCash(playerid, -TransportCost[TransportDriver[playerid]]);
					GivePlayerCash(TransportDriver[playerid], TransportCost[TransportDriver[playerid]]);
					if(GetPVarInt(TransportDriver[playerid], "pJobLimitCounter") <= JOB_TAXI_MAXPASSENGERS) {
					    SetPVarInt(TransportDriver[playerid], "pJobLimitCounter", GetPVarInt(TransportDriver[playerid], "pJobLimitCounter") + 1);
						PlayerInfo[TransportDriver[playerid]][pPayCheck] += PRICE_TAXI_PERPASSENGER;
					}
					TransportCost[TransportDriver[playerid]] = 0;
					TransportPassenger[TransportDriver[playerid]] = 999;
					TransportDriver[playerid] = 999;
				}
			}
		}
		
		if(isHearingVehicleRedio[playerid] == true)
		{
			StopAudioStreamForPlayer(playerid);
			isHearingVehicleRedio[playerid] = false;
		}
		
	} else if(newstate == PLAYER_STATE_ONFOOT && oldstate == PLAYER_STATE_DRIVER) {
	    // Ocultar velocímetro.
	    PlayerTextDrawHide(playerid, PTD_Speedo[playerid]);
	    KillTimer(pSpeedoTimer[playerid]);
	    //

		if(PlayerInfo[playerid][pJob] == JOB_FARM && jobDuty[playerid] && VehicleInfo[vehicleid][VehType] == VEH_JOB && VehicleInfo[vehicleid][VehJob] == JOB_FARM) {
	        SendFMessage(playerid, COLOR_WHITE, "¡Has dejado el vehículo!, tienes %d segundos de descanso para volver a ingresar.", jobBreak[playerid]);
            SetPVarInt(playerid, "jobBreakTimerID", SetTimerEx("jobBreakTimer", 1000, false, "ddd", playerid, PlayerInfo[playerid][pJob]));
	    } else if(PlayerInfo[playerid][pJob] == JOB_TRAN && jobDuty[playerid] && VehicleInfo[vehicleid][VehType] == VEH_JOB && VehicleInfo[vehicleid][VehJob] == JOB_TRAN) {
	        SendFMessage(playerid, COLOR_WHITE, "¡Has dejado el vehículo!, tienes %d segundos de descanso para volver a ingresar.", jobBreak[playerid]);
            SetPVarInt(playerid, "jobBreakTimerID", SetTimerEx("jobBreakTimer", 1000, false, "ddd", playerid, PlayerInfo[playerid][pJob]));
	    } else if(PlayerInfo[playerid][pJob] == JOB_GARB && jobDuty[playerid] && VehicleInfo[vehicleid][VehType] == VEH_JOB && VehicleInfo[vehicleid][VehJob] == JOB_GARB) {
	    	SendFMessage(playerid, COLOR_WHITE, "¡Has dejado el vehículo!, tienes %d segundos de descanso para volver a ingresar.", jobBreak[playerid]);
            SetPVarInt(playerid, "jobBreakTimerID", SetTimerEx("jobBreakTimer", 1000, false, "ddd", playerid, PlayerInfo[playerid][pJob]));
	    }

	    if(VehicleInfo[vehicleid][VehJob] == JOB_TAXI) {
		    if(jobDuty[playerid] && PlayerInfo[playerid][pJob] == JOB_TAXI) {
				jobDuty[playerid] = false;
				SendClientMessage(playerid, COLOR_YELLOW2, "Has dejado el vehículo, por lo tanto ya no te encuentras en servicio.");
				if(TransportPassenger[playerid] < 999) {
					SendClientMessage(playerid, COLOR_YELLOW2, "Como el pasajero aún no ha dejado el vehículo no le cobras ninguna tarifa.");
					SendClientMessage(TransportPassenger[playerid], COLOR_YELLOW2, "El conductor ha dejado el vehículo, por lo tanto no te cobrará ninguna tarifa.");
					TransportCost[playerid] = 0;
				}
				TransportPassenger[playerid] = 999;
				TransportDriver[TransportPassenger[playerid]] = 999;
			}
		}
		
		if(isHearingVehicleRedio[playerid] == true)
		{
			StopAudioStreamForPlayer(playerid);
			isHearingVehicleRedio[playerid] = false;
		}
		
	}
	if(newstate == PLAYER_STATE_PASSENGER && oldstate == PLAYER_STATE_ONFOOT) {
		if(VehicleInfo[vehicleid][VehJob] == JOB_TAXI && TransportDriver[playerid] == 999) {
	        foreach(new i : Player) {
				if(vehicleid == GetPlayerVehicleID(i) && GetPlayerState(i) == PLAYER_STATE_DRIVER && jobDuty[i] && PlayerInfo[i][pJob] == JOB_TAXI) {
					format(string, sizeof(string), "¡Un pasajero ha ingresado a tu vehículo!, le cobras $%d por segundo.", PRICE_TAXI);
					SendClientMessage(i, COLOR_YELLOW2, string);
					format(string, sizeof(string), "Has ingresado al taxi como pasajero, el precio es de $%d por segundo.", PRICE_TAXI);
					SendClientMessage(playerid, COLOR_YELLOW2, string);
					TransportDriver[playerid] = i;
					TransportPassenger[i] = playerid;
				}
		 	}
		} else if(VehicleInfo[vehicleid][VehType] == VEH_DEALERSHIP || VehicleInfo[vehicleid][VehType] == VEH_DEALERSHIP2 || VehicleInfo[vehicleid][VehType] == VEH_SHIPYARD) {
			RemovePlayerFromVehicle(playerid);
		} else if(VehicleInfo[vehicleid][VehType] == VEH_OWNED && VehicleInfo[vehicleid][VehLocked] == 1 && AdminDuty[playerid] != 1) {
		    if(GetVehicleType(vehicleid) == VTYPE_BMX || GetVehicleType(vehicleid) == VTYPE_BIKE || GetVehicleType(vehicleid) == VTYPE_QUAD)
		    	return 1;
		    	
			SendClientMessage(playerid, COLOR_YELLOW2, "El vehículo está cerrado.");
			RemovePlayerFromVehicle(playerid);
		}
		// Sistema de radio en autos
		new vID;
		vID = GetPlayerVehicleID(playerid);
 		if(vehicleRedio[vID] > 0)
	    	PlayCarRedioForPlayer(playerid, vehicleRedio[vID]);
		//---------------------------
	}
	if(newstate == PLAYER_STATE_DRIVER && oldstate == PLAYER_STATE_ONFOOT) {
	    LastVeh[playerid] = vehicleid;

		if(GetVehicleType(vehicleid) != VTYPE_BMX) {
		    // Si no es una bicicleta mostramos el velocímetro.
			PlayerTextDrawShow(playerid, PTD_Speedo[playerid]);
			pSpeedoTimer[playerid] = SetTimerEx("speedoTimer", 1500, true, "d", playerid);
		}
		
		vehicleid = GetPlayerVehicleID(playerid);
		
		// Sistema de radio en autos
		if(vehicleRedio[vehicleid] > 0)
	    	PlayCarRedioForPlayer(playerid, vehicleRedio[vehicleid]);
		//--------------------------

        if(VehicleInfo[vehicleid][VehType] == VEH_OWNED) {
			format(string, sizeof(string), "~w~%s", GetVehicleName(vehicleid));
			GameTextForPlayer(playerid, string, 4000, 1);
			
			if(!AdminDuty[playerid]) {
	            if(GetVehicleType(vehicleid) == VTYPE_BMX && VehicleInfo[vehicleid][VehOwnerSQLID] != PlayerInfo[playerid][pID]) {
					SendClientMessage(playerid, COLOR_YELLOW2, "¡Esta bicicleta no te pertenece!");
					RemovePlayerFromVehicle(playerid);
				} else if(VehicleInfo[vehicleid][VehLocked] == 1 && GetVehicleType(vehicleid) != VTYPE_BMX) {
				    if(GetVehicleType(vehicleid) == VTYPE_BMX || GetVehicleType(vehicleid) == VTYPE_BIKE || GetVehicleType(vehicleid) == VTYPE_QUAD) {
		    			return 1;
					}
		    			
					SendClientMessage(playerid, COLOR_YELLOW2, "El vehículo está cerrado.");
					RemovePlayerFromVehicle(playerid);
				}
			} else {
				SendFMessage(playerid, COLOR_WHITE, "Vehículo ID: %d | Nombre de dueño: %s | ID en la DB: %d.", vehicleid, VehicleInfo[vehicleid][VehOwnerName], VehicleInfo[vehicleid][VehOwnerSQLID]);
			}
			
		} else if(PlayerInfo[playerid][pJob] == JOB_FARM && jobDuty[playerid] && VehicleInfo[vehicleid][VehType] == VEH_JOB && VehicleInfo[vehicleid][VehJob] == JOB_FARM) {
	        SendFMessage(playerid, COLOR_WHITE, "Has vuelto a trabajar, te quedan %d segundos de descanso disponibles.", jobBreak[playerid]);
	        KillTimer(GetPVarInt(playerid, "jobBreakTimerID"));
	        
	    } else if(PlayerInfo[playerid][pJob] == JOB_TRAN && jobDuty[playerid] && VehicleInfo[vehicleid][VehType] == VEH_JOB && VehicleInfo[vehicleid][VehJob] == JOB_TRAN) {
	        SendFMessage(playerid, COLOR_WHITE, "Has vuelto a trabajar, te quedan %d segundos de descanso disponibles.", jobBreak[playerid]);
	        KillTimer(GetPVarInt(playerid, "jobBreakTimerID"));
	        
	    } else if(PlayerInfo[playerid][pJob] == JOB_GARB && jobDuty[playerid] && VehicleInfo[vehicleid][VehType] == VEH_JOB && VehicleInfo[vehicleid][VehJob] == JOB_GARB) {
	        SendFMessage(playerid, COLOR_WHITE, "Has vuelto a trabajar, te quedan %d segundos de descanso disponibles.", jobBreak[playerid]);
	        KillTimer(GetPVarInt(playerid, "jobBreakTimerID"));
	        
	    } else if(VehicleInfo[vehicleid][VehType] == VEH_JOB && VehicleInfo[vehicleid][VehJob] != PlayerInfo[playerid][pJob]) {
			if(AdminDuty[playerid] == 0 && PlayerInfo[playerid][pJob] != JOB_GARB) {
       			SendClientMessage(playerid, COLOR_YELLOW2, "¡No tienes las llaves!");
			    RemovePlayerFromVehicle(playerid);
			}
			
	    } else if(VehicleInfo[vehicleid][VehType] == VEH_SCHOOL && AdminDuty[playerid] != 1) {
			if(playerLicense[playerid][lDTaking] != 1) {
				RemovePlayerFromVehicle(playerid);
				SendClientMessage(playerid, COLOR_YELLOW2, "No puedes ingresar a este vehículo.");
			} else {
				PlayerTextDrawShow(playerid, PTD_Timer[playerid]);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "------------------------");
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "¡La prueba ha comenzado!");
				SendClientMessage(playerid, COLOR_WHITE, "Enciende el motor (/motor) y conduce sobre los puntos del mapa respetando las leyes de tránsito.");
				if(playerLicense[playerid][lDStep] == 0) {
			 		SetPlayerCheckpoint(playerid, 1109.8116, -1743.4208, 13.1255, 5.0);
					playerLicense[playerid][lDStep] = 1;
					timersID[10] = SetTimerEx("licenseTimer", 1000, false, "dd", playerid, 1);
				}
			}

		} else if(VehicleInfo[vehicleid][VehType] == VEH_RENT) {
			for(new i = 1; i < MAX_RENTCAR; i++)
			{
		 		if(RentCarInfo[i][rVehicleID] == vehicleid && RentCarInfo[i][rRented] == 0)
		 		{
					SendClientMessage(playerid, COLOR_WHITE, "======================[Vehículo en Alquiler]======================");
					SendFMessage(playerid, COLOR_WHITE, "Modelo: %s.", GetVehicleName(vehicleid));
					new price = (GetVehiclePrice(vehicleid, ServerInfo[sVehiclePricePercent])) / 100;
					if(price < 200)
						price = 200; // Seteamos un mínimo de precio
					SendFMessage(playerid, COLOR_WHITE, "Costo de renta por hora: $%d.", price);
					if(GetVehicleMaxTrunkSlots(vehicleid) > 0)
						SendFMessage(playerid, COLOR_WHITE, "Maletero: %d slots.", GetVehicleMaxTrunkSlots(vehicleid));
					else
					    SendClientMessage(playerid, COLOR_WHITE, "Maletero: No.");
					SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "(( Para rentar éste vehículo utiliza '/rentar [tiempo] (en horas)'. ))");
					SendClientMessage(playerid, COLOR_WHITE, "=============================================================");
				}
			}
			
		} else if(VehicleInfo[vehicleid][VehType] == VEH_DEALERSHIP || VehicleInfo[vehicleid][VehType] == VEH_DEALERSHIP2 || VehicleInfo[vehicleid][VehType] == VEH_SHIPYARD) {
		    SendClientMessage(playerid,COLOR_WHITE,"=======================[Vehículo en Venta]=======================");
			SendFMessage(playerid, COLOR_WHITE, "Modelo: %s.", GetVehicleName(vehicleid));
			SendFMessage(playerid, COLOR_WHITE, "Costo real: $%d.", GetVehiclePrice(vehicleid,100));
			SendFMessage(playerid, COLOR_WHITE, "Costo actual: {3E9D41}$%d{FFFFFF} (%d%%%%).", GetVehiclePrice(vehicleid,ServerInfo[sVehiclePricePercent]), ServerInfo[sVehiclePricePercent]);
			if(GetVehicleMaxTrunkSlots(vehicleid) > 0)
				SendFMessage(playerid, COLOR_WHITE, "Maletero: %d slots.", GetVehicleMaxTrunkSlots(vehicleid));
			else
			    SendClientMessage(playerid, COLOR_WHITE, "Maletero: No.");
			SendClientMessage(playerid,COLOR_LIGHTYELLOW2,"(( Para comprar éste vehículo utiliza '/vehcomprar [color1] [color2]'. ))");
			SendClientMessage(playerid,COLOR_WHITE,"=============================================================");
		}

		if(IsAPlane(vehicleid) || IsAHelicopter(vehicleid)) {
	  		if(PlayerInfo[playerid][pFlyLic] == 0) {
				if(AdminDuty[playerid] == 0) {
				    SendClientMessage(playerid, COLOR_YELLOW2, "¡No tienes licencia de vuelo!");
	   				RemovePlayerFromVehicle(playerid);
				}
			}
	   	}
	}

	foreach(Player, x) {
		if(PlayerInfo[x][pSpectating] != INVALID_PLAYER_ID && PlayerInfo[x][pSpectating] == playerid) {
			if(newstate == 2 && oldstate == 1 || newstate == 3 && oldstate == 1) {
				PlayerSpectateVehicle(x, GetPlayerVehicleID(playerid));
			} else {
				PlayerSpectatePlayer(x, playerid);
			}
		}
	}
	return 1;
}

public garbageTimer(playerid, garbcp) {
    TogglePlayerControllable(playerid, true);
    if(garbcp == 25) {
		SendClientMessage(playerid, COLOR_WHITE, "Vuelve y vacía el camión en el depósito.");
  	} else if(garbcp == 26) {
  	    new paycheck = JOB_GARB_MONEY;
  	    RemovePlayerFromVehicle(playerid);
	    PlayerInfo[playerid][pCantWork] = 1;
	    PlayerInfo[playerid][pPayCheck] += paycheck;
	    jobDuty[playerid] = false;
	    SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
	    SetEngine(GetPlayerVehicleID(playerid), 0);
		SetVehicleToRespawn(GetPlayerVehicleID(playerid));
		PlayerActionMessage(playerid, 15.0, "abre las puertas del depósito y vacía el camión recolector.");
		SendFMessage(playerid, COLOR_WHITE, "¡Enhorabuena! has finalizado tu trabajo, recibirás $%d en el próximo payday.", paycheck);
		DeletePVar(playerid, "garbageRoute");
  	    DeletePVar(playerid, "garbageCheckpoint");
  	}
	return 1;
}

public matsTimer(playerid) {
	new
	    vehicleid = GetPlayerVehicleID(playerid),
		validslot = -1;
		
    TogglePlayerControllable(playerid, true);
	for(new i = 0; i < GetVehicleMaxTrunkSlots(vehicleid); i++) {
	    if(getItemType(getTrunkItem(vehicleid, i)) == ITEM_NONE) {
			validslot = i;
			break;
	    }
	}
	if(validslot == -1) {
        SendClientMessage(playerid, COLOR_YELLOW2, "El maletero se encuentra lleno, toma algo de él y vuelve a intentarlo.");
        SetPlayerCheckpoint(playerid, 2792.4609, -2417.5508, 13.7599, 5.4);
		SetVehiclePos(vehicleid, 2767.2983, -2417.6804, 13.7573);
	} else {
	    foreach(new i : Player) {
		    if(playerid != i && PlayerInfo[i][pFaction] == PlayerInfo[playerid][pFaction] && GetPlayerVehicleID(i) == GetPlayerVehicleID(playerid)) {
				eventParam[playerid]++;
		    }
		}
		eventStep[playerid] = 3;
		setTrunkItemAndParam(vehicleid, validslot, 47, MISSION_BOX_MATS + (MISSION_BOX_EXTRA * eventParam[playerid]) * (random(MISSION_MATS_MAX_BOXES) + 1 + MISSION_MATS_MIN_BOXES));
		SetPlayerCheckpoint(playerid, VehicleInfo[vehicleid][VehPosX], VehicleInfo[vehicleid][VehPosY], VehicleInfo[vehicleid][VehPosZ], 5.4);
		SendClientMessage(playerid, COLOR_LIGHTGREEN, "SMS de anónimo: vuelve al HQ con la carga, solo alguien con experiencia podrá ensamblarlas.");
	}
	return 1;
}

public buyMatsTimer(playerid, amount) {
	new
	    vehicleid = GetPlayerVehicleID(playerid),
		validslot = -1;

    TogglePlayerControllable(playerid, true);
	for(new i = 0; i < GetVehicleMaxTrunkSlots(vehicleid); i++) {
	    if(getItemType(getTrunkItem(vehicleid, i)) == ITEM_NONE) {
			validslot = i;
			break;
	    }
	}
	if(validslot == -1) {
        SendClientMessage(playerid, COLOR_YELLOW2, "El maletero se encuentra lleno, toma algo de él y vuelve a intentarlo.");
        GivePlayerCash(playerid, amount * PRICE_MATS);
	} else {
		setTrunkItemAndParam(vehicleid, validslot, 47, amount);
		SetPlayerCheckpoint(playerid, VehicleInfo[vehicleid][VehPosX], VehicleInfo[vehicleid][VehPosY], VehicleInfo[vehicleid][VehPosZ], 5.4);
		SendClientMessage(playerid, COLOR_WHITE, "Vuelve al HQ con la carga y utiliza /descargar.");
	}
	return 1;
}

public buyDrugsTimer(playerid, amount) {
	new
	    vehicleid = GetPlayerVehicleID(playerid),
		bool:charged = false;

    TogglePlayerControllable(playerid, true);

	if(ServerInfo[sDrugRawMats] < amount) {
	    GivePlayerCash(playerid, amount * PRICE_DRUG_MAT);
	    SendFMessage(playerid, COLOR_YELLOW2, "No hay suficiente materia prima en la granja. Materia prima actual: %d.", ServerInfo[sDrugRawMats]);
		return 1;
	}
	
	for(new i = 0; i < GetVehicleMaxTrunkSlots(vehicleid); i++) {
	    if(getItemType(getTrunkItem(vehicleid, i)) == ITEM_NONE) {
	        setTrunkItemAndParam(vehicleid, i, 49, amount);
			charged = true;
			break;
	    }
	}
	if(!charged) {
        SendClientMessage(playerid, COLOR_YELLOW2, "El maletero se encuentra lleno, toma algo de él y vuelve a intentarlo.");
        GivePlayerCash(playerid, amount * PRICE_DRUG_MAT);
	} else {
	    ServerInfo[sDrugRawMats] -= amount;
		SendClientMessage(playerid, COLOR_WHITE, "Vé al punto de venta y tipea /comprar para intercambiar la materia prima por drogas.");
		SetPlayerCheckpoint(playerid, 2333.2856, -1948.3102, 13.5783, 5.4);
	}
	return 1;
}

//======================COMPRA DE PRODUCTOS PARA NEGOCIOS=======================

public buyProductsTimer(playerid, amount) {
	new
	    vehicleid = GetPlayerVehicleID(playerid),
		bool:charged = false;

    TogglePlayerControllable(playerid, true);

	for(new i = 0; i < GetVehicleMaxTrunkSlots(vehicleid); i++) {
	    if(getItemType(getTrunkItem(vehicleid, i)) == ITEM_NONE) {
	    	setTrunkItemAndParam(vehicleid, i, 50, amount);
			charged = true;
			break;
	    }
	}
	if(!charged) {
        SendClientMessage(playerid, COLOR_YELLOW2, "El maletero se encuentra lleno, toma algo de él y vuelve a intentarlo.");
        GivePlayerCash(playerid, amount * PRICE_BIZ_PROD);
	} else
	    {
			SendClientMessage(playerid, COLOR_WHITE, "Vé a tu negocio y descarga la nueva mercaderia dentro escribiendo /descargar en la entrada!");
			PlayerActionMessage(playerid, 15.0, "compra algunos productos y los carga en el vehículo.");
		}
	return 1;
}

//=====================DESCARGA DE MATERIALES PARA MAFIAS=======================

public matsFinish(playerid, matsCount) {
	new
		vehicleID = GetPlayerVehicleID(playerid);
	
	TogglePlayerControllable(playerid, true);
	eventStep[playerid] = 0;
	SetVehicleParamsForPlayer(vehicleID, playerid, 0, 0);
	RemovePlayerFromVehicle(playerid);
	jobDuty[playerid] = false;
	SendFMessage(playerid, COLOR_WHITE, "Has descargado %d materiales en el HQ y recibido una ganancia de $%d.", matsCount, MISSION_MATS_REWARD + MISSION_MATS_EXTRA * eventParam[playerid]);
	SetTimerEx("respawnVeh", 1500, false, "i", vehicleID);
	GivePlayerCash(playerid, MISSION_MATS_REWARD + MISSION_MATS_EXTRA * eventParam[playerid]);
	eventParam[playerid] = 0;
    return 1;
}

//=============================DESCARGA DE ITEMS================================

CMD:descargar(playerid, params[]) {
	new
	    amount,
	    string[128],
		factionid = PlayerInfo[playerid][pFaction],
		vehicleid = GetPlayerVehicleID(playerid);

	for(new biz = 0; biz < MAX_BUSINESS; biz++)
	{
		if(PlayerToPoint(6.0, playerid, Business[biz][bOutsideX], Business[biz][bOutsideY], Business[biz][bOutsideZ]))
		{
 			if(!IsPlayerInAnyVehicle(playerid))
		    	return SendClientMessage(playerid, COLOR_YELLOW2, "¡Debes estar en un vehículo!");
		    if(VehicleInfo[vehicleid][VehType] != VEH_OWNED && VehicleInfo[vehicleid][VehType] != VEH_FACTION)
		    	return SendClientMessage(playerid, COLOR_YELLOW2, "Debes estar en un vehículo con dueño o de facción.");
			new totalAmount = 0;
       		for(new i = 0; i < GetVehicleMaxTrunkSlots(vehicleid); i++)
			{
			    if(getTrunkItem(vehicleid, i) == 50)
				{
			        amount = getTrunkParam(vehicleid, i);
					if(Business[biz][bProducts] + amount > 500) // Si supera el maximo de productos permitido por negocio
					{
						SendClientMessage(playerid, COLOR_YELLOW2, "No puedes cargar mas mercaderia al negocio. El depósito está lleno.");
						break;
					}
					totalAmount += getTrunkParam(vehicleid, i);
					setTrunkItemAndParam(vehicleid, i, 0, 0);
					Business[biz][bProducts] += amount;
			    }
			}
			if (totalAmount > 0)
			{
			    format(string, sizeof(string), "Descargando %d productos...", totalAmount);
				GameTextForPlayer(playerid, string, 4000, 4);
				PlayerActionMessage(playerid, 15.0, "comienza a descargar mercadería en el depósito del negocio.");
				TogglePlayerControllable(playerid, false);
    			SetTimerEx("Unfreeze", 6000, false, "i", playerid);
			}
			return 1;
		}
	}

    if(factionid != FAC_NONE && FactionInfo[factionid][fType] == FAC_TYPE_ILLEGAL) {
        if(IsPlayerInAnyVehicle(playerid) && vehicleid == FactionInfo[factionid][fMissionVeh]) {
            if(PlayerToPoint(4.0, playerid, VehicleInfo[vehicleid][VehPosX], VehicleInfo[vehicleid][VehPosY], VehicleInfo[vehicleid][VehPosZ])) {
                for(new i = 0; i < GetVehicleMaxTrunkSlots(vehicleid); i++) {
				    if(getTrunkItem(vehicleid, i) == 47) {
				        amount += getTrunkParam(vehicleid, i);
				        setTrunkItemAndParam(vehicleid, i, 0, 0);
				    }
				}
				FactionInfo[factionid][fMaterials] += amount;
				format(string, sizeof(string), "%d piezas descargadas...", amount);
				GameTextForPlayer(playerid, string, 4000, 4);
	        } else {
	            SetPlayerCheckpoint(playerid, VehicleInfo[vehicleid][VehPosX], VehicleInfo[vehicleid][VehPosY], VehicleInfo[vehicleid][VehPosZ], 5.4);
				SendClientMessage(playerid, COLOR_WHITE, "Vé a la siguiente localización para descargar la van.");
	        }
		} else {
		    SendClientMessage(playerid, COLOR_YELLOW2, "Debes estar dentro de la van de la facción.");
		}
    }
	return 1;
}

stock hasFireGun(playerid) {
	new wep = GetPlayerWeapon(playerid);
	if(wep >= 22 && wep <= 34) return 1; else return 0;
}


public OnPlayerEnterCheckpoint(playerid) {
	PlayerPlaySound(playerid, 1139, 0.0, 0.0, 0.0);
	DisablePlayerCheckpoint(playerid);
	
    if(TaxiCallTime[playerid] > 0 && TaxiAccepted[playerid] < 999) {
	    TaxiAccepted[playerid] = 999;
		GameTextForPlayer(playerid, "~w~Has llegado al destino", 5000, 1);
		TaxiCallTime[playerid] = 0;
	}

	new
		string[128],
		faction = PlayerInfo[playerid][pFaction],
		vehicleID = GetPlayerVehicleID(playerid),
		Float:vehicleHP;

    GetVehicleHealth(vehicleID, vehicleHP);
    
	if(MechanicCallTime[playerid] > 0 && faction == FAC_MECH)
	    MechanicCallTime[playerid] = 0;

	if(eventStep[playerid] == 3) {
	    new
			matsCount = 0;
			
	    for(new i = 0; i < GetVehicleMaxTrunkSlots(vehicleID); i++) {
		    if(getTrunkItem(vehicleID, i) == 47) {
		        matsCount = getTrunkParam(vehicleID, i);
				FactionInfo[faction][fMaterials] += matsCount;
				setTrunkItemAndParam(vehicleID, i, 0, 0);
		    }
		}
		GameTextForPlayer(playerid, "Descargando vehiculo...", 4000, 4);
		TogglePlayerControllable(playerid, false);
		SetPVarInt(playerid, "matsFinish", SetTimerEx("matsFinish", 4000, false, "ii", playerid, matsCount));
	} else if(eventStep[playerid] == 2) {
	    if(FactionInfo[faction][fMissionVeh] == vehicleID) {
	        GameTextForPlayer(playerid, "Cargando materiales...", 4000, 4);
			TogglePlayerControllable(playerid, false);
			SetPVarInt(playerid, "matsTimer", SetTimerEx("matsTimer", 4000, false, "i", playerid));
		} else {
		    SetPlayerCheckpoint(playerid, 2792.4609, -2417.5508, 13.7599, 5.4);
		    GameTextForPlayer(playerid, "Debes estar en el vehículo de la misión.", 1000, 4);
		}
	}
    if(PlayerInfo[playerid][pJob] == JOB_FARM && jobDuty[playerid] && VehicleInfo[vehicleID][VehJob] == JOB_FARM) {
    	if(CollectedProds[playerid] < JOB_FARM_MAXPRODS) {
    	   	new rCP = -1;
			while(rCP == -1 || rCP == LastCP[playerid]) {
	 			rCP = random(sizeof(JOB_FARM_POS) - 2);
    		}
	 		LastCP[playerid] = rCP;
            CollectedProds[playerid]++;
            format(string, sizeof(string), "Producto: %d/%d", CollectedProds[playerid], JOB_FARM_MAXPRODS);
			GameTextForPlayer(playerid, string, 1400, 1);
			if(CollectedProds[playerid] == JOB_FARM_MAXPRODS) {
			 	SetPlayerCheckpoint(playerid, JOB_FARM_POS[sizeof(JOB_FARM_POS) - 1][0], JOB_FARM_POS[sizeof(JOB_FARM_POS) - 1][1], JOB_FARM_POS[sizeof(JOB_FARM_POS) - 1][2], 5.4);
				SendClientMessage(playerid, COLOR_WHITE, "¡Has terminado con tu trabajo!, ahora vé y descarga el material (/terminar).");
			} else {
			    SetPlayerCheckpoint(playerid, JOB_FARM_POS[rCP][0], JOB_FARM_POS[rCP][1], JOB_FARM_POS[rCP][2], 5.4);
			}
        }
    } else if(PlayerInfo[playerid][pJob] == JOB_DRUGF && jobDuty[playerid] && VehicleInfo[vehicleID][VehJob] == JOB_DRUGF) {
    	if(CollectedProds[playerid] < JOB_DRUGF_MAXPRODS) {
    	   	new rCP = -1;
    
			while(rCP == -1 || rCP == LastCP[playerid] || GetDistance(JOB_DRUGF_POS[rCP][0], JOB_DRUGF_POS[rCP][1], JOB_DRUGF_POS[rCP][2], JOB_DRUGF_POS[LastCP[playerid]][0], JOB_DRUGF_POS[LastCP[playerid]][1], JOB_DRUGF_POS[LastCP[playerid]][2]) < 30) {
	 			rCP = random(sizeof(JOB_DRUGF_POS) - 2);
    		}
    		
	 		LastCP[playerid] = rCP;
            CollectedProds[playerid]++;
            format(string, sizeof(string), "Producto: %d/%d", CollectedProds[playerid], JOB_DRUGF_MAXPRODS);
			GameTextForPlayer(playerid, string, 1400, 1);
			if(CollectedProds[playerid] == JOB_DRUGF_MAXPRODS) {
			 	SetPlayerCheckpoint(playerid, JOB_DRUGF_POS[sizeof(JOB_DRUGF_POS) - 1][0], JOB_DRUGF_POS[sizeof(JOB_DRUGF_POS) - 1][1], JOB_DRUGF_POS[sizeof(JOB_DRUGF_POS) - 1][2], 5.4);
				SendClientMessage(playerid, COLOR_WHITE, "¡Has terminado con tu trabajo!, ahora vé y descarga el material (/terminar).");
            	LastCP[playerid] = sizeof(JOB_DRUGF_POS) - 1;
			} else {
			    SetPlayerCheckpoint(playerid, JOB_DRUGF_POS[rCP][0], JOB_DRUGF_POS[rCP][1], JOB_DRUGF_POS[rCP][2], 5.4);
			}
        }
    } else if(PlayerInfo[playerid][pJob] == JOB_TRAN && jobDuty[playerid] && VehicleInfo[vehicleID][VehJob] == JOB_TRAN) {
    	if(CollectedProds[playerid] < JOB_TRAN_MAXPRODS) {
    	    if(carryingProd[playerid]) {
    	        carryingProd[playerid] = false;
	            CollectedProds[playerid]++;
	            format(string, sizeof(string), "Paquetes entregados: %d/%d", CollectedProds[playerid], JOB_TRAN_MAXPRODS);
				GameTextForPlayer(playerid, string, 1400, 1);
				SetPlayerCheckpoint(playerid, JOB_TRAN_POS[16][0], JOB_TRAN_POS[16][1], JOB_TRAN_POS[16][2], 5.4);
				if(CollectedProds[playerid] == JOB_TRAN_MAXPRODS) {
					SendClientMessage(playerid, COLOR_WHITE, "¡Has terminado con tu trabajo!, vuelve a la agencia.");
				}
    	    } else {
    	        if(CollectedProds[playerid] == JOB_TRAN_MAXPRODS) {
					SendClientMessage(playerid, COLOR_WHITE, "Tipea /terminar para confirmar los envíos.");
    	            return 1;
    	        }
                carryingProd[playerid] = true;
    	       	new rCP = -1;
				while(rCP == 16 || rCP == -1 || rCP == LastCP[playerid]) {
		 			rCP = random(sizeof(JOB_TRAN_POS));
		 		}
		 		LastCP[playerid] = rCP;
                SetPlayerCheckpoint(playerid, JOB_TRAN_POS[rCP][0], JOB_TRAN_POS[rCP][1], JOB_TRAN_POS[rCP][2], 5.4);
    	    }
        }
    } else if(PlayerInfo[playerid][pJob] == JOB_GARB && jobDuty[playerid] && VehicleInfo[vehicleID][VehType] == VEH_JOB && VehicleInfo[vehicleID][VehJob] == JOB_GARB) {
        new
			gbCP = GetPVarInt(playerid, "garbageCheckpoint"),
			route = GetPVarInt(playerid, "garbageRoute");
			
        if(gbCP == 26) {
			SendClientMessage(playerid, COLOR_WHITE, "Vaciando camión...");
			TogglePlayerControllable(playerid, false);
			SetPVarInt(playerid, "garbT", SetTimerEx("garbageTimer", 6000, false, "ii", playerid, gbCP));
        } else {
            TogglePlayerControllable(playerid, false);
            SetPVarInt(playerid, "garbT", SetTimerEx("garbageTimer", 2000, false, "ii", playerid, gbCP));
            GameTextForPlayer(playerid, "Cargando basura...", 2000, 4);
			SetPVarInt(playerid, "garbageCheckpoint", gbCP + 1);
			if(route == 0) {
 	 			SetPlayerCheckpoint(playerid, JOB_GARB_POS_R0[gbCP][0], JOB_GARB_POS_R0[gbCP][1], JOB_GARB_POS_R0[gbCP][2], 5.4);
			} else if(route == 1) {
			    SetPlayerCheckpoint(playerid, JOB_GARB_POS_R1[gbCP][0], JOB_GARB_POS_R1[gbCP][1], JOB_GARB_POS_R1[gbCP][2], 5.4);
			}
        }
    } else if(playerLicense[playerid][lDStep] >= 1 && VehicleInfo[vehicleID][VehType] == VEH_SCHOOL) {

		if(PlayerToPoint(5.0, playerid, 1109.8116, -1743.4208, 13.1255) && playerLicense[playerid][lDStep] == 1) {
            playerLicense[playerid][lDStep] = 2;
            SetPlayerCheckpoint(playerid, 1173.1102, -1797.7059, 13.1255, 5.0);
		} else if(PlayerToPoint(5.0, playerid, 1173.1102, -1797.7059, 13.1255) && playerLicense[playerid][lDStep] == 2) {
            playerLicense[playerid][lDStep] = 3;
            SetPlayerCheckpoint(playerid, 1057.7532, -1828.5193, 13.3029, 5.0);
		} else if(PlayerToPoint(5.0, playerid, 1057.7532, -1828.5193, 13.3029) && playerLicense[playerid][lDStep] == 3) {
            playerLicense[playerid][lDStep] = 4;
            SetPlayerCheckpoint(playerid, 919.7889, -1757.2719, 13.1067, 5.0);
		} else if(PlayerToPoint(5.0, playerid, 919.7889, -1757.2719, 13.1067) && playerLicense[playerid][lDStep] == 4) {
            playerLicense[playerid][lDStep] = 5;
            SetPlayerCheckpoint(playerid, 902.1602, -1569.7883, 13.1176, 5.0);
		} else if(PlayerToPoint(5.0, playerid, 902.1602, -1569.7883, 13.1176) && playerLicense[playerid][lDStep] == 5)	{
            playerLicense[playerid][lDStep] = 6;
            SetPlayerCheckpoint(playerid, 829.7626, -1603.0767, 13.1099, 5.0);
		} else if(PlayerToPoint(5.0, playerid, 829.7626, -1603.0767, 13.1099) && playerLicense[playerid][lDStep] == 6) {
            playerLicense[playerid][lDStep] = 7;
            SetPlayerCheckpoint(playerid, 647.6819, -1584.2423, 15.2000, 5.0);
		} else if(PlayerToPoint(5.0, playerid, 647.6819, -1584.2423, 15.2000) && playerLicense[playerid][lDStep] == 7) {
            playerLicense[playerid][lDStep] = 8;
            SetPlayerCheckpoint(playerid, 653.3600, -1408.1958, 13.1295, 5.0);
		} else if(PlayerToPoint(5.0, playerid, 653.3600, -1408.1958, 13.1295) && playerLicense[playerid][lDStep] == 8) {
            playerLicense[playerid][lDStep] = 9;
            SetPlayerCheckpoint(playerid, 793.8990, -1458.8011, 13.1097, 5.0);
		} else if(PlayerToPoint(5.0, playerid, 793.8990, -1458.8011, 13.1097) && playerLicense[playerid][lDStep] == 9) {
            playerLicense[playerid][lDStep] = 10;
            SetPlayerCheckpoint(playerid, 788.2633, -1589.3638, 13.1156, 5.0);
		} else if(PlayerToPoint(5.0, playerid, 788.2633, -1589.3638, 13.1156) && playerLicense[playerid][lDStep] == 10) {
            playerLicense[playerid][lDStep] = 11;
            SetPlayerCheckpoint(playerid, 869.7507, -1585.5740, 13.1099, 5.0);
		} else if(PlayerToPoint(5.0, playerid, 869.7507, -1585.5740, 13.1099) && playerLicense[playerid][lDStep] == 11) {
            playerLicense[playerid][lDStep] = 12;
            SetPlayerCheckpoint(playerid, 1022.3455, -1574.2153, 13.1099, 5.0);
		} else if(PlayerToPoint(5.0, playerid, 1022.3455, -1574.2153, 13.1099) && playerLicense[playerid][lDStep] == 12){
            playerLicense[playerid][lDStep] = 13;
            SetPlayerCheckpoint(playerid, 1035.0615, -1710.3101, 13.1161, 5.0);
	 	} else if(PlayerToPoint(5.0, playerid, 1035.0615, -1710.3101, 13.1161) && playerLicense[playerid][lDStep] == 13){
            playerLicense[playerid][lDStep] = 14;
            SetPlayerCheckpoint(playerid, 1172.8400, -1725.2491, 13.3243, 5.0);
		} else if(PlayerToPoint(5.0, playerid, 1172.8400, -1725.2491, 13.3243) && playerLicense[playerid][lDStep] == 14) {
            playerLicense[playerid][lDStep] = 15;
            SetPlayerCheckpoint(playerid,1110.3588, -1738.2627, 13.2299 , 5.0);
		} else if(PlayerToPoint(5.0, playerid, 1110.3588, -1738.2627, 13.2299) && playerLicense[playerid][lDStep] == 15) {
			KillTimer(timersID[10]);
			PlayerTextDrawHide(playerid, PTD_Timer[playerid]);

		    if(vehicleHP < 1000.0) {
				SendClientMessage(playerid, COLOR_LIGHTRED, "¡Has fallado la prueba!, el vehículo se encuentra dañado.");
		    } else if(playerLicense[playerid][lDMaxSpeed] >= 76) {
		    	SendFMessage(playerid, COLOR_LIGHTRED, "¡Has fallado la prueba!, has conducido muy rápido (velocidad máxima: %f KM/H).", playerLicense[playerid][lDMaxSpeed]);
			} else {
		        SendFMessage(playerid, COLOR_LIGHTGREEN, "¡Has superado la prueba!, ahora tienes una licencia de conducir (velocidad máxima: %f KM/H).", playerLicense[playerid][lDMaxSpeed]);
		    	PlayerInfo[playerid][pCarLic] = 1;
	    	 	GivePlayerCash(playerid, -PRICE_LIC_DRIVING);
		    }
		    SetVehicleToRespawn(vehicleID);
		    PutPlayerInVehicle(playerid, vehicleID, 0);
			RemovePlayerFromVehicle(playerid);
		    playerLicense[playerid][lDTaking] = 0;
            playerLicense[playerid][lDStep] = 0;
            playerLicense[playerid][lDTime] = 0;
            playerLicense[playerid][lDMaxSpeed] = 0;
		}
	}
	return 1;
}

public OnPlayerLeaveCheckpoint(playerid) {
	return 1;
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
	deleteFinishedSprintRace(playerid);
	return 1;
}

public OnPlayerLeaveRaceCheckpoint(playerid)
{
	return 1;
}

public OnObjectMoved(objectid)
{
	return 1;
}

public OnPlayerObjectMoved(playerid, objectid)
{
	return 1;
}

stock RemovePlayerWeapon(playerid, weaponid) {
	new
		plyWeapons[12],
		plyAmmo[12];

	for(new slot = 0; slot != 12; slot++) {
		new wep, ammo;
		GetPlayerWeaponData(playerid, slot, wep, ammo);
		if(wep != weaponid)	{
			GetPlayerWeaponData(playerid, slot, plyWeapons[slot], plyAmmo[slot]);
		}
	}
	ResetPlayerWeapons(playerid);
	for(new slot = 0; slot != 12; slot++) {
	    if(plyWeapons[slot] > 0)
			GivePlayerWeapon(playerid, plyWeapons[slot], plyAmmo[slot]);
	}
	return 1;
}

public OnPlayerClickTextDraw(playerid, Text:clickedid) {
   	if(GetPVarInt(playerid, "skinc_active") == 0) return 0;
	if(clickedid == Text:INVALID_TEXT_DRAW) {
        DestroySelectionMenu(playerid);
        SetPVarInt(playerid, "skinc_active", 0);
        PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
        return 1;
	}
	return 0;
}

public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid) {
	new skintype;
	if(GetPVarInt(playerid, "skinc_active") == 0) return 0;

	new curpage = GetPVarInt(playerid, "skinc_page");

	if(Business[GetPlayerBusiness(playerid)][bType] == BIZ_CLOT) {
		if(PlayerInfo[playerid][pSex] == 1) {
		    skintype = 1;
		} else {
			skintype = 3;
		}
	} else if(Business[GetPlayerBusiness(playerid)][bType] == BIZ_CLOT2) {
		if(PlayerInfo[playerid][pSex] == 1) {
		    skintype = 2;
		} else {
			skintype = 4;
		}
	}
	
	if(playertextid == gNextButtonTextDrawId[playerid]) {
	    if(curpage < (GetNumberOfPages(skintype) - 1)) {
	        SetPVarInt(playerid, "skinc_page", curpage + 1);
	        ShowPlayerModelPreviews(playerid, skintype);
         	UpdatePageTextDraw(playerid, skintype);
         	PlayerPlaySound(playerid, 1083, 0.0, 0.0, 0.0);
		} else {
		    PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		}
		return 1;
	}

	if(playertextid == gPrevButtonTextDrawId[playerid]) {
	    if(curpage > 0) {
	    	SetPVarInt(playerid, "skinc_page", curpage - 1);
	    	ShowPlayerModelPreviews(playerid, skintype);
	    	UpdatePageTextDraw(playerid, skintype);
	    	PlayerPlaySound(playerid, 1084, 0.0, 0.0, 0.0);
		} else {
		    PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		}
		return 1;
	}

	new x=0;
	while(x != SELECTION_ITEMS) {
	    if(playertextid == gSelectionItems[playerid][x]) {
	        HandlePlayerItemSelection(playerid, x, skintype);
	        PlayerPlaySound(playerid, 1083, 0.0, 0.0, 0.0);
	        DestroySelectionMenu(playerid);
	        CancelSelectTextDraw(playerid);
        	SetPVarInt(playerid, "skinc_active", 0);
        	return 1;
		}
		x++;
	}
	return 0;
}

public OnPlayerClickPlayer(playerid, clickedplayerid, source) {
    if(PlayerInfo[playerid][pAdmin] >= 1) {
	    if(!IsPlayerConnected(clickedplayerid)) {
	    	return SendClientMessage(playerid, COLOR_GREY, "{FF4600}[Error]:{C8C8C8} el jugador no se ha conectado.");
		}
		if(PlayerInfo[playerid][pSpectating] == INVALID_PLAYER_ID) {
			GetPlayerPos(playerid, PlayerInfo[playerid][pX], PlayerInfo[playerid][pY], PlayerInfo[playerid][pZ]);
			PlayerInfo[playerid][pInterior] = GetPlayerInterior(playerid);
			PlayerInfo[playerid][pVirtualWorld] = GetPlayerVirtualWorld(playerid);
			PlayerInfo[playerid][pSkin] = GetPlayerSkin(playerid);

			if(AdminDuty[playerid] == 0) {
			    new Float:hp;
				GetPlayerHealthEx(playerid, hp);
				SetPVarFloat(playerid, "tempHealth", hp);
				GetPlayerArmour(playerid, PlayerInfo[playerid][pArmour]);
			}
	    }
	    PlayerInfo[playerid][pSpectating] = clickedplayerid;
	    TogglePlayerSpectating(playerid, true);

		SetPlayerInterior(playerid, GetPlayerInterior(clickedplayerid));
		SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(clickedplayerid));

	    if(IsPlayerInAnyVehicle(clickedplayerid)) {
	        PlayerSpectateVehicle(playerid, GetPlayerVehicleID(clickedplayerid));
	    }
	    else {
			PlayerSpectatePlayer(playerid, clickedplayerid);
		}
		TextDrawShowForPlayer(playerid, textdrawVariables[0]);
	}
	return 1;
}

public OnPlayerPickUpDynamicPickup(playerid, pickupid) {

	for(new i = 0; i < 5; i++) {
	    if(pickupid == P_TUNE[i]) {
	        if(PlayerInfo[playerid][pFaction] == FAC_MECH && PlayerInfo[playerid][pRank] <= 3) {
	            GameTextForPlayer(playerid, "~w~Escribe /ptunear para abrir o cerrar el taller", 2000, 4);
	        } else {
	        	GameTextForPlayer(playerid, "~w~Para personalizar tu vehiculo llama al 555", 2000, 4);
	        }
			return 1;
		}
	}
	
	for(new i = 0; i < sizeof(P_GUIDE); i++) {
	    if(pickupid == P_GUIDE[i]) {
	        GameTextForPlayer(playerid, "~w~/guia para ver una lista de lugares disponibles.", 2000, 4);
	        return 1;
	    }
	}

	if(pickupid == P_BANK) {
		GameTextForPlayer(playerid, "~w~/ayudabanco", 2000, 4);
		return 1;
		
	} else if(pickupid == P_FIGHT_STYLE) {
		GameTextForPlayer(playerid, "~w~Escribe /aprender para adquirir nuevos conocimientos de pelea.", 2000, 4);
		return 1;
		
	} else if(pickupid == P_POLICE_ARREST && PlayerInfo[playerid][pFaction] == FAC_PMA) {
		GameTextForPlayer(playerid, "~w~/arrestar aqui para arrestar.", 2000, 4);
		return 1;
		
	} else if(pickupid == P_POLICE_DUTY && PlayerInfo[playerid][pFaction] == FAC_PMA) {
		GameTextForPlayer(playerid, "~w~/pservicio", 2000, 4);
		return 1;

	} else if(pickupid == P_HOSP_DUTY && PlayerInfo[playerid][pFaction] == FAC_HOSP) {
		GameTextForPlayer(playerid, "~w~/mservicio", 2000, 4);
		return 1;
		
	} else if(pickupid == P_SIDE_DUTY && PlayerInfo[playerid][pFaction] == FAC_SIDE) {
		GameTextForPlayer(playerid, "~w~/servicio", 2000, 4);
		return 1;
		
	} else if(pickupid == P_LICENSE_CENTER) {
		GameTextForPlayer(playerid, "~w~/licencias para ver las licencias disponibles. ~n~/manuales para ver los manuales.", 2000, 4);
		return 1;
		
	} else if(pickupid == P_JOB_CENTER) {
		GameTextForPlayer(playerid, "~w~/empleos para ver una lista de los empleos disponibles.", 2000, 4);
		return 1;
		
	} else if(pickupid == P_HOSP_HEAL) {
		new string[128];
		format(string, sizeof(string), "~w~/curarse para solicitar un medico que atienda tus heridas ($%d)", PRICE_HOSP_HEAL);
		GameTextForPlayer(playerid, string, 2000, 4);
		return 1;
		
	} else if(pickupid == P_CAR_RENT1 || pickupid == P_CAR_RENT2 || pickupid == P_CAR_RENT3) {
		GameTextForPlayer(playerid, "~w~Alquiler de vehiculos", 2000, 4);
		return 1;
		
	} else if(pickupid == P_MATS_SHOP) {
		if(PlayerInfo[playerid][pFaction] != FAC_NONE && FactionInfo[PlayerInfo[playerid][pFaction]][fType] == FAC_TYPE_ILLEGAL) {
			new string[128];
			format(string, sizeof(string), "~w~/comprar para comprar piezas - $%d por unidad", PRICE_MATS);
		    GameTextForPlayer(playerid, string, 2000, 4);
		}
		
	} else if(pickupid == P_DRUGFARM_MATS) {
	    if(PlayerInfo[playerid][pJob] == JOB_DRUGD) {
	    	new string[128];
			format(string, sizeof(string), "~w~bolsas de materia prima: %d a $%d c/u", ServerInfo[sDrugRawMats], PRICE_DRUG_MAT);
		    GameTextForPlayer(playerid, string, 2000, 4);
	    } else if(PlayerInfo[playerid][pJob] == JOB_DRUGF) {
	    	new string[128];
			format(string, sizeof(string), "~w~bolsas de materia prima: %d", ServerInfo[sDrugRawMats]);
		    GameTextForPlayer(playerid, string, 2000, 4);
	    }
	    
	} else if(pickupid == P_PRODS_SHOP) {
		new string[128];
		format(string, sizeof(string), "~w~/comprar para comprar productos - $%d por unidad", PRICE_BIZ_PROD);
		GameTextForPlayer(playerid, string, 2000, 4);
	}
	return 1;
}

public OnPlayerSelectedMenuRow(playerid, row) {
    new
        business = GetPlayerBusiness(playerid),
		Menu:currentMenu = GetPlayerMenu(playerid);

 	if(currentMenu == phoneMenu) {
	    switch(row) {
	        case 0: {
	            new
	                phoneNumber = 40000 + random(999999); // Min: 40000, Max: 999999

				if(Business[business][bProducts] <= 0 && Business[business][bOwnerSQLID] != -1) {
		            SendClientMessage(playerid, COLOR_YELLOW2, "Parece que no disponen de stock, intenta volviendo más tarde.");
		        } else if(GetPlayerCash(playerid) >= PRICE_PHONE) {
					SendFMessage(playerid, COLOR_YELLOW2, "¡Felicidades! has comprado un teléfono celular ($%d) utiliza /ayuda para ver los comandos disponibles.", PRICE_PHONE);
					GivePlayerCash(playerid, -PRICE_PHONE);
					PlayerActionMessage(playerid, 15.0, "toma dinero de su bolsillo, le paga al empleado y recibe un teléfono a cambio.");
					PlayerInfo[playerid][pPhoneNumber] = phoneNumber;
					PlayerInfo[playerid][pPhoneC] = business;
					PlayerInfo[playerid][pListNumber] = 1;
					if(Business[business][bOwnerSQLID] != -1) {
					   	Business[business][bTill] += PRICE_PHONE / 2;
	        			Business[business][bProducts]--;
	        			saveBusiness(business);
					}
				} else {
				    SendClientMessage(playerid, COLOR_YELLOW2, "¡No tienes el dinero suficiente!");
				}
			}
			case 1: {
	            new
	                phoneNumber = 40000 + random(999999); // Min: 40000, Max: 999999

				if(Business[business][bProducts] <= 0 && Business[business][bOwnerSQLID] != -1) {
		            SendClientMessage(playerid, COLOR_YELLOW2, "Parece que no disponen de stock, intenta volviendo más tarde.");
		        } else if(GetPlayerCash(playerid) >= PRICE_UNLISTEDPHONE) {
					SendFMessage(playerid, COLOR_YELLOW2, "¡Felicidades! has comprado un teléfono celular no listado en la guía ($%d) utiliza  /ayuda para ver los comandos disponibles.", PRICE_UNLISTEDPHONE);
					GivePlayerCash(playerid, -PRICE_UNLISTEDPHONE);
					PlayerActionMessage(playerid, 15.0, "toma dinero de su bolsillo, le paga al empleado y recibe un teléfono a cambio.");
					PlayerInfo[playerid][pPhoneNumber] = phoneNumber;
					PlayerInfo[playerid][pPhoneC] = business;
					PlayerInfo[playerid][pListNumber] = 0;
					if(Business[business][bOwnerSQLID] != -1) {
					   	Business[business][bTill] += PRICE_UNLISTEDPHONE / 2;
	        			Business[business][bProducts]--;
	        			saveBusiness(business);
					}
				} else {
				    SendClientMessage(playerid, COLOR_YELLOW2, "¡No tienes el dinero suficiente!");
				}
	        }
		}
	} else if(currentMenu == licenseMenu) {
		switch(row) {
	   		case 0: {
	   		    if(playerLicense[playerid][lDTaking] == 1) {
	   		        SendClientMessage(playerid, COLOR_YELLOW2, "¡Ya estas tomando una licencia!");
	   		    } else if(GetPlayerCash(playerid) >= PRICE_LIC_DRIVING) {
			    	if(PlayerInfo[playerid][pCarLic] == 0) {
						SendClientMessage(playerid, COLOR_WHITE, "¡La prueba ha comenzado!, sal del edificio e ingresa a uno de los autos blancos situados en el estacionamiento.");
						playerLicense[playerid][lDTaking] = 1;
					} else {
						SendClientMessage(playerid, COLOR_YELLOW2, "¡No puedes tener más de una licencia de conducción!");
					}
	   		    } else {
	   		        SendClientMessage(playerid, COLOR_YELLOW2, "¡No tienes el dinero suficiente!");
	   		    }
	   		}
	   		case 1: {
                SendClientMessage(playerid, COLOR_YELLOW2, "Esta licencia no se encuentra disponible actualmente.");
	   		}
	   		case 2: {
	   		    if(PlayerInfo[playerid][pFlyLic] == 0) {
		   		    if(GetPlayerCash(playerid) >= PRICE_LIC_FLYING) {
			   			PlayerInfo[playerid][pFlyLic] = 1;
			    	 	GivePlayerCash(playerid, -PRICE_LIC_FLYING);
		                SendFMessage(playerid, COLOR_LIGHTGREEN, "¡Felicidades, has conseguido la licencia de vuelo por $%d!", PRICE_LIC_FLYING);
		           	} else {
		           	    SendClientMessage(playerid, COLOR_YELLOW2, "¡No tienes el dinero suficiente!");
		           	}
		        } else {
		            SendClientMessage(playerid, COLOR_YELLOW2, "¡Ya tienes una licencia de vuelo!");
		        }
	   		}
		}
	}

	// Descongelamos al jugador luego de elegir una opción.
	TogglePlayerControllable(playerid, true);
	return 1;
}

public OnPlayerExitedMenu(playerid) {
	// Descongelamos al jugador en caso de salir de un menú.
	TogglePlayerControllable(playerid, true);
    return 1;
}

SetNormalPlayerGunSkills(playerid)
{
    SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 600);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL_SILENCED, 20);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, 20);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, 20);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, 20);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, 20);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, 20);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 20);
}

public SetPlayerSpawn(playerid) {
    if(AdminDuty[playerid] == 1) {
		SetPlayerHealthEx(playerid, 9999);
	} else {
		SetPlayerArmour(playerid, PlayerInfo[playerid][pArmour]);
	}

    SetNormalPlayerGunSkills(playerid);

	if(!GetPlayerInterior(playerid)) {
		SetPlayerWeather(playerid, weatherVariables[0]);
	} else {
		SetPlayerWeather(playerid, INTERIOR_WEATHER_ID);
	}

	syncPlayerTime(playerid);

    if(PlayerInfo[playerid][pFaction] != 0 && FactionInfo[PlayerInfo[playerid][pFaction]][fUseSkins] == 1) {
		SetPlayerToFactionSkin(playerid);
 	} else {
	    SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
	}
	SetPlayerColor(playerid, 0xFFFFFF00);
	
	SetPlayerFightingStyle(playerid, PlayerInfo[playerid][pFightStyle]);

	if(PlayerInfo[playerid][pFaction] == FAC_PMA)
		resetTazer(playerid);

    isUsingMaskInSlot[playerid] = -1; // Al spawnear, deja de estar con la mascara puesta

    PlayerTextDrawHide(playerid, PTD_Speedo[playerid]);
    KillTimer(pSpeedoTimer[playerid]); // Si murio arriba del auto, borramos el timer recursivo que muestra la gasolina

 	switch(PlayerInfo[playerid][pJailed]) {
   		case 1:	{
   		    // Jail IC.
   		    TogglePlayerControllable(playerid, 0);
   		    SetTimerEx("Unfreeze", 4000, false, "i", playerid);
   		    SetPlayerVirtualWorld(playerid, Building[2][blInsideWorld]);
   		    SetPlayerPos(playerid, PlayerInfo[playerid][pX], PlayerInfo[playerid][pY], PlayerInfo[playerid][pZ]);
	    	SetPlayerFacingAngle(playerid, PlayerInfo[playerid][pA]);
	    	SetPlayerInterior(playerid, 6);
		    PlayerInfo[playerid][pHealth] = 100;
		    SetCameraBehindPlayer(playerid);
		    return 1;
		}
		case 2:	{
		    // Jail OOC.
		    SetPlayerVirtualWorld(playerid, 0);
		    TogglePlayerControllable(playerid, 0);
		    SetTimerEx("Unfreeze", 4000, false, "i", playerid);
		    SetPlayerInterior(playerid, 6);
		    PlayerInfo[playerid][pHealth] = 100;
			SetPlayerPos(playerid, 1412.01, -2.59, 1001.47);
			SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{FF4600}[Castigo OOC]:{C8C8C8} todavía no ha finalizado tu castigo.");
			return 1;
		}
	}

	if(PlayerInfo[playerid][pRegStep] != 0) {
	    TogglePlayerControllable(playerid, false);
		SetPlayerCameraPos(playerid, -1828.273, -32.900, 1061.583);
		SetPlayerCameraLookAt(playerid, -1828.288, -30.311, 1061.143, 2);
        SetPlayerPos(playerid, -1828.2881, -30.3119, 1061.1436);
	} else {
	    SetPlayerPos(playerid, PlayerInfo[playerid][pX], PlayerInfo[playerid][pY], PlayerInfo[playerid][pZ]);
	    SetPlayerFacingAngle(playerid, PlayerInfo[playerid][pA]);
     	SetPlayerInterior(playerid, PlayerInfo[playerid][pInterior]);
     	SetPlayerVirtualWorld(playerid, PlayerInfo[playerid][pVirtualWorld]);
     	SetCameraBehindPlayer(playerid);
	}
    
	return 1;
}

public SetPlayerToFactionSkin(playerid) {
	new faction = PlayerInfo[playerid][pFaction];
	new rank = PlayerInfo[playerid][pRank];
	new rankamount = FactionInfo[faction][fRankAmount];
	if(faction != 255) {
		if(FactionInfo[faction][fUseSkins])	{
			if(rank == 1 && rankamount >= 1) {
				SetPlayerSkin(playerid,FactionInfo[faction][fSkin1]);
			}
			else if(rank == 2 && rankamount >= 2)
			{
				SetPlayerSkin(playerid,FactionInfo[faction][fSkin2]);
			}
			else if(rank == 3 && rankamount >= 3)
			{
				SetPlayerSkin(playerid,FactionInfo[faction][fSkin3]);
			}
			else if(rank == 4 && rankamount >= 4)
			{
				SetPlayerSkin(playerid,FactionInfo[faction][fSkin4]);
			}
			else if(rank == 5 && rankamount >= 5)
			{
				SetPlayerSkin(playerid,FactionInfo[faction][fSkin5]);
			}
			else if(rank == 6 && rankamount >= 6)
			{
				SetPlayerSkin(playerid,FactionInfo[faction][fSkin6]);
			}
			else if(rank == 7 && rankamount >= 7)
			{
				SetPlayerSkin(playerid,FactionInfo[faction][fSkin7]);
			}
			else if(rank == 8 && rankamount >= 8)
			{
				SetPlayerSkin(playerid,FactionInfo[faction][fSkin8]);
			}
			else if(rank == 9 && rankamount >= 9)
			{
				SetPlayerSkin(playerid,FactionInfo[faction][fSkin9]);
			}
			else if(rank == 10 && rankamount >= 10)
			{
				SetPlayerSkin(playerid,FactionInfo[faction][fSkin10]);
			}
		}
	}
	return 1;
}

public ProxDetectorS(Float:radi, playerid, targetid)
{
    if(IsPlayerConnected(playerid)&&IsPlayerConnected(targetid))
	{
		new Float:posx, Float:posy, Float:posz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		//radi = 2.0; //Trigger Radius
		GetPlayerPos(targetid, posx, posy, posz);
		tempposx = (oldposx -posx);
		tempposy = (oldposy -posy);
		tempposz = (oldposz -posz);
		//printf("DEBUG: X:%f Y:%f Z:%f",posx,posy,posz);
		if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
		{
		    if(GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(targetid))
		    {
				return 1;
			}
		}
	}
	return 0;
}
stock ProxDetector(Float:radi, playerid, string[], col1, col2, col3, col4, col5, showSelf = 1) {
	new Float:posx, Float:posy, Float:posz;
	new Float:oldposx, Float:oldposy, Float:oldposz;
	new Float:tempposx, Float:tempposy, Float:tempposz;

	GetPlayerPos(playerid, oldposx, oldposy, oldposz);
	foreach(new i : Player)	{
	    if(showSelf == 0 && i == playerid) {
			continue;
		}
		GetPlayerPos(i, posx, posy, posz);
		tempposx = (oldposx -posx);
		tempposy = (oldposy -posy);
		tempposz = (oldposz -posz);
		if (((tempposx < radi/16) && (tempposx > -radi/16)) && ((tempposy < radi/16) && (tempposy > -radi/16)) && ((tempposz < radi/16) && (tempposz > -radi/16)))
		{
		    if(GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid))
		    {
				SendClientMessage(i, col1, string);
			}
		}
		else if (((tempposx < radi/8) && (tempposx > -radi/8)) && ((tempposy < radi/8) && (tempposy > -radi/8)) && ((tempposz < radi/8) && (tempposz > -radi/8)))
		{
            if(GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid))
            {
				SendClientMessage(i, col2, string);
			}
		}
		else if (((tempposx < radi/4) && (tempposx > -radi/4)) && ((tempposy < radi/4) && (tempposy > -radi/4)) && ((tempposz < radi/4) && (tempposz > -radi/4)))
		{
		    if(GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid))
		    {
				SendClientMessage(i, col3, string);
			}
		}
		else if (((tempposx < radi/2) && (tempposx > -radi/2)) && ((tempposy < radi/2) && (tempposy > -radi/2)) && ((tempposz < radi/2) && (tempposz > -radi/2)))
		{
		    if(GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid))
		    {
				SendClientMessage(i, col4, string);
			}
		}
		else if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
		{
            if(GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid))
            {
				SendClientMessage(i, col5, string);
			}
		}
	}
	return 1;
}
strtok(string[],&idx,seperator = ' ')
{
	new ret[128], i = 0, len = strlen(string);
	while(string[idx] == seperator && idx < len) idx++;
	while(string[idx] != seperator && idx < len)
	{
	    ret[i] = string[idx];
	    i++;
		idx++;
	}
	while(string[idx] == seperator && idx < len) idx++;
	return ret;
}
//=====================================================[SERVERSIDE CASH FUNCTIONS=============================================
stock GivePlayerCash(playerid, money) {
	PlayerInfo[playerid][pCash] += money;
	ResetMoneyBar(playerid);//Resets the money in the original moneybar, Do not remove!
	UpdateMoneyBar(playerid,PlayerInfo[playerid][pCash]);//Sets the money in the moneybar to the serverside cash, Do not remove!
	return PlayerInfo[playerid][pCash];
}

stock TakePlayerCash(playerid, money) {
	PlayerInfo[playerid][pCash] -= money;
	ResetMoneyBar(playerid);//Resets the money in the original moneybar, Do not remove!
	UpdateMoneyBar(playerid,PlayerInfo[playerid][pCash]);//Sets the money in the moneybar to the serverside cash, Do not remove!
	return PlayerInfo[playerid][pCash];
}

stock SetPlayerCash(playerid, money) {
	PlayerInfo[playerid][pCash] = money;
	ResetMoneyBar(playerid);//Resets the money in the original moneybar, Do not remove!
	UpdateMoneyBar(playerid,PlayerInfo[playerid][pCash]);//Sets the money in the moneybar to the serverside cash, Do not remove!
	return PlayerInfo[playerid][pCash];
}

stock ResetPlayerCash(playerid) {
	PlayerInfo[playerid][pCash] = 0;
	ResetMoneyBar(playerid);//Resets the money in the original moneybar, Do not remove!
	UpdateMoneyBar(playerid,PlayerInfo[playerid][pCash]);//Sets the money in the moneybar to the serverside cash, Do not remove!
	return PlayerInfo[playerid][pCash];
}

stock GetPlayerCash(playerid) {
	return PlayerInfo[playerid][pCash];
}
//=====================================================================================================================================
stock log(playerid, logType, text[]) {
	new
	    year, month, day,
	    hour, minute, second,
	    name[32],
		query[512];
		
	getdate(year, month, day);
	gettime(hour, minute, second);
	GetPlayerName(playerid, name, 24);
	mysql_real_escape_string(name, name);
	
	if(logType == LOG_ADMIN) {
		format(query, sizeof(query), "INSERT INTO `log_admin` (pID, pName, pIP, date, text) VALUES (%d, '%s', '%s', '%02d-%02d-%02d %02d:%02d:%02d', '%s')",
			PlayerInfo[playerid][pID],
			name,
			PlayerInfo[playerid][pIP],
			year,
			month,
			day,
			hour,
			minute,
			second,
			text
		);
		mysql_function_query(dbHandle, query, false, "", "");
	} else 	if(logType == LOG_MONEY) {
		format(query, sizeof(query), "INSERT INTO `log_money` (pID, pName, pIP, date, text) VALUES (%d, '%s', '%s', '%02d-%02d-%02d %02d:%02d:%02d', '%s')",
			PlayerInfo[playerid][pID],
			name,
			PlayerInfo[playerid][pIP],
			year,
			month,
			day,
			hour,
			minute,
			second,
			text
		);
		mysql_function_query(dbHandle, query, false, "", "");
	} /*else 	if(logType == LOG_CHAT) {
		format(query, sizeof(query), "INSERT INTO `log_chat` (pID, pName, pIP, date, text) VALUES (%d, '%s', '%s', '%02d-%02d-%02d %02d:%02d:%02d', '%s')",
			PlayerInfo[playerid][pID],
			name,
			PlayerInfo[playerid][pIP],
			year,
			month,
			day,
			hour,
			minute,
			second,
			text
		);
		mysql_function_query(dbHandle, query, false, "", "");
	}*/
	return 1;
}

stock initiateHospital(playerid) {
	TogglePlayerControllable(playerid, false);
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerInterior(playerid, 0);

	if(random(2) == 0) {
		SetPlayerPos(playerid, 1188.4574,-1309.2242,10.5625);
		SetPlayerCameraPos(playerid,1188.4574,-1309.2242,13.5625+6.0);
		SetPlayerCameraLookAt(playerid,1175.5581,-1324.7922,18.1610);

		SetPVarInt(playerid, "hosp", 1);
	} else {
		SetPlayerPos(playerid, 1999.5308,-1449.3281,10.5594);
		SetPlayerCameraPos(playerid,1999.5308,-1449.3281,13.5594+6.0);
		SetPlayerCameraLookAt(playerid,2036.2179,-1410.3223,17.1641);

	    SetPVarInt(playerid, "hosp", 2);
	}

	SendClientMessage(playerid, COLOR_YELLOW2, "Debes reposar un tiempo en el hospital hasta recuperarte.");
	SendClientMessage(playerid, COLOR_YELLOW2, "Antes de ser dado de alta el personal del hospital te quitará las armas y te cobrará una suma por el tratamiento recibido.");
	PlayerInfo[playerid][pHospitalized] = 2;
	SetPlayerHealthEx(playerid, 10);
	return 1;
}

stock LoadJobs() {
	new query[128], id = 1;
	while(id < sizeof(JobInfo)) {
	    format(query, sizeof(query),"SELECT * FROM `jobs` WHERE `id`=%d LIMIT 1", id);
  		mysql_function_query(dbHandle, query, true, "OnJobDataLoad", "i", id);
		id++;
	}
	return 1;
}

//===[SISTEMA DE NEGOCIOS]======================================================
SaveAllBusiness() {
	new
		id = 1;

	while(id < MAX_BUSINESS) {
		saveBusiness(id);
		id++;
	}
	print("[INFO]: negocios guardados.");
	return 1;
}

stock saveBusiness(id) {
    new
		query[1024];

	if(dontsave) return 1;

	ReloadBizIcon(id);
	if(Business[id][bDelete]) {
	    format(query, sizeof(query), "DELETE FROM `business` WHERE `bID` = %d", id);
	    mysql_function_query(dbHandle, query, false, "", "");
		Business[id][bDelete] = false;
		Business[id][bLoaded] = false;
	} else if(Business[id][bInsert]) {
		format(query, sizeof(query), "INSERT INTO `business` (bID, bName, bOutsideX, bOutsideY, bOutsideZ, bEntranceCost, bOutsideInt, bLocked, bEnterable, bOutsideAngle)");
		format(query, sizeof(query), "%s VALUES (%d, '%s', %f, %f, %f, %d, %d, %d, %d, %f)",
			query,
			id,
			Business[id][bName],
			Business[id][bOutsideX],
			Business[id][bOutsideY],
			Business[id][bOutsideZ],
			Business[id][bEntranceFee],
			Business[id][bOutsideInt],
			Business[id][bLocked],
			Business[id][bEnterable],
			Business[id][bOutsideAngle]
		);
		mysql_function_query(dbHandle, query, false, "", "");
		Business[id][bInsert] = false;
	} else {
		format(query, sizeof(query), "UPDATE `business` SET `bOwnerID`='%d', `bEnterable`='%d', `bOutsideInt`=%d, `bInsideInt`=%d, `bPrice`=%d, `bEntranceCost`=%d, `bTill`=%d, `bLocked`=%d, `bType`=%d, `bProducts`=%d",
			Business[id][bOwnerSQLID],
			Business[id][bEnterable],
			Business[id][bOutsideInt],
			Business[id][bInsideInt],
			Business[id][bPrice],
			Business[id][bEntranceFee],
			Business[id][bTill],
			Business[id][bLocked],
			Business[id][bType],
			Business[id][bProducts]
		);
		format(query, sizeof(query), "%s, `bOwnerName`='%s', `bName`='%s', `bOutsideX`=%f, `bOutsideY`=%f, `bOutsideZ`=%f, `bOutsideAngle`=%f, `bInsideX`=%f, `bInsideY`=%f, `bInsideZ`=%f, `bInsideAngle`=%f WHERE `bID`=%d",
			query,
			Business[id][bOwner],
			Business[id][bName],
			Business[id][bOutsideX],
			Business[id][bOutsideY],
			Business[id][bOutsideZ],
			Business[id][bOutsideAngle],
			Business[id][bInsideX],
			Business[id][bInsideY],
			Business[id][bInsideZ],
			Business[id][bInsideAngle],
			id
		);
		mysql_function_query(dbHandle, query, false, "", "");
	}
	return 1;
}

stock LoadBusiness() {
	new
		query[128],
		id = 1;

	while(id < MAX_BUSINESS) {
		format(query, sizeof(query),"SELECT * FROM `business` WHERE `bID` = %d LIMIT 1", id);
		mysql_function_query(dbHandle, query, true, "OnBusinessDataLoad", "i", id);
		Business[id][bOutsideLabel] = CreateDynamic3DTextLabel("-", COLOR_WHITE, Business[id][bOutsideX], Business[id][bOutsideY], Business[id][bOutsideZ] + 0.75, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0, -1, 100.0);
		Business[id][bInsideLabel] = CreateDynamic3DTextLabel("-", 0x008080FF, Business[id][bInsideX], Business[id][bInsideY], Business[id][bInsideZ] + 0.75, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, Business[id][bInsideWorld], Business[id][bInsideInt], -1, 100.0);
		id++;
	}
	return 1;
}

stock ReloadBlIcon(blid) {
	new
	    string[128];

	if(!Building[blid][blLoaded])
		return 1;

	DestroyDynamic3DTextLabel(Building[blid][blOutsideLabel]);
	DestroyDynamic3DTextLabel(Building[blid][blInsideLabel]);

	DestroyDynamicPickup(Building[blid][blOutsidePickup]);
	DestroyDynamicPickup(Building[blid][blInsidePickup]);

	if(Building[blid][blDelete])
	    return 1;

	if(Building[blid][blEntranceFee] == 0) {
		format(string, sizeof(string), "{A9E2F3}%s\nPresiona ENTER para entrar", Building[blid][blText]);
	} else {
		format(string, sizeof(string), "{A9E2F3}%s\nCosto de entrada: $%d\nPresiona ENTER para entrar", Building[blid][blText], Building[blid][blEntranceFee]);
	}

	Building[blid][blOutsideLabel] = CreateDynamic3DTextLabel(string, COLOR_WHITE, Building[blid][blOutsideX], Building[blid][blOutsideY], Building[blid][blOutsideZ] + 0.65, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, 0, -1, 100.0);

    format(string, sizeof(string), "{A9E2F3}%s\nPresiona ENTER para salir", Building[blid][blText2]);
	Building[blid][blInsideLabel] = CreateDynamic3DTextLabel(string, COLOR_WHITE, Building[blid][blInsideX], Building[blid][blInsideY], Building[blid][blInsideZ] + 0.65, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, Building[blid][blInsideWorld], -1, -1, 100.0);

	Building[blid][blOutsidePickup] = CreateDynamicPickup(Building[blid][blPickupModel], 1, Building[blid][blOutsideX], Building[blid][blOutsideY], Building[blid][blOutsideZ], -1);
    Building[blid][blInsidePickup] = CreateDynamicPickup(1239, 1, Building[blid][blInsideX], Building[blid][blInsideY], Building[blid][blInsideZ], Building[blid][blInsideWorld]);
	return 1;
}

stock ReloadBizIcon(bizid) {
	new
	    string[256],
		bizType[32];

    if(!Business[bizid][bLoaded])
	    return 1;

	switch(Business[bizid][bType]) {
	    case 1: 	bizType = "Restaurant";
	    case 2: 	bizType = "Compañía telefonica";
	    case 3: 	bizType = "Tienda 24-7";
	    case 4: 	bizType = "Armería";
	    case 5: 	bizType = "Publicidad";
	    case 6,8: 	bizType = "Tienda de ropa";
	    case 7: 	bizType = "Bar";
	    case 9: 	bizType = "Casino";
	    case 10:	bizType = "Ferretería";
	    case 11:	bizType = "Discoteca/Club Nocturno";
	    default: 	bizType = "Indefinido";
	}

	DestroyDynamic3DTextLabel(Business[bizid][bOutsideLabel]);
	DestroyDynamic3DTextLabel(Business[bizid][bInsideLabel]);
	DestroyDynamicPickup(Business[bizid][bOutsidePickup]);
	DestroyDynamicPickup(Business[bizid][bInsidePickup]);

	if(Business[bizid][bDelete])
	    return 1;

    if(Business[bizid][bOwnerSQLID] == -1) {
        format(string, sizeof(string), "{A9E2F3}%s\n{31B404}¡Negocio a la venta!{A9E2F3}\nCosto: $%d\n{A9E2F3}Tipo: %s\nCosto de entrada: $%d\nPresiona ENTER para entrar", Business[bizid][bName], Business[bizid][bPrice], bizType, Business[bizid][bEntranceFee]);
		Business[bizid][bOutsidePickup] = CreateDynamicPickup(1274, 1, Business[bizid][bOutsideX], Business[bizid][bOutsideY], Business[bizid][bOutsideZ], -1);
	} else {
		format(string, sizeof(string), "{A9E2F3}%s\nCosto de entrada: $%d\n{A9E2F3}Tipo: %s\nPresiona ENTER para entrar", Business[bizid][bName], Business[bizid][bEntranceFee], bizType);
		Business[bizid][bOutsidePickup] = CreateDynamicPickup(1239, 1, Business[bizid][bOutsideX], Business[bizid][bOutsideY], Business[bizid][bOutsideZ], -1);
	}
	Business[bizid][bOutsideLabel] = CreateDynamic3DTextLabel(string, COLOR_WHITE, Business[bizid][bOutsideX], Business[bizid][bOutsideY], Business[bizid][bOutsideZ] + 0.75, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0, -1, 100.0);
	Business[bizid][bInsideLabel] = CreateDynamic3DTextLabel("{A9E2F3}Presiona ENTER para salir", COLOR_WHITE, Business[bizid][bInsideX], Business[bizid][bInsideY], Business[bizid][bInsideZ] + 0.75, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, Business[bizid][bInsideWorld], -1, -1, 100.0);
	Business[bizid][bInsidePickup] = CreateDynamicPickup(19198, 1, Business[bizid][bInsideX], Business[bizid][bInsideY], Business[bizid][bInsideZ], Business[bizid][bInsideWorld]);
	return 1;
}

stock ReloadHouseIcon(houseid) {
    new
	    string[128],
		houseLoc[MAX_ZONE_NAME];

	DestroyDynamic3DTextLabel(House[houseid][hEntranceLabel]);
	DestroyDynamic3DTextLabel(House[houseid][hExitLabel]);

	DestroyDynamicPickup(House[houseid][hEntrancePickup]);
	DestroyDynamicPickup(House[houseid][hExitPickup]);

    House[houseid][hExitPickup] = CreateDynamicPickup(19198, 1, House[houseid][ExitX], House[houseid][ExitY], House[houseid][ExitZ], House[houseid][InsideWorld]);

	GetCoords2DZone(House[houseid][EntranceX], House[houseid][EntranceY], houseLoc, MAX_ZONE_NAME);

	if(House[houseid][Owned] == 0) {
		format(string, sizeof(string), "{21A325}Casa a la venta {FFFFFF}\nUtiliza /comprarcasa\nDirección: %d %s\nPrecio: $%d", houseid, houseLoc, House[houseid][HousePrice]);
		House[houseid][hEntrancePickup] = CreateDynamicPickup(1273, 1, House[houseid][EntranceX], House[houseid][EntranceY], House[houseid][EntranceZ], -1);
	}else if(House[houseid][Owned] == 1) {
	    format(string, sizeof(string), "{49AFE6}Casa con dueño {FFFFFF}\nDirección: %d %s\nPresiona ENTER para entrar", houseid, houseLoc);
		House[houseid][hEntrancePickup] = CreateDynamicPickup(1239, 1, House[houseid][EntranceX], House[houseid][EntranceY], House[houseid][EntranceZ], -1);
	}

	House[houseid][hEntranceLabel] = CreateDynamic3DTextLabel(string, COLOR_WHITE, House[houseid][EntranceX], House[houseid][EntranceY], House[houseid][EntranceZ] + 0.75, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0, -1, 100.0);
	House[houseid][hExitLabel] = CreateDynamic3DTextLabel("{A9E2F3}Presiona ENTER para salir", COLOR_WHITE, House[houseid][ExitX], House[houseid][ExitY], House[houseid][ExitZ] + 0.75, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, House[houseid][InsideWorld], -1, -1, 100.0);
}

stock LoadHouses() {
	new query[128], id = 1;
	while(id < sizeof(House)) {
	    format(query, sizeof(query),"SELECT * FROM `houses` WHERE `id` = %d LIMIT 1", id);
		mysql_function_query(dbHandle, query, true, "OnHouseDataLoad", "i", id);
		House[id][hEntranceLabel] = CreateDynamic3DTextLabel("-", COLOR_WHITE, House[id][EntranceX], House[id][EntranceY], House[id][EntranceZ] + 0.75, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0, -1, 100.0);
		House[id][hExitLabel] = CreateDynamic3DTextLabel("-", 0x008080FF, House[id][ExitX], House[id][ExitY], House[id][ExitZ] + 0.75, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, House[id][InsideWorld], House[id][ExitInterior], -1, 100.0);
		id++;
	}
	return 1;
}

saveHouses() {
  	new
	    id = 1;

    if(dontsave) return 1;

	while(id < MAX_HOUSES) {
	    saveHouse(id);
		id++;
	}
    print("[INFO]: casas guardadas.");
	return 1;
}

stock saveHouse(id) {
	new
		query[1024];

    if(dontsave)
		return 1;

    format(query,sizeof(query),"UPDATE `houses` SET `Owner`='%s', `EntranceX`=%f, `EntranceY`=%f, `EntranceZ`=%f, `EntranceAngle`=%f, `ExitX`=%f, `ExitY`=%f, `ExitZ`=%f, `ExitAngle`=%f, `EntranceInterior`=%d, `ExitInterior`=%d, `Owned`=%d, `HousePrice`=%d, `Money`=%d, `Locked`=%d, `Marijuana`=%d, `LSD`=%d, `Cocaine`=%d, `Ecstasy`=%d WHERE `id`=%d",
    House[id][Owner],
    House[id][EntranceX],
    House[id][EntranceY],
    House[id][EntranceZ],
    House[id][EntranceAngle],
    House[id][ExitX],
	House[id][ExitY],
	House[id][ExitZ],
	House[id][ExitAngle],
	House[id][EntranceInterior],
	House[id][ExitInterior],
	House[id][Owned],
	House[id][HousePrice],
	House[id][Money],
	House[id][Locked],
	House[id][Marijuana],
	House[id][LSD],
	House[id][Cocaine],
	House[id][Ecstasy],
	id);
	
	mysql_function_query(dbHandle, query, false, "", "");
	ReloadHouseIcon(id);
	return 1;
}

stock saveBuildings() {
	new
	    id = 1;

    if(dontsave)
		return 1;

	while(id < MAX_BUILDINGS) {
	    saveBuilding(id);
		id++;
	}
	print("[INFO]: edificios guardados.");
	return 1;
}

stock saveBuilding(id) {
    new
		query[1024];

	if(dontsave)
		return 1;

	ReloadBlIcon(id);
	if(Building[id][blDelete]) {
	    format(query, sizeof(query), "DELETE FROM `buildings` WHERE `blID` = %d", id);
	    mysql_function_query(dbHandle, query, false, "", "");
		Building[id][blDelete] = false;
		Building[id][blLoaded] = false;
	} else if(Building[id][blInsert]) {
		Building[id][blInsideWorld] = id + 16000;
		format(query, sizeof(query), "INSERT INTO `buildings` (blID, blText, blText2, blOutsideX, blOutsideY, blOutsideZ, blEntranceFee, blOutsideInt, blOutsideAngle, blLocked, blPickupModel, blInsideWorld)");
		format(query, sizeof(query), "%s VALUES (%d, '%s', '%s', %f, %f, %f, %d, %d, %f, %d, %d, %d, %d, %d)",
			query,
			id,
			Building[id][blText],
			Building[id][blText2],
			Building[id][blOutsideX],
			Building[id][blOutsideY],
			Building[id][blOutsideZ],
			Building[id][blEntranceFee],
			Building[id][blOutsideInt],
			Building[id][blOutsideAngle],
			Building[id][blLocked],
			Building[id][blPickupModel],
			Building[id][blInsideWorld]
		);
		mysql_function_query(dbHandle, query, false, "", "");
		Building[id][blInsert] = false;
	} else {
		format(query, sizeof(query), "UPDATE `buildings` SET blText='%s',blText2='%s', `blOutsideX` = '%f', `blOutsideY` = '%f', `blOutsideZ` = '%f', `blEntranceFee` = %d, `blOutsideInt` = %d, `blOutsideAngle` = '%f', `blInsideX` = '%f', `blInsideY` = '%f', `blInsideZ` = '%f', `blInsideWorld` = '%d'",
			Building[id][blText],
			Building[id][blText2],
			Building[id][blOutsideX],
			Building[id][blOutsideY],
			Building[id][blOutsideZ],
			Building[id][blEntranceFee],
			Building[id][blOutsideInt],
			Building[id][blOutsideAngle],
			Building[id][blInsideX],
			Building[id][blInsideY],
			Building[id][blInsideZ],
			Building[id][blInsideWorld]
		);
		format(query, sizeof(query), "%s, `blInsideInt` = %d, `blInsideAngle` = '%f', `blLocked` = %d, `blPickupModel` = %d, `blFaction` = %d WHERE `blID` = %d",
			query,
			Building[id][blInsideInt],
			Building[id][blInsideAngle],
			Building[id][blLocked],
			Building[id][blPickupModel],
			Building[id][blFaction],
			id
		);
		mysql_function_query(dbHandle, query, false, "", "");
	}
	return 1;
}

stock loadBuildings() {
	new
		query[128],
		bdid = 1;

	while(bdid < MAX_BUILDINGS) {
		format(query, sizeof(query),"SELECT * FROM `buildings` WHERE `blID` = %d LIMIT 1", bdid);
		mysql_function_query(dbHandle, query, true, "OnBuildingDataLoad", "i", bdid);
		Building[bdid][blOutsideLabel] = CreateDynamic3DTextLabel("-", COLOR_WHITE, Building[bdid][blOutsideX], Building[bdid][blOutsideY], Building[bdid][blOutsideZ] + 0.75, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0, -1, 100.0);
		Building[bdid][blInsideLabel] = CreateDynamic3DTextLabel("-", COLOR_WHITE, Building[bdid][blInsideX], Building[bdid][blInsideY], Building[bdid][blInsideZ] + 0.75, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, Building[bdid][blInsideWorld], Building[bdid][blInsideInt], -1, 100.0);
		bdid++;
	}
	return 1;
}

stock LoadServerInfo() {
    new
		query[128];

    format(query, sizeof(query),"SELECT * FROM `server` WHERE ID = 1;");
	mysql_function_query(dbHandle, query, true, "OnServerDataLoad", "");
	print("[INFO]: configuración cargada.");
	return 1;
}

SaveServerInfo() {
    if(dontsave) return 1;
    new query[512];
    format(query,sizeof(query),"UPDATE server SET sVehiclePricePercent = %d, sPlayersRecord = %d, svLevelExp = %d, sDrugRawMats = %d WHERE ID = 1;",
		ServerInfo[sVehiclePricePercent],
		ServerInfo[sPlayersRecord],
		ServerInfo[svLevelExp],
		ServerInfo[sDrugRawMats]
	);
    mysql_function_query(dbHandle, query, false, "", "");
    print("[INFO]: configuración guardada.");
    return 1;
}

stock LoadFactions() {
	new
		query[128],
		id = 1;

	while(id < sizeof(FactionInfo)) {
	    format(query, sizeof(query),"SELECT * FROM `factions` WHERE `id`=%d LIMIT 1", id);
		mysql_function_query(dbHandle, query, true, "OnFactionDataLoad", "i", id);
		id++;
	}
	print("[INFO]: facciones cargadas.");
	return 1;
}

SaveFactions() {
    if(dontsave) return 1;
	new factionid = 0;
	new squery[512], iquery[512];
	new query[1280];
	while(factionid < sizeof(FactionInfo)) {

		format(squery,sizeof(squery),"`Name`='%s', `Rank1`='%s', `Rank2`='%s', `Rank3`='%s', `Rank4`='%s', `Rank5`='%s', `Rank6`='%s', `Rank7`='%s', `Rank8`='%s', `Rank9`='%s', `Rank10`='%s',",
        FactionInfo[factionid][fName],
        FactionInfo[factionid][fRank1],
		FactionInfo[factionid][fRank2],
		FactionInfo[factionid][fRank3],
		FactionInfo[factionid][fRank4],
		FactionInfo[factionid][fRank5],
		FactionInfo[factionid][fRank6],
		FactionInfo[factionid][fRank7],
		FactionInfo[factionid][fRank8],
		FactionInfo[factionid][fRank9],
		FactionInfo[factionid][fRank10]);

		format(iquery,sizeof(iquery),"`Materials`=%d, `Bank`=%d, `Skin1`=%d, `Skin2`=%d, `Skin3`=%d, `Skin4`=%d, `Skin5`=%d, `Skin6`=%d, `Skin7`=%d, `Skin8`=%d, `Skin9`=%d, `Skin10`=%d, `JoinRank`=%d, `UsesSkins`=%d, `Type`=%d, `RankAmount`=%d, `AllowJob`=%d, fMissionVeh=%d WHERE `id`=%d",
		FactionInfo[factionid][fMaterials],
		FactionInfo[factionid][fBank],
		FactionInfo[factionid][fSkin1],
		FactionInfo[factionid][fSkin2],
		FactionInfo[factionid][fSkin3],
		FactionInfo[factionid][fSkin4],
		FactionInfo[factionid][fSkin5],
		FactionInfo[factionid][fSkin6],
		FactionInfo[factionid][fSkin7],
		FactionInfo[factionid][fSkin8],
		FactionInfo[factionid][fSkin9],
		FactionInfo[factionid][fSkin10],
		FactionInfo[factionid][fJoinRank],
		FactionInfo[factionid][fUseSkins],
		FactionInfo[factionid][fType],
		FactionInfo[factionid][fRankAmount],
		FactionInfo[factionid][fAllowJob],
		FactionInfo[factionid][fMissionVeh],
		factionid);

        format(query,sizeof(query),"UPDATE `factions` SET %s %s", squery, iquery);

		mysql_function_query(dbHandle, query, false, "", "");

		factionid++;
	}

	print("[INFO]: facciones guardadas.");
	return 1;
}

// Obtenemos la ID del item.
stock getInvItem(playerid, invslot) {
	new
	    itemid = -1;


	switch(invslot) {
	    case 0:
	    	sscanf(InvInfo[playerid][inv0], "i{i}", itemid);
	    case 1:
			sscanf(InvInfo[playerid][inv1], "i{i}", itemid);
	}
	return itemid;
}

// Obtenemos el parámetro adicional (EJ: balas).
stock getInvParam(playerid, invslot) {
	new
	    param = -1;

	switch(invslot) {
	    case 0:
	    	sscanf(InvInfo[playerid][inv0], "{i}i", param);
	    case 1:
			sscanf(InvInfo[playerid][inv1], "{i}i", param);
	}
	return param;
}

// Seteamos el item.
stock setInvItem(playerid, invslot, itemid) {
	switch(invslot) {
	    case 0:	{
			format(InvInfo[playerid][inv0], 16, "%d -1", itemid);
		}
	    case 1:	{
			format(InvInfo[playerid][inv1], 16, "%d -1", itemid);
		}
	}
}

// Seteamos el parámetro adicional.
stock setInvParam(playerid, invslot, param) {
	switch(invslot) {
	    case 0:	{
			format(InvInfo[playerid][inv0], 16, "%d %d", getInvItem(playerid, invslot), param);
		}
	    case 1:	{
			format(InvInfo[playerid][inv1], 16, "%d %d", getInvItem(playerid, invslot), param);
		}
	}
}

// Reseteamos.
stock resetInv(playerid) {
	strmid(InvInfo[playerid][inv0], "-1 -1", 0, 16);
	strmid(InvInfo[playerid][inv1], "-1 -1", 0, 16);
	return 1;
}

stock StopMusic(playerid) {
	PlayerPlaySound(playerid, 1069, 0.0, 0.0, 0.0);
}

public ShowStats(playerid, targetid, bool:admin) {
    if(IsPlayerConnected(targetid)) {
		if(gPlayerLogged[targetid]) {
			new
			    location[MAX_ZONE_NAME],
			    Float:health,
			    jText[32],
			    sexText[10],
			    phoneNetwork[32],
			    phoneText[16],
				wLicense[16],
				fLicense[16],
				cLicense[16],
				fRankT[32],
				pFactionName[32];

            GetPlayer2DZone(targetid, location, MAX_ZONE_NAME);
			GetPlayerHealthEx(targetid, health);
			switch(PlayerInfo[targetid][pSex]) {
			    case 0: sexText = "Femenino";
			    case 1: sexText = "Masculino";
			}
			switch(PlayerInfo[targetid][pCarLic]) {
			    case 0: cLicense = "No";
			    case 1: cLicense = "Si";
			}
			switch(PlayerInfo[targetid][pFlyLic]) {
			    case 0: fLicense = "No";
			    case 1: fLicense = "Si";
			}
			switch(PlayerInfo[targetid][pWepLic]) {
			    case 0: wLicense = "No";
			    case 1: wLicense = "Si";
			}
			
			if(PlayerInfo[targetid][pFaction] > 0) {
				format(pFactionName, 32, "%s", FactionInfo[PlayerInfo[targetid][pFaction]][fName]);
				format(fRankT, 32, "%s", GetRankName(PlayerInfo[targetid][pFaction], PlayerInfo[targetid][pRank]));
			} else {
                pFactionName = "Ninguna";
                fRankT = "Ninguno";
			}

			if(PlayerInfo[targetid][pJob] > 0) {
			    format(jText, sizeof(jText), "%s", JobInfo[PlayerInfo[targetid][pJob]][jName]);
			} else {
			    jText = "No";
			}

			if(PlayerInfo[targetid][pPhoneC] == 0) {
				phoneNetwork = "No";
			} else {
				format(phoneNetwork, sizeof(phoneNetwork), "%s", Business[PlayerInfo[targetid][pPhoneC]][bName]);
			}

			if(PlayerInfo[targetid][pPhoneNumber] == 0) {
				phoneText = "No";
			} else {
				format(phoneText, sizeof(phoneText), "%d", PlayerInfo[targetid][pPhoneNumber]);
			}
			SendClientMessage(playerid, COLOR_LIGHTYELLOW, "============================[General IC]=============================");
			SendFMessage(playerid, COLOR_WHITE, "Nombre: %s | Zona: %s | Dinero: $%d | Banco: $%d | Edad: %d | Sexo: %s", GetPlayerNameEx(targetid), location, GetPlayerCash(targetid), PlayerInfo[targetid][pBank], PlayerInfo[targetid][pAge], sexText);
			SendFMessage(playerid, COLOR_WHITE, "Teléfono: %s | Empresa telefónica: %s | Empleo: %s | Facción: %s | Rango: %s", phoneText, phoneNetwork, jText, pFactionName, fRankT);
			SendFMessage(playerid, COLOR_WHITE,	"[Licencias] Conducción: %s | Vuelo: %s | Portación de armas: %s", cLicense, fLicense, wLicense);
			SendClientMessage(playerid, COLOR_LIGHTYELLOW, "============================[General OOC]===========================");
			SendFMessage(playerid, COLOR_WHITE, "Salud: %.1f | Nivel: %d | Experiencia: %d/%d | Advertencias: %d", health, PlayerInfo[targetid][pLevel], PlayerInfo[targetid][pExp], (PlayerInfo[targetid][pLevel] + 1) * ServerInfo[svLevelExp], PlayerInfo[targetid][pWarnings]);
   			SendFMessage(playerid, COLOR_WHITE,	"Casa: %d | Negocio: %d | Vehículos: %d/%d | Horas de juego: %d", PlayerInfo[targetid][pHouseKey], PlayerInfo[targetid][pBizKey], PlayerInfo[targetid][pVeh1], PlayerInfo[targetid][pVeh2], PlayerInfo[targetid][pPlayingHours]);
			if(admin) {
			    SendClientMessage(playerid, COLOR_LIGHTYELLOW, "==============================[DEBUG]==============================");
				SendFMessage(playerid, COLOR_WHITE,	"Negocio actual: %d | Skin: %d | Mundo: %d | Interior: %d | Ultveh: %d | pCantWork: %d | pJobAllowed: %d | pID %d", GetPlayerBusiness(targetid), PlayerInfo[targetid][pSkin], GetPlayerVirtualWorld(targetid), GetPlayerInterior(targetid), LastVeh[targetid], PlayerInfo[targetid][pCantWork], PlayerInfo[targetid][pJobAllowed], PlayerInfo[targetid][pID]);
                SendFMessage(playerid, COLOR_WHITE, "Adicción: %.1f %% | Abstinencia en: %d min | Hambre: %.1f %% | Sed: %.1f %%", PlayerInfo[targetid][pAdictionPercent], PlayerInfo[targetid][pAdictionAbstinence] / 60, PlayerInfo[targetid][pHunger], PlayerInfo[targetid][pThirst]);
			}
			SendClientMessage(playerid, COLOR_LIGHTYELLOW, "===================================================================");
		}
	}
	return 1;
}

stock IsSkinValid(SkinID) return ((SkinID >= 0 && SkinID <= 1)||(SkinID == 2)||(SkinID == 7)||(SkinID >= 9 && SkinID <= 41)||(SkinID >= 43 && SkinID <= 85)||(SkinID >=87 && SkinID <= 118)||(SkinID >= 120 && SkinID <= 148)||(SkinID >= 150 && SkinID <= 207)||(SkinID >= 209 && SkinID <= 272)||(SkinID >= 274 && SkinID <= 288)||(SkinID >= 290 && SkinID <= 299)) ? true:false;

stock ClearScreen(playerid) {
	for(new i = 0; i < 100; i++) {
	    SendClientMessage(playerid, COLOR_WHITE, " ");
	}
	return 0;
}

stock GetPlayerFirstName(playerid) {
	new namestring[2][MAX_PLAYER_NAME];
	new name[MAX_PLAYER_NAME];
	GetPlayerName(playerid,name,MAX_PLAYER_NAME);
	split2(name, namestring, '_');
	return namestring[0];
}

stock GetPlayerLastName(playerid) {
	new namestring[2][MAX_PLAYER_NAME];
	new name[MAX_PLAYER_NAME];
	GetPlayerName(playerid,name,MAX_PLAYER_NAME);
	split2(name, namestring, '_');
	return namestring[1];
}

stock GetVehicleCount() {
	new count;
	for(new v = 1; v < MAX_VEH; v++)
	{
		if (IsVehicleSpawned(v)) count++;
	}
	return count;
}

stock IsVehicleSpawned(vehicleid) {
	new Float:VX,Float:VY,Float:VZ;
	GetVehiclePos(vehicleid,VX,VY,VZ);
	if (VX == 0.0 && VY == 0.0 && VZ == 0.0) return 0;
	return 1;
}

stock GetPlayerIpAddress(playerid) {
	new IP[16];
	GetPlayerIp(playerid, IP, sizeof(IP));
	return IP;
}

RPName(playerid) {
    new
        name[MAX_PLAYER_NAME],
		charCounts[5];

	GetPlayerName(playerid, name, sizeof(name));

	for(new n; n < MAX_PLAYER_NAME; n++) {
		switch(name[n]) {
			case '[', ']', '.', '$', '(', ')', '@', '=': charCounts[1]++;
			case '_': charCounts[0]++;
			case '0' .. '9': charCounts[2]++;
			case 'a' .. 'z': charCounts[3]++;
			case 'A' .. 'Z': charCounts[4]++;
		}
	}
	if(charCounts[0] == 0 || charCounts[0] >= 3) {
	    KickPlayer(playerid,"el sistema","nombre inválido, utiliza un guión bajo, ej: Roberto_Fuentes");
		return 0;
	} else if(charCounts[1] >= 1) {
	   	KickPlayer(playerid,"el sistema","nombre inválido, no debes utilizar símbolos, ej: Roberto_Fuentes");
		return 0;
	} else if(charCounts[2] >= 1) {
	 	KickPlayer(playerid,"el sistema","nombre inválido, no debes utilizar números, ej: Roberto_Fuentes");
		return 0;
	} else if(charCounts[3] == strlen(name) - 1) {
	   	KickPlayer(playerid,"el sistema","utiliza iniciales en mayúsculas, ej: Roberto_Fuentes");
		return 0;
	} else if(charCounts[4] == strlen(name) - 1) {
		KickPlayer(playerid,"el sistema","nombre inválido, solo iniciales en mayúsculas, ej: Roberto_Fuentes");
		return 0;
	} else {
		return 1;
	}
}

stock GetPlayerNameEx(playerid) {
    new string[24];
    GetPlayerName(playerid,string,24);
    new str[24];
    strmid(str,string,0,strlen(string),24);
    for(new i = 0; i < MAX_PLAYER_NAME; i++)
    {
        if (str[i] == '_') str[i] = ' ';
    }
    return str;
}

stock GetObjectCount() {
	new count;
	for(new o; o < MAX_OBJECTS; o++)
	{
		if (IsValidObject(o)) count++;
	}
	return count;
}

ReturnUser(text[], playerid = INVALID_PLAYER_ID)
{
	new pos = 0;
	while (text[pos] < 0x21) // Strip out leading spaces
	{
		if (text[pos] == 0) return INVALID_PLAYER_ID; // No passed text
		pos++;
	}
	new userid = INVALID_PLAYER_ID;
	if (IsNumeric(text[pos])) // Check whole passed string
	{
		// If they have a numeric name you have a problem (although names are checked on id failure)
		userid = strval(text[pos]);
		if (userid >=0 && userid < MAX_PLAYERS)
		{
			if(!IsPlayerConnected(userid))
			{
				/*if (playerid != INVALID_PLAYER_ID)
				{
					SendClientMessage(playerid, 0xFF0000AA, "User not connected");
				}*/
				userid = INVALID_PLAYER_ID;
			}
			else
			{
				return userid; // A player was found
			}
		}
		/*else
		{
			if (playerid != INVALID_PLAYER_ID)
			{
				SendClientMessage(playerid, 0xFF0000AA, "Invalid user ID");
			}
			userid = INVALID_PLAYER_ID;
		}
		return userid;*/
		// Removed for fallthrough code
	}
	// They entered [part of] a name or the id search failed (check names just incase)
	new len = strlen(text[pos]);
	new count = 0;
	new name[MAX_PLAYER_NAME];
	foreach(new i : Player)
	{

			GetPlayerName(i, name, sizeof (name));
			if (strcmp(name, text[pos], true, len) == 0) // Check segment of name
			{
				if (len == strlen(name)) // Exact match
				{
					return i; // Return the exact player on an exact match
					// Otherwise if there are two players:
					// Me and MeYou any time you entered Me it would find both
					// And never be able to return just Me's id
				}
				else // Partial match
				{
					count++;
					userid = i;
				}
			}

	}
	if (count != 1)
	{
		if (playerid != INVALID_PLAYER_ID)
		{
			if (count)
			{
				SendClientMessage(playerid, 0xFF0000AA, "Multiple users found, please narrow earch");
			}
			else
			{
				SendClientMessage(playerid, 0xFF0000AA, "No matching user found");
			}
		}
		userid = INVALID_PLAYER_ID;
	}
	return userid; // INVALID_USER_ID for bad return
}
IsNumeric(const string[])
{
	for (new i = 0, j = strlen(string); i < j; i++)
	{
		if (string[i] > '9' || string[i] < '0') return 0;
	}
	return 1;
}


public kickTimer(playerid) {
	return Kick(playerid);
}

public banTimer(playerid) {
	return Ban(playerid);
}

public KickPlayer(playerid, kickedby[MAX_PLAYER_NAME], reason[]) {
	new
		string[128];
		
	foreach(new i : Player) {
	    if(i == playerid) {
	        SendFMessage(i, COLOR_ADMINCMD, "Has sido expulsado/a por %s, razón: %s", kickedby, reason);
	    } else if(PlayerInfo[i][pAdmin] > 0) {
	        SendFMessage(i, COLOR_ADMINCMD, "%s ha sido expulsado/a por %s, razón: %s.", GetPlayerNameEx(playerid), kickedby, reason);
	    }
	}
	format(string, sizeof(string), "%s ha sido expulsado/a por %s, razón: %s.", GetPlayerNameEx(playerid), kickedby, reason);
	KickLog(string);
	SetTimerEx("kickTimer", 1000, false, "d", playerid);
	return 1;
}

public BanPlayer(playerid, issuerid, reason[]) {
	new
	    pid,
	   	year, month, day,
	    hour, minute, second,
	    targetName[24], issuerName[24], targetIP[16],
		query[512];

    getdate(year, month, day);
	gettime(hour, minute, second);
	
	if(issuerid == INVALID_PLAYER_ID) {
		issuerName = "el servidor";
		pid = -1;
	} else {
	    pid = PlayerInfo[issuerid][pID];
	}
		
	GetPlayerName(issuerid, issuerName, 24);
	GetPlayerName(playerid, targetName, 24);
	mysql_real_escape_string(targetName, targetName);
	mysql_real_escape_string(targetName, targetName);
	
	GetPlayerIp(playerid, targetIP, sizeof(targetIP));

	format(query, sizeof(query), "INSERT INTO `bans` (pID, pName, pIP, banDate, banEnd, banReason, banIssuerID, banIssuerName, banActive) VALUES (%d, '%s', '%s', '%02d-%02d-%02d %02d:%02d:%02d', '%02d-%02d-%02d %02d:%02d:%02d', '%s', %d, '%s', 1)",
		PlayerInfo[playerid][pID],
		targetName,
		targetIP,
		year,
		month,
		day,
		hour,
		minute,
		second,
		3040,
		12,
		1,
		0,
		0,
		0,
		reason,
		pid,
		issuerName
	);
	mysql_function_query(dbHandle, query, false, "", "");

	foreach(new i : Player) {
	    if(i == playerid) {
	        SendFMessage(i, COLOR_ADMINCMD, "Has sido baneado/a por %s, razón: %s", issuerName, reason);
	    } else {
	        SendFMessage(i, COLOR_ADMINCMD, "%s ha sido baneado/a por %s, razón: %s.", targetName, issuerName, reason);
	    }
	}
	TogglePlayerControllable(playerid, false);
	SendClientMessage(playerid, COLOR_WHITE, "Para más información pasa por nuestros foros www.isamp.com.ar");
	SetTimerEx("kickTimer", 1000, false, "d", playerid);
	return 1;
}

stock PlayerToPoint(Float:radius, playerID, Float:x, Float:y, Float:z) {
	new
		Float:oldX,
		Float:oldY,
		Float:oldZ,
		Float:xTemp,
		Float:yTemp,
		Float:zTemp;

	GetPlayerPos(playerID, oldX, oldY, oldZ);
	xTemp = (oldX -x);
	yTemp = (oldY -y);
	zTemp = (oldZ -z);
	if(((xTemp < radius) && (xTemp > -radius)) && ((yTemp < radius) && (yTemp > -radius)) && ((zTemp < radius) && (zTemp > -radius))) {
		return 1;
	}
	return 0;
}

stock ShowServerPassword() {
	new pass[128];
	if (strlen(PASSWORD) != 0) {
		format(pass, sizeof pass, "%s", PASSWORD);
	} else {
	    pass = "None";
	}
	return pass;
}
//===============================================[ZONE FUNCTIONS]================================================================
stock GetCoords2DZone(Float:x, Float:y, zone[], len)
{
 	for(new i = 0; i != sizeof(gSAZones); i++ )
 	{
		if(x >= gSAZones[i][SAZONE_AREA][0] && x <= gSAZones[i][SAZONE_AREA][3] && y >= gSAZones[i][SAZONE_AREA][1] && y <= gSAZones[i][SAZONE_AREA][4])
		{
		    return format(zone, len, gSAZones[i][SAZONE_NAME], 0);
		}
	}
	return 0;
}
stock GetPlayer2DZone(playerid, zone[], len)
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
 	for(new i = 0; i != sizeof(gSAZones); i++ )
 	{
		if(x >= gSAZones[i][SAZONE_AREA][0] && x <= gSAZones[i][SAZONE_AREA][3] && y >= gSAZones[i][SAZONE_AREA][1] && y <= gSAZones[i][SAZONE_AREA][4])
		{
		    return format(zone, len, gSAZones[i][SAZONE_NAME], 0);
		}
	}
	return 0;
}
stock GetPlayer3DZone(playerid, zone[], len)
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
 	for(new i = 0; i != sizeof(gSAZones); i++ )
 	{
		if(x >= gSAZones[i][SAZONE_AREA][0] && x <= gSAZones[i][SAZONE_AREA][3] && y >= gSAZones[i][SAZONE_AREA][1] && y <= gSAZones[i][SAZONE_AREA][4] && z >= gSAZones[i][SAZONE_AREA][2] && z <= gSAZones[i][SAZONE_AREA][5])
		{
		    return format(zone, len, gSAZones[i][SAZONE_NAME], 0);
		}
	}
	return 0;
}
stock IsPlayerInZone(playerid, zone[])
{
	new TmpZone[MAX_ZONE_NAME];
	GetPlayer3DZone(playerid, TmpZone, sizeof(TmpZone));
	for(new i = 0; i != sizeof(gSAZones); i++)
	{
		if(strfind(TmpZone, zone, true) != -1)
			return 1;
	}
	return 0;
}
//====================================================[Chat Functions]=============================================================
public SendFactionMessage(faction, color, string[]) {
	foreach(new i : Player) {
		if(PlayerInfo[i][pFaction] != 0) {
		 	if(PlayerInfo[i][pFaction] == faction) {
				SendClientMessage(i, color, string);
			}
		}
	}
}
//==================================================================================================================================

public fuelTimer()
{
 	// Los que estan arriba (se podría borrar y dejar solo lo otro salvo por el mensaje de que te quedaste sin combustible)
	new vehicle;
	foreach(new i : Player)
	{
   	    if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
   	    {
   	        vehicle = GetPlayerVehicleID(i);
   	        if(VehicleInfo[vehicle][VehEngine] == 1)
   	        {
   	            if(VehicleInfo[vehicle][VehFuel] < 1)
   	            {
   	                GameTextForPlayer(i, "~r~Te has quedado sin combustible.",1500,3);
   	                SetEngine(vehicle, 0);
				}
			}
		}
	}
	// Vehículos
	for(new c = 0; c < MAX_VEH; c++)
	{
 		GetVehicleDamageStatus(c, VehicleInfo[c][VehDamage1], VehicleInfo[c][VehDamage2], VehicleInfo[c][VehDamage3], VehicleInfo[c][VehDamage4]);
	    GetVehicleParamsEx(c, VehicleInfo[c][VehEngine], VehicleInfo[c][VehLights], VehicleInfo[c][VehAlarm], vlocked, VehicleInfo[c][VehBonnet], VehicleInfo[c][VehBoot], VehicleInfo[c][VehObjective]);
        if(VehicleInfo[c][VehEngine] == 1)
		{
		    if( (VehicleInfo[c][VehType] == VEH_OWNED ||
	 			VehicleInfo[c][VehType] == VEH_FACTION ||
				VehicleInfo[c][VehType] == VEH_RENT) &&
				(GetVehicleType(c) != VTYPE_HELI &&
				GetVehicleType(c) != VTYPE_BMX &&
				GetVehicleType(c) != VTYPE_PLANE &&
				GetVehicleType(c) != VTYPE_SEA) )
			{
				if(VehicleInfo[c][VehFuel] >= 1)
					VehicleInfo[c][VehFuel]--;
				else
					SetEngine(c, 0);
			} else
			    VehicleInfo[c][VehFuel] = 100;
		}
	}
	return 1;
}

stock IsAtATM(playerid) {
	if(PlayerToPoint(1.0,playerid,1350.3433,-1758.5756,13.5078)
	   || PlayerToPoint(1.0,playerid,1144.1825,-1765.3004,13.6190)
	   || PlayerToPoint(1.0,playerid,1834.2802,-1851.6484,13.3897)
	   || PlayerToPoint(1.0,playerid,527.4268,-1739.4935,11.7066)
	   || PlayerToPoint(1.0,playerid,1317.4628,-898.6657,39.5781)
	   || PlayerToPoint(1.0,playerid,486.4542,-1271.3389,15.6990)
	   || PlayerToPoint(1.0,playerid,1594.2991,-2334.9038,13.5398)
	   || PlayerToPoint(1.0,playerid,2423.6157,-1220.1835,25.4946)
	   || PlayerToPoint(1.0,playerid,2232.5903,-1161.5964,25.8906)
	   || PlayerToPoint(1.0,playerid,2422.7905,-1959.7603,13.5375)
	   || PlayerToPoint(1.0,playerid,1186.7105,-1368.3475,13.5743))	{
		return 1;
	}
	return 0;
}

IsAtGasStation(playerid)
{
    if(IsPlayerConnected(playerid))
	{
		if(PlayerToPoint(6.0,playerid,1004.0070,-939.3102,42.1797) || PlayerToPoint(6.0,playerid,1944.3260,-1772.9254,13.3906) || PlayerToPoint(6.0,playerid,657.2998,-565.4222,15.9007))
		{//LS
		    return 1;
		}
		else if(PlayerToPoint(6.0,playerid,-90.5515,-1169.4578,2.4079) || PlayerToPoint(6.0,playerid,-1609.7958,-2718.2048,48.5391))
		{//LS
		    return 1;
		}
		else if(PlayerToPoint(6.0,playerid,-2029.4968,156.4366,28.9498) || PlayerToPoint(8.0,playerid,-2408.7590,976.0934,45.4175))
		{//SF
		    return 1;
		}
		else if(PlayerToPoint(5.0,playerid,-2243.9629,-2560.6477,31.8841) || PlayerToPoint(8.0,playerid,-1676.6323,414.0262,6.9484))
		{//Between LS and SF
		    return 1;
		}
		else if(PlayerToPoint(6.0,playerid,2202.2349,2474.3494,10.5258) || PlayerToPoint(10.0,playerid,614.9333,1689.7418,6.6968))
		{//LV
		    return 1;
		}
		else if(PlayerToPoint(8.0,playerid,-1328.8250,2677.2173,49.7665) || PlayerToPoint(6.0,playerid,70.3882,1218.6783,18.5165))
		{//LV
		    return 1;
		}
		else if(PlayerToPoint(8.0,playerid,2113.7390,920.1079,10.5255) || PlayerToPoint(6.0,playerid,-1327.7218,2678.8723,50.0625))
		{//LV
		    return 1;
		}
		else if(PlayerToPoint(6.0,playerid,2319.4900, -1356.4971, 23.9954) || PlayerToPoint(10.0,playerid,609.5114, -1511.2644, 14.9247))
		{// LS NEW
		    return 1;
		}
        else if(PlayerToPoint(10.0,playerid,2257.4990, -2439.8804, 13.5243) || PlayerToPoint(6.0,playerid,1377.2927, -1757.9093, 13.7249))
		{// LS NEW
		    return 1;
		} else if(PlayerToPoint(6.0, playerid, 1575.4045,-1618.2090,13.1889)) {
		    if(PlayerInfo[playerid][pFaction] == FAC_PMA) {
		        return 1;
		    } else {
		        SendClientMessage(playerid, COLOR_YELLOW2, "Debes pertenecer a la policía.");
		    }
		}
	}
	return 0;
}

stock IsAtDealership(playerid) {
    if (PlayerToPoint(35.0, playerid, 2128.0864, -1135.3912, 25.5855) ||
		PlayerToPoint(50.0, playerid, 537.3366, -1293.2140, 17.2422) ||
		PlayerToPoint(35.0, playerid, 2940.2000, -2051.7338, 3.5480)) {
        return 1;
    }
    return 0;
}

stock IsAtHardware(playerid) {
    if(PlayerToPoint(3.0, playerid, 1164.9186, -1470.5299, 15.7918)) {
        return 1;
    }
    return 0;
}

stock IsAtSportShop(playerid) {
    if(PlayerToPoint(3.0, playerid, 1158.2301, -1451.9669, 15.7969)) {
        return 1;
    }
    return 0;
}

stock IsAtSexShop(playerid) {
    if(PlayerToPoint(3.0, playerid, 1214.5698, -13.3521, 1000.9219)) {
        return 1;
    }
    return 0;
}

stock IsVehicleParkedAtDealership(vehicleid) {
    if (ParkedVehicleToPoint(35.0, vehicleid, 2128.0864, -1135.3912, 25.5855) ||
		ParkedVehicleToPoint(50.0, vehicleid, 537.3366, -1293.2140, 17.2422) ||
		ParkedVehicleToPoint(35.0, vehicleid, 2940.2000, -2051.7338, 3.5480)) {
        return 1;
    }
    return 0;
}

stock ParkedVehicleToPoint(Float:radius, vehicleid, Float:x, Float:y, Float:z) {
		new
			Float:oldX,
			Float:oldY,
			Float:oldZ,
			Float:xTemp,
			Float:yTemp,
			Float:zTemp;

		oldX = VehicleInfo[vehicleid][VehPosX];
		oldY = VehicleInfo[vehicleid][VehPosY];
		oldZ = VehicleInfo[vehicleid][VehPosZ];
		xTemp = (oldX -x);
		yTemp = (oldY -y);
		zTemp = (oldZ -z);
		if(((xTemp < radi) && (xTemp > -radius)) && ((yTemp < radius) && (yTemp > -radius)) && ((zTemp < radius) && (zTemp > -radius))) {
			return 1;
		}
		return 0;
}

//====[ACTION MESSAGES]=========================================================
PlayerLocalMessage(playerid,Float:radius,message[])
{
	new string[128];
	format(string, sizeof(string), "(( [%d] %s: %s ))", playerid, GetPlayerNameEx(playerid), message);
	ProxDetector(radius, playerid, string, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
	format(string, sizeof(string), "[OOC-LOCAL] %s", string);
	log(playerid, LOG_CHAT, string);
	return 1;
}

PlayerActionMessage(playerid,Float:radius,message[])
{
	new string[128];
	if(isUsingMaskInSlot[playerid] == -1)
		format(string, sizeof(string), "* %s %s", GetPlayerNameEx(playerid), message);
	else
	    format(string, sizeof(string), "* Enmascarado %s", message);
	ProxDetector(radius, playerid, string, COLOR_ACT1,COLOR_ACT2,COLOR_ACT3,COLOR_ACT4,COLOR_ACT5);
	PlayerActionLog(string);
	return 1;
}

PlayerDoMessage(playerid,Float:radius,message[])
{
	new string[128];
	if(isUsingMaskInSlot[playerid] == -1)
		format(string, sizeof(string), "* %s (( %s ))", message, GetPlayerNameEx(playerid));
	else
	    format(string, sizeof(string), "* %s (( Enmascarado ))", message);
	ProxDetector(radius, playerid, string, COLOR_DO1,COLOR_DO2,COLOR_DO3,COLOR_DO4,COLOR_DO5);
	PlayerActionLog(string);
	return 1;
}

PlayerPlayerActionMessage(playerid,targetid,Float:radius,message[])
{
	new string[128];
	new name1[24];
	name1 = GetPlayerNameEx(playerid);
	new name2[24];
	name2 = GetPlayerNameEx(targetid);
	if(isUsingMaskInSlot[playerid] != -1)
		name1 = "Enmascarado";
	if(isUsingMaskInSlot[targetid] != -1)
	    name2 = "Enmascarado";
	
	format(string, sizeof(string), "* %s %s %s.", name1, message, name2);
	ProxDetector(radius, playerid, string, COLOR_ACT1,COLOR_ACT2,COLOR_ACT3,COLOR_ACT4,COLOR_ACT5);
	PlayerActionLog(string);
	return 1;
}
//==============================================================================


public KickLog(string[]) {
	new
	    time[3],
	    date[3],
	    entry[256],
	    File:hFile;
	    
    getdate(date[0], date[1], date[2]);
	gettime(time[0], time[1], time[2]);
	
	format(entry, sizeof(entry), "[%d/%d/%d %d:%d:%d] - %s\r\n", date[0], date[1], date[2], time[0], time[1], time[2], string);
	hFile = fopen("isamp-data/Logs/kick.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

public PlayerActionLog(string[]) {
	new
	    time[3],
	    date[3],
	    entry[256],
	    File:hFile;

    getdate(date[0], date[1], date[2]);
	gettime(time[0], time[1], time[2]);
	
	format(entry, sizeof(entry), "[%d/%d/%d %d:%d:%d] - %s\r\n", date[0], date[1], date[2], time[0], time[1], time[2], string);
	hFile = fopen("isamp-data/Logs/playeraction.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}
public PlayerLocalLog(string[]) {
	new
	    time[3],
	    date[3],
	    entry[256],
	    File:hFile;

    getdate(date[0], date[1], date[2]);
	gettime(time[0], time[1], time[2]);

	format(entry, sizeof(entry), "[%d/%d/%d %d:%d:%d] - %s\r\n", date[0], date[1], date[2], time[0], time[1], time[2], string);
	hFile = fopen("isamp-data/Logs/playerlocal.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

public TalkLog(string[]) {
	new
	    time[3],
	    date[3],
	    entry[256],
	    File:hFile;

    getdate(date[0], date[1], date[2]);
	gettime(time[0], time[1], time[2]);
	
	format(entry, sizeof(entry), "[%d/%d/%d %d:%d:%d] - %s\r\n", date[0], date[1], date[2], time[0], time[1], time[2], string);
	hFile = fopen("isamp-data/Logs/talk.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

public FactionChatLog(string[]) {
	new
	    time[3],
	    date[3],
	    entry[256],
	    File:hFile;

    getdate(date[0], date[1], date[2]);
	gettime(time[0], time[1], time[2]);
	
	format(entry, sizeof(entry), "[%d/%d/%d %d:%d:%d] - %s\r\n", date[0], date[1], date[2], time[0], time[1], time[2], string);
	hFile = fopen("isamp-data/Logs/factionchat.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

public SMSLog(string[]) {
	new
	    time[3],
	    date[3],
	    entry[256],
	    File:hFile;

    getdate(date[0], date[1], date[2]);
	gettime(time[0], time[1], time[2]);
	
	format(entry, sizeof(entry), "[%d/%d/%d %d:%d:%d] - %s\r\n", date[0], date[1], date[2], time[0], time[1], time[2], string);
	hFile = fopen("isamp-data/Logs/sms.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

public PMLog(string[]) {
	new
	    time[3],
	    date[3],
	    entry[256],
	    File:hFile;

    getdate(date[0], date[1], date[2]);
	gettime(time[0], time[1], time[2]);
	
	format(entry, sizeof(entry), "[%d/%d/%d %d:%d:%d] - %s\r\n", date[0], date[1], date[2], time[0], time[1], time[2], string);
	hFile = fopen("isamp-data/Logs/mp.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

public DonatorLog(string[]) {
	new
	    time[3],
	    date[3],
	    entry[256],
	    File:hFile;

    getdate(date[0], date[1], date[2]);
	gettime(time[0], time[1], time[2]);
	
	format(entry, sizeof(entry), "[%d/%d/%d %d:%d:%d] - %s\r\n", date[0], date[1], date[2], time[0], time[1], time[2], string);
	hFile = fopen("isamp-data/Logs/donator.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

public ReportLog(string[]) {
	new
	    time[3],
	    date[3],
	    entry[256],
	    File:hFile;

    getdate(date[0], date[1], date[2]);
	gettime(time[0], time[1], time[2]);

	format(entry, sizeof(entry), "[%d/%d/%d %d:%d:%d] - %s\r\n", date[0], date[1], date[2], time[0], time[1], time[2], string);
	hFile = fopen("isamp-data/Logs/report.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

public OOCLog(string[]) {
	new
	    time[3],
	    date[3],
	    entry[256],
	    File:hFile;

    getdate(date[0], date[1], date[2]);
	gettime(time[0], time[1], time[2]);
	
	format(entry, sizeof(entry), "[%d/%d/%d %d:%d:%d] - %s\r\n", date[0], date[1], date[2], time[0], time[1], time[2], string);
	hFile = fopen("isamp-data/Logs/ooc.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}
//============================================================================================================================
stock AdministratorMessage(color,const string[],level) {
	foreach(new i : Player) {
		if(PlayerInfo[i][pAdmin] >= level) {
			SendClientMessage(i, color, string);
		}
	}
	print(string);
	return 1;
}

public HangupTimer(playerid)
{
	if(!IsPlayerInAnyVehicle(playerid))
	{
		if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USECELLPHONE)
		{
			SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
			return 1;
		}
	}
	return 0;
}

PlayerName(playerid) {
  new name[MAX_PLAYER_NAME];
  GetPlayerName(playerid, name, sizeof(name));
  return name;
}

public IsACopSkin(skinid)
{
	if(skinid == 280 || skinid == 281 || skinid == 282 || skinid == 283 || skinid == 288 || skinid == 284 || skinid == 285 || skinid == 286 || skinid == 287)
	{
		return 1;
	}
	return 0;
}

public cantSaveItems(playerid) {
	SetPVarInt(playerid, "cantSaveItems", 0);
	return 1;
}

public healTimer(playerid) {
    if(GetPVarInt(playerid, "isHealing") != 0)
	{
		SendClientMessage(playerid, COLOR_WHITE, "Tu oferta se ha cancelado, el herido no la ha aceptado.");
		SendClientMessage(GetPVarInt(playerid, "healTarget"), COLOR_WHITE, "Ha pasado demasiado tiempo y has rechazado la oferta del médico.");
	}
	DeletePVar(DeletePVar(playerid, "healTarget"), "healIssuer");
	DeletePVar(DeletePVar(playerid, "healTarget"), "healCost");
	DeletePVar(playerid, "isHealing");
	DeletePVar(playerid, "healTarget");
	return 1;
}

public jobBreakTimer(playerid, job) {
	if(jobBreak[playerid] > 0) {
		jobBreak[playerid]--;
		if(jobBreak[playerid] == 40) {
		    SendClientMessage(playerid, COLOR_WHITE, "¡Te quedan 40 segundos para ingresar al vehículo!");
		}
		SetPVarInt(playerid, "jobBreakTimerID", SetTimerEx("jobBreakTimer", 1000, false, "dd", playerid, job));
	} else {
	    SendClientMessage(playerid, COLOR_WHITE, "¡Has agotado el tiempo disponible para ingresar al vehículo!");
	    SendClientMessage(playerid, COLOR_WHITE, "No recibirás ninguna paga y no podrás volver a trabajar hasta el próximo día de pago.");
	    PlayerInfo[playerid][pCantWork] = 1;
	    SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
		jobDuty[playerid] = false;
		if(PlayerInfo[playerid][pJobAllowed] == 1) {
			SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
		}
		CollectedProds[playerid] = 0;
		LastCP[playerid] = -1;
		
		DisablePlayerCheckpoint(playerid);
		
		if(job == JOB_GARB) {
			DeletePVar(playerid, "garbageCheckpoint");
			DeletePVar(playerid, "garbageRoute");
		}
		SetEngine(GetPlayerVehicleID(playerid), 0);
		SetVehicleToRespawn(GetPVarInt(playerid, "jobVehicle"));
		DeletePVar(playerid, "jobVehicle");
		KillTimer(GetPVarInt(playerid, "jobBreakTimerID"));
	}
	return 1;
}

public speedoTimer(playerid) {
	new vehicleID = GetPlayerVehicleID(playerid);
	new string[20];
	new string2[64];

  	// Actualizamos la información del velocímetro.

	if((VehicleInfo[vehicleID][VehFuel] > 0) && (VehicleInfo[vehicleID][VehFuel] < 100000)) {
		format(string, sizeof(string), "~g~%s~l~%s", "I", "IIIIIIIII");
	}

	if((VehicleInfo[vehicleID][VehFuel] >= ((100 / 10) * 1)) && (VehicleInfo[vehicleID][VehFuel] < ((100 / 10) * 2))) {
		format(string, sizeof(string), "~g~%s~l~%s", "II", "IIIIIIII");
	}
	
	if((VehicleInfo[vehicleID][VehFuel] >= ((100 / 10) * 2)) && (VehicleInfo[vehicleID][VehFuel] < ((100 / 10) * 3))) {
		format(string, sizeof(string), "~g~%s~l~%s", "III", "IIIIIII");
	}
	
	if((VehicleInfo[vehicleID][VehFuel] >= ((100 / 10) * 3)) && (VehicleInfo[vehicleID][VehFuel] < ((100 / 10) * 4))) {
		format(string, sizeof(string), "~g~%s~l~%s", "IIII", "IIIIII");
	}
	
	if((VehicleInfo[vehicleID][VehFuel] >= ((100 / 10) * 4)) && (VehicleInfo[vehicleID][VehFuel] < ((100 / 10) * 5))) {
		format(string, sizeof(string), "~g~%s~l~%s", "IIIII", "IIIII");
	}
	
	if((VehicleInfo[vehicleID][VehFuel] >= ((100 / 10) * 5)) && (VehicleInfo[vehicleID][VehFuel] < ((100 / 10) * 6))) {
		format(string, sizeof(string), "~g~%s~l~%s", "IIIIII", "IIII");
	}
	
	if((VehicleInfo[vehicleID][VehFuel] >= ((100 / 10) * 6)) && (VehicleInfo[vehicleID][VehFuel] < ((100 / 10) * 7))) {
		format(string, sizeof(string), "~g~%s~l~%s", "IIIIIII", "III");
	}
	
	if((VehicleInfo[vehicleID][VehFuel] >= ((100 / 10) * 7)) && (VehicleInfo[vehicleID][VehFuel] < ((100 / 10) * 8))) {
		format(string, sizeof(string), "~g~%s~l~%s", "IIIIIIII", "II");
	}
	
	if((VehicleInfo[vehicleID][VehFuel] >= ((100 / 10) * 8)) && (VehicleInfo[vehicleID][VehFuel] < ((100 / 10) * 9))) {
		format(string, sizeof(string), "~g~%s~l~%s", "IIIIIIIII", "I");
	}
	
	if((VehicleInfo[vehicleID][VehFuel] >= ((100 / 10) * 9)) && (VehicleInfo[vehicleID][VehFuel] <= 100)) {
		format(string, sizeof(string), "~g~%s", "IIIIIIIIII");
	}
	
	if(VehicleInfo[vehicleID][VehFuel] == 0) {
		format(string, sizeof(string), "~l~%s", "IIIIIIIIII");
	}
				// Format the final fuel-gauge readout
		//format(FuelString, 50, "~w~Fuel: %s", FuelStatus);
		// Display the fuel-gauge
		//TextDrawSetString(APlayerData[playerid][FuelGauge], FuelString);

    format(string2, sizeof(string2), "%d KM/H~n~ ~n~Combustible: ~n~%s", GetPlayerSpeed(playerid, true), string);
	PlayerTextDrawSetString(playerid, PTD_Speedo[playerid], string2);
	return 1;
}

public vehicleTimer() {
	new vehicleid;
	foreach(new i : Player)	{
		if(IsPlayerInAnyVehicle(i) && GetPlayerState(i) == PLAYER_STATE_DRIVER) {
			vehicleid = GetPlayerVehicleID(i);
			GetVehicleHealth(vehicleid, VehicleInfo[vehicleid][VehHP]);
			if(VehicleInfo[vehicleid][VehHP] <= 500 && VehicleInfo[vehicleid][VehType] != VEH_CREATED)	{
			    GetVehicleParamsEx(vehicleid, VehicleInfo[vehicleid][VehEngine], VehicleInfo[vehicleid][VehLights], VehicleInfo[vehicleid][VehAlarm], vlocked, VehicleInfo[vehicleid][VehBonnet], VehicleInfo[vehicleid][VehBoot], VehicleInfo[vehicleid][VehObjective]);
				if(VehicleInfo[vehicleid][VehEngine] == 1) {
					SetVehicleParamsEx(vehicleid, 0, VehicleInfo[vehicleid][VehLights], VehicleInfo[vehicleid][VehAlarm], 0, VehicleInfo[vehicleid][VehBonnet], VehicleInfo[vehicleid][VehBoot], VehicleInfo[vehicleid][VehObjective]);
					SendClientMessage(i, COLOR_YELLOW2, "¡El motor del vehículo se encuentra dañado, debes llamar a un mecánico!");
					PlayerDoMessage(i , 15.0, "El motor del vehículo está muy averiado y se ha apagado");
				}
			}
		}
	}
}

public JailTimer() {
	new string[128];
	foreach(new i : Player)	{
	    if(PlayerInfo[i][pJailed] >= 0) {
	    	if(PlayerInfo[i][pJailTime] != 0) {
				if(cAFK[i] == 0) {
					PlayerInfo[i][pJailTime]--;
					format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~n~~w~Tiempo restante: ~g~%d segundos.",PlayerInfo[i][pJailTime]);
					GameTextForPlayer(i, string, 999, 3);
				}
			}
			if(PlayerInfo[i][pJailTime] == 0) {
			    switch (PlayerInfo[i][pJailed]) {
			        case 1: {
			            PlayerInfo[i][pJailed] = 0;
						SendClientMessage(i, COLOR_LIGHTYELLOW2,"{878EE7}[Prisión]:{C8C8C8} has finalizado tu condena, puedes retirarte.");
						SetPlayerVirtualWorld(i, Building[2][blInsideWorld]);
					    SetPlayerInterior(i, 6);
						SetPlayerPos(i, 246.4393, 70.9981, 1003.6406);
						SetPlayerFacingAngle(i, 177.6641);
						TogglePlayerControllable(i, true);
		  			}
			        case 2: {
			            SetPlayerVirtualWorld(i, 0);
			            PlayerInfo[i][pJailed] = 0;
						SendClientMessage(i, COLOR_LIGHTYELLOW2,"{878EE7}[Castigo OOC]:{C8C8C8} has finalizado tu castigo, puedes irte ahora.");
					    SetPlayerInterior(i, 0);
					    PlayerInfo[i][pA] = 176.6281;
						PlayerInfo[i][pX] = 1685.7615;
						PlayerInfo[i][pY] = -2241.1375;
						PlayerInfo[i][pZ] = 13.5469;
						SetPlayerPos(i, 1685.7615, -2241.1375, 13.5469);
						SetPlayerFacingAngle(i, 176.6281);
						TogglePlayerControllable(i, true);
			        }
				}
			}
		}
	}
	return 1;
}

public AllowAd(playerid) {
	AllowAdv[playerid] = 1;
	return 1;
}

stock GetRankName(factionid, rank) {
	new
		ranktext[64];
	// Devuelve el nombre del rango.
	switch(rank) {
		case 1: format(ranktext, sizeof(ranktext), "%s", FactionInfo[factionid][fRank1]);
	    case 2: format(ranktext, sizeof(ranktext), "%s", FactionInfo[factionid][fRank2]);
	    case 3: format(ranktext, sizeof(ranktext), "%s", FactionInfo[factionid][fRank3]);
	    case 4: format(ranktext, sizeof(ranktext), "%s", FactionInfo[factionid][fRank4]);
	    case 5: format(ranktext, sizeof(ranktext), "%s", FactionInfo[factionid][fRank5]);
	    case 6: format(ranktext, sizeof(ranktext), "%s", FactionInfo[factionid][fRank6]);
	    case 7: format(ranktext, sizeof(ranktext), "%s", FactionInfo[factionid][fRank7]);
	    case 8: format(ranktext, sizeof(ranktext), "%s", FactionInfo[factionid][fRank8]);
	    case 9: format(ranktext, sizeof(ranktext), "%s", FactionInfo[factionid][fRank9]);
	    case 10: format(ranktext, sizeof(ranktext), "%s", FactionInfo[factionid][fRank10]);
	    default: format(ranktext, sizeof(ranktext), "error");
	}
	return ranktext;
}

SetPlayerFaction(targetid, factionid, rank)
{
	new oldfaction = PlayerInfo[targetid][pFaction];
	
    PlayerInfo[targetid][pFaction] = factionid;
	PlayerInfo[targetid][pRank] = rank;
	if(factionid == 0)
	{
		// Deja la facción.
		if(FactionInfo[factionid][fAllowJob] == 0)
		{
			PlayerInfo[targetid][pJobAllowed] = 1;
		    PlayerInfo[targetid][pJob] = 0;
		}
		
		if(PlayerInfo[targetid][pJob] == JOB_DRUGD) //para que no quede con el job sin mafia
		    PlayerInfo[targetid][pJob] = 0;
		    
		if(FactionInfo[oldfaction][fType] == FAC_TYPE_GANG)
		    HideGangZonesToPlayer(targetid);
		    
		SetPlayerSkin(targetid, PlayerInfo[targetid][pSkin]);
		
	} else {
	    // Ingresa.
		if(FactionInfo[factionid][fAllowJob] == 0)
		{
			PlayerInfo[targetid][pJobAllowed] = 0;
			PlayerInfo[targetid][pJob] = 0;
		}
		
		if(FactionInfo[factionid][fUseSkins] == 1)
			SetPlayerSkin(targetid, FactionInfo[factionid][fSkin1]);
			
		if(FactionInfo[factionid][fType] == FAC_TYPE_GANG)
			ShowGangZonesToPlayer(targetid);
	}
}

public Reparacion(playerid) {
    new string[128], vehicleid;
	if(GetPlayerCash(playerid) >= RepairPrice[playerid]) {
		TogglePlayerControllable(playerid, true);
		vehicleid = GetPlayerVehicleID(playerid);
		RepairVehicle(vehicleid);
		VehicleInfo[vehicleid][VehHP] = 100;
		format(string, sizeof(string), "Su vehículo ha sido reparado por %s (costo: $%d).", GetPlayerNameEx(RepairOffer[playerid]), RepairPrice[playerid]);
		SendClientMessage(playerid, COLOR_YELLOW2, string);
		format(string, sizeof(string), "Reparaste el vehículo de %s, $%d han sido añadidos a su PayDay.", GetPlayerNameEx(playerid), RepairPrice[playerid]);
		SendClientMessage(RepairOffer[playerid], COLOR_YELLOW2, string);
		PlayerInfo[RepairOffer[playerid]][pPayCheck] += RepairPrice[playerid];
		GivePlayerCash(playerid, -RepairPrice[playerid]);
		RepairOffer[playerid] = 999;
		RepairPrice[playerid] = 0;
	} else {
	    TogglePlayerControllable(playerid, true);
	    SendClientMessage(RepairOffer[playerid], COLOR_YELLOW2, "El jugador no tiene el dinero necesario.");
	    SendClientMessage(playerid, COLOR_YELLOW2, "No tienes el dinero necesario.");
	    RepairOffer[playerid] = 999;
		RepairPrice[playerid] = 0;
	}
}

public PhoneAnimation(playerid) {
	if(!IsPlayerInAnyVehicle(playerid))	{
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
		SetTimerEx("HangupTimer", 1000, false, "i", playerid);
		return 1;
	}
	return 0;
}

stock IsValidSkin(skinid)
{
    #define	MAX_BAD_SKINS 22
    new badSkins[MAX_BAD_SKINS] =
    {
        3, 4, 5, 6, 8, 42, 65, 74, 86,
        119, 149, 208, 265, 266, 267,
        268, 269, 270, 271, 272, 273, 289
    };
    if (skinid < 0 || skinid > 299) return false;
    for (new i = 0; i < MAX_BAD_SKINS; i++)
    {
        if (skinid == badSkins[i]) return false;
    }
    #undef MAX_BAD_SKINS
    return 1;
}

public GetClosestPlayer(p1) {
	new Float:dis,Float:dis2,player;
	player = -1;
	dis = 99999.99;
	foreach(new i : Player) {
		if(i != p1) {
			dis2 = GetDistanceBetweenPlayers(i,p1);
			if(dis2 < dis && dis2 != -1.00) {
				dis = dis2;
				player = i;
			}
		}
	}
	return player;
}

stock GetClosestVehicle(playerid, Float:radius) {
    new
		playerVeh = GetPlayerVehicleID(playerid),
        closestVeh = INVALID_VEHICLE_ID,
        Float: distance[2],
        Float: pos[3];

    distance[1] = 99999.0;
    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);

    for(new vehicleid = 1; vehicleid < MAX_VEH; vehicleid++) {
	   	if(vehicleid == playerVeh)
	   	    continue;
	   	    
        distance[0] = GetVehicleDistanceFromPoint(vehicleid, pos[0], pos[1], pos[2]);
            
		if(distance[0] < distance[1]) {
            distance[1] = distance[0];
            closestVeh = vehicleid;
        }
    }
    if(distance[1] > radius) {
        return INVALID_VEHICLE_ID;
	} else {
		return closestVeh;
	}
}

stock Float:GetDistanceBetweenPlayers(p1, p2) {
	new Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2;
	if(!IsPlayerConnected(p1) || !IsPlayerConnected(p2)) {
		return -1.00;
	}
	GetPlayerPos(p1,x1,y1,z1);
	GetPlayerPos(p2,x2,y2,z2);
	return floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));
}

public Float:GetDistance(Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2) {
	return floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));
}

public ResetPlayerWantedLevelEx(playerid) {
  	format(PlayerInfo[playerid][pAccusedOf], 64, "Sin cargos");
  	format(PlayerInfo[playerid][pAccusedBy], 24, "Nadie");
	PlayerInfo[playerid][pWantedLevel] = 0;
	return 1;
}

public SetPlayerWantedLevelEx(playerid, level) {
	PlayerInfo[playerid][pWantedLevel] = level;
	return 1;
}

public GetPlayerWantedLevelEx(playerid) {
	return PlayerInfo[playerid][pWantedLevel];
}

public CloseGate(gateID) {
	if(gateID == PMBarrier) {
		MoveObject(PMBarrier,  1544.68, -1631.00, 13.19, 0.004, 0.00, 90.00, 90.00);
	} else if(gateID == TMMAGate) {
	   	MoveObject(TMMAGate, 1623.01730, -1862.1691, 12.00760, 3.0, 0.00, 0.00, 180.00);
	} else if(gateID == MANGate) {
	   	MoveObject(MANGate, 781.57, -1329.41, 13.34, 0.004, 0.00, 270.00, 0.00);
	} else if(gateID == HOSPGate) {
	    MoveObject(HOSPGate, 1147.03149,-1384.87317, 13.46000, 0.0001, 0.00000, -90.00000, 0.00000);
	} else if(gateID == PMGate) {
	    MoveObject(PMGate, 1589.73499, -1638.32410, 14.27130, 2.0, 0.00000, 0.00000, 90.00000);
	}
	
	/*
	  else if(gateID == BERTGate) {
	    MoveObject(BERTGate, 1245.07910, -767.55127, 90.60150, 2.0, 0.00000, 0.00000, 180.00000);
	} else if(gateID == FORZGate) {
	    MoveObject(FORZGate, 263.59546, -1333.77124, 51.39749, 2.0, 0.00000, 0.00000, 35.82000);
	} else if(gateID == CHINGate[0]) {
		MoveObject(CHINGate[0], 324.34799, -1185.18579, 75.42600, 2.0, 0.00000, 0.00000, 37.50000);
		MoveObject(CHINGate[1], 317.32422, -1190.57642, 75.42602, 2.0, 0.00000, 0.00000, 37.49999);
	}
	*/
	
	return 1;
}

public CloseTuneGate0() {
    if(TMTune[0][0] == 1) {
	    TMTune[0][0] = 0;
	    MoveObject(TMTune[0][1], -2716.01, 217.88, 5.48, 1, 0.00, 0.00, 0.00);
	}
	return 1;
}

public CloseTuneGate1() {
    if(TMTune[1][0] == 1) {  
	    TMTune[1][0] = 0;
	    MoveObject(TMTune[1][1],  2644.83, -2039.06, 14.32, 1, 0.00, 0.00, 73.08);
	}
	return 1;
}

public CloseTuneGate2() {
    if(TMTune[2][0] == 1) {
	    TMTune[2][0] = 0;
	    MoveObject(TMTune[2][1], -1935.01, 238.70, 33.69, 1, 0.00, 0.00, 0.00);
	}
	return 1;
}

public CloseTuneGate3() {
    if(TMTune[3][0] == 1) {
	    TMTune[3][0] = 0;
	    MoveObject(TMTune[3][1], 1043.17, -1025.85, 33.66, 1, 0.00, 0.00, 0.00);
	}
	return 1;
}

public CloseTuneGate4() {
    if(TMTune[4][0] == 1) {
	    TMTune[4][0] = 0;
	    MoveObject(TMTune[4][1], 2387.38, 1043.45, 11.82, 1, 0.00, 0.00, 0.00);
	}
	return 1;
}

TIMER:CloseSIDEGate() {
    if(SIDEGate[0] == 1) {
    	SIDEGate[0] = 0;
		MoveObject(SIDEGate[1], 1286.31, -1654.82, 14.28, 1, 0.00, 0.00, 0.00);
		MoveObject(SIDEGate[2], 1286.30, -1645.22, 17.77, 1, 0.00, 0.00, 0.00);
		MoveObject(SIDEGate[3], 1286.32, -1645.22, 14.28, 1, 0.00, 0.00, 0.00);
		MoveObject(SIDEGate[4], 1286.28, -1654.82, 17.75, 1, 0.00, 0.00, 0.00);
		MoveObject(SIDEGate[5], 1286.30, -1654.10, 17.87, 1, 180.00, 0.00, 90.00);
		MoveObject(SIDEGate[6], 1286.30, -1642.65, 17.87, 1, 180.00, 0.00, 90.00);
    }
    return 1;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys) {
	new
		string[128];

	// Si está esposado, cae al piso al intentar saltar.
	if(newkeys & KEY_JUMP && !(oldkeys & KEY_JUMP) && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED) ApplyAnimation(playerid, "GYMNASIUM", "gym_jog_falloff",4.1,0,1,1,0,0);

	if(PRESSED(KEY_WALK)) {
		if(PlayerInfo[playerid][pSpectating] != INVALID_PLAYER_ID && PlayerInfo[playerid][pAdmin] >= 1) {
			PlayerInfo[playerid][pSpectating] = INVALID_PLAYER_ID;
		    TogglePlayerSpectating(playerid, false);
			SetCameraBehindPlayer(playerid);
		    SetPlayerPos(playerid, PlayerInfo[playerid][pX], PlayerInfo[playerid][pY], PlayerInfo[playerid][pZ]);
		    SetPlayerInterior(playerid, PlayerInfo[playerid][pInterior]);
		    SetPlayerVirtualWorld(playerid, PlayerInfo[playerid][pVirtualWorld]);
		    TextDrawHideForPlayer(playerid, textdrawVariables[0]);
			return 1;
		}
    }

	// Puertas-barreras.
	if((IsPlayerInAnyVehicle(playerid) && GetPlayerVehicleSeat(playerid) == 0 && newkeys & KEY_CROUCH) || newkeys & KEY_SECONDARY_ATTACK) {
        if(PlayerInfo[playerid][pFaction] == FAC_MAN) {
	    	if(PlayerToPoint(10.0, playerid, 778.88, -1329.78, 13.54)) {
	            MoveObject(MANGate, 781.57, -1329.41, 13.341, 0.004, 0.00, 360.00, 0.00);
	            SetTimerEx("CloseGate", 4000, false, "i", MANGate);
	        }
	    } else
		if(PlayerInfo[playerid][pFaction] == FAC_MECH) {
	    	if(PlayerToPoint(10.0, playerid, 1623.01730, -1862.1691, 13.55)) {
	            MoveObject(TMMAGate, 1612.2173, -1862.1691, 12.0076, 3.0, 0.00, 0.00, 180.00);
	            SetTimerEx("CloseGate", 4000, false, "i", TMMAGate);
	        }
	    } else
	    if(PlayerInfo[playerid][pFaction] == FAC_PMA) {
	        if(PlayerToPoint(10.0, playerid, 1544.69, -1630.79, 13.10)) {
	            MoveObject(PMBarrier,  1544.68, -1631.00, 13.191, 0.004,0.00, 0.00, 90.00);
	            SetTimerEx("CloseGate", 4000, false, "i", PMBarrier);
	        } else
	        if(PlayerToPoint(10.0, playerid, 1588.58, -1638.11, 13.48)) {
	            MoveObject(PMGate, 1589.73499, -1638.32410, 17.43779, 2.0, 0.00000, 0.00000, 90.00000);
	            SetTimerEx("CloseGate", 6000, false, "i", PMGate);
	        }
	    } else
	    if(PlayerInfo[playerid][pFaction] == FAC_HOSP) {
	        if(PlayerToPoint(10.0, playerid, 1143.42, -1384.82, 13.79)) {
	            MoveObject(HOSPGate,  1147.03149, -1384.87317, 13.46000, 0.0001, 0.00000, 0.00000, 0.00000);
	            SetTimerEx("CloseGate", 4000, false, "i", HOSPGate);
	        }
	    }
	    
		/*
		  else
	    if(PlayerInfo[playerid][pFaction] == FAC_BERT) {
	        if(PlayerToPoint(15.0, playerid, 1245.11, -767.45, 92.16)) {
	            MoveObject(BERTGate,  1241.1888, -771.8996, 90.6015, 2.0, 0.0000, 0.0000, 96.6600);
	            SetTimerEx("CloseGate", 6000, false, "i", BERTGate);
	        }
	    } else
	    if(PlayerInfo[playerid][pFaction] == FAC_FORZ) {
	        if(PlayerToPoint(10.0, playerid, 263.70, -1332.88, 53.43)) {
	            MoveObject(FORZGate,  257.1657, -1338.4166, 51.3975, 2, 0.0000, 0.0000, 35.8200);
	            SetTimerEx("CloseGate", 6000, false, "i", FORZGate);
	        }
	    } else
	    if(PlayerInfo[playerid][pFaction] == FAC_CHIN) {
	        if(PlayerToPoint(10.0, playerid, 321.01, -1188.81, 76.36)) {
	            MoveObject(CHINGate[0], 330.4567, -1180.4983, 75.4260, 2.0, 0.0000, 0.0000, 37.5000);
				MoveObject(CHINGate[1], 310.6317, -1195.7115, 75.4260, 2.0, 0.0000, 0.0000, 37.5000);
	            SetTimerEx("CloseGate", 6000, false, "i", CHINGate[0]);
	        }
	    }
	    */
	    
    }

	if (PlayerInfo[playerid][pTutorial] == 1) {
		if (PlayerInfo[playerid][pRegStep] == 1) {
			if(PRESSED(KEY_SPRINT)) {
			    PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
				if(PlayerInfo[playerid][pSex] == 1)	{
				    SetPlayerSkin(playerid, SkinRegFemale[0][0]);
			    	PlayerTextDrawSetString(playerid, RegTDGender[playerid], "Genero: femenino");
			    	PlayerInfo[playerid][pSex] = 0;
				} else {
					SetPlayerSkin(playerid, SkinRegMale[0][0]);
					PlayerTextDrawSetString(playerid, RegTDGender[playerid], "Genero: masculino");
					PlayerInfo[playerid][pSex] = 1;
				}
			} else if(PRESSED(KEY_SECONDARY_ATTACK)) {
			    PlayerPlaySound(playerid, 1150, 0.0, 0.0, 0.0);

			    PlayerTextDrawDestroy(playerid, RegTDArrow[playerid]);
				RegTDArrow[playerid] = CreatePlayerTextDraw(playerid, 501.000000, 133.500000, "~>~");
				PlayerTextDrawAlignment(playerid, RegTDArrow[playerid], 2);
				PlayerTextDrawBackgroundColor(playerid, RegTDArrow[playerid], 255);
				PlayerTextDrawFont(playerid, RegTDArrow[playerid], 2);
				PlayerTextDrawLetterSize(playerid, RegTDArrow[playerid], 0.260000, 0.899999);
				PlayerTextDrawColor(playerid, RegTDArrow[playerid], -1);
				PlayerTextDrawSetOutline(playerid, RegTDArrow[playerid], 1);
				PlayerTextDrawSetProportional(playerid, RegTDArrow[playerid], 1);
				PlayerTextDrawShow(playerid, RegTDArrow[playerid]);

				PlayerInfo[playerid][pRegStep]++;
				if(PlayerInfo[playerid][pSex] == 1)	{
				    format(string, sizeof(string), "Apariencia: %d/%d", RegCounter[playerid], sizeof(SkinRegMale));
				} else {
					format(string, sizeof(string), "Apariencia: %d/%d", RegCounter[playerid], sizeof(SkinRegFemale));
				}
	            PlayerTextDrawSetString(playerid, RegTDSkin[playerid], string);
			}
		} else if(PlayerInfo[playerid][pRegStep] == 2) {
		    if(PRESSED(KEY_SPRINT))	{
				RegCounter[playerid]++;
			    PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
			    if(PlayerInfo[playerid][pSex] == 1) {
			        if(RegCounter[playerid] > sizeof(SkinRegMale)) {
			            RegCounter[playerid] = 1;
			        }
					SetPlayerSkin(playerid, SkinRegMale[RegCounter[playerid] - 1][0]);
					PlayerInfo[playerid][pSkin] = SkinRegMale[RegCounter[playerid] - 1][0];
					format(string, sizeof(string), "Apariencia: %d/%d", RegCounter[playerid], sizeof(SkinRegMale));
				} else {
				    if(RegCounter[playerid] > sizeof(SkinRegFemale)) {
			            RegCounter[playerid] = 1;
			        }
				    SetPlayerSkin(playerid, SkinRegFemale[RegCounter[playerid] - 1][0]);
				    PlayerInfo[playerid][pSkin] = SkinRegFemale[RegCounter[playerid] - 1][0];
				    format(string, sizeof(string), "Apariencia: %d/%d", RegCounter[playerid], sizeof(SkinRegFemale));
				}
				PlayerTextDrawSetString(playerid, RegTDSkin[playerid], string);
			} else if(PRESSED(KEY_SECONDARY_ATTACK)) {
			    PlayerPlaySound(playerid, 1150, 0.0, 0.0, 0.0);

			    PlayerTextDrawDestroy(playerid, RegTDArrow[playerid]);
				RegTDArrow[playerid] = CreatePlayerTextDraw(playerid, 501.000000, 144.500000, "~>~");
				PlayerTextDrawAlignment(playerid, RegTDArrow[playerid], 2);
				PlayerTextDrawBackgroundColor(playerid, RegTDArrow[playerid], 255);
				PlayerTextDrawFont(playerid, RegTDArrow[playerid], 2);
				PlayerTextDrawLetterSize(playerid, RegTDArrow[playerid], 0.260000, 0.899999);
				PlayerTextDrawColor(playerid, RegTDArrow[playerid], -1);
				PlayerTextDrawSetOutline(playerid, RegTDArrow[playerid], 1);
				PlayerTextDrawSetProportional(playerid, RegTDArrow[playerid], 1);
				PlayerTextDrawShow(playerid, RegTDArrow[playerid]);

				PlayerInfo[playerid][pRegStep]++;
	   			RegCounter[playerid] = 18;

	   			PlayerTextDrawSetString(playerid, RegTDAge[playerid], "Edad: 18");
	   			ClearScreen(playerid);
	   			SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "Presiona ~k~~PED_SPRINT~ para incrementar el valor y ~k~~SNEAK_ABOUT~ para disminuirlo, ~k~~VEHICLE_ENTER_EXIT~ para finalizar.");
			}
		} else if(PlayerInfo[playerid][pRegStep] == 3) {
		    if(PRESSED(KEY_SPRINT))	{
				RegCounter[playerid]++;
			    PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
	            if(RegCounter[playerid] > 99) {
		            RegCounter[playerid] = 18;
		        }
		        PlayerInfo[playerid][pAge] = RegCounter[playerid];
				format(string, sizeof(string), "Edad: %d", RegCounter[playerid]);
				PlayerTextDrawSetString(playerid, RegTDAge[playerid], string);
			}
			if(PRESSED(KEY_WALK)) {
			    RegCounter[playerid]--;
			    PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
	            if(RegCounter[playerid] < 18) {
		            RegCounter[playerid] = 99;
		        }
		        PlayerInfo[playerid][pAge] = RegCounter[playerid];
				format(string, sizeof(string), "Edad: %d", RegCounter[playerid]);
				PlayerTextDrawSetString(playerid, RegTDAge[playerid], string);
			} else if(PRESSED(KEY_SECONDARY_ATTACK)) {
			    PlayerPlaySound(playerid, 1150, 0.0, 0.0, 0.0);

			    PlayerTextDrawDestroy(playerid, RegTDArrow[playerid]);
				RegTDArrow[playerid] = CreatePlayerTextDraw(playerid, 501.000000, 156.000000, "~>~");
				PlayerTextDrawAlignment(playerid, RegTDArrow[playerid], 2);
				PlayerTextDrawBackgroundColor(playerid, RegTDArrow[playerid], 255);
				PlayerTextDrawFont(playerid, RegTDArrow[playerid], 2);
				PlayerTextDrawLetterSize(playerid, RegTDArrow[playerid], 0.260000, 0.899999);
				PlayerTextDrawColor(playerid, RegTDArrow[playerid], -1);
				PlayerTextDrawSetOutline(playerid, RegTDArrow[playerid], 1);
				PlayerTextDrawSetProportional(playerid, RegTDArrow[playerid], 1);
				PlayerTextDrawShow(playerid, RegTDArrow[playerid]);

				PlayerInfo[playerid][pRegStep]++;
	   			RegCounter[playerid] = 1;
	            PlayerTextDrawSetString(playerid, RegTDOrigin[playerid], "Origen: latino");
	   			ClearScreen(playerid);
	   			SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "Presiona ~k~~PED_SPRINT~ para seleccionar una opción, ~k~~VEHICLE_ENTER_EXIT~ para finalizar.");
			}
		} else if(PlayerInfo[playerid][pRegStep] == 4) {
		    if(PRESSED(KEY_SPRINT)) {
				RegCounter[playerid]++;
			    PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
			  	if(RegCounter[playerid] > 6) {
		            RegCounter[playerid] = 1;
		        }
				switch(RegCounter[playerid]) {
				    case 1: {
				        PlayerTextDrawSetString(playerid, RegTDOrigin[playerid], "Origen: latino");
					}
					case 2: {
				        PlayerTextDrawSetString(playerid, RegTDOrigin[playerid], "Origen: europeo");
					}
					case 3: {
				        PlayerTextDrawSetString(playerid, RegTDOrigin[playerid], "Origen: americano");
					}
					case 4:	{
				        PlayerTextDrawSetString(playerid, RegTDOrigin[playerid], "Origen: asiatico");
					}
					case 5:	{
				        PlayerTextDrawSetString(playerid, RegTDOrigin[playerid], "Origen: africano");
					}
					case 6:	{
				        PlayerTextDrawSetString(playerid, RegTDOrigin[playerid], "Origen: indefinido");
					}
				}
			} else if(PRESSED(KEY_SECONDARY_ATTACK)) {
			    PlayerPlaySound(playerid, 1150, 0.0, 0.0, 0.0);

				TextDrawHideForPlayer(playerid, RegTDBorder1);
				TextDrawHideForPlayer(playerid, RegTDBorder2);
				TextDrawHideForPlayer(playerid, RegTDBackground);
				TextDrawHideForPlayer(playerid, RegTDTitle);
				PlayerTextDrawHide(playerid, RegTDGender[playerid]);
				PlayerTextDrawHide(playerid, RegTDSkin[playerid]);
				PlayerTextDrawHide(playerid, RegTDAge[playerid]);
				PlayerTextDrawHide(playerid, RegTDOrigin[playerid]);
				PlayerTextDrawHide(playerid, RegTDArrow[playerid]);

				PlayerInfo[playerid][pRegStep] = 0;

				/*PlayerInfo[playerid][pA] = 358.4098;
				PlayerInfo[playerid][pX] = 1481.2329;
				PlayerInfo[playerid][pY] = -1751.8094;
				PlayerInfo[playerid][pZ] = 15.4453;*/

				PlayerInfo[playerid][pA] = 176.6281;
				PlayerInfo[playerid][pX] = 1685.7615;
				PlayerInfo[playerid][pY] = -2241.1375;
				PlayerInfo[playerid][pZ] = 13.5469;
				PlayerInfo[playerid][pInterior] = 0;
				PlayerInfo[playerid][pVirtualWorld] = 0;

				TogglePlayerControllable(playerid, true);

				SpawnPlayer(playerid);

				ClearScreen(playerid);
				SendClientMessage(playerid, COLOR_YELLOW2, "{878EE7}[INFO]:{C8C8C8} bienvenido, para ver los comandos escribe /ayuda.");
			}
		}
	}
	
	if(Choice[playerid] != CHOICE_NONE) {
		if(PRESSED(KEY_YES)) {
            switch(Choice[playerid]) {
                case CHOICE_CARSELL: {
                    Choice[playerid] = CHOICE_NONE;
                   	new vehicleid = GetPlayerVehicleID(playerid), price = GetVehiclePrice(vehicleid, ServerInfo[sVehiclePricePercent]);
					if(!IsPlayerInAnyVehicle(playerid))	{
					    return 1;
					}
					if(!IsAtDealership(playerid)) {
					    SendClientMessage(playerid, COLOR_YELLOW2, "¡No puedes vender un vehículo en cualquier lugar!");
					    return 1;
					}
					if(PlayerInfo[playerid][pVeh1] == vehicleid || PlayerInfo[playerid][pVeh2] == vehicleid) {
						GivePlayerCash(playerid, price / 2);
						if(PlayerInfo[playerid][pVeh1] == vehicleid) {
							PlayerInfo[playerid][pVeh1] = 0;
						} else {
						    PlayerInfo[playerid][pVeh2] = 0;
						}
						resetVehicle(vehicleid);
                        VehicleInfo[vehicleid][VehType] = VEH_NONE;
						SetVehicleToRespawn(vehicleid);
						SaveVehicle(vehicleid);
						format(string, sizeof(string), "Empleado: has vendido tu vehículo por $%d, que tenga un buen día.", price / 2);
						SendClientMessage(playerid, COLOR_FADE1, string);
					} else {
						return SendClientMessage(playerid, COLOR_YELLOW2, "¡No puedes vender un vehículo que no te pertenece!");
					}
                }
            }
            PlayerPlaySound(playerid, 5201, 0.0, 0.0, 0.0);
		} else if(PRESSED(KEY_NO)) {
            switch(Choice[playerid]) {
                case CHOICE_CARSELL: {

                }
            }
            PlayerPlaySound(playerid, 5205, 0.0, 0.0, 0.0);
            Choice[playerid] = CHOICE_NONE;
		}
	}
	
	if(newkeys == KEY_SECONDARY_ATTACK && oldkeys != KEY_SECONDARY_ATTACK) {
		
		
		/* Entrada y salida de edificios. */
		if(PlayerInfo[playerid][pFaction] == FAC_SIDE) {
		    if(PlayerToPoint(3.5, playerid, 266.6, 112.5830078125, 1003.6171875)) {
				if(SIDEDoor[0][0] <= 0) {
				    SIDEDoor[0][0] = 1;
		    		MoveObject(SIDEDoor[0][1], 266.6, 112.5830078125, 1003.6171875, 3.5000, 0, 0, 0);
					MoveObject(SIDEDoor[1][1], 263.5, 112.55754852295, 1003.6171875, 3.5000, 0, 0, 0);
				} else {
					SIDEDoor[0][0] = 0;
					MoveObject(SIDEDoor[0][1], 265.7763671875, 112.5830078125, 1003.6171875, 3.5000, 0, 0, 0);
					MoveObject(SIDEDoor[1][1], 264.30032348633, 112.55754852295, 1003.6171875, 3.5000, 0, 0, 0);
				}
		    } else if(PlayerToPoint(3.5, playerid, 253.20094299316, 110.82429504395, 1004.8625488281)) {
				if(SIDEDoor[2][0] <= 0) {
				    SIDEDoor[2][0] = 1;
		    		MoveObject(SIDEDoor[2][1], 253.20094299316, 111.82429504395, 1004.8625488281, 3.5000, 0, 0, 0);
					MoveObject(SIDEDoor[3][1], 253.23199462891, 108.0904083252, 1004.8625488281, 3.5000, 0, 0, 0);
				} else {
					SIDEDoor[2][0] = 0;
					MoveObject(SIDEDoor[2][1], 253.20094299316, 110.82429504395, 1004.8625488281, 3.5000, 0, 0, 0);
					MoveObject(SIDEDoor[3][1], 253.23199462891, 109.0904083252, 1004.8625488281, 3.5000, 0, 0, 0);
				}
		    } else if(PlayerToPoint(3.5, playerid, 239.59048461914, 117.59116363525, 1004.8555908203)) {
				if(SIDEDoor[4][0] <= 0) {
                    SIDEDoor[4][0] = 1;
		    		MoveObject(SIDEDoor[4][1], 239.73849487305,116.5859375,1004.8555908203, 3.5000, 0, 0, 0);
					MoveObject(SIDEDoor[5][1], 239.828125,120.27496337891,1005.0729980469, 3.5000, 0, 0, 0);
				} else {
					SIDEDoor[4][0] = 0;
					MoveObject(SIDEDoor[4][1], 239.59048461914, 117.59116363525, 1004.8555908203, 3.5000, 0, 0, 0);
					MoveObject(SIDEDoor[5][1], 239.5966796875, 119.25390625, 1004.8555908203, 3.5000, 0, 0, 0);
				}
		    }
	    }
	    
	    if(GetPVarInt(playerid, "disabled") == DISABLE_NONE) {
			/*  Entrada a casas. */
			for(new i = 1; i < MAX_HOUSES; i++) {
				if (PlayerToPoint(1.0, playerid,House[i][EntranceX], House[i][EntranceY], House[i][EntranceZ]))	{
					if(House[i][Locked] == 0 || AdminDuty[playerid] >= 1) {
						SetPlayerInterior(playerid,House[i][ExitInterior]);
						SetPlayerPos(playerid,House[i][ExitX], House[i][ExitY], House[i][ExitZ]);
						SetPlayerVirtualWorld(playerid, House[i][InsideWorld]);
						SetPlayerFacingAngle(playerid, House[i][ExitAngle]);
						SetCameraBehindPlayer(playerid);
					} else {
						GameTextForPlayer(playerid, "~r~Cerrado!", 2000, 4);
					}
					return 1;
				}
			}

			/*  Entrada a edificios. */
			for(new i = 1; i < MAX_BUILDINGS; i++) {
				if(PlayerToPoint(1.0, playerid, Building[i][blOutsideX], Building[i][blOutsideY], Building[i][blOutsideZ])) {
					if(Building[i][blLocked] == 0 || AdminDuty[playerid] >= 1) {
					    if(Building[i][blEntranceFee] == 0 || GetPlayerCash(playerid) >= Building[i][blEntranceFee]) {
							SetPlayerInterior(playerid, Building[i][blInsideInt]);
							SetPlayerVirtualWorld(playerid, Building[i][blInsideWorld]);
							SetPlayerPos(playerid, Building[i][blInsideX], Building[i][blInsideY], Building[i][blInsideZ]);
							SetPlayerFacingAngle(playerid, Building[i][blInsideAngle]);
							GivePlayerCash(playerid, -Building[i][blEntranceFee]);
							if(Building[i][blEntranceFee] > 0) {
								format(string, sizeof(string), "¡Te han cobrado $%d para ingresar al edificio %s!", Building[i][blEntranceFee], Building[i][blText]);
							} else {
							    format(string, sizeof(string), "¡Bienvenido al edificio %s!", Building[i][blText]);
							}
							SendClientMessage(playerid, COLOR_YELLOW2,string);
							SetCameraBehindPlayer(playerid);
						} else {
							GameTextForPlayer(playerid, "~r~No tienes el dinero suficiente!", 2000, 2);
						}
					} else {
						GameTextForPlayer(playerid, "~r~Cerrado!", 2000, 4);
					}
					return 1;
				}
			}

			/* Entrada a negocios. */
			for(new i = 1; i < MAX_BUSINESS; i++)
			{
				if (PlayerToPoint(1.0, playerid,Business[i][bOutsideX], Business[i][bOutsideY], Business[i][bOutsideZ]))
				{
					if(Business[i][bEnterable] == 0)
					{
						SendClientMessage(playerid,COLOR_YELLOW2,"Negocio temporalmente deshabilitado.");
						return 1;
					}
					if(PlayerInfo[playerid][pBizKey] == i)
					{
		            	SetPlayerInterior(playerid, Business[i][bInsideInt]);
						SetPlayerPos(playerid, Business[i][bInsideX] + 2 * floatcos(Business[i][bInsideAngle] + 90, degrees), Business[i][bInsideY] + 2 * floatsin(Business[i][bInsideAngle] + 90, degrees), Business[i][bInsideZ]);
						SetPlayerVirtualWorld(playerid, Business[i][bInsideWorld]);
		                SetPlayerFacingAngle(playerid, Business[i][bInsideAngle]);
		                SetCameraBehindPlayer(playerid);
		            } else
		                {
			                if(Business[i][bLocked] == 1 && AdminDuty[playerid] != 1) {
								GameTextForPlayer(playerid, "~r~negocio cerrado.", 2000, 4);
								return 1;
							}
							if(GetPlayerCash(playerid) < Business[i][bEntranceFee])
								return SendClientMessage(playerid,COLOR_YELLOW2,"¡No tienes el dinero suficiente!");
							SetPlayerInterior(playerid, Business[i][bInsideInt]);
							SetPlayerPos(playerid, Business[i][bInsideX] + 2 * floatcos(Business[i][bInsideAngle] + 90, degrees), Business[i][bInsideY] + 2 * floatsin(Business[i][bInsideAngle] + 90, degrees), Business[i][bInsideZ]);
							SetPlayerVirtualWorld(playerid, Business[i][bInsideWorld]);
							SetPlayerFacingAngle(playerid, Business[i][bInsideAngle]);
							SetCameraBehindPlayer(playerid);
							GivePlayerCash(playerid, -Business[i][bEntranceFee]);
							if(Business[i][bEntranceFee] > 0)
							{
								format(string, sizeof(string), "¡Te han cobrado $%d para ingresar al negocio %s!", Business[i][bEntranceFee], Business[i][bName]);
                                SendClientMessage(playerid, COLOR_YELLOW2, string);
							}
							if(Business[i][bType] == BIZ_247 || Business[i][bType] == BIZ_CLOT || Business[i][bType] == BIZ_CLOT2 ||Business[i][bType] == BIZ_AMMU || Business[i][bType] == BIZ_HARD)
			    				SendClientMessage(playerid, COLOR_YELLOW2, "Utiliza /comprar para comprar en este negocio.");
							else
								if(Business[i][bType] == BIZ_CLUB || Business[i][bType] == BIZ_CLUB2)
							    	SendClientMessage(playerid, COLOR_YELLOW2, "Utiliza /beber para comprar una bebida.");
								else
								    if(Business[i][bType] == BIZ_REST)
								        SendClientMessage(playerid, COLOR_YELLOW2, "Utiliza /comer para comprar comida.");
									else
										if(Business[i][bType] == BIZ_CASINO)
									    	SendClientMessage(playerid, COLOR_YELLOW2, "Utiliza /beber para comprar una bebida o /apostar para jugar en el casino.");
							if(Business[i][bProducts] == 0)
								GameTextForPlayer(playerid, "~r~sin productos.", 2000, 4);
							Business[i][bTill] += Business[i][bEntranceFee];
							saveBusiness(i);
						}
					return 1;
				}
			}

			/* Salida de casas. */
			for(new i = 0; i < sizeof(House); i++) {
				if (PlayerToPoint(3.0, playerid, House[i][ExitX], House[i][ExitY], House[i][ExitZ])) {
					if(GetPlayerVirtualWorld(playerid) == House[i][InsideWorld]) {
				        if(House[i][Locked] == 0 || AdminDuty[playerid] >= 1) {
							SetPlayerInterior(playerid,House[i][EntranceInterior]);
							SetPlayerPos(playerid,House[i][EntranceX],House[i][EntranceY],House[i][EntranceZ]);
							SetPlayerVirtualWorld(playerid, 0);
							SetPlayerFacingAngle(playerid,House[i][EntranceAngle]);
							SetCameraBehindPlayer(playerid);
						} else {
							GameTextForPlayer(playerid, "~r~Cerrado!", 2000, 4);
						}
						return 1;
					}
				}
			}

			/* Salida de edificios. */
			for(new i = 0; i < sizeof(Building); i++) {
				if(PlayerToPoint(3, playerid, Building[i][blInsideX], Building[i][blInsideY], Building[i][blInsideZ])) {
				    if(GetPlayerVirtualWorld(playerid) == Building[i][blInsideWorld]) {
						if(Building[i][blLocked] == 0 || AdminDuty[playerid] >= 1) {
							SetPlayerInterior(playerid, Building[i][blOutsideInt]);
							SetPlayerVirtualWorld(playerid, 0);
							SetPlayerPos(playerid, Building[i][blOutsideX], Building[i][blOutsideY], Building[i][blOutsideZ]);
							SetPlayerFacingAngle(playerid, Building[i][blOutsideAngle]);
							SetCameraBehindPlayer(playerid);
						} else {
							GameTextForPlayer(playerid, "~r~Cerrado!", 2000, 4);
						}
						return 1;
					}
				}
			}

			/* Salida de negocios. */
			for(new i = 0; i < MAX_BUSINESS; i++) {
				if (PlayerToPoint(3, playerid, Business[i][bInsideX], Business[i][bInsideY], Business[i][bInsideZ])) {
				    if(GetPlayerVirtualWorld(playerid) == Business[i][bInsideWorld]) {
				        if(Business[i][bType] == BIZ_CLOT || Business[i][bType] == BIZ_CLOT2) {
							DestroySelectionMenu(playerid);
							CancelSelectTextDraw(playerid);
						}
						if(Business[i][bLocked] == 0 || AdminDuty[playerid] >= 1) {
							SetPlayerInterior(playerid, Business[i][bOutsideInt]);
							SetPlayerVirtualWorld(playerid, 0);
							SetPlayerPos(playerid,Business[i][bOutsideX],Business[i][bOutsideY],Business[i][bOutsideZ]);
		                    SetPlayerFacingAngle(playerid, Business[i][bOutsideAngle]);
		                    SetCameraBehindPlayer(playerid);
						} else {
							GameTextForPlayer(playerid, "~r~Cerrado!", 2000, 4);
						}
						return 1;
					}
				}
			}
		} else {
		    SendClientMessage(playerid, COLOR_YELLOW2, "No puedes hacerlo en este momento.");
		}
	}
	return 1;
}

public Unfreeze(playerid) {
	TogglePlayerControllable(playerid, 1);
    return 1;
}

public IsAtBar(playerid) {
    if(IsPlayerConnected(playerid))	{
		if(PlayerToPoint(4.0,playerid,495.7801,-76.0305,998.7578) || PlayerToPoint(4.0,playerid,499.9654,-20.2515,1000.6797)) {//In grove street bar (with girlfriend), and in Havanna
		    return 1;
		}else if(PlayerToPoint(4.0,playerid,1215.9480,-13.3519,1000.9219) || PlayerToPoint(10.0,playerid,-2658.9749,1407.4136,906.2734)) {//PIG Pen
		    return 1;
		}
	}
	return 0;
}

public ClearCheckpointsForPlayer(playerid) {
	DisablePlayerCheckpoint(playerid);
	return 1;
}

stock LoadPickups() {

	/* Gimnasio */
	P_FIGHT_STYLE = CreateDynamicPickup(1239, 1, 766.3723, 13.8237, 1000.7015, -1);
	
	// Paramédicos.
	P_HOSP_DUTY = CreateDynamicPickup(1239, 1, POS_MEDIC_DUTY_X, POS_MEDIC_DUTY_Y, POS_MEDIC_DUTY_Z, -1);

	// Curarse en hospital
	P_HOSP_HEAL = CreateDynamicPickup(1240, 1, POS_HOSP_HEAL_X, POS_HOSP_HEAL_Y, POS_HOSP_HEAL_Z + 1.0, -1);
	
	// Licencia de armas
	CreateDynamicPickup(1239, 1, 249.3701, 71.1788, 1003.6406, -1);
	CreateDynamic3DTextLabel("Licencia de armas: $30000 \n/comprarlic", COLOR_WHITE, 249.3701, 71.1788, 1003.6406 + 0.75, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 16002, 6, -1, 100.0);

	/* Banco de Malos Aires */
	P_BANK = CreateDynamicPickup(1239, 1, POS_BANK_X, POS_BANK_Y, POS_BANK_Z, -1);

	/* Armarios de la Policía Metropolitana */
	P_POLICE_DUTY = CreateDynamicPickup(1242, 1, POS_POLICE_DUTY_X, POS_POLICE_DUTY_Y, POS_POLICE_DUTY_Z, -1);
	P_POLICE_ARREST = CreateDynamicPickup(1239, 1, POS_POLICE_ARREST_X, POS_POLICE_ARREST_Y, POS_POLICE_ARREST_Z, -1);
	
	/* Armarios de la S.I.D.E */
	P_SIDE_DUTY = CreateDynamicPickup(1239, 1, POS_SIDE_DUTY_X, POS_SIDE_DUTY_Y, POS_SIDE_DUTY_Z, -1);
	
	/* Centro de Licencias de Malos Aires */
	P_LICENSE_CENTER = CreateDynamicPickup(1239, 1, -2033.2118, -117.4678, 1035.1719, -1);
	
    /* Oficina del Empleo de Malos Aires */
    P_JOB_CENTER = CreateDynamicPickup(1210, 1, 361.8299, 173.7898, 1008.3828, -1);
    
    /* Guía de la ciudad */
    for(new i = 0; i < sizeof(P_GUIDE); i++) {
    	P_GUIDE[i] = CreateDynamicPickup(1444, 1, GUIDE_POS[i][0], GUIDE_POS[i][1], GUIDE_POS[i][2], -1);
    }
    
    /* Cosechador de materia prima */
	P_DRUGFARM_MATS = CreateDynamicPickup(1239, 1, -1060.9709,-1195.5382,129.6939);
    
    // Garages de tuneo.
   	P_TUNE[0] = CreateDynamicPickup(1239, 1, -2714.6985, 222.1743, 4.3281, -1);
    P_TUNE[1] = CreateDynamicPickup(1239, 1, 2649.7874, -2037.5381, 13.5500, -1);
    P_TUNE[2] = CreateDynamicPickup(1239, 1, -1931.3779, 237.0436, 34.3470, -1);
    P_TUNE[3] = CreateDynamicPickup(1239, 1, 1044.7301, -1027.6169, 32.1016, -1);
    P_TUNE[4] = CreateDynamicPickup(1239, 1, 2391.1355, 1041.8885, 10.8203, -1);

	P_CAR_RENT1 = CreateDynamicPickup(1239, 1, 1569.8145, -2243.8796, 13.5184, -1);
	P_CAR_RENT2	= CreateDynamicPickup(1239, 1, 1276.8502, -1309.8553, 13.3107, -1);
	P_CAR_RENT3 = CreateDynamicPickup(1239, 1, 611.9272, -1294.7240, 15.2081, -1);
	
    P_MATS_SHOP = CreateDynamicPickup(1239, 1, 2349.8408, -1216.3939, 22.5000, -1);
    P_PRODS_SHOP = CreateDynamicPickup(1239, 1, 2183.9963, -2260.7658, 13.4098, -1);
	return 1;
}

stock LoadMap() {

//===============================CTR-MAN========================================
	CreateObject(14388, 767.28662, -1374.46045, 1010.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14393, 794.91492, -1377.46106, 1014.91010,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(14391, 793.97089, -1378.57153, 1013.63013,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(14424, 767.28662, -1374.46045, 1010.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14394, 777.93329, -1397.18909, 1007.55499,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14395, 782.05682, -1389.43652, 1010.51801,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14423, 767.28662, -1374.46045, 1010.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14421, 767.28662, -1374.46045, 1010.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8399, 736.66577, -1403.97595, 1009.92999,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(8399, 736.66577, -1383.99597, 1009.92999,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(14391, 787.45642, -1382.50806, 1009.31360,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2166, 791.48932, -1373.86389, 1008.35840,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(2165, 789.53992, -1374.85510, 1008.35840,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(2164, 790.41522, -1369.89307, 1008.37378,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2163, 792.22058, -1369.89307, 1008.37402,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2162, 788.59613, -1369.89307, 1008.37402,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2167, 792.22058, -1369.89966, 1009.29779,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2168, 787.98895, -1369.46399, 1011.68646,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(2168, 787.98315, -1370.37390, 1010.72229,   -90.00000, 0.00000, -90.00000);
	CreateDynamicObject(2283, 790.68073, -1369.93396, 1010.96179,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2289, 792.92950, -1369.91077, 1011.42181,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1714, 790.53137, -1373.31348, 1008.35907,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1714, 789.07141, -1373.31348, 1008.35907,   0.00000, 0.00000, 6.90000);
	CreateDynamicObject(367, 794.25238, -1378.50708, 1009.54999,   0.00000, 0.00000, -229.08000);
	CreateDynamicObject(2590, 794.10748, -1378.55127, 1009.61151,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2590, 794.17908, -1379.00854, 1009.61151,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(367, 794.30560, -1378.96631, 1009.54999,   0.00000, 0.00000, -227.04010);
	CreateDynamicObject(2590, 794.09387, -1379.45483, 1009.61151,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(367, 794.23328, -1379.44946, 1009.54999,   0.00000, 0.00000, -240.60030);
	CreateDynamicObject(2590, 793.69183, -1381.46704, 1010.25848,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(367, 793.82672, -1381.48938, 1010.25562,   0.00000, 10.00000, -250.80025);
	CreateDynamicObject(2590, 788.33484, -1378.88892, 1010.25848,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(367, 788.41132, -1378.97388, 1010.25562,   0.00000, 15.00000, -292.32050);
	CreateDynamicObject(2590, 793.37433, -1381.52222, 1010.25848,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(367, 793.50842, -1381.54004, 1010.25562,   0.00000, 10.00000, -253.92030);
	CreateDynamicObject(2590, 793.42487, -1381.16016, 1009.69128,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(367, 793.56213, -1381.18579, 1009.68530,   0.00000, 10.00000, -250.80025);
	CreateDynamicObject(1786, 787.58936, -1373.89832, 1011.49292,   10.00000, 0.00000, 90.00000);
	CreateDynamicObject(1786, 787.58942, -1372.69824, 1011.49292,   10.00000, 0.00000, 90.00000);
	CreateDynamicObject(1786, 787.58942, -1371.49817, 1011.49292,   10.00000, 0.00000, 90.00000);
	CreateDynamicObject(2312, 794.16248, -1376.06689, 1008.84631,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2312, 794.16248, -1375.02686, 1008.84631,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2312, 794.16248, -1373.98694, 1008.84631,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2312, 794.16248, -1370.63416, 1008.84631,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2312, 794.16248, -1370.63416, 1009.66431,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2312, 794.16248, -1370.63416, 1010.48248,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2312, 794.16248, -1370.63416, 1011.33862,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3851, 794.40662, -1375.13464, 1010.53107,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19391, 795.80811, -1381.66589, 1010.62616,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19435, 794.27411, -1381.66589, 1007.12610,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19435, 797.38062, -1381.66589, 1007.12610,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1502, 795.05902, -1381.69678, 1008.35059,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19391, 795.80811, -1381.66565, 1010.12012,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2165, 795.01971, -1372.72595, 1008.35840,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2165, 795.01971, -1374.76599, 1008.35840,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2165, 795.01971, -1376.80005, 1008.35840,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1714, 796.22949, -1372.23523, 1008.35907,   0.00000, 0.00000, -94.14000);
	CreateDynamicObject(1714, 796.17651, -1374.17004, 1008.35907,   0.00000, 0.00000, -93.72000);
	CreateDynamicObject(1714, 796.23071, -1376.36389, 1008.35907,   0.00000, 0.00000, -103.14000);
	CreateDynamicObject(2321, 792.06036, -1381.40796, 1008.38531,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2590, 792.57703, -1381.20813, 1009.69128,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(367, 792.70074, -1381.24976, 1009.68530,   0.00000, 10.00000, -258.54016);
	CreateDynamicObject(2590, 792.92151, -1381.31677, 1009.88470,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(367, 793.05420, -1381.35071, 1009.84045,   0.00000, 10.00000, -258.54016);
	CreateDynamicObject(2590, 792.22766, -1381.32227, 1010.39276,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(367, 792.36713, -1381.36340, 1010.35999,   0.00000, 10.00000, -253.92030);
	CreateDynamicObject(1502, 793.01648, -1386.05603, 1008.36853,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1502, 789.03998, -1386.05603, 1008.36847,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1502, 792.07440, -1386.01221, 1008.36853,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(1502, 796.05103, -1386.01221, 1008.36853,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(1502, 800.24261, -1400.69543, 1008.36853,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1502, 800.24261, -1396.69543, 1008.36853,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1502, 800.19849, -1393.66199, 1008.36853,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1502, 800.19849, -1397.66199, 1008.36853,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1726, 789.41205, -1400.54077, 1008.31207,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(2198, 757.85486, -1381.46960, 1006.72852,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2198, 759.85492, -1381.46960, 1006.72852,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2198, 761.85492, -1381.46960, 1006.72852,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2198, 763.85492, -1381.46960, 1006.72852,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2198, 765.85492, -1381.46960, 1006.72852,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2198, 767.85492, -1381.46960, 1006.72852,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2198, 769.85492, -1381.46960, 1006.72852,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2198, 771.70758, -1384.40259, 1006.72852,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2198, 771.70758, -1386.40259, 1006.72852,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2198, 771.70758, -1388.40259, 1006.72852,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2198, 771.70758, -1390.40259, 1006.72852,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1502, 793.03717, -1386.13000, 1012.66888,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1502, 796.06982, -1386.08301, 1012.66888,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(2082, 789.68878, -1398.83386, 1008.35437,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2082, 788.72882, -1398.83386, 1008.35437,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1726, 783.06372, -1391.96570, 1008.31207,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1726, 785.88416, -1386.71936, 1008.31207,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1502, 768.33789, -1393.02722, 1006.74176,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(1502, 765.30499, -1393.07605, 1006.74182,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1726, 799.48969, -1390.47302, 1008.31207,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1727, 797.57434, -1389.79590, 1008.31207,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1726, 791.93201, -1400.54077, 1008.31207,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(2283, 798.70148, -1389.22705, 1010.93408,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2271, 799.55652, -1391.58740, 1011.00885,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2165, 804.07190, -1389.41345, 1008.34332,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1714, 804.96442, -1387.93225, 1008.36102,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1811, 805.96033, -1390.87927, 1009.00159,   0.00000, 0.00000, -58.37999);
	CreateDynamicObject(1811, 804.55261, -1391.18323, 1009.00159,   0.00000, 0.00000, -90.12000);
	CreateDynamicObject(2161, 807.21863, -1386.71973, 1008.35858,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2161, 801.15863, -1386.71973, 1008.35858,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2257, 786.87128, -1386.20239, 1010.87262,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2258, 785.05664, -1388.00256, 1011.65723,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2259, 795.43524, -1400.69763, 1010.74542,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2260, 794.21161, -1400.68774, 1010.34900,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2261, 787.86469, -1400.66895, 1010.46802,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2262, 786.15710, -1400.66895, 1010.74768,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2290, 807.82123, -1397.43054, 1008.33063,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2293, 805.70087, -1398.40137, 1008.33063,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2257, 800.37219, -1390.47766, 1010.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2166, 806.02582, -1388.42834, 1008.34332,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(1726, 796.12885, -1400.45715, 1012.65131,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2198, 764.34393, -1392.26465, 1006.72852,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2198, 762.30389, -1392.26465, 1006.72852,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2198, 760.28387, -1392.26465, 1006.72852,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2161, 757.31152, -1385.20483, 1006.71472,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2161, 757.31152, -1386.54480, 1006.71472,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2161, 757.31152, -1387.88477, 1006.71472,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2161, 757.31152, -1389.22485, 1006.71472,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2164, 770.65472, -1392.86951, 1006.71381,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2162, 772.29645, -1382.59863, 1006.71423,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1715, 763.58484, -1390.68213, 1006.73682,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1715, 761.58478, -1390.68213, 1006.73682,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1715, 759.58478, -1390.68213, 1006.73682,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1715, 758.54846, -1383.30237, 1006.73682,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1715, 760.48853, -1383.30237, 1006.73682,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1715, 762.48853, -1383.30237, 1006.73682,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1715, 764.48853, -1383.30237, 1006.73682,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1715, 766.48853, -1383.30237, 1006.73682,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1715, 768.48853, -1383.30237, 1006.73682,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1715, 770.48853, -1383.30237, 1006.73682,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1715, 770.06683, -1384.98511, 1006.73682,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1715, 770.06677, -1387.00513, 1006.73682,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1715, 770.06677, -1389.00513, 1006.73682,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1715, 770.06677, -1391.00513, 1006.73682,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1726, 757.15717, -1396.74158, 1006.65601,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1727, 759.28442, -1400.54077, 1006.65601,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1569, 764.74860, -1401.23853, 1006.70178,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1569, 767.73187, -1401.22900, 1006.70178,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1726, 757.15723, -1399.52161, 1006.65601,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1727, 761.29858, -1400.54077, 1006.65601,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1727, 758.25189, -1393.91675, 1006.65601,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1727, 760.35571, -1393.91675, 1006.65601,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1714, 803.63831, -1387.93225, 1008.36102,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(630, 757.34406, -1394.00293, 1007.77039,   0.00000, 0.00000, -396.36020);
	CreateDynamicObject(630, 757.41125, -1400.42163, 1007.77039,   0.00000, 0.00000, -342.42017);
	CreateDynamicObject(632, 780.45032, -1387.74500, 1011.20245,   0.00000, 0.00000, -33.12000);
	CreateDynamicObject(2186, 760.60864, -1387.72070, 1006.71912,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2186, 762.44861, -1387.72070, 1006.71912,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2186, 764.26862, -1387.72070, 1006.71912,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2186, 761.79382, -1386.73816, 1006.71912,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2186, 763.63379, -1386.73816, 1006.71912,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2186, 765.45380, -1386.73816, 1006.71912,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1433, 794.45331, -1372.78845, 1012.85876,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2079, 795.78534, -1371.70166, 1013.30017,   0.00000, 0.00000, 41.64001);
	CreateDynamicObject(2079, 794.52899, -1371.14014, 1013.30017,   0.00000, 0.00000, 86.34001);
	CreateDynamicObject(2079, 795.94647, -1373.23889, 1013.30017,   0.00000, 0.00000, -10.55999);
	CreateDynamicObject(2079, 793.27197, -1371.57605, 1013.30017,   0.00000, 0.00000, 133.50003);
	CreateDynamicObject(2079, 793.02588, -1373.00806, 1013.30017,   0.00000, 0.00000, 178.32010);
	CreateDynamicObject(2740, 795.09412, -1372.73010, 1016.07770,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2229, 791.22699, -1368.88391, 1012.67529,   0.00000, 0.00000, 33.36000);
	CreateDynamicObject(2229, 799.16547, -1369.18616, 1012.67529,   0.00000, 0.00000, -40.62000);
	CreateDynamicObject(1954, 794.38928, -1382.71301, 1013.75311,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1957, 793.59332, -1382.71301, 1013.75311,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1714, 789.71222, -1384.03015, 1008.33612,   0.00000, 0.00000, -88.08000);
	CreateDynamicObject(1714, 789.71222, -1382.89417, 1008.33612,   0.00000, 0.00000, -88.08000);
	CreateDynamicObject(1714, 789.71222, -1381.76367, 1008.33612,   0.00000, 0.00000, -88.08000);
	CreateDynamicObject(1714, 793.03363, -1381.38989, 1012.67542,   0.00000, 0.00000, 26.88000);
	CreateDynamicObject(1714, 791.58337, -1380.93677, 1012.67542,   0.00000, 0.00000, 156.84004);
	CreateDynamicObject(1714, 794.35864, -1380.80884, 1012.67542,   0.00000, 0.00000, 183.41989);
	CreateDynamicObject(1714, 795.78046, -1380.76111, 1012.67542,   0.00000, 0.00000, 192.83978);

//=================================RAMPAS TAPADAS===============================
	CreateDynamicObject(2372, 1991.66687, -1624.81311, 12.33607,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2372, 1991.66760, -1621.87000, 12.33607,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2372, 1990.56128, -1623.32129, 12.79605,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2372, 1953.14636, -1623.31982, 12.79605,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2372, 1951.90222, -1624.77063, 12.33607,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2372, 1951.91553, -1621.86572, 12.33607,   0.00000, 0.00000, 0.00000);
	
//==============================REJA TAPABOMBA DE UNITY=========================
	CreateDynamicObject(971, 1843.27722, -1854.75964, 12.04920,   0.00000, 0.00000, 90.00000);

//=================================CAJEROS ATM==================================
	CreateDynamicObject(2942, 1350.3709716797,-1759.2380371094,13.158480644226, 0.0000, 0.0000, 180.0000);
	CreateDynamicObject(2942, 1317.4858398438,-897.83563232422,39.22102355957, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(2942, 1834.2731933594,-1850.9847412109,13.032647132874, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(2942, 1594.2274169922,-2335.5717773438,13.183025360107, 0.0000, 0.0000, 180.0000);
	CreateDynamicObject(2942, 2233.2673339844,-1161.564453125,25.53352355957, 0.0000, 0.0000, 270.0000);
	CreateDynamicObject(2942, 485.96041870117,-1270.8944091797,15.339960098267, 0.0000, 0.0000, 45.0000);
	CreateDynamicObject(2942, 527.42687988281,-1739.4935302734,11.706603050232, 0.0000, 0.0000, 180.0000);
	CreateDynamicObject(2942, 1144.3293457031,-1765.9627685547,13.250393867493, 0.0000, 0.0000, 180.0000);
	CreateDynamicObject(2942, 2423.5649414063,-1219.5200195313,25.180541992188, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(2942, 2423.40601, -1959.75989, 13.19450,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2942, 1186.17285, -1368.31018, 13.21380,   0.00000, 0.00000, 90.00000);

//=================================INTERIOR SIDE================================
	SIDEDoor[0][1] = CreateObject(1500, 265.7763671875, 112.5830078125, 1003.6171875, 0, 0, 0);
	SIDEDoor[1][1] = CreateObject(1500, 264.30032348633, 112.55754852295, 1003.6171875, 0, 0, 0);
	SIDEDoor[2][1] = CreateObject(2930, 253.20094299316, 110.82429504395, 1004.8625488281, 0, 0, 0);
	SIDEDoor[3][1] = CreateObject(2930, 253.23199462891, 109.0904083252, 1004.8625488281, 0, 0, 0);
	SIDEDoor[4][1] = CreateObject(2930, 239.59048461914, 117.59116363525, 1004.8555908203, 0, 0, 0);
	SIDEDoor[5][1] = CreateObject(2930, 239.5966796875, 119.25390625, 1004.8555908203, 0, 0, 0);

	CreateDynamicObject(1776, 259.80740356445, 107.73623657227, 1003.3181152344, 0, 0, 270);
	CreateDynamicObject(1715, 259.99234008789, 120.50078582764, 1002.21875, 0, 0, 268.69067382813);
	CreateDynamicObject(1715, 256.00479125977, 120.04151916504, 1002.21875, 0, 0, 127.7532043457);
	CreateDynamicObject(1776, 252.66163635254, 112.31220245361, 1003.3181152344, 0, 0, 270);
	CreateDynamicObject(1775, 252.60939025879, 110.89356231689, 1003.3157958984, 0, 0, 268.69067382813);
	CreateDynamicObject(638, 241.1630859375, 107.416015625, 1002.9157714844, 0, 0, 90);
	CreateDynamicObject(638, 251.64067077637, 107.44094085693, 1002.9157714844, 0, 0, 90);
	CreateDynamicObject(1235, 240.2626953125, 111.4072265625, 1002.7218017578, 0, 0, 0);
	CreateDynamicObject(646, 249.48391723633, 107.61331176758, 1003.6352539063, 0, 0, 0);
	CreateDynamicObject(646, 242.75, 107.623046875, 1003.6352539063, 0, 0, 0);
	CreateDynamicObject(2604, 264.3203125, 110.552734375, 1004.4140625, 0, 0, 270);
	CreateDynamicObject(2329, 261.7255859375, 110.8525390625, 1003.6171875, 0, 0, 90);
	CreateDynamicObject(2040, 260.91116333008, 110.79096984863, 1004.6207275391, 0, 0, 0);
	CreateDynamicObject(2040, 260.91571044922, 111.19969940186, 1004.6207275391, 0, 0, 0);
	CreateDynamicObject(2040, 260.91961669922, 111.60887908936, 1004.6207275391, 0, 0, 0);
	CreateDynamicObject(2040, 260.92352294922, 112.01805877686, 1004.6207275391, 0, 0, 0);
	CreateDynamicObject(2040, 260.9228515625, 112.017578125, 1004.7845458984, 0, 0, 0);
	CreateDynamicObject(2040, 260.9228515625, 112.017578125, 1004.9483642578, 0, 0, 0);
	CreateDynamicObject(2040, 260.9228515625, 112.017578125, 1005.1234130859, 0, 0, 0);
	CreateDynamicObject(2040, 260.9228515625, 112.017578125, 1005.2493286133, 0, 0, 0);
	CreateDynamicObject(2040, 260.9228515625, 112.017578125, 1005.4692993164, 0, 0, 0);
	CreateDynamicObject(2040, 260.9228515625, 112.017578125, 1005.6836547852, 0, 0, 0);
	CreateDynamicObject(2040, 260.9111328125, 110.7900390625, 1004.8411254883, 0, 0, 0);
	CreateDynamicObject(2040, 260.9111328125, 110.7900390625, 1005.0587158203, 0, 0, 0);
	CreateDynamicObject(2040, 260.9111328125, 110.7900390625, 1005.2777099609, 0, 0, 0);
	CreateDynamicObject(2040, 260.9111328125, 110.7900390625, 1005.4868774414, 0, 0, 0);
	CreateDynamicObject(2040, 260.9111328125, 110.7900390625, 1005.6707763672, 0, 0, 0);
	CreateDynamicObject(2040, 260.9150390625, 111.19921875, 1004.8312988281, 0, 0, 0);
	CreateDynamicObject(2040, 260.9150390625, 111.19921875, 1005.0446777344, 0, 0, 0);
	CreateDynamicObject(2040, 260.9150390625, 111.19921875, 1005.263671875, 0, 0, 0);
	CreateDynamicObject(2040, 260.9150390625, 111.19921875, 1005.4784545898, 0, 0, 0);
	CreateDynamicObject(2040, 260.9150390625, 111.19921875, 1005.6665649414, 0, 0, 0);
	CreateDynamicObject(2040, 260.9189453125, 111.6083984375, 1004.8327026367, 0, 0, 0);
	CreateDynamicObject(2040, 260.9189453125, 111.6083984375, 1005.0446777344, 0, 0, 0);
	CreateDynamicObject(2040, 260.9189453125, 111.6083984375, 1005.2650756836, 0, 0, 0);
	CreateDynamicObject(2040, 260.9189453125, 111.6083984375, 1005.4826660156, 0, 0, 0);
	CreateDynamicObject(2040, 260.9189453125, 111.6083984375, 1005.6651611328, 0, 0, 0);
	CreateDynamicObject(1744, 261.87661743164, 112.54795837402, 1005.5, 0, 0, 0);
	CreateDynamicObject(1744, 261.8759765625, 112.5478515625, 1004.8447265625, 0, 0, 0);
	CreateDynamicObject(1744, 261.8759765625, 112.5478515625, 1004.189453125, 0, 0, 0);
	CreateDynamicObject(2115, 260.9348449707, 107.58108520508, 1003.6171875, 0, 0, 0);
	CreateDynamicObject(2133, 260.82919311523, 109.78175354004, 1003.6171875, 0, 0, 90);
	CreateDynamicObject(2894, 262.015625, 107.7841796875, 1004.4189453125, 0, 0, 359.90405273438);
	CreateDynamicObject(2359, 260.69647216797, 109.79148864746, 1004.8807373047, 0, 0, 90);
	CreateDynamicObject(2358, 260.79592895508, 108.85167694092, 1003.9779663086, 0, 0, 90);
	CreateDynamicObject(2358, 260.791015625, 108.8564453125, 1003.7337036133, 0, 0, 90);
	CreateDynamicObject(2358, 260.7958984375, 108.8515625, 1004.2236938477, 0, 0, 90);
	CreateDynamicObject(2358, 260.7958984375, 108.8515625, 1004.4694213867, 0, 0, 90);
	CreateDynamicObject(3026, 261.47714233398, 112.10680389404, 1004.6837768555, 0, 0, 0.75);
	CreateDynamicObject(2967, 261.5087890625, 107.79457092285, 1004.4189453125, 0, 0, 178.5);
	CreateDynamicObject(2037, 260.73718261719, 107.27392578125, 1004.4913330078, 0, 0, 347.19689941406);
	CreateDynamicObject(2059, 260.9365234375, 107.8251953125, 1004.4267578125, 0, 0, 0);
	CreateDynamicObject(2061, 262.21411132813, 107.2124786377, 1004.7108764648, 0, 0, 0);
	CreateDynamicObject(2035, 261.50549316406, 107.35063171387, 1004.443359375, 0, 0, 0);
	CreateDynamicObject(2036, 262.65710449219, 112.17218017578, 1004.5639038086, 0, 0, 0);
	CreateDynamicObject(1672, 262.0341796875, 112.16015625, 1005.2811279297, 0, 0, 0);
	CreateDynamicObject(1672, 261.70654296875, 112.1672668457, 1005.2811279297, 0, 0, 0);
	CreateDynamicObject(1672, 261.87164306641, 112.24535369873, 1005.2811279297, 0, 0, 0);
	CreateDynamicObject(1672, 261.78564453125, 112.08306121826, 1005.2811279297, 0, 0, 0);
	CreateDynamicObject(1672, 261.95251464844, 112.24328613281, 1005.2811279297, 0, 0, 0);
	CreateDynamicObject(1672, 261.62097167969, 112.08644104004, 1005.2811279297, 0, 0, 0);
	CreateDynamicObject(1672, 261.62542724609, 112.33168792725, 1005.2811279297, 0, 0, 0);
	CreateDynamicObject(1672, 261.78881835938, 112.32749938965, 1005.2811279297, 0, 0, 0);
	CreateDynamicObject(2044, 262.37789916992, 112.24477386475, 1005.2127685547, 0, 0, 0);
	CreateDynamicObject(2044, 262.75885009766, 112.21536254883, 1005.2127685547, 0, 0, 0);
	CreateDynamicObject(2044, 263.14251708984, 112.21453857422, 1005.2127685547, 0, 0, 0);
	CreateDynamicObject(1654, 261.8059387207, 112.27011871338, 1005.9182128906, 0, 90, 0);
	CreateDynamicObject(1654, 261.67279052734, 112.08686828613, 1005.9140014648, 0, 90, 0);
	CreateDynamicObject(1650, 262.74703979492, 107.41384887695, 1003.923828125, 0, 0, 0);
	CreateDynamicObject(1650, 262.57421875, 107.1953125, 1003.923828125, 0, 0, 0);
	CreateDynamicObject(1650, 262.8837890625, 107.193359375, 1003.923828125, 0, 0, 0);
	CreateDynamicObject(1210, 262.27581787109, 112.24839782715, 1005.9322509766, 90, 0, 0);
	CreateDynamicObject(1210, 262.84896850586, 112.24569702148, 1005.9322509766, 90, 0, 0);
	CreateDynamicObject(2057, 260.8125, 108.26305389404, 1003.7876586914, 0, 0, 0);
	CreateDynamicObject(2357, 267.52038574219, 110.27393341064, 1004.0123291016, 0, 0, 90);
	CreateDynamicObject(1242, 267.2409362793, 112.10171508789, 1004.6500854492, 0, 0, 90);
	CreateDynamicObject(1242, 267.23672485352, 111.68575286865, 1004.6500854492, 0, 0, 90);
	CreateDynamicObject(1242, 267.58270263672, 112.1272277832, 1004.6500854492, 0, 0, 90);
	CreateDynamicObject(1242, 267.56838989258, 111.68463897705, 1004.6500854492, 0, 0, 90);
	CreateDynamicObject(1242, 267.88940429688, 112.13073730469, 1004.6500854492, 0, 0, 90);
	CreateDynamicObject(1242, 267.88592529297, 111.69269561768, 1004.6500854492, 0, 0, 90);
	CreateDynamicObject(1242, 266.97866821289, 112.11041259766, 1004.6500854492, 0, 0, 90);
	CreateDynamicObject(1242, 266.96347045898, 111.67858886719, 1004.6500854492, 0, 0, 90);
	CreateDynamicObject(1252, 267.15591430664, 111.37058258057, 1004.5014648438, 90, 180, 90);
	CreateDynamicObject(1252, 267.57824707031, 110.97407531738, 1004.5014648438, 90, 179.99450683594, 90);
	CreateDynamicObject(1252, 267.81042480469, 111.39115905762, 1004.5014648438, 90, 179.99450683594, 90);
	CreateDynamicObject(2041, 267.86346435547, 110.30351257324, 1004.6275634766, 0, 0, 0);
	CreateDynamicObject(2042, 267.35940551758, 110.4920425415, 1004.5025634766, 0, 0, 0);
	CreateDynamicObject(2042, 267.44866943359, 109.93976593018, 1004.5025634766, 0, 0, 90);
	CreateDynamicObject(2042, 267.70449829102, 109.24388122559, 1004.5025634766, 0, 0, 294);
	CreateDynamicObject(2039, 267.71771240234, 108.54135131836, 1004.4765625, 0, 0, 350.25);
	CreateDynamicObject(2039, 267.21008300781, 108.85565185547, 1004.4765625, 0, 0, 14.999633789063);
	CreateDynamicObject(2039, 267.30026245117, 108.57417297363, 1004.4765625, 0, 0, 54.746337890625);
	CreateDynamicObject(2039, 267.60348510742, 108.74238586426, 1004.4765625, 0, 0, 95.994873046875);
	CreateDynamicObject(2039, 267.35464477539, 109.06834411621, 1004.4765625, 0, 0, 125.24304199219);
	CreateDynamicObject(2039, 267.94000244141, 108.73031616211, 1004.4765625, 0, 0, 133.48864746094);
	CreateDynamicObject(2038, 267.02191162109, 109.40113067627, 1004.4998168945, 270, 0, 0);
	CreateDynamicObject(2038, 267.06030273438, 109.72583007813, 1004.4998168945, 269.99450683594, 0, 0);
	CreateDynamicObject(2038, 267.95452880859, 109.61891937256, 1004.4998168945, 269.99450683594, 0, 324.75);
	CreateDynamicObject(2038, 267.47338867188, 108.3551940918, 1004.4998168945, 269.98901367188, 0, 324.74487304688);
	CreateDynamicObject(2902, 264.05096435547, 110.42974090576, 1004.448425293, 0, 90, 90);
	CreateDynamicObject(2902, 263.73599243164, 112.40625, 1004.2573242188, 0, 90, 90);
	CreateDynamicObject(2902, 263.52398681641, 112.40625, 1004.2649536133, 0, 90, 90);
	CreateDynamicObject(2902, 263.61605834961, 112.24430847168, 1004.2588500977, 0, 90, 90);
	CreateDynamicObject(3070, 267.0068359375, 108.41015625, 1004.4226074219, 0, 0, 0.0933837890625);
	CreateDynamicObject(2886, 267.40014648438, 115.6953125, 1005.106262207, 0, 0, 0);
	CreateDynamicObject(3793, 269.67071533203, 118.93378448486, 1003.8198852539, 49.998779296875, 0, 90);
	CreateDynamicObject(2886, 275.83163452148, 118.8719329834, 1005.0067749023, 0, 0, 90);
	CreateDynamicObject(1806, 240.26770019531, 121.52327728271, 1009.21875, 0, 0, 0);
	CreateDynamicObject(1806, 240.28215026855, 119.49266052246, 1009.21875, 0, 0, 0);
	CreateDynamicObject(1806, 247.2932434082, 120.27254486084, 1009.21875, 0, 0, 90);
	CreateDynamicObject(1806, 247.33410644531, 122.36309814453, 1009.21875, 0, 0, 90);
	CreateDynamicObject(1806, 251.23883056641, 120.25361633301, 1009.21875, 0, 0, 90);
	CreateDynamicObject(1806, 251.59014892578, 120.26792907715, 1009.21875, 0, 0, 270);
	CreateDynamicObject(3390, 269.6344909668, 118.8659362793, 1003.5953979492, 0, 0, 0);
	CreateDynamicObject(3793, 267.08657836914, 120.14038085938, 1003.8198852539, 49.998779296875, 0, 0);
	CreateDynamicObject(3395, 267.17501831055, 120.09126281738, 1003.5820922852, 0, 0, 90);
	CreateDynamicObject(3389, 264.71365356445, 120.26413726807, 1003.6171875, 0, 0, 90);
	CreateDynamicObject(2112, 264.48699951172, 116.81954193115, 1004.0093994141, 0, 0, 0);
	CreateDynamicObject(1750, 270.73809814453, 119.15074920654, 1005.9815673828, 0, 0, 270);
	CreateDynamicObject(1750, 270.78530883789, 118.08626556396, 1005.9815673828, 0, 0, 269.99450683594);
	CreateDynamicObject(1750, 270.69284057617, 120.13233184814, 1005.9815673828, 0, 0, 270);
	CreateDynamicObject(1750, 270.6923828125, 120.1318359375, 1005.408203125, 0, 0, 269.99450683594);
	CreateDynamicObject(1750, 270.70190429688, 119.14865112305, 1005.408203125, 0, 0, 269.99450683594);
	CreateDynamicObject(1750, 270.71148681641, 118.08332061768, 1005.408203125, 0, 0, 269.99450683594);
	CreateDynamicObject(1500, 264.4560546875, 115.8095703125, 1003.6171875, 0, 0, 0);
	CreateDynamicObject(1500, 265.85922241211, 115.8129196167, 1003.6171875, 0, 0, 0);
	CreateDynamicObject(1783, 269.42361450195, 117.73392486572, 1004.512878418, 0, 0, 270);
	CreateDynamicObject(1792, 266.07025146484, 121.10192108154, 1005.5446777344, 0, 0, 0);
	CreateDynamicObject(1792, 267.70812988281, 121.10049438477, 1005.5446777344, 0, 0, 0);
	CreateDynamicObject(3017, 264.62298583984, 116.81655883789, 1004.5829467773, 0, 0, 329.25);
	CreateDynamicObject(2894, 264.77951049805, 117.18295288086, 1004.4861450195, 0, 0, 347.25);
	CreateDynamicObject(1715, 267.97106933594, 118.69075012207, 1003.6171875, 0, 0, 90);
	CreateDynamicObject(1715, 266.97854614258, 118.46438598633, 1003.6171875, 0, 0, 180);
	CreateDynamicObject(1715, 265.99597167969, 118.50076293945, 1003.6171875, 0, 0, 179.99450683594);
	CreateDynamicObject(1715, 267.91870117188, 117.70852661133, 1003.6171875, 0, 0, 90);
	CreateDynamicObject(2886, 267.2646484375, 112.671875, 1005.1115722656, 0, 0, 179.99450683594);
	CreateDynamicObject(1500, 275.73226928711, 115.89157104492, 1003.6171875, 0, 0, 90);
	CreateDynamicObject(1500, 275.73068237305, 117.26360321045, 1003.6171875, 0, 0, 90);
	CreateDynamicObject(2115, 272.61602783203, 118.43161773682, 1003.6171875, 0, 0, 0);
	CreateDynamicObject(1810, 273.31204223633, 119.34478759766, 1003.6171875, 0, 0, 0);
	CreateDynamicObject(1810, 273.3518371582, 117.56021118164, 1003.6171875, 0, 0, 180);
	CreateDynamicObject(1810, 272.48840332031, 117.55126190186, 1003.6171875, 0, 0, 179.99450683594);
	CreateDynamicObject(1810, 271.35540771484, 120.64060211182, 1003.6171875, 0, 0, 90);
	CreateDynamicObject(1808, 270.91275024414, 116.2142868042, 1003.6171875, 0, 0, 90);
	CreateDynamicObject(16377, 275.27487182617, 119.56838989258, 1004.5975341797, 0, 0, 90);
	CreateDynamicObject(1235, 275.31088256836, 120.38896942139, 1004.1202392578, 0, 0, 0);
	CreateDynamicObject(2196, 272.7326965332, 119.34375, 1004.4189453125, 0, 0, 45);
	CreateDynamicObject(3070, 262.18350219727, 112.05149841309, 1005.1437988281, 0, 0, 0.0933837890625);
	CreateDynamicObject(1502, 229.4189453125, 110.5615234375, 1009.21875, 0, 0, 270);
	CreateDynamicObject(1502, 229.47265625, 107.591796875, 1009.21875, 0, 0, 90);
	CreateDynamicObject(1502, 229.66198730469, 119.51461029053, 1009.21875, 0, 0, 0);
	CreateDynamicObject(1502, 229.6611328125, 119.513671875, 1009.21875, 0, 0, 0);
	CreateDynamicObject(1502, 232.67565917969, 119.56425476074, 1009.21875, 0, 0, 180);
	CreateDynamicObject(1806, 263.01577758789, 111.07421112061, 1003.6171875, 0, 0, 270);
	CreateDynamicObject(2612, 260.64019775391, 109.31098175049, 1005.9948120117, 0, 0, 90);
	CreateDynamicObject(2886, 274.86740112305, 115.97257232666, 1005.1508178711, 0, 0, 180);
	CreateDynamicObject(2886, 267.4118347168, 116, 1005.1026000977, 0, 0, 180);
	CreateDynamicObject(1616, 275.29013061523, 120.64185333252, 1007.0023803711, 0, 0, 90);
	CreateDynamicObject(1502, 220.32276916504, 115.89282226563, 1002.21875, 0, 0, 0);
	CreateDynamicObject(1502, 223.35710144043, 115.94404602051, 1002.2188720703, 0, 0, 179.99450683594);
	CreateDynamicObject(1502, 225.07991027832, 115.90866851807, 1002.21875, 0, 0, 0);
	CreateDynamicObject(1502, 239.59150695801, 123.52169036865, 1002.21875, 0, 0, 90);
	CreateDynamicObject(1502, 239.5400390625, 126.5537109375, 1002.21875, 0, 0, 270);
	CreateDynamicObject(1502, 253.20906066895, 123.77853393555, 1002.21875, 0, 0, 90);
	CreateDynamicObject(1502, 253.16772460938, 126.80573272705, 1002.21875, 0, 0, 270);
	CreateDynamicObject(1502, 232.89358520508, 107.5817489624, 1009.2117919922, 0, 0, 90);
	CreateDynamicObject(1502, 232.84407043457, 110.61714172363, 1009.2117919922, 0, 0, 270);
	CreateDynamicObject(1502, 222.17262268066, 119.52395629883, 1009.21875, 0, 0, 0);
	CreateDynamicObject(1502, 258.55798339844, 117.67562866211, 1007.8042602539, 0, 0, 0);
	CreateDynamicObject(1502, 260.73089599609, 117.6583404541, 1007.8042602539, 0, 0, 0);
	CreateDynamicObject(1502, 268.990234375, 112.501953125, 1003.6171875, 0, 0, 0);
	CreateDynamicObject(1502, 272.00115966797, 112.54309844971, 1003.6171875, 0, 0, 180);
	CreateDynamicObject(1502, 268.39486694336, 112.89912414551, 1007.8251953125, 0, 0, 90);
	CreateDynamicObject(1502, 268.3564453125, 115.93237304688, 1007.8203125, 0, 0, 270);
	CreateDynamicObject(1502, 233.09971618652, 119.24934387207, 1002.2080688477, 0, 0, 0);
	CreateDynamicObject(1502, 235.86848449707, 115.9143371582, 1002.21875, 0, 0, 0);
	CreateDynamicObject(1502, 238.9013671875, 115.9560546875, 1002.21875, 0, 0, 179.99450683594);
	CreateDynamicObject(1502, 236.830078125, 119.24609375, 1002.21875, 0, 0, 0);
	CreateDynamicObject(1502, 268.42071533203, 107.58578491211, 1007.8203125, 0, 0, 90);
	CreateDynamicObject(1502, 268.36767578125, 110.61729431152, 1007.8203125, 0, 0, 270);
	CreateDynamicObject(1502, 265.16595458984, 111.14413452148, 1007.8203125, 0, 0, 90);
	CreateDynamicObject(1776, 238.93461608887, 115.77959442139, 1010.3181152344, 0, 0, 270);
	CreateDynamicObject(1775, 238.93615722656, 114.56962585449, 1010.3157958984, 0, 0, 270);
	CreateDynamicObject(1235, 236.59271240234, 117.65078735352, 1009.7218017578, 0, 0, 0);
	CreateDynamicObject(638, 232.34306335449, 111.7064666748, 1009.9157714844, 0, 0, 0);
	CreateDynamicObject(1360, 235.0546875, 120.765625, 1009.9838256836, 0, 0, 0);
	CreateDynamicObject(2247, 229.92562866211, 125.20960235596, 1010.6039428711, 0, 0, 0);
	CreateDynamicObject(2894, 229.46241760254, 125.19495391846, 1010.1395874023, 0, 0, 192.5439453125);
	CreateDynamicObject(14455, 273.8244934082, 112.93749237061, 1009.4927368164, 0, 0, 0);
	CreateDynamicObject(2196, 229.75553894043, 124.85314941406, 1010.1395874023, 0, 0, 199.84985351563);
	CreateDynamicObject(1892, 246.6982421875, 109.673828125, 1002.21875, 0, 0, 0);
	CreateDynamicObject(1892, 245.09649658203, 109.67007446289, 1002.21875, 0, 0, 0);
	CreateDynamicObject(1616, 225.25454711914, 128.11575317383, 1012.4855957031, 0, 0, 180);
	CreateDynamicObject(1960, 231.47265625, 128.43539428711, 1011.7908325195, 0, 0, 0);
	CreateDynamicObject(1961, 230.74131774902, 128.44845581055, 1011.7908325195, 0, 0, 0);
	CreateDynamicObject(1962, 232.20388793945, 128.42047119141, 1011.7908325195, 0, 0, 0);
	CreateDynamicObject(2061, 225.36602783203, 123.02774810791, 1011.0106201172, 0, 0, 90);
	CreateDynamicObject(2061, 225.36239624023, 123.34079742432, 1011.1151123047, 0, 0, 90);
	CreateDynamicObject(2061, 225.35946655273, 123.65329742432, 1011.3240966797, 0, 0, 90);
	CreateDynamicObject(2061, 225.35653686523, 123.96579742432, 1011.3240966797, 0, 0, 90);
	CreateDynamicObject(2709, 225.38340759277, 123.72219085693, 1010.0565185547, 0, 0, 0);
	CreateDynamicObject(2709, 225.37896728516, 123.93061828613, 1010.0565185547, 0, 0, 0);
	CreateDynamicObject(2709, 225.37506103516, 124.13862609863, 1010.0565185547, 0, 0, 0);
	CreateDynamicObject(2709, 225.16604614258, 124.13385009766, 1010.0565185547, 0, 0, 0);
	CreateDynamicObject(2709, 225.16986083984, 123.92485046387, 1010.0565185547, 0, 0, 0);
	CreateDynamicObject(2709, 225.17279052734, 123.71586608887, 1010.0565185547, 0, 0, 0);
	CreateDynamicObject(2036, 225.046875, 122.88750457764, 1011.8955688477, 90, 0, 90);
	CreateDynamicObject(2035, 225.046875, 124.08103942871, 1011.7756958008, 90, 0, 90);
	CreateDynamicObject(2059, 225.30813598633, 126.13042449951, 1011.0399780273, 0, 0, 275.32104492188);
	CreateDynamicObject(2059, 225.26550292969, 126.96472167969, 1011.0399780273, 0, 0, 275.3173828125);
	CreateDynamicObject(2059, 225.04541015625, 127.16204833984, 1011.0399780273, 0, 0, 80);
	CreateDynamicObject(2059, 225.31021118164, 128.11636352539, 1011.0399780273, 0, 0, 275.3173828125);
	CreateDynamicObject(2690, 225.79585266113, 128.30519104004, 1009.5781860352, 0, 0, 90);
	CreateDynamicObject(2710, 225.36962890625, 124.78453063965, 1010.1135864258, 0, 0, 90);
	CreateDynamicObject(1210, 225.27891540527, 124.80992889404, 1010.7525024414, 90, 0, 90);
	CreateDynamicObject(1736, 225.36000061035, 126.01563262939, 1011.896484375, 0, 0, 90);
	CreateDynamicObject(1783, 228.33255004883, 119.99297332764, 1009.8275146484, 0, 0, 180);
	CreateDynamicObject(1785, 228.39155578613, 119.91693878174, 1009.4887084961, 0, 0, 0);
	CreateDynamicObject(2190, 227.76191711426, 125.23559570313, 1010.1395874023, 0, 0, 127.71490478516);
	CreateDynamicObject(2969, 225.17442321777, 124.79871368408, 1010.3975219727, 0, 0, 90);
	CreateDynamicObject(2969, 225.17469787598, 123.96189880371, 1010.3975219727, 0, 0, 90);
	CreateDynamicObject(1210, 225.25915527344, 123.97387695313, 1010.7525024414, 90, 0, 90);
	CreateDynamicObject(2245, 225.45808410645, 120.29741668701, 1011.2387084961, 0, 0, 0);
	CreateDynamicObject(2251, 229.61178588867, 119.93459320068, 1010.0615844727, 0, 0, 0);
	CreateDynamicObject(2250, 226.72715759277, 128.2512512207, 1010.2220458984, 0, 0, 0);
	CreateDynamicObject(2249, 231.16928100586, 128.40167236328, 1010.3220825195, 0, 0, 0);
	CreateDynamicObject(2103, 228.82925415039, 128.32424926758, 1009.6744384766, 0, 0, 0);
	CreateDynamicObject(1744, 228.67628479004, 128.68299865723, 1009.3339233398, 0, 0, 0);
	CreateDynamicObject(2270, 232.14282226563, 121.26644897461, 1010.9755249023, 0, 0, 270);
	CreateDynamicObject(2269, 232.1982421875, 120.36340332031, 1010.9663085938, 0, 0, 270);
	CreateDynamicObject(2266, 227.09855651855, 127.95155334473, 1011.2340087891, 0, 0, 0);
	CreateDynamicObject(2269, 226.15760803223, 127.94066619873, 1011.2340087891, 0, 0, 0);
	CreateDynamicObject(2190, 221.6244354248, 126.50649261475, 1010.0118408203, 0, 0, 104.57034301758);
	CreateDynamicObject(3858, 218.48240661621, 112.85646820068, 1013.5807495117, 0, 0, 45.65478515625);
	CreateDynamicObject(3857, 232.87487792969, 124.56638336182, 1013.1382446289, 0, 0, 314.75);
	CreateDynamicObject(3858, 246.138671875, 119.3349609375, 1006.8023071289, 0, 0, 44.994506835938);
	CreateDynamicObject(3857, 239.41728210449, 111.71249389648, 1006.5933227539, 0, 0, 315);
	CreateDynamicObject(3857, 253.365234375, 115.0478515625, 1006.5933227539, 0, 0, 314.99450683594);
	CreateDynamicObject(1616, 228.77026367188, 116.00704956055, 1001.4303588867, 0, 0, 90);
	CreateDynamicObject(1361, 226.61441040039, 116.30039215088, 1009.962097168, 0, 0, 0);
	CreateDynamicObject(1360, 228.45095825195, 116.34169006348, 1009.9907836914, 0, 0, 90);
	CreateDynamicObject(1361, 230.29623413086, 116.4080581665, 1009.962097168, 0, 0, 0);
	CreateDynamicObject(1806, 215.6716003418, 110.72945404053, 1002.21875, 0, 0, 0);
	CreateDynamicObject(1806, 218.19577026367, 110.67129516602, 1002.21875, 0, 0, 0);
	CreateDynamicObject(1806, 219.52679443359, 114.09471893311, 1002.21875, 0, 0, 0);
	CreateDynamicObject(1806, 215.04257202148, 114.04550170898, 1002.21875, 0, 0, 0);
	CreateDynamicObject(1806, 222.14352416992, 107.8013458252, 1002.21875, 0, 0, 270);
	CreateDynamicObject(1364, 246.578125, 112.1494140625, 1003.0028686523, 0, 0, 0);
	CreateDynamicObject(1364, 246.50064086914, 115.38688659668, 1003.0028686523, 0, 0, 180);
	CreateDynamicObject(1360, 246.59182739258, 113.29301452637, 1002.9907836914, 0, 0, 90);
	CreateDynamicObject(1360, 246.59213256836, 114.24001312256, 1002.9907836914, 0, 0, 90);
	CreateDynamicObject(1361, 248.02133178711, 113.7615737915, 1002.962097168, 0, 0, 0);
	CreateDynamicObject(1361, 245.02682495117, 113.75959014893, 1002.962097168, 0, 0, 0);
	CreateDynamicObject(2286, 225.16703796387, 122.18214416504, 1004.3063964844, 0, 0, 0);
	CreateDynamicObject(2285, 223.08833312988, 121.70748901367, 1003.9888305664, 0, 0, 0);
	CreateDynamicObject(2284, 221.537109375, 121.708984375, 1003.9761962891, 0, 0, 0);
	CreateDynamicObject(2287, 219.79695129395, 121.72529602051, 1003.9791259766, 0, 0, 0);
	CreateDynamicObject(2267, 252.9375, 114.486328125, 1004.5409545898, 0, 0, 270);
	CreateDynamicObject(3388, 269.74649047852, 116.64740753174, 1003.6171875, 0, 0, 0);
	CreateDynamicObject(2264, 230.046875, 116.615234375, 1003.7547607422, 0, 0, 180);
	CreateDynamicObject(1722, 222.2421875, 121.75, 1002.21875, 0, 0, 179.99450683594);
	CreateDynamicObject(1722, 221.4599609375, 121.75, 1002.21875, 0, 0, 179.99450683594);
	CreateDynamicObject(1722, 220.763671875, 121.75, 1002.21875, 0, 0, 179.99450683594);
	CreateDynamicObject(1722, 220.078125, 121.75, 1002.21875, 0, 0, 179.99450683594);
	CreateDynamicObject(950, 219.0146484375, 121.8544921875, 1002.7618408203, 0, 0, 0);
	CreateDynamicObject(949, 218.12701416016, 121.87788391113, 1002.8550415039, 0, 0, 0);
	CreateDynamicObject(2289, 215.63618469238, 126.98712158203, 1004.7743530273, 0, 0, 0);
	CreateDynamicObject(2288, 231.39169311523, 116.61557006836, 1003.6768798828, 0, 0, 180);
	CreateDynamicObject(1622, 252.5708770752, 107.65685272217, 1009.943359375, 0, 336.18005371094, 270);
	CreateDynamicObject(2283, 267.7395324707, 127.06051635742, 1005.3527832031, 0, 0, 0);
	CreateDynamicObject(2282, 272.73101806641, 126.59387207031, 1005.2040405273, 0, 0, 0);
	CreateDynamicObject(2281, 274.41137695313, 126.59571838379, 1005.2214355469, 0, 0, 0);
	CreateDynamicObject(2280, 262.01617431641, 126.57710266113, 1004.9149169922, 0, 0, 0);
	CreateDynamicObject(2279, 269.09039306641, 115.20021820068, 1005.0122680664, 0, 0, 0);
	CreateDynamicObject(2278, 270.34539794922, 115.20016479492, 1004.9479980469, 0, 0, 0);
	CreateDynamicObject(2282, 271.87615966797, 115.21388244629, 1004.8433227539, 0, 0, 0);
	CreateDynamicObject(2280, 273.52032470703, 115.18337249756, 1004.90625, 0, 0, 0);
	CreateDynamicObject(2283, 274.98672485352, 115.66175842285, 1005.2844238281, 0, 0, 0);
	CreateDynamicObject(2269, 240.33462524414, 109.68656921387, 1004.373046875, 0, 0, 90);
	CreateDynamicObject(2266, 240.31921386719, 108.73133850098, 1004.373046875, 0, 0, 90);
	CreateDynamicObject(2268, 240.32022094727, 110.53702545166, 1004.373046875, 0, 0, 90);
	CreateDynamicObject(2271, 240.31225585938, 115.23073577881, 1003.537109375, 0, 0, 90);
	CreateDynamicObject(2265, 229.21850585938, 116.59741210938, 1003.7547607422, 0, 0, 180);
	CreateDynamicObject(2260, 225.25578308105, 118.90850830078, 1011.4013671875, 0, 0, 0);
	CreateDynamicObject(2261, 226.72413635254, 118.87422180176, 1011.3434448242, 0, 0, 0);
	CreateDynamicObject(2262, 228.22891235352, 118.89093017578, 1011.4453125, 0, 0, 0);
	CreateDynamicObject(2267, 226.1756439209, 113.42765045166, 1011.4359741211, 0, 0, 180);
	CreateDynamicObject(2257, 217.35488891602, 114.79107666016, 1011.5245361328, 0, 0, 90);
	CreateDynamicObject(2256, 228.48645019531, 112.19000244141, 1011.3911132813, 0, 0, 134);
	CreateDynamicObject(2518, 226.82978820801, 107.58000183105, 998.015625, 0, 0, 180);
	CreateDynamicObject(2518, 222.84246826172, 107.58000183105, 998.015625, 0, 0, 180);
	CreateDynamicObject(2518, 214.8295135498, 107.57981872559, 998.08770751953, 0, 0, 180);
	CreateDynamicObject(2518, 218.92340087891, 107.58036804199, 998.029296875, 0, 0, 180);
	CreateDynamicObject(2606, 250.03749084473, 122.87879943848, 1003.293762207, 0, 0, 180);
	CreateDynamicObject(2894, 248.47834777832, 122.99134063721, 1003.0684204102, 0, 0, 180);
	CreateDynamicObject(2196, 248.11520385742, 123.28709411621, 1003.0684204102, 0, 0, 33.744842529297);
	CreateDynamicObject(2247, 248.74645996094, 122.56734466553, 1003.5327758789, 0, 0, 0);
	CreateDynamicObject(1806, 248.48724365234, 124.2869720459, 1002.21875, 0, 0, 180);
	CreateDynamicObject(1806, 250.50451660156, 121.13446044922, 1002.21875, 0, 0, 180);
	CreateDynamicObject(1806, 242.1417388916, 121.01898193359, 1002.3487548828, 0, 0, 180);
	CreateDynamicObject(2190, 244.85075378418, 122.66577148438, 1003.0684204102, 0, 0, 180);
	CreateDynamicObject(2190, 242.67947387695, 122.705909729, 1003.0684204102, 0, 0, 180);
	CreateDynamicObject(2201, 243.23727416992, 122.78874206543, 1003.0684204102, 0, 0, 180);
	CreateDynamicObject(2201, 244.13935852051, 122.78000640869, 1003.0684204102, 0, 0, 180);
	CreateDynamicObject(1806, 244.96810913086, 124.22890472412, 1002.21875, 0, 0, 180);
	CreateDynamicObject(1806, 242.9391784668, 124.25944519043, 1002.2257080078, 0, 0, 180);
	CreateDynamicObject(2267, 242.2368927002, 127.06341552734, 1004.3308105469, 0, 0, 0);
	CreateDynamicObject(2269, 243.9264831543, 126.59526062012, 1004.1137695313, 0, 0, 1.9849853515625);
	CreateDynamicObject(2271, 245.79901123047, 126.59526062012, 1003.9295654297, 0, 0, 0);
	CreateDynamicObject(2266, 247.51647949219, 126.59104919434, 1004.1491699219, 0, 0, 0);
	CreateDynamicObject(2268, 248.97134399414, 126.59210205078, 1003.9663085938, 0, 0, 0);
	CreateDynamicObject(2263, 250.30328369141, 126.59210205078, 1004.0162353516, 0, 0, 0);
	CreateDynamicObject(2262, 252.05078125, 126.595703125, 1003.967590332, 0, 0, 0);
	CreateDynamicObject(2610, 240.67523193359, 126.77314758301, 1003.0441894531, 0, 0, 0);
	CreateDynamicObject(2609, 241.15899658203, 126.77314758301, 1002.9504394531, 0, 0, 0);
	CreateDynamicObject(2163, 241.87873840332, 127.08573150635, 1002.2000732422, 0, 0, 0);
	CreateDynamicObject(2191, 243.62138366699, 126.58000183105, 1002.21875, 0, 0, 0);
	CreateDynamicObject(2067, 244.86756896973, 126.63919067383, 1002.21875, 0, 0, 0);
	CreateDynamicObject(2164, 247.03831481934, 127.08174133301, 1002.21875, 0, 0, 0);
	CreateDynamicObject(2162, 248.81036376953, 127.10275268555, 1002.223815918, 0, 0, 0);
	CreateDynamicObject(14883, 226.95162963867, 112.60367584229, 1000.0140991211, 0, 0, 90);
	CreateDynamicObject(14883, 219.08369445801, 112.59990692139, 1000.0140991211, 0, 0, 90);
	CreateDynamicObject(2186, 250.9753112793, 126.6231842041, 1002.21875, 0, 0, 0);
	CreateDynamicObject(2615, 268.16235351563, 111.29913330078, 1005.7393188477, 0, 0, 270);
	CreateDynamicObject(2611, 268.17663574219, 109.55828857422, 1005.6708984375, 0, 0, 270);
	CreateDynamicObject(2264, 253.95323181152, 119.85732269287, 1003.6854858398, 0, 0, 90);
	CreateDynamicObject(2265, 253.94125366211, 121.07128143311, 1003.6138916016, 0, 0, 90);
	CreateDynamicObject(2262, 253.94259643555, 122.26689147949, 1003.6704101563, 0, 0, 90);
	CreateDynamicObject(2605, 254.42987060547, 110.6580581665, 1002.6171875, 0, 0, 180);
	CreateDynamicObject(1806, 254.38623046875, 112.01049804688, 1002.2257080078, 0, 0, 180);
	CreateDynamicObject(1840, 239.87057495117, 107.1957244873, 1007.5987548828, 0, 0, 217.03930664063);
	CreateDynamicObject(1806, 233.57649230957, 122.9282913208, 1002.21875, 0, 0, 270);
	CreateDynamicObject(1806, 233.68989562988, 125.57239532471, 1002.21875, 0, 0, 270);
	CreateDynamicObject(2286, 234.54986572266, 113.08088684082, 1011.7149658203, 0, 0, 0);
	CreateDynamicObject(2256, 239.29130554199, 109.87830352783, 1011.2890625, 0, 0, 270);
	CreateDynamicObject(2260, 238.8422088623, 111.81719207764, 1010.9140014648, 0, 0, 270);
	CreateDynamicObject(2263, 238.81428527832, 108.08712768555, 1010.9226074219, 0, 0, 270);
	CreateDynamicObject(2608, 239.08894348145, 108.03733062744, 1009.9807739258, 0, 0, 270);
	CreateDynamicObject(2167, 236.4796295166, 113.04265594482, 1009.21875, 0, 0, 0);
	CreateDynamicObject(2163, 237.39385986328, 113.04426574707, 1009.21875, 0, 0, 0);
	CreateDynamicObject(2245, 241.69044494629, 126.73099517822, 1003.434387207, 0, 0, 0);
	CreateDynamicObject(1786, 237.69088745117, 113.06349182129, 1010.1442871094, 0, 0, 0);
	CreateDynamicObject(2044, 236.30406188965, 112.78295135498, 1010.7683105469, 0, 0, 0);
	CreateDynamicObject(2040, 236.69303894043, 112.79051971436, 1010.8519897461, 0, 0, 43.669799804688);
	CreateDynamicObject(3051, 275.71102905273, 122.70574951172, 1004.9771118164, 0, 0, 46.279968261719);
	CreateDynamicObject(3051, 275.70986938477, 121.52679443359, 1004.9793701172, 0, 0, 226.41125488281);
	CreateDynamicObject(3051, 273.32867431641, 122.67944335938, 1004.9815063477, 0, 0, 226.41125488281);
	CreateDynamicObject(3051, 273.32550048828, 121.49833679199, 1004.9821166992, 0, 0, 46.279968261719);
	CreateDynamicObject(3051, 275.04699707031, 123.07685089111, 1004.9793701172, 0, 0, 136.06585693359);
	CreateDynamicObject(3051, 273.87149047852, 123.07888031006, 1004.9793701172, 0, 0, 316.09533691406);
	CreateDynamicObject(3051, 273.9075012207, 121.09142303467, 1004.9793701172, 0, 0, 316.09533691406);
	CreateDynamicObject(3051, 275.12689208984, 121.09117126465, 1004.9793701172, 0, 0, 136.06585693359);
	CreateDynamicObject(3051, 274.35482788086, 121.46484375, 1003.6217651367, 46, 90, 359.84533691406);
	CreateDynamicObject(3051, 274.36331176758, 122.58673858643, 1003.618347168, 46.299987792969, 90, 359.85217285156);
	CreateDynamicObject(3051, 274.2958984375, 122.61940002441, 1006.3125, 46, 90, 359.84533691406);
	CreateDynamicObject(3051, 274.29904174805, 121.6692199707, 1006.3180541992, 46, 90, 359.84533691406);

//=====================================EXTERIOR SIDE============================
	SIDEGate[1] = CreateObject(19449, 1286.31, -1654.82, 14.28, 0.00, 0.00, 0.00);
	SIDEGate[2] = CreateObject(19449, 1286.30, -1645.22, 17.77, 0.00, 0.00, 0.00);
	SIDEGate[3] = CreateObject(19449, 1286.32, -1645.22, 14.28, 0.00, 0.00, 0.00);
	SIDEGate[4] = CreateObject(19449, 1286.28, -1654.82, 17.75, 0.00, 0.00, 0.00);
	SIDEGate[5] = CreateObject(980, 1286.30, -1654.10, 17.87, 180.00, 0.00, 90.00);
	SIDEGate[6] = CreateObject(980, 1286.30, -1642.65, 17.87, 180.00, 0.00, 90.00);

	CreateDynamicObject(646, 2495.5, -1941.6999511719, 14, 0, 0, 0);
	CreateDynamicObject(646, 2483.3999023438, -1941.6999511719, 14, 0, 0, 0);
	CreateDynamicObject(1297, 2469.3000488281, -1937, 15.699999809265, 0, 0, 266);
	CreateDynamicObject(1297, 2469.3000488281, -1937, 15.699999809265, 0, 0, 265.99548339844);
	CreateDynamicObject(1297, 2481.8999023438, -1937.6999511719, 15.699999809265, 0, 0, 265.99548339844);
	CreateDynamicObject(1297, 2497.3994140625, -1937.3994140625, 15.699999809265, 0, 0, 265.99548339844);
	CreateDynamicObject(1432, 2467.8000488281, -1951.4000244141, 15.800000190735, 0, 0, 0);
	CreateDynamicObject(1432, 2463.5, -1952.1999511719, 15.800000190735, 0, 0, 0);
	CreateDynamicObject(1432, 2466.1999511719, -1955.6999511719, 15.800000190735, 0, 0, 0);
	CreateDynamicObject(642, 2467.8000488281, -1951.5, 17, 0, 0, 0);
	CreateDynamicObject(642, 2463.5, -1952.0999755859, 17, 0, 0, 0);
	CreateDynamicObject(18014, 2465.19921875, -1943.2998046875, 16.299999237061, 0, 0, 90);
	CreateDynamicObject(1670, 2467.8000488281, -1951.3000488281, 16.39999961853, 0, 0, 0);
	CreateDynamicObject(2223, 2463.1000976563, -1952.1999511719, 16.5, 0, 0, 0);
	CreateDynamicObject(2647, 2463.6999511719, -1952, 16.60000038147, 0, 0, 0);
	CreateDynamicObject(2769, 2463.8000488281, -1952.4000244141, 16.39999961853, 0, 0, 0);
	CreateDynamicObject(2860, 2466.1000976563, -1955.8000488281, 16.39999961853, 0, 0, 0);
	CreateDynamicObject(2768, 2467.8000488281, -1950.9000244141, 16.5, 0, 0, 0);
	CreateDynamicObject(1215, 2469.3000488281, -1946.3000488281, 13.300000190735, 0, 0, 0);
	CreateDynamicObject(1215, 2469.1999511719, -1948.6999511719, 13.199999809265, 0, 0, 0);
	CreateDynamicObject(1215, 2509.1000976563, -1946.1999511719, 13.300000190735, 0, 0, 0);
	CreateDynamicObject(1215, 2509.1999511719, -1948.6999511719, 13.199999809265, 0, 0, 0);
	CreateDynamicObject(1216, 2461.6000976563, -1943.3000488281, 16.60000038147, 0, 0, 0);
	CreateDynamicObject(1285, 2468.5, -1943.1999511719, 16.5, 0, 0, 179.99993896484);
	CreateDynamicObject(1286, 2469, -1943.1999511719, 16.5, 0, 0, 178);
	CreateDynamicObject(1328, 2461.3999023438, -1944.5, 13.199999809265, 0, 0, 0);
	CreateDynamicObject(2672, 2461.5, -1944, 12.89999961853, 0, 0, 0);
	CreateDynamicObject(18014, 2474.1999511719, -1958.3000488281, 16.299999237061, 0, 0, 90);
	CreateDynamicObject(18014, 2484, -1958.3000488281, 16.299999237061, 0, 0, 90);
	CreateDynamicObject(18014, 2494.5, -1958.1999511719, 16.299999237061, 0, 0, 90);
	CreateDynamicObject(18014, 2504.5, -1958.4000244141, 16.299999237061, 0, 0, 90);
	CreateDynamicObject(1368, 2479.1000976563, -1958.4000244141, 16.5, 0, 0, 0);
	CreateDynamicObject(1368, 2489.5, -1958.4000244141, 16.5, 0, 0, 0);
	CreateDynamicObject(1368, 2499.3000488281, -1958.3000488281, 16.5, 0, 0, 0);
	CreateDynamicObject(949, 2462.8000488281, -1946.5, 15.699999809265, 0, 0, 0);
	CreateDynamicObject(949, 2515.6999511719, -1946.5, 15.699999809265, 0, 0, 0);
	CreateDynamicObject(2914, 2512.1999511719, -1962.5, 25.700000762939, 0, 0, 0);
	CreateDynamicObject(2914, 2466.1999511719, -1962.4000244141, 25.799999237061, 0, 0, 0);
	CreateDynamicObject(966, 2492.1999511719, -1942.5999755859, 12.5, 0, 0, 0);
	CreateDynamicObject(4641, 2493.6999511719, -1942.4000244141, 14.10000038147, 0, 0, 272);
	CreateDynamicObject(968, 2492.1000976563, -1942.5999755859, 13.5, 0, 345.99993896484, 359.99966430664);
	CreateDynamicObject(1649, 1276.8000488281, -1694.8000488281, 21.89999961853, 0, 0, 0);
	CreateDynamicObject(1649, 1276.8000488281, -1694.8000488281, 25.200000762939, 0, 0, 0);
	CreateDynamicObject(1649, 1272.5, -1694.8000488281, 21.89999961853, 0, 0, 0);
	CreateDynamicObject(1649, 1272.5, -1694.8000488281, 25.200000762939, 0, 0, 0);
	CreateDynamicObject(1649, 1279, -1692.5999755859, 21.89999961853, 0, 0, 89.5);
	CreateDynamicObject(1649, 1279, -1692.5999755859, 25.200000762939, 0, 0, 89.49462890625);
	CreateDynamicObject(1649, 1279, -1688.3000488281, 21.89999961853, 0, 0, 89.49462890625);
	CreateDynamicObject(1649, 1279, -1688.3000488281, 25.200000762939, 0, 0, 89.49462890625);
	CreateDynamicObject(1649, 1279, -1684, 21.89999961853, 0, 0, 89.49462890625);
	CreateDynamicObject(1649, 1279, -1684, 25.200000762939, 0, 0, 89.49462890625);
	CreateDynamicObject(1649, 1279, -1679.6999511719, 21.89999961853, 0, 0, 89.49462890625);
	CreateDynamicObject(1649, 1279, -1679.6999511719, 25.200000762939, 0, 0, 89.49462890625);
	CreateDynamicObject(1649, 1279, -1675.4000244141, 21.89999961853, 0, 0, 89.49462890625);
	CreateDynamicObject(1649, 1279, -1675.4000244141, 25.200000762939, 0, 0, 89.49462890625);
	CreateDynamicObject(1649, 1279, -1671.0999755859, 21.89999961853, 0, 0, 89.49462890625);
	CreateDynamicObject(1649, 1279, -1671.0999755859, 25.200000762939, 0, 0, 89.49462890625);
	CreateDynamicObject(1649, 1279, -1666.8000488281, 21.89999961853, 0, 0, 89.49462890625);
	CreateDynamicObject(1649, 1279, -1666.8000488281, 25.200000762939, 0, 0, 89.49462890625);
	CreateDynamicObject(1649, 1279, -1662.5, 21.89999961853, 0, 0, 89.49462890625);
	CreateDynamicObject(1649, 1279, -1662.5, 25.200000762939, 0, 0, 89.49462890625);
	CreateDynamicObject(1649, 1272.5, -1694.7998046875, 21.89999961853, 0, 0, 179.74993896484);
	CreateDynamicObject(1649, 1272.5, -1694.8000488281, 25.200000762939, 0, 0, 179.74731445313);
	CreateDynamicObject(1649, 1276.8000488281, -1694.8000488281, 21.89999961853, 0, 0, 179.74731445313);
	CreateDynamicObject(1649, 1276.8000488281, -1694.8000488281, 25.200000762939, 0, 0, 179.74731445313);
	CreateDynamicObject(1649, 1278.9000244141, -1692.5999755859, 21.89999961853, 0, 0, 270.24462890625);
	CreateDynamicObject(1649, 1278.9000244141, -1692.5999755859, 25.200000762939, 0, 0, 270.24169921875);
	CreateDynamicObject(1649, 1278.9000244141, -1688.3000488281, 21.89999961853, 0, 0, 270.24169921875);
	CreateDynamicObject(1649, 1278.9000244141, -1688.3000488281, 25.200000762939, 0, 0, 270.24169921875);
	CreateDynamicObject(1649, 1278.9000244141, -1684, 21.89999961853, 0, 0, 270.24169921875);
	CreateDynamicObject(1649, 1278.9000244141, -1684, 25.200000762939, 0, 0, 270.24169921875);
	CreateDynamicObject(1649, 1278.9000244141, -1679.6999511719, 21.89999961853, 0, 0, 270.24169921875);
	CreateDynamicObject(1649, 1278.9000244141, -1679.6999511719, 25.200000762939, 0, 0, 270.24169921875);
	CreateDynamicObject(1649, 1278.9000244141, -1675.4000244141, 21.89999961853, 0, 0, 270.24169921875);
	CreateDynamicObject(1649, 1278.9000244141, -1675.4000244141, 25.200000762939, 0, 0, 270.24169921875);
	CreateDynamicObject(1649, 1278.9000244141, -1671.0999755859, 21.89999961853, 0, 0, 270.24169921875);
	CreateDynamicObject(1649, 1278.9000244141, -1671.0999755859, 25.200000762939, 0, 0, 270.24169921875);
	CreateDynamicObject(1649, 1278.9000244141, -1666.8000488281, 21.89999961853, 0, 0, 270.24169921875);
	CreateDynamicObject(1649, 1278.9000244141, -1666.8000488281, 25.200000762939, 0, 0, 270.24169921875);
	CreateDynamicObject(1649, 1278.9000244141, -1662.5, 21.89999961853, 0, 0, 270.24169921875);
	CreateDynamicObject(1649, 1278.9000244141, -1662.5, 25.200000762939, 0, 0, 270.24169921875);
	CreateDynamicObject(1649, 1268.099609375, -1694.7998046875, 21.89999961853, 0, 0, 0);
	CreateDynamicObject(1649, 1268.0999755859, -1694.8000488281, 25.200000762939, 0, 0, 0);
	CreateDynamicObject(1649, 1263.8000488281, -1694.8000488281, 21.89999961853, 0, 0, 0);
	CreateDynamicObject(1649, 1263.8000488281, -1694.8000488281, 25.200000762939, 0, 0, 0);
	CreateDynamicObject(1649, 1259.5, -1694.8000488281, 21.89999961853, 0, 0, 0);
	CreateDynamicObject(1649, 1259.5, -1694.8000488281, 25.200000762939, 0, 0, 0);
	CreateDynamicObject(1649, 1255.1999511719, -1694.8000488281, 21.89999961853, 0, 0, 0);
	CreateDynamicObject(1649, 1255.1999511719, -1694.8000488281, 25.200000762939, 0, 0, 0);
	CreateDynamicObject(1649, 1250.8994140625, -1694.7998046875, 18.60000038147, 0, 0, 0);
	CreateDynamicObject(1649, 1250.8994140625, -1694.7998046875, 21.89999961853, 0, 0, 0);
	CreateDynamicObject(1649, 1250.9000244141, -1694.8000488281, 25.200000762939, 0, 0, 0);
	CreateDynamicObject(1649, 1235.3000488281, -1694.8000488281, 18.60000038147, 0, 0, 0);
	CreateDynamicObject(1649, 1235.3000488281, -1694.8000488281, 15.300000190735, 0, 0, 0);
	CreateDynamicObject(1649, 1235.3000488281, -1694.8000488281, 21.89999961853, 0, 0, 0);
	CreateDynamicObject(1649, 1235.3000488281, -1694.8000488281, 25.200000762939, 0, 0, 0);
	CreateDynamicObject(1649, 1231, -1694.7998046875, 18.60000038147, 0, 0, 0);
	CreateDynamicObject(1649, 1231, -1694.8000488281, 21.89999961853, 0, 0, 0);
	CreateDynamicObject(1649, 1231, -1694.8000488281, 25.200000762939, 0, 0, 0);
	CreateDynamicObject(1649, 1226.6999511719, -1694.8000488281, 18.60000038147, 0, 0, 0);
	CreateDynamicObject(1649, 1226.6999511719, -1694.8000488281, 21.89999961853, 0, 0, 0);
	CreateDynamicObject(1649, 1226.6999511719, -1694.8000488281, 25.200000762939, 0, 0, 0);
	CreateDynamicObject(1649, 1222.4000244141, -1694.8000488281, 18.60000038147, 0, 0, 0);
	CreateDynamicObject(1649, 1222.4000244141, -1694.8000488281, 21.89999961853, 0, 0, 0);
	CreateDynamicObject(1649, 1222.4000244141, -1694.8000488281, 25.200000762939, 0, 0, 0);
	CreateDynamicObject(1649, 1218.6999511719, -1694.8000488281, 21.89999961853, 0, 0, 0);
	CreateDynamicObject(1649, 1218.6999511719, -1694.8000488281, 25.200000762939, 0, 0, 0);
	CreateDynamicObject(1649, 1218.69921875, -1694.7998046875, 21.89999961853, 0, 0, 179.74993896484);
	CreateDynamicObject(1649, 1218.6999511719, -1694.8000488281, 25.200000762939, 0, 0, 179.74731445313);
	CreateDynamicObject(1649, 1222.3994140625, -1694.7998046875, 21.89999961853, 0, 0, 180.50006103516);
	CreateDynamicObject(1649, 1222.4000244141, -1694.8000488281, 25.200000762939, 0, 0, 180.49987792969);
	CreateDynamicObject(1649, 1222.4000244141, -1694.8000488281, 18.60000038147, 0, 0, 180.49987792969);
	CreateDynamicObject(1649, 1226.6999511719, -1694.8000488281, 18.60000038147, 0, 0, 180.49987792969);
	CreateDynamicObject(1649, 1226.6999511719, -1694.8000488281, 21.89999961853, 0, 0, 180.49987792969);
	CreateDynamicObject(1649, 1226.6999511719, -1694.8000488281, 25.200000762939, 0, 0, 180.49987792969);
	CreateDynamicObject(1649, 1231, -1694.8000488281, 18.60000038147, 0, 0, 180.49987792969);
	CreateDynamicObject(1649, 1231, -1694.8000488281, 21.89999961853, 0, 0, 180.49987792969);
	CreateDynamicObject(1649, 1231, -1694.8000488281, 25.200000762939, 0, 0, 180.49987792969);
	CreateDynamicObject(1649, 1235.3000488281, -1694.8000488281, 18.60000038147, 0, 0, 180.49987792969);
	CreateDynamicObject(1649, 1235.3000488281, -1694.8000488281, 15.300000190735, 0, 0, 180.49987792969);
	CreateDynamicObject(1649, 1235.3000488281, -1694.8000488281, 21.89999961853, 0, 0, 180.49987792969);
	CreateDynamicObject(1649, 1235.3000488281, -1694.8000488281, 25.200000762939, 0, 0, 180.49987792969);
	CreateDynamicObject(1649, 1268.099609375, -1694.7998046875, 21.89999961853, 0, 0, 179.99993896484);
	CreateDynamicObject(1649, 1268.0999755859, -1694.8000488281, 25.200000762939, 0, 0, 179.99450683594);
	CreateDynamicObject(1649, 1263.8000488281, -1694.8000488281, 21.89999961853, 0, 0, 179.99450683594);
	CreateDynamicObject(1649, 1263.8000488281, -1694.8000488281, 25.200000762939, 0, 0, 179.99450683594);
	CreateDynamicObject(1649, 1259.5, -1694.8000488281, 21.89999961853, 0, 0, 179.99450683594);
	CreateDynamicObject(1649, 1259.5, -1694.8000488281, 25.200000762939, 0, 0, 179.99450683594);
	CreateDynamicObject(1649, 1255.1999511719, -1694.8000488281, 21.89999961853, 0, 0, 179.99450683594);
	CreateDynamicObject(1649, 1255.1999511719, -1694.8000488281, 25.200000762939, 0, 0, 179.99450683594);
	CreateDynamicObject(1649, 1250.9000244141, -1694.8000488281, 21.89999961853, 0, 0, 179.99450683594);
	CreateDynamicObject(1649, 1250.9000244141, -1694.8000488281, 18.60000038147, 0, 0, 179.99450683594);
	CreateDynamicObject(1649, 1250.9000244141, -1694.8000488281, 25.200000762939, 0, 0, 179.99450683594);
	CreateDynamicObject(638, 1247.1999511719, -1702.6999511719, 13.199999809265, 0, 0, 90);
	CreateDynamicObject(638, 1239.4000244141, -1702.6999511719, 13.199999809265, 0, 0, 90);
	CreateDynamicObject(1215, 1250, -1702, 13.10000038147, 0, 0, 0);
	CreateDynamicObject(1215, 1250, -1697.5999755859, 13.10000038147, 0, 0, 0);
	CreateDynamicObject(1215, 1236.1999511719, -1702, 13.10000038147, 0, 0, 0);
	CreateDynamicObject(1215, 1236.1999511719, -1697.5999755859, 13.10000038147, 0, 0, 0);
	CreateDynamicObject(644, 1247, -1690.8000488281, 15.5, 0, 0, 0);
	CreateDynamicObject(644, 1239.6999511719, -1691, 15.5, 0, 0, 0);
	CreateDynamicObject(18014, 1243.1999511719, -1701.3000488281, 14.300000190735, 0, 0, 90);
	CreateDynamicObject(738, 1231.3000488281, -1702, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(738, 1216.3000488281, -1702.1999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(738, 1255.1999511719, -1702.0999755859, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(738, 1271.1999511719, -1702.1999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(738, 1287.3000488281, -1701.9000244141, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(738, 1287.9000244141, -1686.4000244141, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(738, 1287.8000488281, -1670.9000244141, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(17554, 1237.19921875, -1651.8994140625, -4.6999998092651, 0, 0, 0);
	CreateDynamicObject(17554, 1237.1999511719, -1680.8000488281, -4.6999998092651, 0, 0, 0);
	CreateDynamicObject(17554, 1197.6999511719, -1680.8000488281, -4.6999998092651, 0, 0, 0);
	CreateDynamicObject(17554, 1197.6999511719, -1651.9000244141, -4.6999998092651, 0, 0, 0);
	CreateDynamicObject(3578, 1252, -1643.5, 11.699999809265, 27.75, 0, 0);
	CreateDynamicObject(3578, 1257.3000488281, -1648.8000488281, 11.699999809265, 27.745971679688, 0, 269.99996948242);
	CreateDynamicObject(3578, 1257.3000488281, -1659, 11.699999809265, 27.745971679688, 0, 269.99450683594);
	CreateDynamicObject(3578, 1257.3000488281, -1669.3000488281, 11.699999809265, 27.745971679688, 0, 269.99450683594);
	CreateDynamicObject(3578, 1257.3000488281, -1679.5, 11.699999809265, 27.745971679688, 0, 269.99450683594);
	CreateDynamicObject(3578, 1231.9000244141, -1638.1999511719, 11.699999809265, 27.745971679688, 0, 269.99450683594);
	CreateDynamicObject(1596, 1280.6999511719, -1703.5, 41, 0, 0, 0);
	CreateDynamicObject(1596, 1288.6999511719, -1697.0999755859, 41, 0, 0, 90);
	CreateDynamicObject(1596, 1280.5999755859, -1691.0999755859, 41, 0, 0, 180);
	CreateDynamicObject(1596, 1272.0999755859, -1697.1999511719, 41, 0, 0, 269.99996948242);
	CreateDynamicObject(4574, 1280.5999755859, -1697.3000488281, 66.900001525879, 0, 0, 0);
	CreateDynamicObject(982, 1285.8000488281, -1674.9000244141, 35, 0, 0, 0);
	CreateDynamicObject(982, 1285.8000488281, -1686.0999755859, 35, 0, 0, 0);
	CreateDynamicObject(9131, 1286, -1661.9000244141, 35.5, 0, 0, 0);
	CreateDynamicObject(9131, 1286.6999511719, -1661.9000244141, 35.5, 0, 0, 0);
	CreateDynamicObject(984, 1286.7998046875, -1655.099609375, 35, 0, 0, 0);
	CreateDynamicObject(984, 1286.8000488281, -1651.9000244141, 35, 0, 0, 0);
	CreateDynamicObject(9131, 1286, -1645.0999755859, 35.5, 0, 0, 0);
	CreateDynamicObject(9131, 1286.6999511719, -1645.0999755859, 35.5, 0, 0, 0);
	CreateDynamicObject(9131, 1286, -1644.4000244141, 35.5, 0, 0, 0);
	CreateDynamicObject(9131, 1286, -1643.6999511719, 35.5, 0, 0, 0);
	CreateDynamicObject(9131, 1286, -1643, 35.5, 0, 0, 0);
	CreateDynamicObject(9131, 1286, -1642.3000488281, 35.5, 0, 0, 0);
	CreateDynamicObject(9131, 1285.5999755859, -1689.5, 35.5, 0, 0, 0);
	CreateDynamicObject(984, 1279.5999755859, -1642.5, 35, 0, 0, 270);
	CreateDynamicObject(984, 1273.1999511719, -1642.5, 35, 0, 0, 269.99450683594);
	CreateDynamicObject(9131, 1266.6999511719, -1642.5, 35.5, 0, 0, 0);
	CreateDynamicObject(984, 1266.9000244141, -1653.5, 35, 0, 0, 0);
	CreateDynamicObject(984, 1266.9000244141, -1648.6999511719, 35, 0, 0, 0);
	CreateDynamicObject(9131, 1266.5999755859, -1659.9000244141, 35.5, 0, 0, 0);
	CreateDynamicObject(982, 1253.5, -1660.1999511719, 35, 0, 0, 269.99996948242);
	CreateDynamicObject(982, 1242.2998046875, -1660.19921875, 35, 0, 0, 269.98901367188);
	CreateDynamicObject(9131, 1229.8000488281, -1660.1999511719, 35.5, 0, 0, 0);
	CreateDynamicObject(983, 1230.0999755859, -1663.5999755859, 35, 0, 0, 0);
	CreateDynamicObject(983, 1230.099609375, -1666.7998046875, 35, 0, 0, 0);
	CreateDynamicObject(9131, 1229.8000488281, -1670, 35.5, 0, 0, 0);
	CreateDynamicObject(9131, 1229.7998046875, -1670.69921875, 35.5, 0, 0, 0);
	CreateDynamicObject(984, 1223, -1670.9000244141, 35, 0, 0, 269.99450683594);
	CreateDynamicObject(984, 1213.4000244141, -1670.9000244141, 35, 0, 0, 269.99450683594);
	CreateDynamicObject(9131, 1206.6999511719, -1670.8000488281, 35.5, 0, 0, 0);
	CreateDynamicObject(984, 1206.9000244141, -1677.4000244141, 35, 0, 0, 0);
	CreateDynamicObject(984, 1206.9000244141, -1679, 35, 0, 0, 0);
	CreateDynamicObject(9131, 1207.1999511719, -1685.5, 35.5, 0, 0, 0);
	CreateDynamicObject(9131, 1207.9000244141, -1685.5, 35.5, 0, 0, 0);
	CreateDynamicObject(9131, 1208.5999755859, -1685.5, 35.5, 0, 0, 0);
	CreateDynamicObject(9131, 1209.3000488281, -1685.5, 35.5, 0, 0, 0);
	CreateDynamicObject(9131, 1210, -1685.5, 35.5, 0, 0, 0);
	CreateDynamicObject(9131, 1210.6999511719, -1685.5, 35.5, 0, 0, 0);
	CreateDynamicObject(9131, 1211.4000244141, -1685.5, 35.5, 0, 0, 0);
	CreateDynamicObject(984, 1211.5999755859, -1694.8000488281, 35, 0, 0, 0);
	CreateDynamicObject(984, 1211.5999755859, -1691.5999755859, 35, 0, 0, 0);
	CreateDynamicObject(9131, 1211.3000488281, -1701.5, 35.5, 0, 0, 0);
	CreateDynamicObject(982, 1224.3000488281, -1701.6999511719, 35, 0, 0, 269.98901367188);
	CreateDynamicObject(982, 1249.9000244141, -1701.6999511719, 35, 0, 0, 269.98901367188);
	CreateDynamicObject(982, 1275.5, -1701.6999511719, 35, 0, 0, 269.98901367188);
	CreateDynamicObject(9131, 1270.5, -1701.8000488281, 35.5, 0, 0, 0);
	CreateDynamicObject(3934, 1223, -1688.3000488281, 33.799999237061, 0, 0, 90.25);
	CreateDynamicObject(3934, 1246.5, -1688.3000488281, 33.799999237061, 0, 0, 90.247192382813);
	CreateDynamicObject(626, 1216.5999755859, -1644.5, 28.39999961853, 0, 0, 0);
	CreateDynamicObject(626, 1210.5999755859, -1644.5, 28.39999961853, 0, 0, 0);
	CreateDynamicObject(626, 1210.5999755859, -1656.3000488281, 28.39999961853, 0, 0, 0);
	CreateDynamicObject(626, 1216.6999511719, -1656.3000488281, 28.39999961853, 0, 0, 0);
	CreateDynamicObject(626, 1210.5999755859, -1669.5999755859, 28.39999961853, 0, 0, 0);
	CreateDynamicObject(626, 1216.5999755859, -1669.5999755859, 28.39999961853, 0, 0, 0);
	CreateDynamicObject(1215, 1249.5999755859, -1702, 14.800000190735, 0, 0, 0);
	CreateDynamicObject(1215, 1236.5999755859, -1702, 14.800000190735, 0, 0, 0);
	CreateDynamicObject(1215, 1238.9000244141, -1697.5, 14.800000190735, 0, 0, 0);
	CreateDynamicObject(1215, 1270, -1701.5, 33.799999237061, 0, 0, 0);
	CreateDynamicObject(1215, 1285.5999755859, -1689, 33.799999237061, 0, 0, 0);
	CreateDynamicObject(1215, 1285.6999511719, -1661.5999755859, 33.799999237061, 0, 0, 0);
	CreateDynamicObject(1215, 1285.5999755859, -1642.6999511719, 33.799999237061, 0, 0, 0);
	CreateDynamicObject(1215, 1267.0999755859, -1642.6999511719, 33.799999237061, 0, 0, 0);
	CreateDynamicObject(1215, 1266.5999755859, -1660.4000244141, 33.799999237061, 0, 0, 0);
	CreateDynamicObject(1215, 1230.1999511719, -1660.4000244141, 33.799999237061, 0, 0, 0);
	CreateDynamicObject(1215, 1230.1999511719, -1671.1999511719, 33.799999237061, 0, 0, 0);
	CreateDynamicObject(1215, 1207.0999755859, -1671.3000488281, 33.799999237061, 0, 0, 0);
	CreateDynamicObject(1215, 1207.0999755859, -1685.0999755859, 33.799999237061, 0, 0, 0);
	CreateDynamicObject(1215, 1211.8000488281, -1685.5, 33.799999237061, 0, 0, 0);
	CreateDynamicObject(1215, 1211.8000488281, -1701.5, 33.799999237061, 0, 0, 0);
	CreateDynamicObject(1215, 1247.3000488281, -1697.5, 14.800000190735, 0, 0, 0);
	CreateDynamicObject(1215, 1260.8000488281, -1661.5999755859, 12.5, 0, 0, 0);
	CreateDynamicObject(1215, 1251.5, -1661.5, 12.39999961853, 0, 0, 0);
	CreateDynamicObject(1215, 1241.1999511719, -1661.4000244141, 12.39999961853, 0, 0, 0);
	CreateDynamicObject(1215, 1231.5, -1661.5, 12.39999961853, 0, 0, 0);
	CreateDynamicObject(1215, 1229.6999511719, -1644.4000244141, 13.199999809265, 0, 0, 0);
	CreateDynamicObject(1215, 1247.3000488281, -1644.4000244141, 13.199999809265, 0, 0, 0);
	CreateDynamicObject(2885, 1216.599609375, -1689.69921875, 23.89999961853, 0, 0, 269.74182128906);
	CreateDynamicObject(2885, 1269.69921875, -1668, 23.89999961853, 0, 0, 270.24719238281);
	CreateDynamicObject(2885, 1275, -1661.7998046875, 23.89999961853, 0, 0, 180.24169921875);
	CreateDynamicObject(1536, 1273.5, -1662, 18.700000762939, 0, 0, 0);
	CreateDynamicObject(1536, 1276.5, -1662, 18.700000762939, 0, 0, 178.74755859375);
	CreateDynamicObject(1536, 1269.8994140625, -1669.3994140625, 18.700000762939, 0, 0, 90.499877929688);
	CreateDynamicObject(1536, 1269.8994140625, -1666.3994140625, 18.700000762939, 0, 0, 268.49487304688);
	CreateDynamicObject(1536, 1216.7998046875, -1691.099609375, 18.700000762939, 0, 0, 269.24743652344);
	CreateDynamicObject(1536, 1216.7998046875, -1694.099609375, 18.700000762939, 0, 0, 89.747314453125);
	CreateDynamicObject(1536, 1218.3994140625, -1677.5, 12.39999961853, 0, 0, 181.49963378906);
	CreateDynamicObject(1536, 1269.099609375, -1663.099609375, 12.5, 0, 0, 269.49462890625);
	CreateDynamicObject(1536, 1215.3994140625, -1677.599609375, 12.39999961853, 0, 0, 0.999755859375);
	CreateDynamicObject(1536, 1269.099609375, -1666.099609375, 12.5, 0, 0, 89.241943359375);
	CreateDynamicObject(1536, 1272, -1689.7998046875, 34.400001525879, 0, 0, 0);
	CreateDynamicObject(1536, 1275, -1689.7998046875, 34.400001525879, 0, 0, 178.74755859375);
	CreateDynamicObject(10245, 1273.4000244141, -1683.5, 29.799999237061, 0, 0, 314);

//=============================VILLA DEL HUEVO==================================
	new Textura;

	Textura = CreateDynamicObject(11459, 1619.96143, -2108.65552, 14.78708,   0.00000, 0.00000, 219.19254);
	SetObjectMaterial(Textura, 0, 16070, "des_stownmain1", "des_brick1", -1);
	CreateDynamicObject(3418, 1638.93152, -2107.23242, 14.85486,   0.00000, 0.00000, 35.20171);
	CreateDynamicObject(3285, 1650.94348, -2100.18359, 14.42153,   0.00000, 0.00000, 130.91132);
	CreateDynamicObject(3172, 1653.78223, -2081.91968, 15.80286,   23.34001, 3.06000, 47.62386);
	CreateDynamicObject(19456, 1668.27771, -2176.47876, 14.29465,   0.00000, 0.00000, 269.92630);
	CreateDynamicObject(19456, 1658.68469, -2176.45337, 14.30394,   0.00000, 0.00000, 269.92630);
	CreateDynamicObject(19456, 1639.52344, -2176.43481, 14.29465,   0.00000, 0.00000, 269.92630);
	CreateDynamicObject(19456, 1649.12488, -2176.44312, 14.29465,   0.00000, 0.00000, 269.92630);
	CreateDynamicObject(19456, 1629.98840, -2176.43164, 14.29465,   0.00000, 0.00000, 270.10938);
	CreateDynamicObject(19456, 1620.43530, -2176.44702, 14.29465,   0.00000, 0.00000, 269.92630);
	CreateDynamicObject(19456, 1610.86096, -2176.43896, 14.29465,   0.00000, 0.00000, 269.92630);
	CreateDynamicObject(19456, 1601.22900, -2176.43677, 14.29465,   0.00000, 0.00000, 269.92630);
	CreateDynamicObject(19456, 1591.59888, -2176.43042, 14.29465,   0.00000, 0.00000, 269.92630);
	CreateDynamicObject(19456, 1369.06506, -2185.55298, 13.96143,   0.00000, 0.00000, 332.55774);
	CreateDynamicObject(19456, 1364.83350, -2193.74585, 13.96143,   0.00000, 0.00000, 332.55774);
	CreateDynamicObject(19364, 1362.20593, -2199.53149, 13.96175,   0.00000, 0.00000, 344.68677);
	CreateDynamicObject(19364, 1361.37744, -2202.55811, 13.96175,   0.00000, 0.00000, 344.68677);
	CreateDynamicObject(19456, 1368.96692, -2204.15649, 14.28177,   0.00000, 0.00000, 269.30774);
	CreateDynamicObject(19393, 1362.54614, -2204.09644, 14.28425,   0.00000, 0.00000, 89.59497);
	CreateDynamicObject(19456, 1378.30334, -2204.26489, 14.28177,   0.00000, 0.00000, 269.30774);
	CreateDynamicObject(19456, 1387.71838, -2204.38477, 14.28177,   0.00000, 0.00000, 269.30774);
	CreateDynamicObject(19456, 1397.23047, -2204.48999, 14.28177,   0.00000, 0.00000, 269.30774);
	CreateDynamicObject(19364, 1403.54407, -2204.57129, 14.27742,   0.00000, 0.00000, 89.39352);
	CreateDynamicObject(19364, 1405.95947, -2204.58765, 14.27787,   0.00000, 0.00000, 89.38946);
	CreateDynamicObject(3173, 1619.14636, -2132.19214, 12.43325,   0.00000, 0.00000, 180.05246);
	CreateDynamicObject(3246, 1632.64307, -2099.76392, 16.13409,   17.57999, 0.12000, 40.22337);
	CreateDynamicObject(19364, 1676.27991, -2176.48462, 14.30315,   0.00000, 0.00000, 89.96911);
	CreateDynamicObject(3594, 1657.30908, -2106.00684, 13.14179,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3594, 1654.95496, -2106.23291, 13.61409,   12.96000, -0.78000, 305.57846);
	CreateDynamicObject(11426, 1624.06396, -2103.66992, 15.96208,   0.00000, 0.00000, 310.06320);
	Textura = CreateDynamicObject(11426, 1622.69336, -2102.06445, 18.88465,   0.18000, 0.12000, 310.06320);
	SetObjectMaterial(Textura, 0, 16070, "des_stownmain1", "des_brick1", -1);
	SetObjectMaterial(Textura, 1, 16070, "des_stownmain1", "des_brick1", -1);
	CreateDynamicObject(3302, 1620.16907, -2102.57324, 22.07358,   16.20002, 0.48000, 43.74180);
	CreateDynamicObject(3302, 1621.78406, -2103.35376, 21.89378,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1437, 1628.39722, -2104.27173, 14.49573,   0.90001, -1.62000, 39.56518);
	CreateDynamicObject(1222, 1637.19397, -2091.93042, 20.08102,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1222, 1636.99951, -2093.05493, 20.08102,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1222, 1637.78113, -2092.68774, 19.99543,   -11.94001, -24.29999, 0.00000);
	CreateDynamicObject(3173, 1623.71899, -2132.63892, 12.43674,   0.00000, 0.00000, 359.90561);
	CreateDynamicObject(11459, 1613.85974, -2171.46753, 12.48006,   0.00000, 0.00000, 0.11121);
	CreateDynamicObject(11426, 1586.75488, -2133.33545, 13.25341,   0.00000, 0.00000, 292.01334);
	CreateDynamicObject(11426, 1593.96973, -2129.99731, 13.34519,   0.00000, 0.00000, 292.01334);
	CreateDynamicObject(19437, 1586.91675, -2176.42969, 14.29513,   0.00000, 0.00000, 269.92462);
	CreateDynamicObject(19456, 1586.04517, -2167.66870, 14.29465,   0.00000, 0.00000, 0.11916);
	CreateDynamicObject(19456, 1586.03125, -2161.49927, 14.29465,   0.00000, 0.00000, 0.11916);
	Textura = CreateDynamicObject(11426, 1615.57837, -2174.01440, 15.37204,   0.00000, 0.00000, 90.15350);
	SetObjectMaterial(Textura, 0, 16070, "des_stownmain1", "des_brick1", -1);
	SetObjectMaterial(Textura, 1, 16070, "des_stownmain1", "des_brick1", -1);
	Textura = CreateDynamicObject(11459, 1618.62207, -2171.47437, 12.48006,   0.00000, 0.00000, 0.20196);
	SetObjectMaterial(Textura, 0, 16070, "des_stownmain1", "des_brick1", -1);
	CreateDynamicObject(3594, 1604.28857, -2173.15527, 13.41908,   -13.14000, -5.21999, 62.86376);
	Textura = CreateDynamicObject(11426, 1613.87830, -2159.44800, 12.46675,   0.00000, 0.00000, 180.15146);
	SetObjectMaterial(Textura, 0, 16070, "des_stownmain1", "des_brick1", -1);
	SetObjectMaterial(Textura, 1, 16070, "des_stownmain1", "des_brick1", -1);
	CreateDynamicObject(11426, 1620.26904, -2158.42261, 12.48565,   0.00000, 0.00000, 0.53564);
	CreateDynamicObject(11426, 1592.33411, -2141.15112, 12.52133,   0.00000, 0.00000, 9.77139);
	CreateDynamicObject(11459, 1613.84631, -2164.93872, 15.39336,   0.00000, 0.00000, 0.11121);
	CreateDynamicObject(11426, 1620.17615, -2148.89233, 12.48565,   0.00000, 0.00000, 1.65279);
	Textura = CreateDynamicObject(11459, 1616.78516, -2149.07886, 15.36239,   0.00000, 0.00000, 90.11360);
	SetObjectMaterial(Textura, 0, 16070, "des_stownmain1", "des_brick1", -1);
	CreateDynamicObject(11459, 1618.58240, -2164.89722, 15.39755,   0.00000, 0.00000, 0.11121);
	CreateDynamicObject(11457, 1650.14490, -2153.74438, 12.00409,   0.00000, 0.00000, 0.29992);
	CreateDynamicObject(1437, 1622.33228, -2170.28540, 10.86351,   -5.69999, -2.40001, 86.09408);
	CreateDynamicObject(19456, 1587.67773, -2152.19604, 14.29465,   0.00000, 0.00000, 339.63126);
	CreateDynamicObject(19364, 1589.90283, -2146.27734, 14.28156,   0.00000, 0.00000, 338.99301);
	CreateDynamicObject(19364, 1587.91492, -2139.10376, 14.30747,   0.00000, 0.00000, 113.93888);
	CreateDynamicObject(19364, 1585.17810, -2140.30640, 14.30747,   0.00000, 0.00000, 113.93888);
	CreateDynamicObject(19364, 1583.23315, -2139.50830, 14.30747,   0.00000, 0.00000, 20.38885);
	CreateDynamicObject(1437, 1590.43860, -2149.76392, 11.04878,   20.40002, 1.13999, 99.27736);
	CreateDynamicObject(11426, 1627.66528, -2153.62329, 12.46571,   0.00000, 0.00000, 91.60246);
	CreateDynamicObject(11426, 1628.09937, -2159.76660, 12.49923,   0.00000, 0.00000, 271.66760);
	CreateDynamicObject(3415, 1627.65405, -2172.78223, 12.54425,   0.00000, 0.00000, 181.36543);
	Textura = CreateDynamicObject(11459, 1635.43860, -2158.92773, 12.53969,   0.00000, 0.00000, 2.00624);
	SetObjectMaterial(Textura, 0, 16070, "des_stownmain1", "des_brick1", -1);
	CreateDynamicObject(11459, 1617.07214, -2156.92920, 15.37327,   0.00000, 0.00000, 270.89621);
	Textura = CreateDynamicObject(11459, 1630.82898, -2159.72900, 15.39174,   0.06000, -0.06000, 271.20233);
	SetObjectMaterial(Textura, 0, 16070, "des_stownmain1", "des_brick1", -1);
	CreateDynamicObject(1437, 1636.69238, -2164.10181, 10.90164,   -4.37999, -1.20001, 359.37350);
	CreateDynamicObject(1437, 1610.17883, -2153.46191, 11.10907,   23.82002, 1.43999, 89.71574);
	CreateDynamicObject(11459, 1619.02576, -2152.23340, 18.18015,   0.00000, 0.00000, 180.38097);
	CreateDynamicObject(11459, 1614.75964, -2152.15918, 18.18015,   0.00000, 0.00000, 0.20741);
	Textura = CreateDynamicObject(11426, 1616.51672, -2152.27466, 20.95655,   0.00000, 0.00000, 180.15146);
	SetObjectMaterial(Textura, 0, 16070, "des_stownmain1", "des_brick1", -1);
	SetObjectMaterial(Textura, 1, 16070, "des_stownmain1", "des_brick1", -1);
	CreateDynamicObject(1437, 1617.38391, -2173.72241, 16.58997,   23.82002, 1.43999, 180.67828);
	CreateDynamicObject(11459, 1616.12903, -2168.54834, 18.20453,   0.00000, 0.00000, 359.65756);
	CreateDynamicObject(1437, 1623.94653, -2146.16602, 11.11226,   -5.69999, -2.40001, 86.09408);
	CreateDynamicObject(1437, 1613.44543, -2145.44238, 13.75354,   -5.69999, -2.40001, 178.32474);
	CreateDynamicObject(1437, 1612.73889, -2157.15332, 20.82239,   -106.38004, -9.06001, 171.01523);
	Textura = CreateDynamicObject(11459, 1592.75623, -2143.94165, 15.39111,   0.00000, 0.00000, 9.22986);
	SetObjectMaterial(Textura, 0, 16070, "des_stownmain1", "des_brick1", -1);
	CreateDynamicObject(11426, 1650.23730, -2154.77563, 15.00138,   0.00000, 0.00000, 180.81239);
	CreateDynamicObject(1437, 1645.45447, -2150.22266, 10.64543,   -5.69999, -2.40001, 179.12828);
	CreateDynamicObject(1222, 1644.78381, -2157.53735, 15.55927,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1222, 1644.17603, -2156.91675, 15.55927,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11426, 1601.87793, -2115.96606, 15.96208,   3.24000, -0.12000, 302.77161);
	CreateDynamicObject(11426, 1611.28650, -2110.37402, 16.56138,   0.00000, 0.00000, 300.04294);
	CreateDynamicObject(11459, 1606.09961, -2113.32788, 19.34633,   0.00000, 0.00000, 300.29590);
	CreateDynamicObject(3285, 1601.55530, -2136.63574, 14.44428,   0.00000, 0.00000, 0.09519);
	CreateDynamicObject(1294, 1624.40552, -2145.03809, 16.99411,   0.00000, 0.00000, 190.00400);
	CreateDynamicObject(1294, 1647.90125, -2115.74707, 16.95021,   0.00000, 0.00000, 265.29047);
	CreateDynamicObject(1294, 1609.46802, -2146.79980, 16.94133,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1294, 1622.17480, -2166.63770, 17.05860,   0.00000, 0.00000, 237.64781);
	CreateDynamicObject(3415, 1644.19775, -2085.69507, 16.84727,   0.00000, 0.00000, 53.74219);
	CreateDynamicObject(11426, 1636.97290, -2092.89233, 16.69638,   0.00000, 0.00000, 310.06320);
	CreateDynamicObject(19456, 1397.30188, -2204.49976, 14.28177,   0.00000, 0.00000, 269.30774);
	CreateDynamicObject(19364, 1674.72888, -2176.47534, 14.30315,   0.00000, 0.00000, 89.96911);
	CreateDynamicObject(19456, 1586.04517, -2167.66870, 14.29465,   0.00000, 0.00000, 0.11916);
	CreateDynamicObject(19456, 1586.03125, -2161.49927, 14.29465,   0.00000, 0.00000, 0.11916);
	CreateDynamicObject(11426, 1613.80261, -2150.68750, 12.48565,   0.00000, 0.00000, 180.15146);
	CreateDynamicObject(11426, 1594.90967, -2147.21753, 12.51698,   0.00000, 0.00000, 279.66339);
	Textura = CreateDynamicObject(11459, 1624.85083, -2152.35083, 15.39174,   0.00000, 0.00000, 272.13919);
	SetObjectMaterial(Textura, 0, 16070, "des_stownmain1", "des_brick1", -1);
	CreateDynamicObject(1294, 1592.10254, -2151.98291, 16.90071,   0.00000, 0.00000, 94.68893);
	CreateDynamicObject(3285, 1674.09167, -2164.39209, 14.42293,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3173, 1661.38733, -2164.60913, 12.52096,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1440, 1614.08252, -2174.58862, 18.81241,   0.00000, 0.00000, 323.37274);
	CreateDynamicObject(1440, 1598.87329, -2136.18262, 13.03566,   0.00000, 0.00000, 291.20172);
	CreateDynamicObject(1440, 1642.50220, -2152.19678, 13.07308,   0.00000, 0.00000, 281.40109);
	CreateDynamicObject(1440, 1655.14075, -2167.21533, 13.05285,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1440, 1642.44006, -2091.92700, 17.09595,   -14.40001, 23.27998, 308.03497);
	CreateDynamicObject(1437, 1617.70764, -2165.38257, 20.87627,   37.44003, -0.24001, 154.89412);
	CreateDynamicObject(19364, 1590.19580, -2143.18457, 14.28156,   0.00000, 0.00000, 9.79869);
	CreateDynamicObject(19364, 1589.65784, -2140.02710, 14.28156,   0.00000, 0.00000, 9.79869);
	CreateDynamicObject(1440, 1643.70789, -2109.78125, 13.05204,   0.00000, 0.00000, 201.10167);
	CreateDynamicObject(18663, 1604.22437, -2157.23828, 17.01056,   6.90000, 1.98000, 269.66165);
	CreateDynamicObject(1265, 1616.62317, -2137.65942, 12.91792,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1265, 1616.51111, -2136.70044, 12.97597,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1265, 1626.09741, -2162.81665, 12.92868,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1265, 1627.04138, -2162.71021, 12.92868,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1265, 1624.03333, -2107.62085, 16.17274,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1265, 1624.73376, -2106.96509, 16.17274,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11459, 1622.79126, -2122.94409, 12.54011,   0.00000, 0.00000, 271.57547);
	CreateDynamicObject(18451, 1607.61548, -2173.51563, 13.02789,   0.06000, -0.24000, 175.93887);
	CreateDynamicObject(1357, 1622.04858, -2110.05054, 17.90003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1357, 1648.31873, -2167.80835, 12.83433,   0.00000, 0.00000, 354.12683);
	CreateDynamicObject(1357, 1615.02161, -2167.69751, 21.32707,   0.00000, 0.00000, 354.12683);
	CreateDynamicObject(928, 1614.97192, -2167.68628, 21.50391,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(850, 1592.54810, -2143.31836, 18.33216,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1327, 1649.01868, -2105.30078, 12.57813,   -1.37999, 95.03999, 0.00000);
	CreateDynamicObject(1327, 1649.48560, -2105.91504, 12.95820,   21.12001, 111.30001, 0.00000);
	CreateDynamicObject(18661, 1607.06580, -2115.49292, 21.42225,   2.58000, 0.72000, 120.31425);
	CreateDynamicObject(1349, 1664.15063, -2169.46704, 13.08761,   0.00000, 0.00000, 150.13782);
	CreateDynamicObject(1439, 1601.25745, -2142.75098, 12.64334,   0.00000, 0.00000, 359.27933);
	CreateDynamicObject(1358, 1580.91553, -2127.73975, 16.37700,   0.48000, -6.42000, 137.04080);
	CreateDynamicObject(2096, 1629.81311, -2151.99170, 15.36691,   0.00000, 0.00000, 103.63960);
	CreateDynamicObject(1432, 1645.02197, -2154.30688, 15.22928,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1670, 1645.11145, -2154.19775, 15.85747,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1475, 1596.07532, -2150.07031, 13.98136,   0.00000, 0.00000, 10.07113);
	CreateDynamicObject(1474, 1627.15576, -2150.35840, 14.01657,   0.00000, 0.00000, 179.70227);
	CreateDynamicObject(1472, 1595.93567, -2133.08154, 13.13095,   -0.12000, -1.68000, 22.12518);
	CreateDynamicObject(18660, 1594.93384, -2142.67065, 17.38776,   4.80000, 1.62000, 189.09607);
	CreateDynamicObject(1441, 1599.92041, -2120.48364, 16.11941,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18667, 1616.73340, -2146.68335, 17.13652,   -13.97998, 4.08000, 270.90161);
	Textura = CreateDynamicObject(11459, 1588.61401, -2132.30518, 16.39544,   0.00000, 0.00000, 293.97293);
	SetObjectMaterial(Textura, 0, 16070, "des_stownmain1", "des_brick1", -1);
	CreateDynamicObject(1349, 1599.78381, -2115.98364, 19.38826,   0.00000, 0.00000, 150.13782);
	CreateDynamicObject(1327, 1594.77490, -2127.99658, 16.58644,   21.12001, 111.30001, 0.00000);
	CreateDynamicObject(1265, 1671.74829, -2164.81323, 12.95311,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1265, 1670.79858, -2164.84497, 12.95311,   0.00000, 0.00000, 0.00000);
	Textura = CreateDynamicObject(11426, 1594.11816, -2166.81128, 12.51160,   0.00000, 0.00000, 356.99109);
	SetObjectMaterial(Textura, 0, 16070, "des_stownmain1", "des_brick1", -1);
	SetObjectMaterial(Textura, 1, 16070, "des_stownmain1", "des_brick1", -1);
	Textura = CreateDynamicObject(11459, 1607.77209, -2165.96777, 15.41141,   0.00000, 0.00000, 89.49216);
	SetObjectMaterial(Textura, 0, 16070, "des_stownmain1", "des_brick1", -1);
	Textura = CreateDynamicObject(11459, 1600.01245, -2165.86890, 15.42549,   0.00000, 0.00000, 89.07381);
	SetObjectMaterial(Textura, 0, 16070, "des_stownmain1", "des_brick1", -1);
	CreateDynamicObject(11459, 1595.99487, -2159.38843, 12.53596,   0.00000, 0.00000, 88.81885);
	CreateDynamicObject(11459, 1608.01074, -2159.65088, 15.40982,   0.00000, 0.00000, 89.49216);
	CreateDynamicObject(11459, 1600.11023, -2159.54761, 15.42549,   0.00000, 0.00000, 89.07381);
	CreateDynamicObject(19366, 1591.49670, -2172.21094, 14.24875,   0.00000, 0.00000, 357.88266);
	CreateDynamicObject(19366, 1591.39453, -2174.77148, 14.24875,   0.00000, 0.00000, 357.88266);
	Textura = CreateDynamicObject(11459, 1607.88013, -2163.01636, 18.25950,   0.00000, 0.00000, 359.65756);
	SetObjectMaterial(Textura, 0, 16070, "des_stownmain1", "des_brick1", -1);
	CreateDynamicObject(11459, 1600.40894, -2163.00903, 18.25950,   0.00000, 0.00000, 180.08076);
	CreateDynamicObject(1440, 1600.97424, -2157.45190, 13.04984,   0.00000, 0.00000, 90.36057);
	CreateDynamicObject(3415, 1637.73315, -2172.73096, 12.54425,   0.00000, 0.00000, 181.36543);
	CreateDynamicObject(12957, 1595.10962, -2118.61621, 16.76161,   0.00000, 0.00000, 297.21097);
	CreateDynamicObject(1432, 1612.96680, -2109.11450, 19.60347,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1670, 1612.99573, -2109.28101, 20.23211,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2096, 1596.75769, -2146.14429, 15.43199,   0.00000, 0.00000, 113.62296);
	CreateDynamicObject(1474, 1595.33032, -2140.15820, 13.97730,   0.00000, 0.00000, 99.46394);
	CreateDynamicObject(1437, 1590.85852, -2161.07568, 11.10907,   23.82002, 1.43999, 89.71574);
	CreateDynamicObject(1437, 1594.93872, -2161.10669, 13.86469,   23.82002, 1.43999, 89.71574);
	CreateDynamicObject(19439, 1623.45642, -2159.93359, 15.81036,   -179.34012, 90.36012, 271.21829);
	CreateDynamicObject(19439, 1625.79871, -2156.65332, 15.79041,   -179.34012, 90.36012, 181.57033);
	CreateDynamicObject(19439, 1614.00684, -2160.91919, 18.16244,   -180.18001, 98.64011, 92.56479);
	CreateDynamicObject(19439, 1617.02148, -2160.27588, 15.76190,   -179.82010, 90.36012, 90.40891);
	CreateDynamicObject(1432, 1593.77502, -2168.55859, 15.51989,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1670, 1593.68506, -2168.45044, 16.16631,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19439, 1617.02136, -2151.18457, 15.80214,   -179.82010, 90.36012, 92.56479);
	CreateDynamicObject(1449, 1621.83398, -2123.96899, 15.60145,   74.40005, 163.74002, 286.90701);
	CreateDynamicObject(18659, 1598.02917, -2162.56299, 20.13318,   5.33997, 3.54003, 0.00000);
	CreateDynamicObject(18663, 1637.77832, -2158.02173, 14.27664,   -3.36000, 1.86000, 182.51271);
	CreateDynamicObject(18662, 1640.65527, -2093.10547, 18.48678,   -24.72000, 1.62000, 311.28915);
	CreateDynamicObject(11426, 1655.20422, -2140.96924, 12.52722,   0.00000, 0.00000, 359.98160);
	CreateDynamicObject(11426, 1655.21204, -2131.89209, 12.52722,   0.00000, 0.06000, 359.98160);
	Textura = CreateDynamicObject(11459, 1653.65039, -2124.44458, 12.54017,   0.00000, 0.00000, 270.36298);
	SetObjectMaterial(Textura, 0, 16070, "des_stownmain1", "des_brick1", -1);
	CreateDynamicObject(11459, 1647.43176, -2130.29688, 12.54017,   0.00000, 0.00000, 90.11827);
	CreateDynamicObject(11426, 1649.03406, -2137.77686, 12.52722,   0.00000, 0.00000, 180.11610);
	Textura = CreateDynamicObject(11459, 1647.53284, -2145.37793, 12.54017,   0.00000, 0.00000, 270.36298);
	SetObjectMaterial(Textura, 0, 16070, "des_stownmain1", "des_brick1", -1);
	CreateDynamicObject(11426, 1639.78577, -2133.88770, 12.52722,   0.00000, 0.00000, 0.49902);
	CreateDynamicObject(11459, 1638.34839, -2141.27173, 12.54017,   0.00000, 0.00000, 270.04083);
	CreateDynamicObject(11426, 1645.87244, -2122.80688, 12.52722,   0.00000, 0.00000, 359.89072);
	CreateDynamicObject(19372, 1643.88855, -2149.42603, 14.18073,   0.00000, 0.00000, 89.91051);
	CreateDynamicObject(11426, 1638.42822, -2147.01855, 12.52722,   0.00000, 0.00000, 269.69043);
	Textura = CreateDynamicObject(11459, 1639.72095, -2124.83423, 12.54017,   0.00000, 0.00000, 0.29167);
	SetObjectMaterial(Textura, 0, 16070, "des_stownmain1", "des_brick1", -1);
	CreateDynamicObject(11459, 1656.56750, -2150.37158, 12.54017,   0.00000, 0.00000, 179.93259);
	CreateDynamicObject(11426, 1633.75452, -2135.02246, 12.52722,   0.00000, 0.00000, 180.11610);
	CreateDynamicObject(19372, 1643.01355, -2118.95459, 14.18073,   0.00000, 0.00000, 89.91051);
	CreateDynamicObject(11426, 1652.28735, -2118.61963, 12.52272,   0.00000, 0.00000, 89.88715);
	CreateDynamicObject(19372, 1652.71436, -2143.65576, 13.72720,   0.00000, 0.00000, 89.91051);
	CreateDynamicObject(19372, 1657.38794, -2128.06641, 14.18073,   0.00000, 0.00000, 89.91051);
	CreateDynamicObject(19372, 1648.24780, -2126.38550, 14.18073,   0.00000, 0.00000, 359.99411);
	Textura = CreateDynamicObject(11459, 1632.30090, -2127.69385, 12.54017,   0.00000, 0.00000, 90.11827);
	SetObjectMaterial(Textura, 0, 16070, "des_stownmain1", "des_brick1", -1);
	CreateDynamicObject(11459, 1632.22473, -2121.65527, 12.54017,   0.00000, 0.00000, 270.36298);
	CreateDynamicObject(19372, 1636.48657, -2119.45190, 13.94198,   0.00000, 0.00000, 89.91051);
	CreateDynamicObject(19372, 1643.68262, -2132.46094, 13.92917,   0.00000, 0.00000, 89.91051);
	CreateDynamicObject(19372, 1642.16125, -2143.47974, 13.92598,   0.00000, 0.00000, 89.91051);
	Textura = CreateDynamicObject(11459, 1629.94849, -2142.32031, 12.54017,   0.00000, 0.00000, 226.20827);
	SetObjectMaterial(Textura, 0, 16070, "des_stownmain1", "des_brick1", -1);
	CreateDynamicObject(19372, 1631.15100, -2146.47681, 13.92598,   0.00000, 0.00000, 45.99052);
	CreateDynamicObject(19372, 1627.79675, -2125.31055, 13.94198,   0.00000, 0.00000, 80.02738);
	CreateDynamicObject(19372, 1623.61414, -2150.12476, 13.77793,   0.00000, 0.00000, 92.53290);
	CreateDynamicObject(19372, 1632.76709, -2153.73560, 13.62861,   0.00000, 0.00000, 90.98085);
	CreateDynamicObject(19372, 1632.38416, -2163.08008, 13.90803,   0.00000, 0.00000, 93.36282);
	CreateDynamicObject(19372, 1617.62952, -2163.29175, 14.19802,   0.00000, 0.00000, 91.21001);
	CreateDynamicObject(19372, 1616.40369, -2145.11523, 14.04283,   0.00000, 0.00000, 90.98085);
	CreateDynamicObject(1294, 1617.29700, -2120.36133, 17.39622,   0.00000, 0.00000, 317.13052);
	CreateDynamicObject(1294, 1604.22693, -2130.15967, 16.94133,   0.00000, 0.00000, 187.97992);
	CreateDynamicObject(18667, 1644.83765, -2143.00171, 14.22229,   11.40000, 0.60000, 270.89999);
	CreateDynamicObject(18661, 1642.09302, -2126.01636, 14.51607,   5.34000, 1.44000, 180.42809);
	CreateDynamicObject(18665, 1655.07898, -2135.89697, 14.44137,   -22.02000, 1.73999, 90.61730);
	CreateDynamicObject(18663, 1656.32800, -2118.59717, 14.27664,   -3.36000, 1.86000, 182.51271);
	CreateDynamicObject(18660, 1632.07922, -2119.30029, 14.45194,   3.36000, 1.74000, 270.51535);
	CreateDynamicObject(18659, 1627.88977, -2143.61719, 14.47626,   11.94000, 1.74000, 45.89664);
	CreateDynamicObject(1474, 1630.64563, -2135.50586, 13.97730,   0.00000, 0.00000, 270.53564);
	CreateDynamicObject(1475, 1651.57080, -2115.40430, 14.04996,   0.00000, 0.00000, 180.60278);
	CreateDynamicObject(1475, 1646.04358, -2138.36914, 14.02293,   0.00000, 0.00000, 269.97961);
	CreateDynamicObject(1437, 1645.20203, -2141.03760, 11.11226,   -5.69999, -2.40001, 268.85382);
	CreateDynamicObject(19439, 1613.16846, -2155.14429, 15.64244,   -179.82010, 90.36012, -0.01522);
	CreateDynamicObject(11459, 1652.31238, -2141.34131, 15.41748,   0.00000, 0.00000, 270.05185);
	Textura = CreateDynamicObject(11459, 1652.29785, -2146.96094, 15.37444,   0.00000, 0.00000, 90.11827);
	SetObjectMaterial(Textura, 0, 16070, "des_stownmain1", "des_brick1", -1);
	CreateDynamicObject(11459, 1651.43433, -2124.45532, 15.42715,   0.00000, 0.00000, 180.96375);
	Textura = CreateDynamicObject(11459, 1641.43481, -2144.41895, 15.45513,   0.00000, 0.00000, 90.11827);
	SetObjectMaterial(Textura, 0, 16070, "des_stownmain1", "des_brick1", -1);
	CreateDynamicObject(3302, 1645.69861, -2136.54199, 15.84009,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3302, 1643.69116, -2136.52539, 15.84009,   0.00000, 0.12000, 0.00000);
	CreateDynamicObject(3302, 1642.58496, -2136.49561, 15.98574,   0.06000, 7.74000, 0.00000);
	CreateDynamicObject(3302, 1644.07410, -2141.04736, 15.84009,   0.00000, 0.12000, 0.00000);
	CreateDynamicObject(3302, 1645.68359, -2134.08008, 15.74904,   -0.84000, 0.36000, 0.00000);
	CreateDynamicObject(3302, 1644.15710, -2134.15259, 15.75987,   -1.80000, 0.00000, 0.00000);
	CreateDynamicObject(3302, 1642.67480, -2133.97876, 15.98574,   0.06000, 7.74000, 0.00000);
	CreateDynamicObject(3302, 1642.73303, -2141.07251, 15.78011,   0.00000, 0.12000, 0.00000);
	CreateDynamicObject(3302, 1647.20288, -2142.47998, 15.92294,   1.68000, -7.80000, 88.76640);
	CreateDynamicObject(1413, 1639.44592, -2119.11865, 13.91303,   0.00000, 0.00000, 184.85124);
	CreateDynamicObject(11459, 1644.23511, -2128.19336, 15.37455,   0.00000, 0.00000, 90.11827);
	Textura = CreateDynamicObject(11459, 1652.26831, -2132.75708, 15.39441,   0.00000, 0.00000, 90.11827);
	SetObjectMaterial(Textura, 0, 16070, "des_stownmain1", "des_brick1", -1);
	CreateDynamicObject(11459, 1633.81128, -2139.36597, 15.45513,   0.00000, 0.00000, 1.56598);
	Textura = CreateDynamicObject(11459, 1634.53918, -2123.99170, 15.39224,   0.00000, 0.00000, 90.11827);
	SetObjectMaterial(Textura, 0, 16070, "des_stownmain1", "des_brick1", -1);
	CreateDynamicObject(11459, 1636.01624, -2131.46582, 15.35896,   0.00000, 0.00000, 235.58910);
	Textura = CreateDynamicObject(11459, 1643.52893, -2137.38208, 15.41748,   0.00000, 0.00000, 259.18420);
	SetObjectMaterial(Textura, 0, 16070, "des_stownmain1", "des_brick1", -1);
	CreateDynamicObject(19439, 1639.24097, -2138.36108, 15.79743,   -176.40021, 90.42012, 0.01703);
	CreateDynamicObject(19439, 1652.25891, -2137.25073, 15.81042,   -179.34012, 90.36012, 270.74133);
	CreateDynamicObject(19439, 1652.15344, -2129.46509, 15.71211,   -179.34012, 90.36012, 270.74133);
	CreateDynamicObject(19439, 1639.18237, -2129.44629, 15.62452,   -182.99997, 89.94015, 1.73302);
	CreateDynamicObject(19372, 1635.91553, -2135.52905, 16.75073,   0.00000, 0.00000, 180.02545);
	CreateDynamicObject(19439, 1637.87305, -2144.10425, 15.58757,   -178.44014, 92.64008, 0.01703);
	CreateDynamicObject(850, 1644.18750, -2128.57324, 18.31611,   0.00000, 0.00000, -26.58000);
	CreateDynamicObject(850, 1650.44751, -2147.30420, 18.31611,   0.00000, 0.00000, -26.58000);
	CreateDynamicObject(1327, 1649.31689, -2133.09131, 18.29851,   14.82002, 103.44006, 26.45680);
	CreateDynamicObject(19439, 1613.38281, -2175.54932, 15.48258,   -179.82010, 90.36012, -0.01522);
	CreateDynamicObject(19439, 1615.39587, -2175.59375, 15.50255,   -179.82010, 90.36012, -0.01522);
	CreateDynamicObject(19439, 1617.69140, -2175.61570, 15.52360,   -179.82010, 90.36012, -0.01522);
	CreateDynamicObject(1440, 1635.35840, -2123.54346, 18.78001,   0.00000, 0.00000, 201.10167);
	CreateDynamicObject(1440, 1640.28870, -2144.16602, 18.78001,   0.00000, 0.00000, 201.10167);
	CreateDynamicObject(18667, 1653.82251, -2124.69824, 17.13652,   -33.53995, -1.32000, 0.81769);
	CreateDynamicObject(1265, 1656.76038, -2120.09351, 13.01031,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1265, 1656.70532, -2119.21021, 13.01031,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1265, 1630.90942, -2141.34570, 15.68649,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1265, 1630.94275, -2142.35742, 15.68649,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1439, 1647.08704, -2166.15112, 12.61186,   0.00000, 0.00000, 270.54608);
	CreateDynamicObject(18661, 1640.35205, -2146.79980, 17.38565,   23.93999, 1.08000, 90.31322);
	CreateDynamicObject(1349, 1598.83093, -2116.79541, 19.38826,   0.00000, 0.00000, 150.13782);
	CreateDynamicObject(679, 1611.61548, -2146.02930, 12.55302,   0.00000, 0.00000, 329.72894);
	CreateDynamicObject(692, 1615.23669, -2115.03784, 15.18691,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(692, 1613.90649, -2114.94775, 15.18691,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(692, 1614.39880, -2115.82544, 15.05510,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(747, 1601.82153, -2129.58057, 12.97075,   -19.01998, -18.12006, 0.00000);
	CreateDynamicObject(759, 1611.63635, -2145.55078, 11.80538,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(759, 1637.25793, -2097.35913, 15.68770,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1349, 1664.14319, -2167.84497, 13.08761,   0.00000, 0.00000, 149.73344);
	CreateDynamicObject(756, 1667.39392, -2157.54199, 12.56929,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(756, 1668.15466, -2157.59424, 12.56929,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1219, 1650.79297, -2175.03711, 12.44487,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1224, 1650.59143, -2175.00610, 13.23940,   0.00000, 0.00000, 332.18036);
	CreateDynamicObject(1224, 1652.27246, -2175.00659, 13.17610,   2.10000, 9.48000, 0.00000);
	CreateDynamicObject(1224, 1651.48743, -2175.13794, 14.39651,   0.00000, 0.00000, 8.02065);
	CreateDynamicObject(18659, 1620.97681, -2164.86890, 16.71527,   11.82000, 2.88000, 179.72270);
	CreateDynamicObject(18666, 1630.72107, -2162.11987, 17.15436,   3.90000, -1.68000, -88.68001);
	CreateDynamicObject(1437, 1644.31763, -2117.50854, 11.20163,   -5.69999, -2.40001, 178.32474);
	CreateDynamicObject(1437, 1629.95947, -2132.68530, 11.20163,   -5.69999, -2.40001, 271.19910);
	CreateDynamicObject(1437, 1658.30188, -2155.71265, 10.90273,   -5.69999, -2.40001, 355.81390);
	CreateDynamicObject(1338, 1599.91370, -2147.86426, 13.23821,   0.00000, 0.00000, 322.30685);
	CreateDynamicObject(1441, 1654.27661, -2117.85742, 16.08320,   0.00000, 0.00000, 152.17532);
	CreateDynamicObject(1572, 1616.37109, -2127.68628, 13.07296,   0.00000, 0.00000, 226.84360);
	CreateDynamicObject(924, 1624.57874, -2149.57178, 12.69327,   0.00000, 0.00000, 18.42786);
	CreateDynamicObject(924, 1624.33752, -2149.00879, 12.86046,   -14.04001, 9.60000, 59.05508);
	CreateDynamicObject(1265, 1631.96338, -2153.11597, 12.76747,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1265, 1632.89819, -2153.18945, 12.76747,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1265, 1632.03516, -2152.26294, 12.76747,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1265, 1632.25391, -2152.87671, 13.14664,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1349, 1610.12744, -2149.15210, 13.10683,   0.00000, 0.00000, -53.52000);
	CreateDynamicObject(1265, 1610.29126, -2149.19995, 13.44926,   0.00000, 0.00000, 76.64393);
	CreateDynamicObject(1265, 1610.41736, -2149.51782, 13.84918,   0.00000, 0.00000, 76.64393);
	CreateDynamicObject(1265, 1610.08643, -2148.94385, 13.84918,   0.00000, 0.00000, 76.64393);
	CreateDynamicObject(2671, 1604.26160, -2168.51050, 12.59196,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2672, 1603.95972, -2168.29004, 12.83100,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1438, 1605.04260, -2170.67993, 12.53538,   0.00000, 0.00000, 20.78330);
	CreateDynamicObject(923, 1631.43762, -2172.68457, 16.59693,   0.00000, 0.00000, 66.87695);
	CreateDynamicObject(923, 1632.17432, -2173.75757, 16.49814,   0.00000, 0.00000, 43.20970);
	CreateDynamicObject(1265, 1606.00879, -2120.53760, 15.44567,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1265, 1605.28821, -2121.05249, 15.45538,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1265, 1606.10461, -2121.27979, 15.26279,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1265, 1606.81897, -2120.87427, 15.19256,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1265, 1605.37427, -2121.65088, 15.15640,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1265, 1606.31836, -2120.85938, 15.65358,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1265, 1605.47070, -2121.22168, 15.65358,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2671, 1609.43250, -2131.97900, 12.56216,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2672, 1649.12219, -2114.89795, 12.82607,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2670, 1648.04602, -2115.21460, 12.68957,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1448, 1646.49768, -2118.10474, 12.60396,   0.00000, 0.00000, 330.52243);
	CreateDynamicObject(1265, 1646.50952, -2117.98340, 13.09257,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1265, 1645.66382, -2117.82642, 12.95782,   -2.88000, -9.72000, 0.00000);
	CreateDynamicObject(1265, 1645.83337, -2117.95093, 13.43990,   -1.20000, -16.14000, 0.00000);
	CreateDynamicObject(928, 1606.87537, -2120.30420, 15.42841,   28.56002, 11.22001, 0.00000);
	CreateDynamicObject(3632, 1591.93970, -2175.88257, 13.03646,   0.00000, 0.00000, -136.49997);
	CreateDynamicObject(3632, 1591.97852, -2175.20288, 13.03646,   0.00000, 0.00000, -136.49997);
	CreateDynamicObject(3632, 1592.48547, -2175.52344, 13.03645,   0.00000, 0.00000, -136.49997);
	CreateDynamicObject(2654, 1592.05310, -2175.48584, 13.71823,   0.00000, 0.00000, 25.03427);
	CreateDynamicObject(1362, 1604.28210, -2130.65430, 13.11975,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1431, 1600.83862, -2164.52881, 21.64005,   0.00000, 0.00000, 346.93268);
	CreateDynamicObject(1448, 1616.54102, -2127.68579, 12.81900,   0.00000, 0.00000, 146.49939);
	CreateDynamicObject(1448, 1616.65222, -2127.83765, 12.94766,   0.00000, 0.00000, 95.09274);
	CreateDynamicObject(1265, 1616.63770, -2127.79590, 13.39451,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1265, 1593.46594, -2136.22485, 13.07319,   9.54000, -0.48000, 0.00000);
	CreateDynamicObject(1265, 1592.66248, -2136.42236, 13.07319,   9.54000, -0.48000, 0.00000);
	CreateDynamicObject(1265, 1593.22754, -2136.35645, 13.51866,   9.54000, -0.48000, 0.00000);
	CreateDynamicObject(1362, 1634.44116, -2137.93066, 18.90028,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1362, 1633.67029, -2137.96704, 18.90028,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1362, 1634.08411, -2137.17773, 18.90028,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11459, 1670.52588, -2120.74365, 12.54490,   0.00000, 0.00000, 720.66321);
	CreateDynamicObject(11426, 1661.31580, -2139.86890, 12.52720,   0.00000, 0.06000, 0.00000);
	CreateDynamicObject(11457, 1665.01086, -2148.44458, 12.00410,   0.00000, 0.00000, 88.02000);
	CreateDynamicObject(11459, 1674.66016, -2139.61206, 12.54140,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(11459, 1668.60889, -2136.37183, 12.54140,   0.00000, 0.00000, 360.00000);
	CreateDynamicObject(11426, 1676.27930, -2133.21802, 12.52720,   0.00000, 0.06000, 180.00000);
	CreateDynamicObject(11426, 1664.29309, -2119.18213, 12.52720,   0.00000, 0.06000, 90.24000);
	CreateDynamicObject(11426, 1662.49792, -2128.88647, 12.52720,   0.00000, 0.06000, 0.00000);
	CreateDynamicObject(11459, 1670.79431, -2128.68579, 12.54140,   0.00000, 0.00000, -90.95996);
	CreateDynamicObject(11457, 1668.22095, -2104.42944, 12.00410,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(11459, 1661.28845, -2105.35718, 12.54490,   0.00000, 0.00000, 900.48340);
	CreateDynamicObject(11426, 1673.14026, -2095.96216, 12.52720,   0.00000, 0.06000, 0.00000);
	CreateDynamicObject(11426, 1661.31104, -2085.84253, 12.52720,   0.00000, 0.06000, 0.00000);
	CreateDynamicObject(11459, 1687.12976, -2082.34692, 12.54490,   0.00000, 0.00000, 811.14368);
	CreateDynamicObject(11459, 1675.38684, -2087.00562, 12.54490,   0.00000, 0.00000, 811.14368);
	CreateDynamicObject(11426, 1677.10510, -2079.83179, 12.52720,   0.00000, 0.06000, -90.00000);
	CreateDynamicObject(11426, 1669.50659, -2079.86230, 12.52720,   0.00000, 0.06000, -90.00000);
	CreateDynamicObject(11459, 1666.89063, -2141.51123, 15.39440,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(11459, 1676.26978, -2138.10986, 15.39440,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11459, 1672.48120, -2130.30298, 15.39440,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(11459, 1665.67017, -2133.15894, 15.39440,   0.00000, 0.00000, 47.15994);
	CreateDynamicObject(11459, 1664.63745, -2122.78931, 15.39440,   0.00000, 0.00000, 1.14000);
	CreateDynamicObject(11459, 1664.44885, -2104.78784, 15.39440,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(11459, 1673.47925, -2100.93701, 15.39440,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(11459, 1673.39612, -2098.05298, 15.43440,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11459, 1664.60815, -2082.43286, 15.43440,   0.00000, 0.00000, 311.75995);
	CreateDynamicObject(11459, 1675.37964, -2083.78125, 15.43440,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1440, 1663.34033, -2122.33203, 13.03887,   0.00000, 0.00000, 181.30170);
	CreateDynamicObject(1441, 1672.44348, -2108.17627, 13.25909,   0.00000, 0.00000, 152.17532);
	CreateDynamicObject(759, 1667.24683, -2084.01563, 11.80538,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(759, 1676.47083, -2127.74316, 11.80538,   0.00000, 0.00000, -8.52000);
	CreateDynamicObject(850, 1665.89038, -2133.15112, 18.35578,   0.00000, 0.00000, -26.58000);
	CreateDynamicObject(1440, 1672.58264, -2147.11719, 18.58946,   0.00000, 0.00000, 201.10167);
	CreateDynamicObject(1431, 1666.94336, -2098.08350, 18.61689,   0.00000, 0.00000, 311.83264);
	CreateDynamicObject(1327, 1674.93823, -2100.08154, 18.56856,   21.12001, 111.30001, -104.88001);
	CreateDynamicObject(17969, 1675.84814, -2101.09131, 17.14520,   0.00000, 0.00000, 0.18000);
	CreateDynamicObject(17969, 1678.64331, -2137.77173, 17.14520,   0.00000, 180.00000, 0.18000);
	CreateDynamicObject(1362, 1666.47217, -2090.45142, 13.18242,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1338, 1667.85583, -2144.60571, 13.22706,   0.00000, 0.00000, 322.30685);
	CreateDynamicObject(1308, 1672.67041, -2124.65039, 8.48392,   356.85840, 0.00000, -1.57080);
	
//=================================BARRIO LA PLAZITA============================
	Textura = CreateDynamicObject(19504, 2278.09546, -1774.69629, 15.43250,   0.00000, 0.00000, -90.00010);
	SetDynamicObjectMaterial(Textura, 0, 19370, "all_walls", "mp_shop_floor2", -1);
	Textura = CreateDynamicObject(19504, 2247.80811, -1820.25842, 15.43250,   0.00000, 0.00000, 90.23990);
	SetDynamicObjectMaterial(Textura, 0, 19370, "all_walls", "mp_shop_floor2", -1);
	Textura = CreateDynamicObject(19504, 2322.00293, -1809.85327, 15.43250,   0.00000, 0.00000, 90.29990);
	SetDynamicObjectMaterial(Textura, 0, 19370, "all_walls", "mp_shop_floor2", -1);
	Textura = CreateDynamicObject(19504, 2386.93384, -1775.40771, 15.43250,   0.00000, 0.00000, -90.00000);
	SetDynamicObjectMaterial(Textura, 0, 19370, "all_walls", "mp_shop_floor2", -1);

	Textura = CreateDynamicObject(19496, 2249.82739, -1771.27979, 16.94390,   0.00000, 0.00000, 180.00000);
	SetDynamicObjectMaterial(Textura, 6, 19370, "all_walls", "mp_shop_floor2", -1);
	Textura = CreateDynamicObject(19496, 2248.66235, -1788.32837, 16.94390,   0.00000, 0.00000, 360.60001);
	SetDynamicObjectMaterial(Textura, 6, 19370, "all_walls", "mp_shop_floor2", -1);
	Textura = CreateDynamicObject(19494, 2393.32813, -1810.03381, 17.26390,   0.00000, 0.00000, -90.00000);
	SetDynamicObjectMaterial(Textura, 6, 19370, "all_walls", "mp_shop_floor2", -1);
	Textura = CreateDynamicObject(19494, 2276.29419, -1823.21631, 17.26390,   0.00000, 0.00000, 360.00000);
	SetDynamicObjectMaterial(Textura, 6, 19370, "all_walls", "mp_shop_floor2", -1);
	Textura = CreateDynamicObject(19496, 2312.78760, -1772.70996, 17.07710,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(Textura, 6, 19370, "all_walls", "mp_shop_floor2", -1);
	Textura = CreateDynamicObject(19494, 2321.57935, -1787.88232, 17.26390,   0.00000, 0.00000, 0.00030);
	SetDynamicObjectMaterial(Textura, 6, 19370, "all_walls", "mp_shop_floor2", -1);

	Textura = CreateDynamicObject(19492, 2287.59937, -1799.31384, 17.37180,   0.00000, 0.00000, 180.24001);
	SetDynamicObjectMaterial(Textura, 0, 19370, "all_walls", "mp_shop_floor2", -1);
	SetDynamicObjectMaterial(Textura, 3, 19370, "all_walls", "mp_shop_floor2", -1);
	Textura = CreateDynamicObject(19492, 2380.83398, -1799.27051, 17.37180,   0.00000, 0.00000, 180.00000);
	SetDynamicObjectMaterial(Textura, 0, 19370, "all_walls", "mp_shop_floor2", -1);
	SetDynamicObjectMaterial(Textura, 3, 19370, "all_walls", "mp_shop_floor2", -1);

	Textura = CreateDynamicObject(19491, 2287.59937, -1799.31384, 17.37180,   0.00000, 0.00000, 180.23999);
	SetDynamicObjectMaterial(Textura, 0, 19495, "boxhses_sfsx", "ws_blocks_red_1", -1);
	SetDynamicObjectMaterial(Textura, 1, 18764, "concretebits", "StoneWallTile1-3", 0xFFFFA07A);
	Textura = CreateDynamicObject(19491, 2380.83398, -1799.27051, 17.37180,   0.00000, 0.00000, 180.00000);
	SetDynamicObjectMaterial(Textura, 0, 19495, "boxhses_sfsx", "ws_blocks_red_1", -1);
	SetDynamicObjectMaterial(Textura, 1, 18764, "concretebits", "StoneWallTile1-3", 0xFFD8BFD8);

	Textura = CreateDynamicObject(19493, 2321.57935, -1787.88232, 17.26390,   0.00000, 0.00000, 0.00027);
	SetDynamicObjectMaterial(Textura, 1, 18764, "boxhses_sfsx", "LAcreamwall1", 0xFFF0E68C);

	Textura = CreateDynamicObject(19495, 2248.66235, -1788.32837, 16.94390,   0.00000, 0.00000, 360.60004);
	SetDynamicObjectMaterial(Textura, 0, 19495, "boxhses_sfsx", "LAgreenwall", 0xFFB22222);
	CreateDynamicObject(19495, 2249.82739, -1771.27979, 16.94390,   0.00000, 0.00000, 180.00000);
	Textura = CreateDynamicObject(19495, 2312.78760, -1772.70996, 17.07706,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(Textura, 0, 19495, "boxhses_sfsx", "LAcreamwall1", 0xFF87B9CC);

	CreateDynamicObject(8650, 2281.23950, -1811.57800, 12.53810,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(8650, 2296.87598, -1814.89478, 12.53810,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8650, 2318.40918, -1778.09546, 12.53810,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(8650, 2244.48242, -1782.97998, 12.54550,   0.00000, 0.00000, 90.60000);
	CreateDynamicObject(8650, 2260.12158, -1791.22656, 12.53810,   0.00000, 0.00000, 0.00000);

	CreateDynamicObject(9823, 2331.32129, -1801.32336, 13.32017,   0.00000, 0.00000, 180.29900);
	CreateDynamicObject(9823, 2257.13354, -1811.73596, 13.32017,   0.00000, 0.00000, 180.17900);
	CreateDynamicObject(9823, 2268.73535, -1783.17749, 13.32017,   0.00000, 0.00000, 359.99890);
	CreateDynamicObject(9823, 2377.58740, -1783.95605, 13.32020,   0.00000, 0.00000, 0.00000);

	CreateDynamicObject(19503, 2278.09546, -1774.69629, 15.43250,   0.00000, 0.00000, -90.00010);
	CreateDynamicObject(19503, 2247.80811, -1820.25842, 15.43250,   0.00000, 0.00000, 90.23989);
	CreateDynamicObject(19493, 2276.29419, -1823.21631, 17.26390,   0.00000, 0.00000, 360.00000);
	CreateDynamicObject(19503, 2322.00293, -1809.85327, 15.43250,   0.00000, 0.00000, 90.29994);
	CreateDynamicObject(1408, 2260.64526, -1831.94580, 13.15630,   3.14160, 0.00870, 89.93999);
	CreateDynamicObject(1408, 2260.64502, -1825.87378, 13.15630,   3.14160, 0.00870, 89.93999);
	CreateDynamicObject(1408, 2334.42017, -1762.08215, 13.15630,   3.14160, 0.00870, 90.42000);
	CreateDynamicObject(1408, 2334.32031, -1786.36475, 13.15630,   0.00000, 0.00000, 90.30000);
	CreateDynamicObject(1408, 2334.36011, -1791.61755, 13.15630,   0.00000, 0.00000, 90.30000);
	CreateDynamicObject(645, 2239.70825, -1777.62268, 12.11719,   3.14159, 0.00000, 2.44346);
	CreateDynamicObject(19325, 2331.16431, -1816.28088, 12.76032,   90.00000, 0.00000, 0.29900);
	CreateDynamicObject(19325, 2331.14917, -1820.40869, 12.76032,   90.00000, 0.00000, 0.29900);
	CreateDynamicObject(19325, 2328.14185, -1822.77417, 12.76032,   90.00000, 0.00000, -89.70099);
	CreateDynamicObject(19325, 2321.42236, -1822.82019, 12.76032,   90.00000, 0.00000, -89.70099);
	CreateDynamicObject(19325, 2314.06006, -1818.04797, 12.76032,   90.00000, 0.00000, -179.82100);
	CreateDynamicObject(19325, 2314.03271, -1809.80859, 12.76032,   90.00000, 0.00000, -179.82100);
	CreateDynamicObject(19325, 2253.90698, -1833.17529, 12.76032,   90.00000, 0.00000, -89.70100);
	CreateDynamicObject(19325, 2246.69263, -1833.21643, 12.76032,   90.00000, 0.00000, -89.76100);
	CreateDynamicObject(19325, 2256.94751, -1830.77246, 12.76032,   90.00000, 0.00000, 0.17898);
	CreateDynamicObject(19325, 2256.93091, -1826.79858, 12.76032,   90.00000, 0.00000, -0.18102);
	CreateDynamicObject(19325, 2239.88525, -1828.80688, 12.76032,   90.00000, 0.00000, -179.76094);
	CreateDynamicObject(19325, 2239.80737, -1820.56421, 12.76032,   90.00000, 0.00000, -179.76094);
	CreateDynamicObject(19325, 2268.99512, -1768.19971, 12.76032,   90.00000, 0.00000, -0.54102);
	CreateDynamicObject(19325, 2268.98047, -1763.82959, 12.76032,   90.00000, 0.00000, -0.54102);
	CreateDynamicObject(19325, 2279.09814, -1761.74744, 12.76032,   90.00000, 0.00000, 89.99898);
	CreateDynamicObject(19325, 2286.08667, -1766.27100, 12.76032,   90.00000, 0.00000, 179.81905);
	CreateDynamicObject(19325, 2286.06665, -1774.89124, 12.76032,   90.00000, 0.00000, 179.81905);
	CreateDynamicObject(19325, 2272.09229, -1761.73926, 12.76032,   90.00000, 0.00000, 89.99898);
	CreateDynamicObject(1245, 2261.67041, -1833.43457, 12.91219,   0.00000, 0.00000, 91.20003);
	CreateDynamicObject(1226, 2373.25684, -1759.88574, 16.42969,   356.90317, 0.05173, 1.12921);
	CreateDynamicObject(1226, 2403.10400, -1792.69983, 16.39060,   0.00000, 0.00000, 92.45999);
	CreateDynamicObject(19493, 2393.32813, -1810.03381, 17.26390,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1408, 2400.30737, -1799.89832, 13.15630,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1408, 2397.61987, -1802.61340, 13.15630,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1408, 2378.16187, -1812.78992, 13.15630,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1408, 2386.23999, -1815.72058, 13.15630,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1408, 2257.64478, -1775.87927, 13.15630,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1408, 2380.82373, -1815.73279, 13.15630,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1408, 2378.17627, -1807.22009, 13.15630,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1432, 2381.33691, -1812.75281, 12.65808,   0.00000, 0.00000, 66.42000);
	CreateDynamicObject(1255, 2385.54688, -1813.87512, 13.07680,   0.00000, 0.00000, -229.31996);
	CreateDynamicObject(1255, 2387.08838, -1812.08411, 13.11656,   0.00000, 0.00000, -207.60007);
	CreateDynamicObject(19355, 2382.17041, -1794.33557, 14.25200,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 2385.31030, -1794.33557, 14.25200,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19325, 2394.95801, -1766.69238, 12.76030,   90.00000, 0.00000, 0.24001);
	CreateDynamicObject(984, 2339.66626, -1765.74878, 13.18250,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(984, 2339.66626, -1791.26379, 13.18500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 2339.66626, -1775.34399, 13.22250,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 2367.76880, -1782.74133, 13.16500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 2364.56860, -1765.77930, 13.22250,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(984, 2367.76880, -1773.58142, 13.18250,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1281, 2364.69312, -1768.87488, 13.39921,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1280, 2360.32153, -1765.78979, 12.95650,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1368, 2352.58032, -1765.16772, 13.22066,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(814, 2343.20557, -1777.21277, 14.36334,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(824, 2365.25903, -1778.09985, 13.45238,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9833, 2351.96460, -1775.83179, 15.55372,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3515, 2352.48926, -1775.88843, 11.70772,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(806, 2358.83789, -1761.16602, 15.51847,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(647, 2352.33765, -1762.31946, 13.81926,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 2358.58179, -1762.02319, 13.09943,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(826, 2352.38330, -1775.62915, 12.53112,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(657, 2343.07861, -1777.73022, 12.64337,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1280, 2360.83521, -1778.79907, 12.95650,   0.00000, 0.00000, -4.38001);
	CreateDynamicObject(1280, 2344.77515, -1791.88843, 12.95650,   0.00000, 0.00000, -118.38001);
	CreateDynamicObject(1281, 2345.04077, -1762.70886, 13.39921,   0.00000, 0.00000, 46.49999);
	CreateDynamicObject(872, 2341.15308, -1768.66125, 12.94940,   0.00000, 0.00000, 136.49997);
	CreateDynamicObject(808, 2358.95728, -1772.72156, 13.65073,   0.00000, 0.00000, -5.58000);
	CreateDynamicObject(808, 2343.28906, -1818.17139, 13.65073,   0.00000, 0.00000, 83.81998);
	CreateDynamicObject(860, 2360.56641, -1780.85779, 12.52568,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1290, 2352.14063, -1769.63855, 18.33730,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1290, 2350.80664, -1794.23096, 18.33730,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1226, 2373.19556, -1789.27209, 16.39060,   0.00000, 0.00000, -1.44000);
	CreateDynamicObject(1408, 2334.42017, -1774.79944, 13.15630,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19325, 2377.81665, -1769.07922, 12.76032,   90.00000, 0.00000, -0.30100);
	CreateDynamicObject(19325, 2377.83936, -1764.51953, 12.76032,   90.00000, 0.00000, -0.30100);
	CreateDynamicObject(19325, 2381.08521, -1762.44690, 12.76030,   90.00000, 0.00000, 90.42000);
	CreateDynamicObject(19325, 2388.20532, -1762.45801, 12.76030,   90.00000, 0.00000, 89.64000);
	CreateDynamicObject(19325, 2394.92090, -1775.52539, 12.76030,   90.00000, 0.00000, 0.24001);
	CreateDynamicObject(13187, 2254.71338, -1772.86353, 13.77260,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(13187, 2243.75562, -1786.81274, 13.77260,   0.00000, -0.02000, 0.48000);
	CreateDynamicObject(13187, 2307.90283, -1771.14026, 13.91260,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(5302, 2271.65356, -1821.01245, 12.74650,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(5302, 2316.93530, -1785.68286, 12.74650,   0.00000, 0.00000, 0.14000);
	CreateDynamicObject(5302, 2395.52075, -1805.39343, 12.74650,   0.00000, 0.00000, -89.92000);
	CreateDynamicObject(19466, 2281.95801, -1823.91333, 14.05259,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3278, 2281.98901, -1820.96289, 16.92190,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(3278, 2281.96997, -1825.24951, 16.92190,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(3278, 2271.12915, -1820.96570, 16.92190,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(3278, 2271.15454, -1825.02673, 16.82210,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19466, 2271.69141, -1824.08728, 14.52384,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3278, 2281.16919, -1802.36279, 17.08890,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(3278, 2281.13965, -1797.98706, 17.08890,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(3278, 2293.66772, -1802.31140, 17.00090,   0.00000, 90.48000, 90.00000);
	CreateDynamicObject(3278, 2293.66016, -1798.52380, 17.00090,   0.00000, 90.48000, 90.00000);
	CreateDynamicObject(19466, 2281.16675, -1799.44214, 14.52384,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3278, 2254.69458, -1791.00354, 17.08890,   0.00000, 90.00000, 91.14000);
	CreateDynamicObject(3278, 2254.65039, -1785.29724, 17.08890,   0.00000, 90.00000, 90.18000);
	CreateDynamicObject(3278, 2254.65039, -1788.27722, 17.08890,   0.00000, 90.00000, 90.18000);
	CreateDynamicObject(3278, 2242.71313, -1789.70898, 17.08890,   0.00000, 90.00000, 90.18000);
	CreateDynamicObject(3278, 2243.80151, -1785.39258, 16.90789,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19325, 2254.66357, -1787.00488, 13.25040,   0.00000, 0.00000, 0.48000);
	CreateDynamicObject(3278, 2254.71484, -1774.29675, 16.43070,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3278, 2255.82983, -1769.93408, 16.93508,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(3278, 2243.86230, -1768.56641, 17.01410,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(3278, 2243.84253, -1774.24072, 17.01410,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(3278, 2243.84253, -1771.26074, 17.01410,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19325, 2243.84595, -1772.48315, 13.25040,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 2281.99390, -1821.29541, 11.72572,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 2281.15820, -1802.22815, 11.92157,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 2293.64795, -1798.89941, 12.03059,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(3278, 2316.40649, -1785.62695, 17.28074,   0.00000, 90.48000, 90.00000);
	CreateDynamicObject(3278, 2316.41748, -1789.92664, 16.68267,   0.00000, 90.48000, 90.00000);
	CreateDynamicObject(3278, 2306.80127, -1773.94141, 17.08080,   0.00000, 90.48000, 90.00000);
	CreateDynamicObject(3278, 2307.90308, -1769.75964, 16.56300,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19466, 2316.96851, -1788.57837, 14.35770,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3278, 2327.26709, -1785.63208, 17.28070,   0.00000, 90.48000, 90.00000);
	CreateDynamicObject(3278, 2327.26514, -1789.93738, 17.28070,   0.00000, 90.48000, 90.00000);
	CreateDynamicObject(19325, 2327.26831, -1785.82434, 11.72570,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19466, 2327.26538, -1788.52246, 14.11804,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 2318.76929, -1771.45593, 13.25040,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3278, 2318.79883, -1775.38269, 17.04080,   0.00000, 90.48000, 90.00000);
	CreateDynamicObject(3278, 2318.78613, -1769.75879, 17.04080,   0.00000, 90.48000, 90.00000);
	CreateDynamicObject(3278, 2318.78613, -1772.75879, 17.04080,   0.00000, 90.48000, 90.00000);
	CreateDynamicObject(3278, 2374.40405, -1802.28967, 17.14040,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(3278, 2374.37817, -1797.89624, 17.14040,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19466, 2374.40308, -1799.38989, 14.28580,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 2374.38452, -1802.13196, 11.72570,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 2386.86865, -1798.40833, 11.72570,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(3278, 2386.90112, -1802.58313, 17.14040,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(3278, 2386.88184, -1798.26306, 16.86057,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(3278, 2395.56934, -1804.87268, 17.14040,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(3278, 2391.25098, -1804.85828, 17.30040,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19466, 2392.52539, -1805.42371, 14.28580,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3278, 2395.58105, -1815.71899, 17.14040,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(3278, 2391.23193, -1815.73608, 17.30040,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19325, 2395.44214, -1815.72070, 12.09950,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19466, 2392.46265, -1815.70654, 14.11800,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1506, 2290.80518, -1802.81396, 12.54930,   0.00000, 0.00000, 90.24000);
	CreateDynamicObject(1506, 2246.70313, -1792.26855, 12.51240,   0.00000, 0.00000, 90.64000);
	CreateDynamicObject(1506, 2251.85596, -1768.86365, 12.52000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1506, 2310.77832, -1776.62354, 12.64000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1506, 2384.00488, -1802.79102, 12.50260,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3061, 2391.02393, -1807.06238, 14.30110,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3061, 2391.01001, -1815.44751, 14.06110,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3061, 2374.67139, -1797.89868, 14.04170,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3061, 2380.40332, -1795.41272, 16.59980,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3061, 2326.88721, -1791.13794, 14.10110,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3061, 2318.50171, -1791.14758, 14.30110,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3061, 2318.41284, -1776.66895, 14.12110,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3061, 2281.61475, -1826.46631, 14.08160,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3061, 2273.22388, -1826.48438, 14.30160,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3061, 2287.24731, -1794.47205, 16.62200,   0.00000, 0.00000, 180.24001);
	CreateDynamicObject(3061, 2281.40576, -1797.98816, 14.06180,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3061, 2254.32422, -1792.22266, 13.98180,   0.00000, 0.00000, 0.60000);
	CreateDynamicObject(3061, 2244.20117, -1767.33423, 13.97920,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(14720, 2374.96216, -1802.51953, 12.53750,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14535, 2382.59009, -1801.23096, 17.48700,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 2385.19409, -1798.44995, 16.55577,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1502, 2381.71362, -1796.39526, 15.42130,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19442, 2383.97681, -1798.44934, 13.63050,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19442, 2382.46191, -1798.16174, 16.55580,   0.00000, 0.00000, 68.28000);
	CreateDynamicObject(2528, 2384.64819, -1796.93970, 15.48460,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2527, 2386.19800, -1797.89490, 15.48460,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2596, 2381.87085, -1798.35291, 17.76580,   0.00000, 0.00000, -22.55999);
	CreateDynamicObject(19442, 2382.46289, -1798.16077, 13.63055,   0.00000, 0.00000, 68.28000);
	CreateDynamicObject(19369, 2385.19409, -1798.44897, 13.63050,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1703, 2376.73462, -1803.50769, 15.43559,   0.00000, 0.00000, 132.36003);
	CreateDynamicObject(1703, 2375.08081, -1801.12207, 15.43630,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19442, 2383.97681, -1798.45056, 16.55580,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1502, 2381.71362, -1796.39526, 12.56073,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1796, 2383.31348, -1800.12878, 12.42050,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1502, 2382.95752, -1798.42590, 12.56073,   0.00000, 0.00000, -56.09999);
	CreateDynamicObject(19442, 2383.89673, -1800.49683, 13.63050,   0.00000, 0.00000, 3.66000);
	CreateDynamicObject(2527, 2386.19800, -1797.89490, 12.55696,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2528, 2384.64819, -1796.93970, 12.54960,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1704, 2377.61475, -1795.50818, 12.43144,   0.00000, 0.00000, 39.00000);
	CreateDynamicObject(1704, 2379.12085, -1794.95874, 12.43144,   0.00000, 0.00000, -35.45999);
	CreateDynamicObject(1825, 2378.99927, -1800.63696, 12.53871,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14535, 2391.93262, -1768.22485, 15.30230,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 2394.90137, -1766.28162, 12.76030,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2566, 2391.33936, -1805.32104, 16.09500,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19359, 2393.93408, -1806.47937, 17.18320,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19359, 2392.24609, -1808.86157, 17.18320,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14720, 2395.98730, -1815.18250, 15.50400,   0.00000, 0.00000, -270.00000);
	CreateDynamicObject(1825, 2390.76025, -1814.12671, 15.49393,   0.00000, 0.00000, 15.24000);
	CreateDynamicObject(1703, 2396.95020, -1806.69153, 15.50970,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1703, 2394.27148, -1805.43335, 15.50970,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2311, 2395.13867, -1807.00000, 15.47420,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2576, 2389.62354, -1808.10010, 15.50360,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1502, 2389.13135, -1808.87622, 15.50520,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2911, 2391.98560, -1813.34998, 13.02734,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19432, 2393.93311, -1808.14722, 17.18320,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2001, 2397.08496, -1805.53418, 15.51830,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14720, 2312.50903, -1769.30066, 15.29700,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1797, 2314.87598, -1768.81335, 15.32300,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2527, 2318.21240, -1776.06128, 15.32220,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2528, 2316.15698, -1775.36914, 15.31390,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19432, 2315.58301, -1775.38354, 17.06560,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1502, 2315.65503, -1777.69067, 15.32020,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19359, 2317.10205, -1774.66821, 17.06560,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19359, 2312.95947, -1769.39441, 16.88895,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19359, 2317.16626, -1770.93079, 17.06560,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1502, 2313.02832, -1770.94995, 15.32020,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19432, 2315.34180, -1770.93005, 17.06560,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1825, 2317.64111, -1772.79736, 15.30429,   0.00000, 0.00000, 177.83997);
	CreateDynamicObject(1703, 2311.23999, -1776.99817, 15.31810,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1703, 2308.51978, -1776.04309, 15.31810,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14720, 2326.70898, -1785.25842, 15.48100,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19359, 2318.03638, -1788.29761, 17.21610,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2575, 2319.51196, -1785.71411, 15.87700,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19359, 2319.57764, -1786.78003, 17.21610,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1502, 2319.55908, -1783.68298, 15.47860,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2572, 2319.99072, -1790.60449, 15.48900,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1825, 2326.09277, -1791.17786, 15.50006,   0.00000, 0.00000, -21.54000);
	CreateDynamicObject(14720, 2281.76050, -1802.60034, 15.44440,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 2291.97925, -1800.98706, 17.11090,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1502, 2290.50513, -1804.11646, 15.43840,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19442, 2290.46387, -1801.79651, 17.11090,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 2290.46387, -1797.82581, 16.71509,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1502, 2290.50513, -1800.94604, 15.43840,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1703, 2283.52832, -1799.63916, 15.42700,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2297, 2281.63159, -1796.64355, 15.43270,   0.00000, 0.00000, -42.42001);
	CreateDynamicObject(1704, 2284.87109, -1798.77173, 15.42700,   0.00000, 0.00000, -136.14000);
	CreateDynamicObject(1825, 2288.77441, -1797.70752, 15.42196,   0.00000, 0.00000, -98.58000);
	CreateDynamicObject(2575, 2290.53687, -1798.92236, 15.86680,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2527, 2292.94678, -1802.57605, 15.42970,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2528, 2291.38501, -1801.57813, 15.42970,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 2290.46387, -1797.82581, 13.21600,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(1502, 2290.44434, -1799.39941, 12.53055,   0.00000, 0.00000, -77.88001);
	CreateDynamicObject(2575, 2290.53687, -1798.92236, 12.85464,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1502, 2290.44434, -1799.33118, 12.53050,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19369, 2288.84399, -1797.82581, 13.59229,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(2528, 2289.41113, -1797.94604, 12.56310,   0.00000, 0.00000, 90.72000);
	CreateDynamicObject(2527, 2289.75317, -1797.95178, 12.54960,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14720, 2281.76050, -1802.60034, 12.52540,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2296, 2284.47949, -1794.74109, 12.55970,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1702, 2285.85864, -1798.36084, 12.54275,   0.00000, 0.00000, 176.22002);
	CreateDynamicObject(1705, 2287.18018, -1798.07312, 12.54280,   0.00000, 0.00000, 198.35999);
	CreateDynamicObject(1825, 2287.41260, -1803.16089, 12.53950,   0.00000, 0.00000, -154.20000);
	CreateDynamicObject(1408, 2334.42017, -1768.46838, 13.15630,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19451, 2389.00928, -1773.63013, 14.44940,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19359, 2393.21997, -1772.52393, 14.44940,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19359, 2390.56006, -1772.52686, 14.44940,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19389, 2393.18433, -1778.54041, 14.75020,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19359, 2390.52808, -1778.53687, 14.77940,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1491, 2392.40405, -1778.55017, 13.01130,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1753, 2380.03027, -1764.36877, 13.27777,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1753, 2383.71753, -1765.81519, 13.28640,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1753, 2382.02539, -1769.23828, 13.28640,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2311, 2380.01465, -1766.83057, 13.28536,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2566, 2390.47900, -1775.12354, 13.87010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19359, 2389.97803, -1780.42065, 14.77940,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19359, 2388.46118, -1782.11157, 14.77940,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19389, 2386.85913, -1782.36096, 14.77020,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19359, 2388.46118, -1785.32227, 14.77940,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19432, 2388.46411, -1787.67151, 14.75940,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2565, 2391.06201, -1786.87708, 13.85190,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1491, 2386.08008, -1782.36963, 13.01130,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19389, 2393.09839, -1782.11267, 14.77020,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19432, 2392.38428, -1780.42065, 14.77940,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19359, 2393.09839, -1785.31714, 14.77940,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1491, 2393.11035, -1782.85510, 13.01130,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19432, 2393.09839, -1787.68420, 14.75940,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2528, 2387.88013, -1785.79431, 13.27620,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2523, 2387.85718, -1783.25366, 13.27620,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2522, 2387.89307, -1787.85718, 13.27340,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(19432, 2387.57886, -1784.91370, 14.75940,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19503, 2386.93384, -1775.40771, 15.43250,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(14720, 2281.37207, -1820.60168, 15.50410,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19359, 2272.78418, -1823.55859, 17.15800,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19359, 2274.30664, -1822.03333, 17.15800,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1502, 2274.27686, -1818.91602, 15.49030,   0.00000, 0.00000, -90.06000);
	CreateDynamicObject(2575, 2274.20288, -1820.98645, 15.88410,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1825, 2280.68115, -1826.25317, 15.48153,   0.00000, 0.00000, 92.10001);
	CreateDynamicObject(1703, 2271.76318, -1826.08484, 15.48350,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1703, 2274.61523, -1826.85681, 15.48350,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(14720, 2249.28418, -1774.68555, 15.18220,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19359, 2248.69043, -1774.58704, 16.92340,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19359, 2245.51294, -1773.05664, 16.92340,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1502, 2248.63257, -1773.02917, 15.17530,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2299, 2247.42407, -1775.11182, 15.16046,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1502, 2243.78491, -1769.36780, 15.17530,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19432, 2246.09204, -1769.43188, 16.92340,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19359, 2246.80737, -1767.91504, 16.92340,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1825, 2253.56982, -1772.25134, 15.17236,   0.00000, 0.00000, 64.20002);
	CreateDynamicObject(1753, 2254.12744, -1767.82324, 15.16220,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1753, 2251.13086, -1766.94604, 15.16220,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2527, 2245.99097, -1767.99402, 15.15562,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2528, 2244.61426, -1766.92383, 15.25290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14720, 2249.15625, -1784.95923, 15.17430,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19359, 2252.94702, -1786.52002, 16.92080,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1491, 2249.82959, -1786.53101, 15.17250,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19359, 2249.76880, -1785.00195, 16.92080,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1491, 2254.72949, -1790.12744, 15.17250,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19432, 2252.41895, -1790.13745, 16.92080,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19359, 2251.70239, -1791.65344, 16.92080,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1797, 2251.03882, -1784.38806, 15.17490,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2528, 2254.11011, -1792.65222, 15.19160,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2527, 2252.36230, -1791.68860, 15.15160,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1825, 2245.08203, -1786.60852, 15.16674,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1703, 2247.18188, -1792.65906, 15.16430,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1703, 2244.39917, -1791.87817, 15.16430,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14535, 2316.91846, -1804.33545, 15.30710,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19451, 2326.18091, 14.63380, 14.63380,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19389, 2323.81250, -1815.90942, 14.77020,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2565, 2330.44385, -1815.77490, 13.85690,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2566, 2325.79053, -1820.96814, 13.85690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19389, 2321.26050, -1818.39001, 14.77020,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19359, 2319.45044, -1821.32227, 14.73220,   0.00000, 0.00000, 180.53999);
	CreateDynamicObject(19389, 2318.57251, -1818.39404, 14.77020,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19432, 2319.43335, -1819.12585, 14.73220,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19359, 2315.54346, -1820.15613, 14.63220,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19432, 2317.05664, -1819.27576, 14.73220,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1491, 2317.79102, -1818.39795, 13.03020,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19359, 2315.45142, -1800.04968, 14.67220,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19359, 2318.31226, -1800.04675, 14.67220,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19359, 2319.86304, -1801.56152, 14.67220,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19432, 2319.86011, -1803.39258, 14.73220,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1703, 2318.19800, -1814.98779, 13.28400,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1704, 2319.40186, -1812.01355, 13.28400,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1703, 2315.08716, -1813.53955, 13.28400,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2311, 2317.25610, -1813.08301, 13.28580,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2522, 2318.89209, -1822.15869, 13.28650,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2525, 2314.74023, -1821.42798, 13.28810,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1491, 2323.80786, -1816.65234, 13.03020,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19451, 2326.82007, -1818.37280, 14.73220,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1491, 2320.47949, -1818.39978, 13.03020,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19359, 2323.81543, -1818.53125, 14.63220,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14535, 2283.06689, -1767.66577, 15.30710,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19389, 2284.37964, -1776.57227, 14.75020,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19451, 2280.26685, -1771.84949, 14.63380,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19359, 2284.34912, -1771.95642, 14.63220,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19432, 2280.39551, -1778.22498, 14.73220,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19451, 2279.68408, -1782.95325, 14.63380,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19451, 2284.30298, -1782.95374, 14.63380,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19359, 2281.81104, -1776.57556, 14.63220,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1491, 2283.59839, -1776.58447, 13.03020,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2565, 2282.60522, -1785.74194, 13.85690,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2566, 2281.48633, -1774.55090, 13.85690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19359, 2281.86890, -1771.95337, 14.63220,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19389, 2282.72607, -1778.22803, 14.77020,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1491, 2281.94531, -1778.23547, 13.03020,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19389, 2277.99854, -1780.93286, 14.77020,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1491, 2277.21802, -1780.94934, 13.03020,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1703, 2273.09131, -1768.52856, 13.28400,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2311, 2272.88208, -1766.10156, 13.28580,   0.00000, 0.00000, 179.34004);
	CreateDynamicObject(1703, 2274.79297, -1765.15710, 13.28400,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1703, 2271.11816, -1763.70520, 13.28400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2522, 2279.09253, -1784.00598, 13.28560,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2525, 2279.08789, -1786.78918, 13.28560,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2524, 2279.09009, -1782.13818, 13.28640,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(14535, 2242.83960, -1822.58325, 15.30710,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19432, 2245.78076, -1823.98181, 14.73220,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19389, 2245.45508, -1815.23108, 14.77020,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19451, 2242.07935, -1812.02209, 14.63380,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19359, 2241.58374, -1826.88647, 14.63220,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19359, 2244.14282, -1826.88354, 14.63220,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19359, 2245.78369, -1825.36731, 14.63220,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19359, 2243.75928, -1816.74658, 14.63220,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19359, 2243.76050, -1812.13306, 14.63220,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2525, 2242.67432, -1814.66736, 13.28480,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2522, 2242.66089, -1812.73145, 13.27260,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19432, 2245.45215, -1812.83936, 14.73220,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2524, 2244.27979, -1816.14258, 13.29020,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1491, 2245.44092, -1814.44983, 13.03020,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19389, 2247.90161, -1813.55798, 14.77020,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19432, 2246.18945, -1813.55957, 14.73220,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1491, 2247.12012, -1813.58557, 13.03020,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2576, 2248.99854, -1807.91931, 13.28540,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2566, 2244.68066, -1811.24915, 13.85320,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2293, 2245.15063, -1829.60107, 13.27590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1753, 2243.90332, -1832.57532, 13.28230,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(14651, 2243.63452, -1830.04346, 15.36280,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2293, 2240.64917, -1829.47449, 13.27590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1703, 2254.84351, -1830.97192, 13.28440,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(2311, 2253.00879, -1828.78906, 13.28660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1704, 2251.89087, -1827.03918, 13.28440,   0.00000, 0.00000, 30.72000);
	CreateDynamicObject(1704, 2254.99976, -1826.45142, 13.28440,   0.00000, 0.00000, -33.42001);
	CreateDynamicObject(2948, 2249.56787, -1819.83813, 13.25350,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2948, 2249.57642, -1821.57202, 13.25350,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2948, 2276.34424, -1775.10010, 13.25350,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2948, 2276.33618, -1773.37976, 13.25350,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2948, 2323.75391, -1809.43982, 13.25350,   0.00000, 0.00000, 0.26000);
	CreateDynamicObject(2948, 2323.77295, -1811.15320, 13.25350,   0.00000, 0.00000, 180.25999);
	CreateDynamicObject(2948, 2385.17432, -1774.09814, 13.25350,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2948, 2385.18237, -1775.78101, 13.25350,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1569, 2239.79468, -1810.33289, 12.92540,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1569, 2286.07178, -1786.14746, 12.93250,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1569, 2313.97534, -1799.93848, 12.93253,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1569, 2394.93921, -1786.85693, 12.93250,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1255, 2328.67798, -1769.21655, 13.12826,   0.00000, 0.00000, -140.22000);
	CreateDynamicObject(1255, 2326.59741, -1767.63635, 13.12826,   0.00000, 0.00000, -113.76000);
	CreateDynamicObject(1432, 2285.40796, -1823.02161, 12.87239,   0.00000, 0.00000, 45.65999);
	CreateDynamicObject(1481, 2285.21729, -1820.42969, 13.24760,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1255, 2234.20239, -1798.75244, 13.12820,   0.00000, 0.00000, 112.79999);
	CreateDynamicObject(669, 2236.98120, -1798.65198, 12.74416,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1255, 2231.87964, -1799.14893, 13.12820,   0.00000, 0.00000, 88.85999);
	CreateDynamicObject(1255, 2235.65063, -1761.67529, 13.12820,   0.00000, 0.00000, -70.38000);
	CreateDynamicObject(1255, 2233.68652, -1763.62598, 13.12820,   0.00000, 0.00000, -27.96000);
	CreateDynamicObject(672, 2292.25000, -1819.72705, 13.34359,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(737, 2273.99390, -1802.47913, 12.56927,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 2313.37720, -1789.59961, 12.14667,   356.85840, 0.00000, -2.26893);
	CreateDynamicObject(672, 2354.44702, -1783.57996, 13.34359,   0.00000, 0.00000, 173.34001);
	CreateDynamicObject(984, 2339.66626, -1805.78784, 13.18500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(984, 2367.76880, -1797.67065, 13.18500,   0.00000, 0.00000, 0.30000);
	CreateDynamicObject(984, 2367.83838, -1810.44421, 13.18500,   0.00000, 0.00000, 0.30000);
	CreateDynamicObject(983, 2339.66626, -1821.34570, 13.22500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(672, 2351.35229, -1810.39722, 13.34359,   0.00000, 0.00000, 173.34001);
	CreateDynamicObject(824, 2351.56812, -1800.07971, 13.82523,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 2360.08472, -1821.35547, 11.63281,   356.85840, 0.00000, -2.26893);
	CreateDynamicObject(826, 2362.30884, -1809.00024, 12.53112,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(814, 2346.71313, -1788.16895, 14.23135,   0.00000, 0.00000, -21.78000);
	CreateDynamicObject(872, 2364.89526, -1795.93726, 12.94940,   0.00000, 0.00000, 136.49997);
	CreateDynamicObject(647, 2343.71997, -1794.33130, 13.81926,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(808, 2358.95728, -1772.72156, 13.65073,   0.00000, 0.00000, -5.58000);
	CreateDynamicObject(737, 2342.67505, -1800.34229, 12.56927,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(672, 2359.09277, -1797.27649, 13.34359,   0.00000, 0.00000, 173.34001);
	CreateDynamicObject(1281, 2356.20630, -1820.86609, 13.39921,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1281, 2353.66235, -1794.28552, 13.39921,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1290, 2353.57813, -1813.85669, 18.33730,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 2345.15430, -1811.64819, 13.09943,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(806, 2346.00732, -1810.31555, 15.51847,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(826, 2363.42725, -1811.35828, 12.53112,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1280, 2365.73438, -1798.19238, 12.95650,   0.00000, 0.00000, 94.26000);
	CreateDynamicObject(1368, 2349.30811, -1811.34631, 13.12427,   0.00000, 0.00000, -57.42000);

//==================================PORTONES====================================
	TMTune[0][1] = CreateObject(3037, -2716.01, 217.88, 5.48, 0.00, 0.00, 0.00);			// Wheel Arch Angels. CreateObject(3294, -2718.93, 217.42, 7.30,   0.00, 90.00, 0.00);
	TMTune[1][1] = CreateObject(989, 2644.83, -2039.06, 14.32, 0.00, 0.00, -73.08); 		// Loco Low Co. CreateObject(5340, 2644.86, -2040.67, 15.59,   0.00, 90.00, -90.00);
	TMTune[2][1] = CreateObject(971, -1935.01, 238.70, 33.69,   0.00, 0.00, 0.06); 			// Transfender SF. CreateObject(3294, -1935.80, 241.36, 37.27,   0.00, 90.00, 90.00);
	TMTune[3][1] = CreateObject(971, 1043.17, -1025.85, 33.66,   0.00, 0.00, 0.00); 		// Transfender LS. CreateObject(5779, 1041.34, -1024.51, 34.20,   0.00, 90.00, 90.00);
	TMTune[4][1] = CreateObject(971, 2387.38, 1043.45, 11.82,   0.00, 0.00, 0.00); 			// Transfender LV. CreateObject(3294, 2386.67, 1046.04, 13.31,   0.00, 90.00, 90.00);

//========================CRUCE CON PIEDRAS AVENIDA=============================
	CreateDynamicObject(673, 1402.99695, -1403.38782, 12.90625,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(880, 1411.95654, -1406.06958, 14.50760,   0.00000, 0.00000, 123.24000);
	CreateDynamicObject(880, 1406.05823, -1410.46790, 14.50760,   0.00000, 0.00000, -32.46000);
	CreateDynamicObject(880, 1411.74634, -1419.67065, 14.50760,   0.00000, 0.00000, 87.00000);
	CreateDynamicObject(880, 1406.70203, -1419.81067, 14.50760,   0.00000, 0.00000, -94.80000);
	CreateDynamicObject(880, 1409.48633, -1427.46130, 14.50760,   0.00000, 0.00000, -0.72000);
	CreateDynamicObject(880, 1405.67639, -1428.82825, 14.50760,   0.00000, 0.00000, -86.94000);
	CreateDynamicObject(880, 1409.01794, -1436.68518, 14.50760,   0.00000, 0.00000, 5.16000);
	CreateDynamicObject(673, 1411.72986, -1413.19348, 12.90625,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(673, 1404.97534, -1416.28308, 12.90625,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(673, 1406.69946, -1425.43896, 12.90625,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(673, 1405.14783, -1436.59363, 12.90625,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(673, 1417.25732, -1439.34119, 12.90625,   356.85840, 0.00000, 3.14159);

//===============================CANCHA DE FUTBOL===============================
    CreateDynamicObject(1897, 2315.47900, -1542.24316, 25.45240,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1897, 2319.65015, -1542.22314, 25.45237,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1897, 2318.65771, -1542.24805, 26.44339,   90.00000, 90.00000, 0.00000);
	CreateDynamicObject(1897, 2319.65015, -1513.45459, 25.45240,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1897, 2318.63721, -1513.45886, 26.44340,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(1897, 2316.47974, -1513.45801, 26.44340,   90.00000, 0.00000, -90.00000);
	CreateDynamicObject(1897, 2316.45825, -1542.22205, 26.44340,   90.00000, 90.00000, 180.00000);
	CreateDynamicObject(1897, 2315.47900, -1513.47766, 25.45240,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1897, 2288.47900, -1542.24316, 27.01570,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1897, 2292.65015, -1542.22314, 27.01570,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1897, 2291.65771, -1542.24805, 27.99540,   90.00000, 90.00000, 0.00000);
	CreateDynamicObject(1897, 2292.65015, -1513.45459, 27.01570,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1897, 2291.63965, -1513.47876, 27.99540,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(1897, 2289.47974, -1513.45801, 27.99540,   90.00000, 0.00000, -90.00000);
	CreateDynamicObject(1897, 2289.45825, -1542.22205, 27.99540,   90.00000, 90.00000, 180.00000);
	CreateDynamicObject(1897, 2288.47900, -1513.47766, 27.01570,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3819, 2295.28467, -1546.02380, 26.87017,   0.00000, 0.00000, -89.82000);
	CreateDynamicObject(3819, 2285.48389, -1546.02405, 26.87020,   0.00000, 0.00000, -89.82000);
	CreateDynamicObject(3819, 2277.23022, -1517.86804, 26.87020,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(3819, 2277.23022, -1528.06921, 26.87020,   0.00000, 0.00000, -179.82001);
	CreateDynamicObject(3819, 2277.23022, -1538.14465, 26.87020,   0.00000, 0.00000, -179.82001);
	Textura = CreateDynamicObject(18765, 2295.68872, -1517.93701, 23.38200,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(Textura, 0, 3031, "all_walls", "desgreengrass", -1);
	Textura = CreateDynamicObject(18765, 2284.64868, -1517.93701, 23.38200,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(Textura, 0, 3031, "all_walls", "desgreengrass", -1);
	Textura = CreateDynamicObject(18765, 2284.64868, -1527.93701, 23.38200,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(Textura, 0, 3031, "all_walls", "desgreengrass", -1);
	Textura = CreateDynamicObject(18765, 2284.64868, -1537.93701, 23.38200,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(Textura, 0, 3031, "all_walls", "desgreengrass", -1);
	Textura = CreateDynamicObject(18765, 2295.68872, -1527.93701, 23.38200,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(Textura, 0, 3031, "all_walls", "desgreengrass", -1);
	Textura = CreateDynamicObject(18765, 2295.68872, -1537.93701, 23.38200,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(Textura, 0, 3031, "all_walls", "desgreengrass", -1);
	Textura = CreateDynamicObject(18765, 2290.68872, -1537.93701, 23.38150,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(Textura, 0, 3031, "all_walls", "desgreengrass", -1);
	Textura = CreateDynamicObject(18765, 2290.68872, -1527.93701, 23.38150,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(Textura, 0, 3031, "all_walls", "desgreengrass", -1);
	Textura = CreateDynamicObject(18765, 2290.68872, -1517.93701, 23.38150,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(Textura, 0, 3031, "all_walls", "desgreengrass", -1);
	Textura = CreateDynamicObject(19377, 2299.31396, -1537.48206, 20.64520,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(Textura, 0, 3031, "wngdishx", "dish1", -1);
	Textura = CreateDynamicObject(19377, 2299.31396, -1527.84705, 20.64520,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(Textura, 0, 3031, "wngdishx", "dish1", -1);
	Textura = CreateDynamicObject(19377, 2299.31396, -1518.21399, 20.64520,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(Textura, 0, 3031, "wngdishx", "dish1", -1);
	Textura = CreateDynamicObject(19377, 2281.24316, -1518.21399, 20.64520,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(Textura, 0, 3031, "wngdishx", "dish1", -1);
	Textura = CreateDynamicObject(19377, 2281.24316, -1527.84705, 20.64520,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(Textura, 0, 3031, "wngdishx", "dish1", -1);
	Textura = CreateDynamicObject(19377, 2281.24316, -1537.48206, 20.64520,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(Textura, 0, 3031, "wngdishx", "dish1", -1);
	Textura = CreateDynamicObject(19377, 2286.14990, -1513.48596, 20.64520,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(Textura, 0, 3031, "wngdishx", "dish1", -1);
	Textura = CreateDynamicObject(19377, 2294.58398, -1513.48596, 20.64480,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(Textura, 0, 3031, "wngdishx", "dish1", -1);
	Textura = CreateDynamicObject(19377, 2286.14990, -1528.36487, 20.64520,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(Textura, 0, 3031, "wngdishx", "dish1", -1);
	Textura = CreateDynamicObject(19377, 2294.58398, -1528.36487, 20.64480,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(Textura, 0, 3031, "wngdishx", "dish1", -1);
	Textura = CreateDynamicObject(19377, 2286.14990, -1542.21094, 20.64520,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(Textura, 0, 3031, "wngdishx", "dish1", -1);
	Textura = CreateDynamicObject(19377, 2294.58398, -1542.21094, 20.64480,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(Textura, 0, 3031, "wngdishx", "dish1", -1);
	Textura = CreateDynamicObject(19355, 2293.43726, -1540.69177, 24.14500,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(Textura, 0, 3031, "wngdishx", "dish1", -1);
	Textura = CreateDynamicObject(19355, 2287.71265, -1540.69177, 24.14500,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(Textura, 0, 3031, "wngdishx", "dish1", -1);
	Textura = CreateDynamicObject(19355, 2289.40405, -1539.17542, 24.14500,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(Textura, 0, 3031, "wngdishx", "dish1", -1);
	Textura = CreateDynamicObject(19355, 2291.92090, -1539.17542, 24.14540,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(Textura, 0, 3031, "wngdishx", "dish1", -1);
	Textura = CreateDynamicObject(19355, 2287.71265, -1515.15088, 24.14500,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(Textura, 0, 3031, "wngdishx", "dish1", -1);
	Textura = CreateDynamicObject(19355, 2293.43726, -1515.15088, 24.14500,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(Textura, 0, 3031, "wngdishx", "dish1", -1);
	Textura = CreateDynamicObject(19355, 2291.92090, -1516.66992, 24.14540,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(Textura, 0, 3031, "wngdishx", "dish1", -1);
	Textura = CreateDynamicObject(19355, 2289.40405, -1516.66992, 24.14500,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(Textura, 0, 3031, "wngdishx", "dish1", -1);
	Textura = CreateDynamicObject(1953, 2290.56323, -1528.36804, 25.88822,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(Textura, 0, 3031, "wngdishx", "dish1", -1);
	SetDynamicObjectMaterial(Textura, 1, 3031, "wngdishx", "dish1", -1);
	SetDynamicObjectMaterial(Textura, 2, 3031, "wngdishx", "dish1", -1);
	
//=============================SEGUNDA CANCHA DE FUTBOL=========================
	Textura = CreateDynamicObject(18765, 2311.22681, -1517.93701, 21.85860,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(Textura, 0, 3031, "all_walls", "desgreengrass", -1);
	Textura = CreateDynamicObject(18765, 2322.24390, -1517.93701, 21.85860,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(Textura, 0, 3031, "all_walls", "desgreengrass", -1);
	Textura = CreateDynamicObject(18765, 2319.76709, -1517.93701, 21.85800,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(Textura, 0, 3031, "all_walls", "desgreengrass", -1);
	Textura = CreateDynamicObject(18765, 2311.22681, -1527.93701, 21.85860,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(Textura, 0, 3031, "all_walls", "desgreengrass", -1);
	Textura = CreateDynamicObject(18765, 2319.76709, -1527.93701, 21.85800,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(Textura, 0, 3031, "all_walls", "desgreengrass", -1);
	Textura = CreateDynamicObject(18765, 2322.24390, -1527.93701, 21.85860,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(Textura, 0, 3031, "all_walls", "desgreengrass", -1);
	Textura = CreateDynamicObject(18765, 2311.22681, -1537.93701, 21.85860,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(Textura, 0, 3031, "all_walls", "desgreengrass", -1);
	Textura = CreateDynamicObject(18765, 2319.76709, -1537.93701, 21.85800,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(Textura, 0, 3031, "all_walls", "desgreengrass", -1);
	Textura = CreateDynamicObject(18765, 2322.24390, -1537.93701, 21.85860,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(Textura, 0, 3031, "all_walls", "desgreengrass", -1);
	Textura = CreateDynamicObject(19377, 2326.31396, -1537.48206, 19.11920,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(Textura, 0, 3031, "wngdishx", "dish1", -1);
	Textura = CreateDynamicObject(19377, 2326.31396, -1527.84705, 19.11920,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(Textura, 0, 3031, "wngdishx", "dish1", -1);
	Textura = CreateDynamicObject(19377, 2326.31396, -1518.21399, 19.11920,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(Textura, 0, 3031, "wngdishx", "dish1", -1);
	Textura = CreateDynamicObject(19377, 2308.24316, -1518.21399, 19.11920,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(Textura, 0, 3031, "wngdishx", "dish1", -1);
	Textura = CreateDynamicObject(19377, 2308.24316, -1527.84705, 19.11920,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(Textura, 0, 3031, "wngdishx", "dish1", -1);
	Textura = CreateDynamicObject(19377, 2308.24316, -1537.48206, 19.11920,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(Textura, 0, 3031, "wngdishx", "dish1", -1);
	Textura = CreateDynamicObject(19377, 2313.14990, -1513.48596, 19.11920,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(Textura, 0, 3031, "wngdishx", "dish1", -1);
	Textura = CreateDynamicObject(19377, 2321.60352, -1513.48193, 19.11920,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(Textura, 0, 3031, "wngdishx", "dish1", -1);
	Textura = CreateDynamicObject(19377, 2313.14990, -1528.36487, 19.11916,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(Textura, 0, 3031, "wngdishx", "dish1", -1);
	Textura = CreateDynamicObject(19377, 2321.58398, -1528.36487, 19.11920,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(Textura, 0, 3031, "wngdishx", "dish1", -1);
	Textura = CreateDynamicObject(19377, 2313.14990, -1542.21094, 19.11920,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(Textura, 0, 3031, "wngdishx", "dish1", -1);
	Textura = CreateDynamicObject(19377, 2321.58398, -1542.21094, 19.11920,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(Textura, 0, 3031, "wngdishx", "dish1", -1);
	Textura = CreateDynamicObject(19355, 2320.43726, -1540.69177, 22.62490,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(Textura, 0, 3031, "wngdishx", "dish1", -1);
	Textura = CreateDynamicObject(19355, 2314.71265, -1540.69177, 22.62485,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(Textura, 0, 3031, "wngdishx", "dish1", -1);
	Textura = CreateDynamicObject(19355, 2316.40405, -1539.17542, 22.62540,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(Textura, 0, 3031, "wngdishx", "dish1", -1);
	Textura = CreateDynamicObject(19355, 2318.92090, -1539.17542, 22.62490,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(Textura, 0, 3031, "wngdishx", "dish1", -1);
	Textura = CreateDynamicObject(19355, 2314.71265, -1515.15088, 22.62490,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(Textura, 0, 3031, "wngdishx", "dish1", -1);
	Textura = CreateDynamicObject(19355, 2320.43726, -1515.15088, 22.62490,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(Textura, 0, 3031, "wngdishx", "dish1", -1);
	Textura = CreateDynamicObject(19355, 2318.92090, -1516.66992, 22.62490,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(Textura, 0, 3031, "wngdishx", "dish1", -1);
	Textura = CreateDynamicObject(19355, 2316.40405, -1516.66992, 22.62540,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(Textura, 0, 3031, "wngdishx", "dish1", -1);
	Textura = CreateDynamicObject(1953, 2317.56323, -1528.36804, 24.35918,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(Textura, 0, 3031, "wngdishx", "dish1", -1);
	SetDynamicObjectMaterial(Textura, 1, 3031, "wngdishx", "dish1", -1);
	SetDynamicObjectMaterial(Textura, 2, 3031, "wngdishx", "dish1", -1);
	CreateDynamicObject(3819, 2303.98389, -1528.06921, 26.06330,   0.00000, -10.00000, 180.00000);
	CreateDynamicObject(3819, 2303.98389, -1517.90637, 26.06335,   0.00000, -10.00000, 180.00000);
	CreateDynamicObject(3819, 2303.98389, -1538.14465, 26.06330,   0.00000, -10.00000, 180.00000);

//===================================MAPEO R&L==================================
	CreateObject(14595, 1652.5, -1627.69921875, 547.70001220703, 0, 0, 0);
	CreateDynamicObject(1506, 1655.5999755859, -1640.0999755859, 543.79998779297, 0, 0, 90);
	CreateDynamicObject(1775, 1660.19995, -1623.09998, 544.79999, 0, 0, 0);
	CreateDynamicObject(1776, 1658.90002, -1623, 544.79999, 0, 0, 0);
	CreateDynamicObject(1302, 1657.19995, -1623, 543.70001, 0, 0, 0);
	CreateDynamicObject(1649, 1655.80005, -1629.30005, 544.60004, 0, 0, 90);
	CreateDynamicObject(1649, 1655.80005, -1622.09998, 545.48004, 0, 0, 90);
	CreateDynamicObject(1704, 1661.09998, -1630.5, 543.70001, 0, 0, 270);
	CreateDynamicObject(1704, 1661.09998, -1629.30005, 543.70001, 0, 0, 270);
	CreateDynamicObject(1704, 1661.09998, -1628.09998, 543.70001, 0, 0, 270);
	CreateDynamicObject(1704, 1659.59998, -1632.09998, 543.70001, 0, 0, 180);
	CreateDynamicObject(1704, 1658.40002, -1632.09998, 543.70001, 0, 0, 179.995);
	CreateDynamicObject(1704, 1657.19995, -1632.09998, 543.70001, 0, 0, 179.995);
	CreateDynamicObject(1808, 1660.30005, -1632.19995, 543.70001, 0, 0, 180);
	CreateDynamicObject(1502, 1651.69995, -1614.5, 543.70001, 0, 0, 0);
	CreateDynamicObject(2161, 1636.40002, -1612.40002, 543.70001, 0, 0, 90);
	CreateDynamicObject(2161, 1636.40002, -1611.09998, 543.70001, 0, 0, 90);
	CreateDynamicObject(2162, 1636.40002, -1609.69995, 543.70001, 0, 0, 90);
	CreateDynamicObject(2163, 1636.5, -1607.90002, 543.70001, 0, 0, 90);
	CreateDynamicObject(2163, 1636.5, -1607.90002, 544.59998, 0, 0, 90);
	CreateDynamicObject(2164, 1636.5, -1606, 543.70001, 0, 0, 90);
	CreateDynamicObject(2167, 1636.5, -1604.19995, 543.70001, 0, 0, 90);
	CreateDynamicObject(2066, 1639.5, -1602.69995, 543.70001, 0, 0, 0);
	CreateDynamicObject(2066, 1638.09961, -1602.69922, 543.70001, 0, 0, 0);
	CreateDynamicObject(2066, 1638.7998, -1602.69922, 543.70001, 0, 0, 0);
	CreateDynamicObject(2008, 1654, -1609.40002, 543.70001, 0, 0, 180);
	CreateDynamicObject(1671, 1653.09998, -1608.30005, 544.20001, 0, 0, 0);
	CreateDynamicObject(1806, 1653.5, -1610.7998046875, 543.70001220703, 0, 0, 0);
	CreateDynamicObject(1806, 1652.5, -1610.69995, 543.70001, 0, 0, 348);
	CreateDynamicObject(2008, 1639.19995, -1612.5, 543.70001, 0, 0, 0);
	CreateDynamicObject(2008, 1640.19995, -1611.5, 543.70001, 0, 0, 180);
	CreateDynamicObject(1663, 1639.40002, -1613.5, 544.20001, 0, 0, 180);
	CreateDynamicObject(1663, 1639.7998, -1610.5, 544.20001, 0, 0, 0);
	CreateDynamicObject(2165, 1641.69995, -1602.80005, 543.70001, 0, 0, 0);
	CreateDynamicObject(1663, 1642.5, -1603.90002, 544.20001, 0, 0, 180);
	CreateDynamicObject(2164, 1644.90002, -1602.30005, 543.70001, 0, 0, 0);
	CreateDynamicObject(2167, 1646.69995, -1602.30005, 543.70001, 0, 0, 0);
	CreateDynamicObject(2611, 1645.59998, -1614, 545.79999, 0, 0, 180);
	CreateDynamicObject(2612, 1641.40002, -1614, 545.79999, 0, 0, 180);
	CreateDynamicObject(2164, 1648.09998, -1614, 543.79999, 0, 0, 180);
	CreateDynamicObject(2162, 1646, -1614, 543.79999, 0, 0, 180);
	CreateDynamicObject(2172, 1646.90002, -1608.59998, 543.70001, 0, 0, 180);
	CreateDynamicObject(2172, 1644, -1609.5, 543.70001, 0, 0, 0);
	CreateDynamicObject(2172, 1645, -1608.59998, 543.70001, 0, 0, 180);
	CreateDynamicObject(2172, 1645.89941, -1609.5, 543.70001, 0, 0, 0);
	CreateDynamicObject(2356, 1644.80005, -1610.59998, 543.70001, 0, 0, 0);
	CreateDynamicObject(2356, 1646.59961, -1610.69922, 543.70001, 0, 0, 0);
	CreateDynamicObject(2356, 1646.5, -1607.5, 543.70001, 0, 0, 180);
	CreateDynamicObject(2356, 1644.19995, -1607.40002, 543.70001, 0, 0, 179.995);
	CreateDynamicObject(2008, 1650, -1603.80005, 543.70001, 0, 0, 180);
	CreateDynamicObject(1663, 1649.40002, -1602.59998, 544.20001, 0, 0, 0);
	CreateDynamicObject(1806, 1649.5, -1605.19995, 543.70001, 0, 0, 0);
	CreateDynamicObject(1806, 1648.59998, -1605.09998, 543.70001, 0, 0, 342);
	CreateDynamicObject(2616, 1653.17993, -1604.69995, 545.29999, 0, 0, 270);
	CreateDynamicObject(1502, 1641.09998, -1632.80005, 543.79999, 0, 0, 0);
	CreateDynamicObject(1506, 1627.40002, -1632.59998, 543.79999, 0, 0, 0);
	CreateDynamicObject(2986, 1644.40002, -1641.5, 546.5, 90, 0, 0);
	CreateDynamicObject(2184, 1642.69921875, -1638.8994140625, 543.76000976563, 0, 0, 179.99450683594);
	CreateDynamicObject(1671, 1641.59998, -1641, 544.20001, 0, 0, 180);
	CreateDynamicObject(2190, 1640.90002, -1639.19995, 544.5, 0, 0, 36);
	CreateDynamicObject(1665, 1642.5, -1639.69995, 544.58002, 0, 0, 16);
	CreateDynamicObject(2894, 1641.80005, -1639.5, 544.53998, 0, 0, 0);
	CreateDynamicObject(2196, 1642.5, -1639.5, 544.52899, 0, 0, 240);
	CreateDynamicObject(2356, 1642.59998, -1637.59998, 543.70001, 0, 0, 166);
	CreateDynamicObject(2356, 1640.59998, -1637.5, 543.70001, 0, 0, 195.998);
	CreateDynamicObject(2161, 1636.09998, -1640.19995, 543.79999, 0, 0, 90);
	CreateDynamicObject(2162, 1636.09998, -1638.80005, 543.79999, 0, 0, 90);
	CreateDynamicObject(2163, 1636.09998, -1637, 543.79999, 0, 0, 90);
	CreateDynamicObject(2164, 1638.69995, -1641.40002, 543.79999, 0, 0, 180);
	CreateDynamicObject(2167, 1636.09998, -1635.09998, 543.79999, 0, 0, 90);
	CreateDynamicObject(2289, 1636.19995, -1637.80005, 545.90002, 0, 0, 90);
	CreateDynamicObject(2287, 1643.00024, -1641, 545, 0, 0, 180);
	CreateDynamicObject(1742, 1644.90002, -1634.09998, 543.79999, 0, 0, 270);
	CreateDynamicObject(1742, 1644.90002, -1635.5, 543.79999, 0, 0, 270);
	CreateDynamicObject(1828, 1640, -1636, 543.73004150391, 0, 0, 0);
	CreateDynamicObject(2922, 1640, -1622.69995, 545.40002, 0, 0, 180);
	CreateDynamicObject(2922, 1634.59961, -1622.69922, 545.29999, 0, 0, 179.995);
	CreateDynamicObject(2922, 1657.30005, -1655.69995, 22.9, 0, 0, 180);
	CreateDynamicObject(4724, 1661.5, -1638.9000244141, 544, 0, 90, 90);
	CreateDynamicObject(330, 1642.4000244141, -1639.5999755859, 544.52001953125, 90, 0, 148);

//================================EXTERIOR HOSPITAL=============================
	HOSPGate = CreateObject(968, 1147.03149, -1384.87317, 13.46000,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(8658, 1139.23096, -1370.12109, 13.76910,   0.00000, 0.00000, 179.94000);
	CreateDynamicObject(1233, 1156.33105, -1389.95605, 14.31803,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(4639, 1148.74573, -1382.11206, 14.20000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3051, 1145.34473, -1327.08984, 13.40000,   0.00000, 0.00000, 45.99976);
	CreateDynamicObject(8658, 1086.98804, -1362.35779, 13.77030,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3051, 1145.34473, -1328.25781, 13.40000,   0.00000, 0.00000, 45.99976);
	CreateDynamicObject(3458, 1109.73145, -1334.48438, 16.52190,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(640, 1145.01843, -1332.03931, 13.28000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(640, 1145.01929, -1323.37402, 13.28000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3660, 1090.59265, -1320.39587, 14.58000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3934, 1161.51465, -1313.87305, 30.49426,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1153.11914, -1313.88867, 31.19217,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1153.11938, -1307.44629, 31.19333,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1156.33984, -1304.22754, 31.18756,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1162.64966, -1304.22778, 31.17675,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1165.83167, -1304.22778, 31.17149,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1169.03906, -1307.40918, 31.16495,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1169.03906, -1313.74121, 31.16496,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1153.11938, -1320.33984, 31.19041,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1153.11938, -1326.77014, 31.19682,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1153.11914, -1329.98535, 31.19762,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1156.32568, -1333.22705, 31.19691,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1169.03906, -1320.13440, 31.16291,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1169.03906, -1326.49512, 31.15330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1169.03906, -1329.66565, 31.14637,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1165.92188, -1332.78870, 31.16413,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3051, 1160.60999, -1330.46973, 31.85920,   0.00000, 0.00000, 136.00000);
	CreateDynamicObject(3051, 1161.78125, -1330.46973, 31.85342,   0.00000, 0.00000, 135.99426);
	CreateDynamicObject(1318, 1161.19043, -1329.57031, 30.99529,   0.00000, 0.00000, 86.00000);
	CreateDynamicObject(1687, 1161.32825, -1294.13928, 31.31036,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1689, 1160.58508, -1380.92664, 26.80220,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3877, 1153.47070, -1332.51367, 32.18023,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1695, 1159.89258, -1361.08203, 26.11128,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3876, 1157.15918, -1334.63477, -6.61832,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1687, 1178.95557, -1376.93701, 23.80449,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1635, 1173.59314, -1370.74805, 23.80016,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(3813, 1173.23438, -1340.89844, 19.24681,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3813, 1173.28430, -1328.79590, 19.24024,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3813, 1173.29431, -1316.59375, 19.23716,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1165.38721, -1330.26392, 31.03853,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1157.62048, -1330.35510, 31.07332,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1168.84875, -1304.38281, 31.04687,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1153.25830, -1304.30188, 31.07356,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1233, 1132.63867, -1286.26282, 14.10655,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3578, 1194.50098, -1327.11914, 11.69647,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 1189.08997, -1332.01270, 11.69647,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1233, 1189.54871, -1316.88403, 14.12484,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1233, 1189.62219, -1342.37964, 14.12432,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2649, 1163.07312, -1344.12646, 26.11374,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1695, 1159.89258, -1364.35815, 26.11738,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3813, 1173.18433, -1340.89844, 26.00374,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3813, 1173.20435, -1328.79590, 26.00374,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3813, 1173.21436, -1316.59375, 26.00374,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3813, 1179.66711, -1292.85876, 25.32646,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3813, 1166.29504, -1290.40430, 25.35678,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3813, 1166.24524, -1290.40430, 20.49248,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3813, 1155.56897, -1290.40430, 20.49248,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3813, 1175.89551, -1305.67529, 25.26998,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3470, 1158.30103, -1342.64978, 29.70968,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3384, 1174.54199, -1327.29688, 13.40145,   294.99939, 179.99451, 90.00000);
	CreateDynamicObject(3384, 1174.54199, -1328.16602, 13.40145,   294.99390, 179.99451, 90.00000);
	CreateDynamicObject(3384, 1180.89246, -1327.29761, 12.18362,   294.99939, 179.99451, 90.00000);
	CreateDynamicObject(3384, 1180.89246, -1328.16687, 12.18362,   294.99939, 179.99451, 90.00000);
	CreateDynamicObject(647, 1175.00635, -1331.71887, 14.82157,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(677, 1173.27612, -1333.23181, 12.98781,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(677, 1173.27271, -1334.07764, 12.98678,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(677, 1172.98193, -1333.99548, 12.98688,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(677, 1176.99988, -1332.66028, 13.03448,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(677, 1178.79858, -1334.52820, 13.11353,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(677, 1175.04419, -1334.15552, 12.98668,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(677, 1178.49365, -1332.41663, 14.54296,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(677, 1179.75684, -1331.03284, 13.16114,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(677, 1177.18958, -1334.59375, 13.04069,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(677, 1179.32092, -1317.19043, 13.13938,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(677, 1174.32507, -1316.17896, 12.98598,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(677, 1179.18225, -1314.37781, 13.13016,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(677, 1176.48132, -1313.17822, 13.00506,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(677, 1176.42578, -1316.30811, 13.00404,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(677, 1174.24011, -1313.54700, 12.98577,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(677, 1176.55103, -1314.62903, 13.00895,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(677, 1179.02600, -1312.50769, 13.12105,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(682, 1174.29358, -1316.26367, 12.98591,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(682, 1179.22949, -1317.20410, 13.13515,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(682, 1177.76074, -1330.70361, 13.07127,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(759, 1174.60156, -1317.31824, 12.98666,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(801, 1174.93945, -1314.27051, 12.98748,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(804, 1174.51245, -1334.43469, 14.16582,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(805, 1173.95300, -1315.86670, 14.13441,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(869, 1175.54065, -1313.82996, 13.43877,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1174.66199, -1334.05774, 13.22892,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(647, 1181.33301, -1300.67322, 15.07139,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(675, 1181.61877, -1299.04150, 13.72474,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(728, 1184.81250, -1293.74805, 13.20462,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(759, 1180.32153, -1293.66284, 13.21544,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1265, 1148.26868, -1343.49231, 13.12498,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1265, 1149.24402, -1343.91589, 13.15149,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1333, 1088.15820, -1341.36230, 13.60000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1333, 1088.15332, -1344.16016, 13.60000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1270, 1211.41016, -1353.61743, 13.42127,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1366, 1189.42261, -1346.31616, 13.18010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1616, 1145.37695, -1330.94043, 17.91729,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1616, 1150.00964, -1321.27051, 21.86423,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1180.30078, -1329.33582, 13.75519,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1180.19202, -1318.35352, 13.74959,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1185.58289, -1342.28271, 13.75887,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1185.43640, -1305.08130, 13.77620,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3578, 1194.50098, -1316.81934, 11.69647,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 1194.50098, -1306.53003, 11.69647,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 1189.59961, -1301.11914, 11.69647,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1243, 1162.13928, -1333.21326, 25.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(966, 1146.82947, -1384.87158, 12.70000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1175.56348, -1326.99023, 13.74679,   0.00000, 25.99915, 0.00000);
	CreateDynamicObject(1228, 1192.94299, -1295.79895, 12.80667,   0.00000, 0.00000, 86.00000);
	CreateDynamicObject(1228, 1192.90479, -1338.93811, 12.81980,   0.00000, 0.00000, 85.99548);
	CreateDynamicObject(3398, 1117.21460, -1330.50281, 10.00000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3398, 1104.17834, -1330.50281, 10.00000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3398, 1132.84253, -1333.83728, 10.00000,   0.00000, 0.00000, 142.00000);
	CreateDynamicObject(18766, 1145.99841, -1291.38904, 12.65070,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18766, 1136.13525, -1291.38916, 12.65070,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3660, 1140.37402, -1292.60864, 14.46000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3458, 1103.14685, -1313.13635, 14.16510,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3458, 1147.44165, -1314.10889, 14.20090,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3458, 1147.44165, -1354.49756, 14.20090,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3813, 1149.62378, -1343.67139, 20.66925,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3813, 1149.62573, -1346.85791, 23.15420,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(640, 1131.97205, -1344.22473, 13.65980,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(640, 1131.97986, -1337.76428, 13.65980,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3813, 1088.67615, -1338.10645, 16.48400,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(640, 1149.64563, -1377.31372, 13.43970,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(638, 1133.01709, -1303.49255, 13.28000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3802, 1133.30225, -1315.14465, 15.27250,   0.00000, 0.00000, 0.00000);
	
//====================================CTR-MAN===================================
	CreateDynamicObject(966, 781.35, -1329.45, 12.54,   0.00, 0.00, 0.00);
	CreateDynamicObject(967, 781.15, -1330.83, 12.55,   0.00, 0.00, 90.00);
	MANGate = CreateObject(968, 781.57, -1329.41, 13.34,   0.00, 270.00, 0.00);
	CreateDynamicObject(973, 1307.4322509766, -1837.7065429688, 13.387095451355, 0, 0, 270);
	CreateDynamicObject(973, 1307.4322509766, -1828.4000244141, 13.387095451355, 0, 0, 270);
	CreateDynamicObject(973, 1307.4322509766, -1819.0999755859, 13.387095451355, 0, 0, 270);
	CreateDynamicObject(973, 1307.4322509766, -1809.6999511719, 13.387095451355, 0, 0, 270);
	CreateDynamicObject(973, 1307.431640625, -1800.3994140625, 13.387095451355, 0, 0, 270);
	CreateDynamicObject(973, 1307.4322509766, -1791.0999755859, 13.387095451355, 0, 0, 270);
	CreateDynamicObject(973, 1307.431640625, -1781.7998046875, 13.387095451355, 0, 0, 270);
	CreateDynamicObject(973, 1307.431640625, -1772.5, 13.387095451355, 0, 0, 270);
	CreateDynamicObject(973, 1307.4322509766, -1763.1999511719, 13.387095451355, 0, 0, 270);
	CreateDynamicObject(973, 1307.431640625, -1753.8798828125, 13.387095451355, 0, 0, 270);
	CreateDynamicObject(973, 1307.4322509766, -1744.5, 13.387095451355, 0, 0, 270);
	CreateDynamicObject(973, 1307.4322509766, -1735.1999511719, 13.387095451355, 0, 0, 270);
	CreateDynamicObject(973, 1307.431640625, -1725.8798828125, 13.387095451355, 0, 0, 270);
	CreateDynamicObject(973, 1307.4322509766, -1716.5, 13.387095451355, 0, 0, 270);
	CreateDynamicObject(973, 1307.4322509766, -1707.1999511719, 13.387095451355, 0, 0, 270);
	CreateDynamicObject(973, 1307.4322509766, -1698, 13.387095451355, 0, 0, 270);
	CreateDynamicObject(973, 1307.431640625, -1688.669921875, 13.387095451355, 0, 0, 270);
	CreateDynamicObject(973, 1302.4345703125, -1837.7060546875, 13.387095451355, 0, 0, 90);
	CreateDynamicObject(973, 1302.4345703125, -1828.3720703125, 13.387095451355, 0, 0, 90);
	CreateDynamicObject(973, 1302.4345703125, -1819, 13.387095451355, 0, 0, 90);
	CreateDynamicObject(973, 1302.4345703125, -1809.6591796875, 13.387095451355, 0, 0, 90);
	CreateDynamicObject(973, 1302.4345703125, -1800.2998046875, 13.387095451355, 0, 0, 90);
	CreateDynamicObject(973, 1302.4345703125, -1791, 13.387095451355, 0, 0, 90);
	CreateDynamicObject(973, 1302.4345703125, -1781.69921875, 13.387095451355, 0, 0, 90);
	CreateDynamicObject(973, 1302.4345703125, -1772.3994140625, 13.387095451355, 0, 0, 90);
	CreateDynamicObject(973, 1302.4349365234, -1763.0999755859, 13.387095451355, 0, 0, 90);
	CreateDynamicObject(973, 1302.4345703125, -1753.7998046875, 13.387095451355, 0, 0, 90);
	CreateDynamicObject(973, 1302.4349365234, -1744.5, 13.387095451355, 0, 0, 90);
	CreateDynamicObject(973, 1302.4345703125, -1735.19921875, 13.387095451355, 0, 0, 90);
	CreateDynamicObject(973, 1302.4345703125, -1725.8994140625, 13.387095451355, 0, 0, 90);
	CreateDynamicObject(973, 1302.4349365234, -1716.5999755859, 13.387095451355, 0, 0, 90);
	CreateDynamicObject(973, 1302.4345703125, -1707.2998046875, 13.387095451355, 0, 0, 90);
	CreateDynamicObject(973, 1302.4345703125, -1697.9892578125, 13.387095451355, 0, 0, 90);
	CreateDynamicObject(973, 1302.4345703125, -1688.599609375, 13.387095451355, 0, 0, 90);
	CreateDynamicObject(691, 1305.9306640625, -1498.9326171875, 12.546875, 0, 0, 12);
	CreateDynamicObject(3463, 1348.900390625, -1433.7705078125, 12.546875, 0, 0, 0);
	CreateDynamicObject(3463, 1306.986328125, -1496.3168945313, 12.546875, 0, 0, 56);
	CreateDynamicObject(3463, 1304.69921875, -1593.927734375, 14.008493423462, 0, 0, 0);
	CreateDynamicObject(3463, 1305.130859375, -1737.0751953125, 12.546875, 0, 0, 0);
	CreateDynamicObject(3463, 1305.2822265625, -1836.4970703125, 12.546875, 0, 0, 0);
	CreateDynamicObject(3463, 1304.9248046875, -1796.41015625, 12.546875, 0, 0, 0);
	CreateDynamicObject(3463, 1969.0009765625, -1371.8291015625, 18.196510314941, 0, 0, 270);
	CreateDynamicObject(13666, 1925.560546875, -1378.7138671875, 17.700000762939, 0, 0, 53.997802734375);
	CreateDynamicObject(3934, 741.533203125, -1369.978515625, 24.692211151123, 0, 0, 0);
	CreateDynamicObject(3876, 678.5419921875, -1356.23828125, 27.968715667725, 0, 0, 0);
	CreateDynamicObject(13728, 680.69738769531, -1343.4600830078, 40, 0, 0, 0);
	CreateDynamicObject(3877, 751.853515625, -1367.9697265625, 26.35795211792, 0, 0, 0);
	CreateDynamicObject(3877, 745.26171875, -1381.3310546875, 26.35795211792, 0, 0, 0);
	CreateDynamicObject(3763, 700.2626953125, -1356.2021484375, 60.900001525879, 0, 0, 0);
	CreateDynamicObject(973, 1055.4754638672, -1846.6193847656, 13.387095451355, 0, 0, 270);
	CreateDynamicObject(973, 1053.8005371094, -1837.7550048828, 13.387095451355, 0, 0, 292);
	CreateDynamicObject(973, 1050.3823242188, -1829.6810302734, 13.387095451355, 0, 0, 294);
	CreateDynamicObject(973, 1051.8098144531, -1846.5675048828, 13.387095451355, 0, 0, 89.999633789063);
	CreateDynamicObject(973, 1050.0682373047, -1837.9537353516, 13.387095451355, 0, 0, 109.99447631836);
	CreateDynamicObject(973, 1047.4998779297, -1831.4061279297, 13.387095451355, 0, 0, 111.98962402344);
	CreateDynamicObject(14387, 732.20001220703, -1358.1999511719, 23.60000038147, 0, 0, 90);
	CreateDynamicObject(8651, 739.7998046875, -1384.3994140625, 25.690462112427, 0, 0, 90);
	CreateDynamicObject(8651, 710.19378662109, -1384.4000244141, 25.690462112427, 0, 0, 90);
	CreateDynamicObject(8651, 681.5, -1384.4000244141, 25.690462112427, 0, 0, 90);
	CreateDynamicObject(8651, 647.98596191406, -1370.4976806641, 21.700000762939, 0, 0, 0);
	CreateDynamicObject(8651, 647.98596191406, -1345.1999511719, 21.700000762939, 0, 0, 0);
	CreateDynamicObject(8651, 662.7587890625, -1330.4543457031, 21.700000762939, 0, 0, 270);
	CreateDynamicObject(4100, 754.65936279297, -1376.4870605469, 26.25, 0, 0, 50);
	CreateDynamicObject(4100, 754.68884277344, -1366.1296386719, 26.25, 0, 0, 49.998779296875);
	CreateDynamicObject(4100, 740.79998779297, -1359.517578125, 26.25, 0, 0, 139.99877929688);
	CreateDynamicObject(4100, 747.61883544922, -1359.5561523438, 26.25, 0, 0, 139.99877929688);
	CreateDynamicObject(4100, 654.09710693359, -1384.8094482422, 22.562051773071, 0, 0, 140);
	CreateDynamicObject(2948, 732, -1347.8134765625, 12.507115364075, 0, 0, 0);
	CreateDynamicObject(2948, 732, -1349.7022705078, 12.507115364075, 0, 0, 180);
	CreateDynamicObject(3055, 777.95001220703, -1384.7744140625, 13.800000190735, 0, 0, 0);
	
//===================================AEROPUERTO=================================
	CreateDynamicObject(10183, 1963.72949, -2226.99072, 12.56770,   0.00000, 0.00000, -134.87996);
	CreateDynamicObject(10183, 1963.75659, -2212.38721, 12.56770,   0.00000, 0.00000, 45.05998);
	CreateDynamicObject(10183, 1963.77600, -2202.95435, 12.56770,   0.00000, 0.00000, -134.87996);
	CreateDynamicObject(19425, 1958.35144, -2176.79468, 12.54240,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 1961.65161, -2176.79468, 12.54240,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 1964.95166, -2176.79468, 12.54240,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 1958.35144, -2189.49463, 12.54240,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 1961.65161, -2189.49463, 12.54240,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 1964.95166, -2189.49463, 12.54240,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8843, 1958.33972, -2180.27002, 12.61176,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(8843, 1964.68115, -2180.26807, 12.55220,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18850, 2031.62390, -2544.38696, 0.34690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4100, 1943.53772, -2184.27856, 14.20658,   0.00000, 0.00000, 49.97997);
	CreateDynamicObject(8369, 1963.63965, -2216.48779, 16.78198,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(8041, 2002.34363, -2189.32202, 18.25858,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8843, 2003.00000, -2184.61792, 12.55220,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(8843, 2003.00000, -2193.82178, 12.55220,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3629, 1921.52148, -2207.22046, 18.96052,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3491, 2026.78992, -2294.68286, 20.98215,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3491, 2026.78992, -2400.22290, 20.98220,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(8240, 1760.23779, -2427.76392, 26.10110,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(8240, 1660.23779, -2427.76392, 26.10110,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(8240, 1560.23779, -2427.76392, 26.10110,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3491, 1886.21265, -2652.50317, 20.96652,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3491, 1806.21265, -2652.50317, 20.96650,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3491, 1726.21265, -2652.50317, 20.96650,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3491, 1646.21265, -2652.50317, 20.96650,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3491, 1852.20984, -2429.63745, 20.98220,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3491, 2112.91870, -2384.62427, 20.99571,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3491, 1454.24060, -2439.75757, 20.96650,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18850, 1941.62390, -2544.38696, 0.34690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18850, 1985.12390, -2544.38696, 0.34690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18850, 1821.62390, -2544.38696, 0.34690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18850, 1691.62390, -2544.38696, 0.34690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18850, 1755.62390, -2544.38696, 0.34690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18850, 1611.62390, -2544.38696, 0.34690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18850, 1511.62390, -2544.38696, 0.34690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18850, 1561.62390, -2544.38696, 0.34690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18850, 1461.62390, -2544.38696, 0.34690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18850, 1411.62390, -2544.38696, 0.34690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18850, 1561.62390, -2634.38696, 0.34690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18850, 1511.62390, -2634.38696, 0.34690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18850, 1461.62390, -2634.38696, 0.34690,   0.00000, 0.00000, 0.00000);
	
//=================================FIX WORLD OF COQ=============================
	CreateDynamicObject(19376, 451.73251, -4.74720, 1003.28802,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19376, 441.23251, -4.74720, 1003.28802,   0.00000, 90.00000, 0.00000);
	Textura = CreateDynamicObject(19357, 453.81500, -18.16140, 1001.77667,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(Textura, 0, 18009, "genintrestrest1", "rest_wall5", -1);
	Textura = CreateDynamicObject(19446, 443.68820, -23.11110, 1001.98364,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(Textura, 0, 18009, "genintrestrest1", "koen_win", -1);
	Textura = CreateDynamicObject(19446, 453.32199, -23.11110, 1001.98358,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(Textura, 0, 18009, "genintrestrest1", "koen_win", -1);
	Textura = CreateDynamicObject(19446, 453.92899, -23.53720, 1001.98358,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(Textura, 0, 18009, "genintrestrest1", "koen_win", -1);
	Textura = CreateDynamicObject(19446, 455.01740, -10.08520, 1001.61591,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(Textura, 0, 18009, "genintrestrest1", "koen_win", -1);
	Textura = CreateDynamicObject(19446, 437.45740, -10.08520, 1001.61591,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(Textura, 0, 18009, "genintrestrest1", "koen_win", -1);
	CreateDynamicObject(2441, 454.20410, -11.41230, 999.72858,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2441, 454.20410, -12.41230, 999.72858,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2441, 454.20410, -13.41230, 999.72858,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2441, 454.20410, -13.41230, 999.72858,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2441, 454.20410, -14.41230, 999.72858,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1557, 455.77649, -10.99167, 999.71680,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1541, 455.66260, -13.53840, 1001.96143,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1541, 455.66260, -14.95840, 1001.96143,   0.00000, 0.00000, 90.00000);
	Textura = CreateDynamicObject(19357, 448.60629, -22.02100, 1001.77667,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(Textura, 0, 18009, "genintrestrest1", "rest_wall5", -1);
	Textura = CreateDynamicObject(19357, 445.41998, -22.02189, 1001.77667,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(Textura, 0, 18009, "genintrestrest1", "rest_wall5", -1);
	Textura = CreateDynamicObject(19427, 443.03229, -22.02100, 1001.77667,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(Textura, 0, 18009, "genintrestrest1", "rest_wall5", -1);
	CreateDynamicObject(1536, 453.79199, -18.93620, 1000.10938,   0.00000, 0.00000, 90.00000);

//==================================FIX WELCOME PUMP============================
	CreateDynamicObject(19360, 681.58691, -450.60730, -26.49362,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19360, 681.58691, -450.60730, -22.99600,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1498, 680.74298, -450.68509, -26.66410,   0.00000, 0.00000, 0.00000);

//=================================CASINO INTERIOR==============================
	CreateObject(14623, 2806.24219, -1080.44409, 1010.19989,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14579, 2793.35498, -1066.41919, 1006.28796,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(14622, 2806.23560, -1054.03870, 1012.20001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1557, 2802.78979, -1042.24902, 1008.67450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1557, 2805.81812, -1042.24609, 1008.67450,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2188, 2788.79126, -1083.24231, 1005.63293,   0.00000, 0.00000, 99.06001);
	CreateDynamicObject(14582, 2806.13428, -1080.31970, 1008.11005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14611, 2806.13428, -1080.31970, 1007.85840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2784, 2820.05884, -1080.28943, 1005.94122,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1836, 2817.96924, -1080.56726, 1005.43292,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1833, 2820.09326, -1080.56726, 1005.44391,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1978, 2817.89209, -1068.36182, 1005.67999,   0.00000, 0.00000, 45.18000);
	CreateDynamicObject(2785, 2816.29346, -1087.39978, 1005.46350,   0.00000, 0.00000, 53.16001);
	CreateDynamicObject(1895, 2788.18799, -1087.80334, 1006.46436,   0.00000, 0.00000, -242.69987);
	CreateDynamicObject(1836, 2817.97583, -1080.04724, 1005.43292,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1836, 2822.16919, -1080.56726, 1005.43292,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1836, 2822.17578, -1080.04724, 1005.43292,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1833, 2820.10767, -1080.03406, 1005.44391,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1978, 2820.96948, -1072.45483, 1005.67999,   0.00000, 0.00000, 27.90000);
	CreateDynamicObject(2785, 2815.57007, -1086.85999, 1005.46350,   0.00000, 0.00000, -127.50010);
	CreateDynamicObject(1895, 2789.59399, -1090.58362, 1006.46436,   0.00000, 0.00000, -242.99986);
	CreateDynamicObject(2188, 2788.77905, -1077.49268, 1005.63287,   0.00000, 0.00000, 80.94000);
	CreateDynamicObject(1824, 2796.94580, -1073.39136, 1005.13342,   0.00000, 0.00000, -126.06001);
	CreateDynamicObject(1896, 2789.49072, -1087.18347, 1005.63287,   0.00000, 0.00000, 117.00000);
	CreateDynamicObject(1896, 2790.84351, -1089.88733, 1005.63287,   0.00000, 0.00000, 117.00000);
	CreateDynamicObject(1978, 2794.72388, -1080.28174, 1005.72961,   0.00000, 0.00000, 1.02000);
	CreateDynamicObject(1978, 2796.98608, -1087.24231, 1005.72961,   0.00000, 0.00000, 37.02000);
	CreateDynamicObject(2785, 2809.79370, -1092.03882, 1005.46350,   0.00000, 0.00000, 16.92000);
	CreateDynamicObject(2785, 2809.50903, -1091.10889, 1005.46350,   0.00000, 0.00000, 196.50011);
	CreateDynamicObject(2412, 2811.87451, -1059.84485, 1004.64844,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 2816.70435, -1060.06116, 1005.15027,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 2814.78418, -1060.06116, 1005.15002,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 2812.86426, -1060.06116, 1005.15033,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2412, 2809.87451, -1059.84485, 1004.64838,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 2795.76440, -1060.06116, 1005.15033,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 2797.68433, -1060.06116, 1005.15002,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 2799.60547, -1060.06116, 1005.15033,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2412, 2801.27441, -1059.84485, 1004.64838,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2412, 2803.27441, -1059.84485, 1004.64838,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2412, 2805.27441, -1059.84485, 1004.64838,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2412, 2807.87451, -1059.84485, 1004.64838,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 2806.23999, -1060.06116, 1005.15033,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2785, 2789.37646, -1071.48523, 1005.46350,   0.00000, 0.00000, -296.94009);
	CreateDynamicObject(2785, 2792.80835, -1066.73145, 1005.46350,   0.00000, 0.00000, -314.94000);
	CreateDynamicObject(2785, 2819.61816, -1093.63794, 1005.46350,   0.00000, 0.00000, -135.72006);
	CreateDynamicObject(2785, 2815.01978, -1097.16907, 1005.46350,   0.00000, 0.00000, -153.23996);
	CreateDynamicObject(19380, 2805.18311, -1118.97778, 1008.32178,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19380, 2815.68311, -1118.97778, 1008.32178,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19380, 2805.35571, -1099.30432, 1008.32178,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19380, 2810.51709, -1104.64502, 1008.32178,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19380, 2803.31567, -1109.82422, 1008.32178,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19380, 2808.47607, -1104.59998, 1008.32178,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19380, 2808.34644, -1111.77185, 1008.32178,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(1491, 2800.08545, -1111.78564, 1004.62817,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1491, 2803.11011, -1111.76501, 1004.62817,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19380, 2797.84644, -1111.77185, 1011.93781,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(14455, 2806.90308, -1118.72632, 1006.32312,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14455, 2801.14307, -1118.72632, 1006.32312,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2184, 2809.18530, -1114.21106, 1004.64001,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1714, 2811.10010, -1115.27295, 1004.65363,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(11666, 2809.52441, -1116.41479, 1006.35248,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19175, 2807.67432, -1111.88550, 1007.09637,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19173, 2812.38330, -1116.20129, 1006.55719,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1720, 2808.13940, -1114.12292, 1004.63220,   0.00000, 0.00000, 68.04000);
	CreateDynamicObject(1720, 2808.08105, -1116.26404, 1004.63220,   0.00000, 0.00000, 102.96003);
	CreateDynamicObject(1720, 2803.33398, -1117.33582, 1004.63220,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1433, 2803.27686, -1116.00598, 1004.82123,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2189, 2803.30591, -1116.02454, 1005.34479,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1720, 2802.06641, -1116.09973, 1004.63220,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1720, 2804.52637, -1115.97974, 1004.63220,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1720, 2803.25391, -1114.77576, 1004.63220,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1921, 2802.61694, -1116.30872, 1005.32202,   0.00000, 0.00000, 239.03999);
	CreateDynamicObject(1931, 2802.60962, -1116.36487, 1005.32202,   0.00000, 0.00000, 239.03999);
	CreateDynamicObject(1931, 2802.98950, -1115.31726, 1005.32202,   0.00000, 0.00000, 239.03999);
	CreateDynamicObject(1931, 2803.98999, -1116.16296, 1005.32202,   0.00000, 0.00000, 239.03999);
	CreateDynamicObject(1931, 2803.11255, -1116.76025, 1005.32202,   0.00000, 0.00000, 239.03999);
	CreateDynamicObject(1921, 2802.97021, -1115.35742, 1005.32202,   0.00000, 0.00000, 239.03999);
	CreateDynamicObject(1921, 2804.05127, -1116.24194, 1005.32202,   0.00000, 0.00000, 239.03999);
	CreateDynamicObject(1921, 2803.09326, -1116.79968, 1005.32202,   0.00000, 0.00000, 239.03999);
	CreateDynamicObject(2894, 2809.81201, -1114.80554, 1005.40997,   0.00000, 0.00000, 67.97999);
	CreateDynamicObject(2606, 2800.09570, -1116.06812, 1007.97998,   20.00000, 0.00000, 90.00000);
	CreateDynamicObject(2606, 2799.99561, -1116.06812, 1007.46069,   10.00000, 0.00000, 90.00000);
	CreateDynamicObject(1557, 2808.49438, -1107.75549, 1004.63916,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1557, 2808.49438, -1102.59546, 1004.63922,   0.00000, 0.00000, 90.00000);
	CreateObject(19380, 2799.40112, -1052.23340, 1005.52063,   0.00000, 73.20000, 90.00000);
	CreateObject(19380, 2809.08105, -1052.23340, 1005.52063,   0.00000, 73.20000, 90.00000);
	CreateObject(19380, 2818.70117, -1052.23340, 1005.52057,   0.00000, 73.20000, 90.00000);
	CreateObject(19380, 2813.43213, -1047.02637, 1007.12878,   0.00000, 73.20000, 90.00000);
	CreateObject(19380, 2803.79199, -1047.02637, 1007.12878,   0.00000, 73.20000, 90.00000);
	CreateObject(19380, 2794.15210, -1047.02637, 1007.12885,   0.00000, 73.20000, 90.00000);
	CreateDynamicObject(2350, 2811.09888, -1076.99939, 1005.00989,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2350, 2812.10498, -1080.37524, 1005.00989,   0.00000, 0.00000, -42.96000);
	CreateDynamicObject(2350, 2812.13574, -1079.24402, 1005.00989,   0.00000, 0.00000, -59.82000);
	CreateDynamicObject(2350, 2810.11890, -1084.84375, 1005.00989,   0.00000, 0.00000, -59.82000);
	CreateDynamicObject(2350, 2809.64355, -1075.52429, 1005.00989,   0.00000, 0.00000, -59.82000);
	CreateDynamicObject(2350, 2804.00708, -1074.70044, 1005.00989,   0.00000, 0.00000, -59.82000);
	CreateDynamicObject(2350, 2802.15601, -1075.98218, 1005.00989,   0.00000, 0.00000, -59.82000);
	CreateDynamicObject(2350, 2800.50610, -1079.02979, 1005.00989,   0.00000, 0.00000, -111.60001);
	CreateDynamicObject(2350, 2800.34082, -1080.14185, 1005.00989,   0.00000, 0.00000, -150.47997);
	CreateDynamicObject(2350, 2800.70337, -1082.22485, 1005.00989,   0.00000, 0.00000, -177.29994);
	CreateDynamicObject(2350, 2801.58105, -1083.85840, 1005.00989,   0.00000, 0.00000, -177.29994);
	CreateDynamicObject(2350, 2802.65527, -1084.87769, 1005.00989,   0.00000, 0.00000, -140.39998);
	CreateDynamicObject(1979, 2796.03418, -1086.28198, 1005.67010,   0.00000, 0.00000, 37.02000);
	CreateDynamicObject(1979, 2794.49219, -1078.93054, 1005.68347,   0.00000, 0.00000, 1.02000);
	CreateDynamicObject(1979, 2816.79736, -1067.54028, 1005.65289,   0.00000, 0.00000, 45.18000);
	CreateDynamicObject(1979, 2820.15552, -1071.35449, 1005.60541,   0.00000, 0.00000, 27.90000);

//================================CASINO EXTERIOR 1=============================
	CreateDynamicObject(7288, 1691.89001, -1343.38513, 29.54490,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(7315, 1679.52783, -1339.64795, 31.29655,   0.00000, 0.00000, 132.05998);
    CreateDynamicObject(7315, 1676.62476, -1352.50305, 31.29650,   0.00000, 0.00000, 60.30000);
    CreateDynamicObject(9833, 1693.63525, -1343.38330, 18.50295,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3515, 1694.06348, -1343.38574, 15.69804,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(749, 1698.49634, -1328.64771, 16.22736,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(877, 1699.34094, -1326.42688, 17.95135,   0.00000, 0.00000, -12.18000);
	CreateDynamicObject(869, 1699.88098, -1329.86304, 16.73954,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(819, 1699.27844, -1324.19214, 16.88918,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1700.33911, -1330.25623, 16.76057,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(742, 1699.58630, -1361.62854, 16.61069,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(742, 1698.53491, -1359.07434, 16.61069,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(801, 1698.57312, -1364.55798, 15.37371,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(817, 1700.62878, -1357.40918, 16.64525,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1700.48206, -1360.29517, 16.49658,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(872, 1698.40515, -1361.63269, 16.37837,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(822, 1697.86572, -1357.42090, 16.35331,   0.00000, 0.00000, 77.10001);
	CreateDynamicObject(870, 1700.24976, -1363.17383, 16.49658,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(809, 1694.15906, -1342.96814, 15.89441,   0.00000, 0.00000, 77.10000);

//================================CASINO EXTERIOR 2=============================
    CreateDynamicObject(1568, 1025.21899, -1122.49390, 22.73803,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1568, 1019.50610, -1122.65430, 22.73803,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3471, 1017.48499, -1122.48853, 24.11240,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3471, 1027.29956, -1122.40344, 24.11240,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(9482, 1022.20563, -1130.32275, 29.33718,   0.00000, 0.00000, 89.16000);
    CreateDynamicObject(3802, 1027.71521, -1131.41870, 27.02440,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3802, 1032.43616, -1131.47876, 27.02440,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3802, 1016.68109, -1131.23865, 27.02440,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3802, 1011.96729, -1131.17871, 27.02440,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3531, 1022.42078, -1118.71960, 28.47788,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3528, 1022.10150, -1120.45642, 31.16140,   0.00000, 0.00000, -94.14000);

//====================================RESTAURANT================================
	CreateObject(14777, -246.48650, -2021.79346, 1010.03131,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2120, -240.87950, -2015.03418, 1012.05359,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2120, -238.61951, -2015.03418, 1012.05359,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2120, -237.75951, -2015.03418, 1012.05359,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2120, -235.61951, -2015.03418, 1012.05359,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2120, -234.75951, -2015.03418, 1012.05359,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2120, -232.51950, -2015.03418, 1012.05359,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18057, -233.63852, -2019.08044, 1010.43835,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2120, -244.73500, -2023.05029, 1010.67120,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2120, -244.73500, -2024.51038, 1010.67120,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2120, -245.67500, -2024.51038, 1010.67120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2120, -240.93500, -2024.51038, 1010.67120,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2120, -237.25500, -2024.51038, 1010.67120,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2120, -233.47501, -2024.49036, 1010.67120,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2120, -233.47501, -2023.05029, 1010.67120,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2120, -237.25500, -2023.05029, 1010.67120,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2120, -240.93500, -2023.05029, 1010.67120,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2120, -245.67500, -2023.05029, 1010.67120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2120, -247.93500, -2023.05029, 1010.67120,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2120, -247.93500, -2024.51038, 1010.67120,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2120, -242.47501, -2024.51038, 1010.67120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2120, -238.67500, -2024.51038, 1010.67120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2120, -234.99500, -2024.51038, 1010.67120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2120, -231.25500, -2024.51038, 1010.67120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2120, -231.25500, -2023.05029, 1010.67120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2120, -235.02319, -2023.05029, 1010.67120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2120, -238.67500, -2023.05029, 1010.67120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2120, -242.47501, -2023.05029, 1010.67120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2120, -232.59245, -2018.39465, 1010.67120,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2120, -234.05251, -2018.39465, 1010.67120,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2120, -236.87250, -2018.39465, 1010.67120,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2120, -238.25250, -2018.39465, 1010.67120,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2120, -241.01250, -2018.39465, 1010.67120,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2120, -242.31250, -2018.39465, 1010.67120,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2120, -244.79250, -2018.39465, 1010.67120,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2120, -246.15250, -2018.39465, 1010.67120,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2120, -246.15250, -2020.85474, 1010.67120,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2120, -244.79250, -2020.85474, 1010.67120,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2120, -242.31250, -2020.85474, 1010.67120,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2120, -241.01250, -2020.85474, 1010.67120,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2120, -236.87250, -2020.85474, 1010.67120,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2120, -234.05251, -2020.85474, 1010.67120,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2120, -232.59250, -2020.85474, 1010.67120,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1753, -237.27885, -2028.35181, 1011.29480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1754, -234.04210, -2029.10352, 1011.29480,   0.00000, 0.00000, -59.40000);
	CreateDynamicObject(1746, -238.19197, -2030.09045, 1011.27753,   0.00000, 0.00000, 100.80000);
	CreateDynamicObject(1754, -233.74136, -2030.37537, 1011.29480,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1754, -237.18593, -2031.38318, 1011.29480,   0.00000, 0.00000, -216.35994);
	CreateDynamicObject(2117, -236.54926, -2030.00098, 1010.98895,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1753, -249.85817, -2030.32727, 1011.29480,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1753, -246.55939, -2028.30054, 1011.29480,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2117, -248.18114, -2029.86243, 1010.98901,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1753, -243.51140, -2028.32703, 1011.29480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1746, -240.33723, -2030.57178, 1011.27753,   0.00000, 0.00000, 71.04002);
	CreateDynamicObject(1754, -240.29849, -2029.03503, 1011.29480,   0.00000, 0.00000, -59.40000);
	CreateDynamicObject(1754, -244.42532, -2029.59534, 1011.29480,   0.00000, 0.00000, -269.22000);
	CreateDynamicObject(2117, -242.91516, -2029.89929, 1010.98895,   0.00000, 0.00000, 0.90000);
	CreateDynamicObject(1753, -256.55591, -2033.90051, 1009.94562,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1746, -253.25613, -2030.91199, 1009.94562,   0.00000, 0.00000, -404.69989);
	CreateDynamicObject(1754, -252.98221, -2032.81921, 1009.94562,   0.00000, 0.00000, -89.99998);
	CreateDynamicObject(2117, -254.60887, -2033.29468, 1009.61365,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1753, -253.45499, -2035.15588, 1009.94562,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2069, -256.58023, -2035.10815, 1010.05011,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2596, -239.45630, -2021.77075, 1013.57489,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2596, -237.55630, -2021.77075, 1013.57489,   0.00000, 0.00000, 90.00000);
	
//====================================ASTILLERO=================================
	CreateDynamicObject(10830, 2933.24121, -2051.62744, 4.30050,   0.00000, 0.00000, -44.64000);
	
//=====================================HQ CHINO=================================
	CreateObject(14789, 2944.60449, -1974.24365, 1010.00000,   0.00000, 0.00000, 0.00000);
	Textura = CreateDynamicObject(19379, 2966.96997, -1984.66113, 1008.66160,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(Textura, 0, 14789, "ab_sfgymmain", "ab_panelWall1", -1);
	CreateDynamicObject(3038, 2958.07129, -1967.65149, 1011.43048,   0.00000, 0.00000, -23.70000);
	Textura = CreateDynamicObject(18070, 2970.06396, -1981.01355, 1006.26221,   0.00000, 0.00000, -89.10000);
	SetDynamicObjectMaterial(Textura, 0, 14789, "ab_sfgymmain", "knot_wood128", -1);
	Textura = CreateDynamicObject(14855, 2966.07959, -1978.69141, 1010.25452,   0.00000, 0.00000, 180.00000);
	SetDynamicObjectMaterial(Textura, 1, 14534, "ab_wooziea", "ab_wuziwillow", -1);
	SetDynamicObjectMaterial(Textura, 0, 14789, "ab_sfgymmain", "knot_wood128", -1);
	CreateDynamicObject(3038, 2959.26636, -1995.69641, 1011.43048,   0.00000, 0.00000, 45.42000);
	CreateDynamicObject(1541, 2964.20996, -1981.90454, 1006.94830,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1545, 2968.47974, -1983.16858, 1007.66388,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1551, 2963.46729, -1983.51538, 1006.99371,   0.00000, 0.00000, 14.22000);
	Textura = CreateDynamicObject(2774, 2956.37744, -1981.18005, 1010.43048,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(Textura, 1, 14789, "ab_sfgymmain", "knot_wood128", -1);
	Textura = CreateDynamicObject(2774, 2956.37744, -1989.89001, 1010.43048,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(Textura, 1, 14789, "ab_sfgymmain", "knot_wood128", -1);
	Textura = CreateDynamicObject(2774, 2956.37744, -1972.27002, 1010.43048,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(Textura, 1, 14789, "ab_sfgymmain", "knot_wood128", -1);
	CreateDynamicObject(1541, 2964.20996, -1979.36230, 1006.94830,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1541, 2964.83081, -1975.46448, 1006.94830,   0.00000, 0.00000, -123.78012);
	CreateDynamicObject(1548, 2963.55273, -1982.78931, 1006.77368,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2260, 2962.48511, -1978.23364, 1011.89801,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2292, 2960.77637, -1965.87915, 1005.75970,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2291, 2961.26074, -1965.87915, 1005.75970,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(626, 2967.55591, -1964.95166, 1007.81158,   0.00000, 0.00000, -123.42000);
	CreateDynamicObject(2755, 2956.37329, -1969.41492, 1007.49658,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1545, 2968.47974, -1979.44812, 1007.66388,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1548, 2963.57495, -1980.26050, 1006.77368,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1548, 2965.27197, -1974.01294, 1006.77368,   0.00000, 0.00000, 45.95999);
	CreateDynamicObject(1520, 2963.42627, -1981.90381, 1006.81238,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1664, 2963.43018, -1981.55176, 1006.92480,   0.00000, 0.00000, -22.80000);
	CreateDynamicObject(1551, 2963.78589, -1980.29980, 1006.99371,   0.00000, 0.00000, 14.22000);
	CreateDynamicObject(1664, 2963.61475, -1977.55872, 1006.92480,   0.00000, 0.00000, -22.80000);
	CreateDynamicObject(1664, 2965.53979, -1974.10425, 1006.92480,   0.00000, 0.00000, -22.80000);
	CreateDynamicObject(1664, 2965.33081, -1974.22302, 1006.92480,   0.00000, 0.00000, -22.80000);
	CreateDynamicObject(1520, 2964.14624, -1976.74561, 1006.81238,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1520, 2964.43555, -1974.91675, 1006.81238,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1551, 2963.83374, -1976.29846, 1006.99371,   0.00000, 0.00000, 14.22000);
	CreateDynamicObject(1551, 2964.22437, -1975.26794, 1006.99371,   0.00000, 0.00000, 14.22000);
	CreateDynamicObject(2291, 2962.24219, -1965.87915, 1005.75970,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2291, 2963.21460, -1965.87915, 1005.75970,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2291, 2964.19067, -1965.87915, 1005.75970,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2292, 2965.66504, -1965.87915, 1005.75970,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2293, 2961.90161, -1967.99829, 1005.75970,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2293, 2964.32544, -1967.99585, 1005.75970,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2261, 2962.45947, -1979.57837, 1011.85797,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2262, 2962.47412, -1981.04224, 1011.93799,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2264, 2962.45679, -1982.45813, 1011.90802,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2265, 2962.46631, -1983.60779, 1011.87799,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2270, 2962.46509, -1978.12024, 1008.53735,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2267, 2963.92944, -1974.44617, 1012.21014,   0.00000, 0.00000, -122.16010);
	CreateDynamicObject(2290, 2967.17480, -1967.62659, 1005.75970,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2290, 2959.12598, -1969.48877, 1005.75970,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2357, 2966.19019, -1991.22986, 1006.16888,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18077, 2960.36108, -1981.08154, 1006.32831,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2293, 2964.32544, -1969.77783, 1005.75970,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2293, 2961.88721, -1969.75000, 1005.75970,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1739, 2965.49072, -1994.38510, 1006.57709,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2120, 2967.81934, -1992.32959, 1006.40039,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2120, 2967.81934, -1991.28967, 1006.40039,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2120, 2967.81934, -1990.18054, 1006.40039,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2120, 2966.17627, -1988.11755, 1006.40039,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2120, 2964.84497, -1988.11755, 1006.40039,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2120, 2963.22559, -1990.18054, 1006.40039,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2120, 2963.22559, -1991.28967, 1006.40039,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2120, 2963.22559, -1992.32959, 1006.40039,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1548, 2968.18384, -1978.99902, 1006.77368,   0.00000, 0.00000, 77.58000);
	CreateDynamicObject(1548, 2968.09863, -1982.54163, 1006.77368,   0.00000, 0.00000, 86.16003);
	CreateDynamicObject(1551, 2968.22510, -1983.44763, 1007.01367,   0.00000, 0.00000, 14.22000);
	CreateDynamicObject(1520, 2968.25586, -1979.98767, 1006.83240,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1520, 2968.26392, -1980.20837, 1006.83240,   0.00000, 0.00000, 23.64000);
	CreateDynamicObject(1520, 2968.27246, -1980.42932, 1006.83240,   0.00000, 0.00000, 119.63999);
	CreateDynamicObject(1520, 2968.10034, -1980.27991, 1006.83240,   0.00000, 0.00000, 119.63999);
	CreateDynamicObject(1520, 2967.86523, -1980.16675, 1006.83240,   0.00000, 0.00000, 119.63999);
	CreateDynamicObject(1520, 2967.75415, -1980.36084, 1006.83240,   0.00000, 0.00000, 23.64000);
	CreateDynamicObject(1664, 2968.29224, -1981.09387, 1006.94482,   0.00000, 0.00000, -22.80000);
	CreateDynamicObject(1664, 2968.04639, -1981.22351, 1006.94482,   0.00000, 0.00000, 112.44000);
	CreateDynamicObject(1664, 2968.09570, -1980.95581, 1006.94482,   0.00000, 0.00000, 155.33998);
	CreateDynamicObject(1664, 2967.84229, -1981.02612, 1006.94482,   0.00000, 0.00000, 155.33998);
	CreateDynamicObject(1664, 2967.88477, -1981.38354, 1006.94482,   0.00000, 0.00000, 155.33998);
	CreateDynamicObject(1664, 2968.08691, -1981.56104, 1006.94482,   0.00000, 0.00000, 208.31993);
	CreateDynamicObject(1664, 2967.80225, -1981.53491, 1006.94482,   0.00000, 0.00000, 208.31993);
	CreateDynamicObject(1520, 2967.81445, -1980.61035, 1006.83240,   0.00000, 0.00000, 82.02001);
	CreateDynamicObject(1520, 2967.87598, -1979.90991, 1006.83240,   0.00000, 0.00000, 82.02001);
	CreateDynamicObject(1551, 2968.30566, -1984.26794, 1007.01367,   0.00000, 0.00000, 126.72002);
	CreateDynamicObject(1551, 2968.00464, -1983.98083, 1007.01367,   0.00000, 0.00000, 126.72002);
	CreateDynamicObject(1551, 2968.01782, -1983.61902, 1007.01367,   0.00000, 0.00000, 126.72002);
	CreateDynamicObject(1551, 2967.86060, -1984.40442, 1007.01367,   0.00000, 0.00000, 44.76004);
	CreateDynamicObject(1551, 2967.82739, -1983.81311, 1007.01367,   0.00000, 0.00000, 71.64000);
	CreateDynamicObject(1551, 2967.80103, -1983.44519, 1007.01367,   0.00000, 0.00000, 14.22000);
	CreateDynamicObject(1664, 2963.54956, -1979.18652, 1006.92480,   0.00000, 0.00000, -22.80000);
	Textura = CreateDynamicObject(19379, 2956.35840, -1990.18604, 1008.66160,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(Textura, 0, 14789, "ab_sfgymmain", "ab_panelWall1", -1);
	CreateDynamicObject(3471, 2955.95361, -1981.16113, 1007.00537,   0.00000, 0.00000, 180.00000);
	Textura = CreateDynamicObject(19379, 2951.51733, -1977.71326, 1008.66160,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(Textura, 0, 14789, "ab_sfgymmain", "ab_panelWall1", -1);
	CreateDynamicObject(2755, 2956.37329, -1965.89331, 1007.49658,   0.00000, 0.00000, 90.00000);
	Textura = CreateDynamicObject(19379, 2941.88354, -1977.71326, 1008.66160,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(Textura, 0, 14789, "ab_sfgymmain", "ab_panelWall1", -1);
	CreateDynamicObject(2232, 2944.19800, -1975.71558, 1006.33746,   0.00000, 0.00000, 100.80005);
	CreateDynamicObject(2232, 2944.22339, -1972.65942, 1006.33746,   0.00000, 0.00000, 75.78004);
	CreateDynamicObject(2232, 2944.19800, -1975.71558, 1007.51782,   0.00000, 0.00000, 100.80000);
	CreateDynamicObject(2232, 2944.22339, -1972.65942, 1007.51782,   0.00000, 0.00000, 75.78000);
	CreateDynamicObject(2086, 2944.14551, -1974.20630, 1006.15942,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1809, 2944.15454, -1974.15991, 1006.56091,   0.00000, 0.00000, 90.00000);
	Textura = CreateDynamicObject(19379, 2956.35449, -1982.44348, 1008.66160,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(Textura, 0, 14789, "ab_sfgymmain", "ab_panelWall1", -1);
	CreateDynamicObject(2357, 2964.87329, -1991.22986, 1006.16888,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14455, 2949.69653, -1977.97742, 1007.42310,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(14455, 2949.69653, -1977.97742, 1010.74219,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(14455, 2955.45044, -1977.97742, 1007.42310,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(14455, 2955.45776, -1977.95886, 1010.74219,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3471, 2955.95361, -1989.85645, 1007.00537,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3471, 2956.81812, -1989.85974, 1007.00537,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3471, 2956.81812, -1981.18457, 1007.00537,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3471, 2956.81812, -1972.24683, 1007.00537,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3471, 2955.95361, -1972.26123, 1007.00537,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3038, 2959.73364, -1987.51343, 1011.43048,   0.00000, 0.00000, -45.23999);
	CreateDynamicObject(3038, 2960.20215, -1974.75879, 1011.43048,   0.00000, 0.00000, 60.42001);
	CreateDynamicObject(2278, 2949.89160, -1978.36304, 1012.88348,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2279, 2951.39380, -1978.29504, 1012.96600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2280, 2953.14233, -1978.29504, 1012.70850,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2281, 2954.98071, -1978.29504, 1012.76599,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2282, 2945.98315, -1978.29504, 1012.75067,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2283, 2947.95190, -1977.83496, 1013.11499,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1714, 2944.21680, -1988.24646, 1005.74042,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2725, 2943.77173, -1986.11316, 1006.16211,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(339, 2943.34497, -1987.69531, 1009.19769,   195.00000, -90.00000, 90.00000);
	CreateDynamicObject(334, 2943.40332, -1987.50525, 1008.33551,   180.00000, 90.00000, -180.00000);
	CreateDynamicObject(339, 2943.34497, -1987.69531, 1008.85773,   195.00000, -90.00000, 90.00000);
	CreateDynamicObject(339, 2943.34497, -1987.69531, 1008.49768,   195.00000, -90.00000, 90.00000);
	CreateDynamicObject(334, 2943.40332, -1988.58289, 1008.32550,   180.00000, 90.00000, -180.00000);
	CreateDynamicObject(334, 2943.40332, -1987.50525, 1008.69550,   180.00000, 90.00000, -180.00000);
	CreateDynamicObject(334, 2943.40332, -1987.50525, 1009.02911,   180.00000, 90.00000, -180.00000);
	CreateDynamicObject(334, 2943.40332, -1988.58289, 1008.69550,   180.00000, 90.00000, -180.00000);
	CreateDynamicObject(334, 2943.40332, -1988.58289, 1009.03912,   180.00000, 90.00000, -180.00000);
	CreateDynamicObject(2205, 2945.68628, -1987.62537, 1005.74127,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(330, 2945.64282, -1987.55457, 1006.66211,   90.00000, 0.00000, 127.80000);
	CreateDynamicObject(2726, 2945.80200, -1988.90845, 1007.02362,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2894, 2945.46045, -1988.18616, 1006.67468,   0.00000, 0.00000, -91.50000);
	CreateDynamicObject(1715, 2947.32300, -1989.16394, 1005.72180,   0.00000, 0.00000, -114.18001);
	CreateDynamicObject(1715, 2947.45313, -1987.49426, 1005.72180,   0.00000, 0.00000, -77.09999);
	CreateDynamicObject(2571, 2954.54468, -1985.67737, 1005.76331,   0.00000, 0.00000, -94.14003);
	CreateDynamicObject(1668, 2955.37158, -1987.21387, 1006.42078,   0.00000, 0.00000, 146.70000);
	CreateDynamicObject(1667, 2955.23804, -1987.35510, 1006.35181,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1667, 2943.80957, -1986.22302, 1006.69659,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1512, 2943.75269, -1986.03381, 1006.79718,   0.00000, 0.00000, -179.46001);
	CreateDynamicObject(2571, 2949.44385, -1965.37036, 1005.76111,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2241, 2950.94385, -1964.50867, 1006.66919,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2251, 2943.86450, -1990.19958, 1006.61249,   0.00000, 0.00000, 294.78009);
	CreateDynamicObject(1670, 2963.42432, -1976.75989, 1006.77411,   0.00000, 0.00000, 91.08002);
	CreateDynamicObject(2069, 2954.86206, -1985.28552, 1005.80615,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2964, 2949.68042, -1982.73193, 1005.74396,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(338, 2950.58472, -1982.91577, 1006.75647,   -65.70000, 106.20010, 181.56010);
	CreateDynamicObject(338, 2950.73120, -1983.52661, 1006.78351,   -65.68000, 106.20010, 165.18021);
	CreateDynamicObject(2965, 2949.10962, -1982.71362, 1006.66711,   0.00000, 0.00000, -38.76000);
	CreateDynamicObject(2636, 2950.05103, -1980.84241, 1006.29370,   0.00000, 0.00000, 72.18000);
	CreateDynamicObject(2636, 2948.52930, -1980.83789, 1006.34131,   0.00000, 0.00000, 122.75994);
	CreateDynamicObject(2636, 2949.20581, -1984.20349, 1006.34058,   0.00000, 0.00000, 254.34003);
	Textura = CreateDynamicObject(19379, 2948.12036, -1995.05994, 1008.66160,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(Textura, 0, 14789, "ab_sfgymmain", "ab_panelWall1", -1);
	CreateDynamicObject(2332, 2942.98071, -1989.11890, 1006.77844,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2358, 2945.06323, -1995.69397, 1005.88080,   0.00000, 0.00000, 56.34000);
	CreateDynamicObject(2358, 2945.06323, -1995.69397, 1006.12170,   0.00000, 0.00000, 86.70000);
	CreateDynamicObject(2358, 2945.07935, -1996.73755, 1005.88660,   0.00000, 0.00000, 86.70000);
	CreateDynamicObject(2358, 2945.07935, -1996.73755, 1006.11841,   0.00000, 0.00000, 69.71999);
	CreateDynamicObject(2991, 2948.87793, -1998.52478, 1006.39288,   0.00000, 0.00000, 90.36000);
	CreateDynamicObject(2991, 2948.26074, -1998.53235, 1007.64337,   0.00000, 0.00000, 90.36000);
	CreateDynamicObject(2755, 2952.76001, -1993.42114, 1007.49658,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14455, 2946.02271, -1994.81299, 1007.42310,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2011, 2951.86743, -1994.28198, 1005.75403,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2076, 2950.45825, -1971.82202, 1012.94312,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2076, 2961.98682, -1969.40564, 1012.94312,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2076, 2966.02222, -1980.39197, 1012.94312,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2076, 2959.73975, -1984.05444, 1012.94312,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2076, 2964.26978, -1991.08142, 1012.94312,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2076, 2949.28931, -1997.05029, 1012.94312,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2076, 2949.30493, -1990.71899, 1012.94312,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2076, 2949.58569, -1982.81384, 1012.94312,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2069, 2967.97949, -1985.51709, 1005.80090,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2069, 2959.13745, -1965.62097, 1005.80090,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19174, 2956.25195, -1998.48389, 1007.99432,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19172, 2966.54443, -1998.49487, 1007.99432,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2204, 2968.48486, -1996.04150, 1005.71960,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2257, 2964.18408, -1963.92615, 1010.58173,   0.00000, 0.00000, 0.00000);
	Textura = CreateDynamicObject(19443, 2964.26733, -1998.64978, 1006.89874,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(Textura, 0, 14789, "ab_sfgymmain", "knot_wood128", -1);
	CreateDynamicObject(2571, 2946.45410, -1983.16089, 1005.76331,   0.00000, 0.00000, 89.22002);
	CreateDynamicObject(2069, 2944.79468, -1981.26416, 1005.80090,   0.00000, 0.00000, 0.00000);
	Textura = CreateDynamicObject(2774, 2944.10254, -1982.58472, 1010.43048,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(Textura, 1, 14789, "ab_sfgymmain", "knot_wood128", -1);
	Textura = CreateDynamicObject(2774, 2944.10278, -1979.19165, 1010.43048,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(Textura, 1, 14789, "ab_sfgymmain", "knot_wood128", -1);
	CreateDynamicObject(1616, 2955.19360, -1972.29065, 1011.62128,   0.00000, 0.00000, -5.93998);
	CreateDynamicObject(2606, 2956.13403, -1985.77734, 1009.03918,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2606, 2956.13403, -1985.77734, 1009.49219,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2606, 2956.13403, -1985.77734, 1008.58191,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1616, 2957.34863, -1981.02832, 1011.62128,   0.00000, 0.00000, 212.76001);
	CreateDynamicObject(1616, 2960.51782, -1998.22266, 1012.20728,   0.00000, 0.00000, 271.32004);
	CreateDynamicObject(1616, 2945.28857, -1982.43188, 1011.50183,   0.00000, 0.00000, 168.72029);
	CreateDynamicObject(14455, 2947.94165, -1977.43896, 1007.42218,   0.00000, 0.00000, 0.00000);

//===================================HQ ITALIANO================================
	Textura = CreateObject(14853, 2925.96411, -835.51038, 1010.00000,   0.00000, 0.00000, 0.00000);
	SetObjectMaterial(Textura, 2, 14853, "gen_pol_vegas", "mp_cop_panel", -1);
	SetObjectMaterial(Textura, 5, 14703, "vghsb3int2", "HS2_3Carpet1", -1);
	SetObjectMaterial(Textura, 8, 14703, "vghsb3int2", "btdeck256", -1);
	SetObjectMaterial(Textura, 9, 14853, "gen_pol_vegas", "mp_cop_panel", -1);
	Textura = CreateDynamicObject(14854, 2957.47217, -819.11298, 1011.37769,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(Textura, 1, 2267, "picture_frame", "CJ_PAINTING19", -1);
	Textura = CreateDynamicObject(19375, 2904.52808, -826.55310, 1010.1000,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(Textura, 0, 14853, "gen_pol_vegas", "office_wallnu1", 0xFF746263);
	Textura = CreateDynamicObject(19375, 2909.25513, -834.18762, 1010.1000,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(Textura, 0, 14853, "gen_pol_vegas", "office_wallnu1", 0xFF746263);
	Textura = CreateDynamicObject(19375, 2909.25000, -831.44757, 1014.01001,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(Textura, 0, 14853, "gen_pol_vegas", "office_wallnu1", 0xFF746263);
	Textura = CreateDynamicObject(18981, 2894.85913, -832.79388, 1017.34460,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(Textura, 0, 14853, "gen_pol_vegas", "office_wallnu1", 0xFF746263);
	Textura = CreateDynamicObject(18981, 2963.52002, -821.73901, 1021.47571,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(Textura, 0, 14853, "gen_pol_vegas", "office_wallnu1", 0xFF746263);
	Textura = CreateDynamicObject(18981, 2896.83643, -839.00330, 1004.35712,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(Textura, 0, 14754, "sfhsb3", "ah_flrtile1", -1);
	Textura = CreateDynamicObject(19375, 2915.75830, -815.12140, 1008.68378,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(Textura, 0, 14853, "gen_pol_vegas", "office_wallnu1", -1);
	Textura = CreateDynamicObject(19375, 2915.75781, -815.02142, 1008.68378,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(Textura, 0, 14853, "gen_pol_vegas", "office_wallnu1", -1);
	Textura = CreateDynamicObject(19375, 2905.65845, -833.98615, 1008.62836,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(Textura, 0, 14853, "gen_pol_vegas", "office_wallnu1", -1);
	Textura = CreateDynamicObject(19375, 2896.02490, -833.98608, 1008.62842,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(Textura, 0, 14853, "gen_pol_vegas", "office_wallnu1", -1);
	Textura = CreateDynamicObject(19375, 2894.89600, -826.55310, 1008.62842,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(Textura, 0, 14853, "gen_pol_vegas", "office_wallnu1", -1);
	Textura = CreateDynamicObject(19381, 2962.12305, -809.37738, 1009.00012,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(Textura, 0, 14853, "gen_pol_vegas", "office_wallnu1", -1);
	Textura = CreateDynamicObject(2184, 2907.45483, -818.77429, 1009.99902,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(Textura, 0, 2184, "cj_office", "white32", 0xFF000000);
	SetDynamicObjectMaterial(Textura, 1, 1823, "cj_tables", "CJ_WOOD6", -1);
	Textura = CreateDynamicObject(19172, 2959.70850, -833.90894, 1010.63153,   0.00000, 0.00000, 180.00000);
	SetDynamicObjectMaterial(Textura, 0, 2184, "cj_office", "white32", 0xFF000000);
	CreateDynamicObject(1714, 2905.62183, -817.72333, 1009.98242,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14455, 2903.85498, -812.75598, 1011.65179,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2256, 2903.74927, -818.85107, 1012.16998,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2259, 2904.15430, -811.15173, 1011.85052,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2280, 2904.43286, -810.70782, 1012.07196,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2281, 2906.23462, -810.73224, 1012.12524,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14565, 2964.14063, -813.97949, 1010.95502,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14455, 2896.35986, -826.32092, 1006.53088,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14455, 2895.48169, -821.09387, 1006.53088,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2138, 2895.85938, -827.50299, 1004.85193,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2135, 2895.85938, -828.49200, 1004.85193,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2137, 2895.81763, -829.45001, 1004.85193,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2136, 2895.81006, -831.43402, 1004.85193,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2137, 2895.81006, -832.41498, 1004.85193,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2147, 2900.75171, -833.38208, 1004.84009,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2149, 2895.76318, -827.46881, 1006.05603,   0.00000, 0.00000, 62.46000);
	CreateDynamicObject(1753, 2958.55396, -828.18488, 1008.97882,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1746, 2957.00659, -830.63770, 1008.97882,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1754, 2961.90698, -828.61932, 1008.97882,   0.00000, 0.00000, -34.68000);
	CreateDynamicObject(1754, 2957.27930, -828.87622, 1008.97882,   0.00000, 0.00000, 52.56000);
	CreateDynamicObject(2232, 2961.74268, -833.31671, 1009.59521,   0.00000, 0.00000, 205.00000);
	CreateDynamicObject(2232, 2961.74268, -833.31671, 1010.79578,   0.00000, 0.00000, 205.00000);
	CreateDynamicObject(2232, 2957.40259, -833.31671, 1009.59521,   0.00000, 0.00000, 155.00000);
	CreateDynamicObject(2232, 2957.40259, -833.31671, 1010.79578,   0.00000, 0.00000, 155.00000);
	CreateDynamicObject(2082, 2958.73169, -833.91187, 1008.89471,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1783, 2960.24097, -833.44031, 1009.46472,   0.00000, 0.00000, 198.17992);
	CreateDynamicObject(2028, 2959.19165, -833.44550, 1009.47760,   0.00000, 0.00000, -191.27986);
	CreateDynamicObject(2069, 2962.68457, -829.24567, 1009.06085,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2360, 2963.19263, -821.58362, 1009.48999,   90.00000, 0.00000, -90.00000);
	CreateDynamicObject(14565, 2963.44629, -814.04645, 1010.95502,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2360, 2963.19189, -820.14880, 1009.49048,   90.00000, 0.00000, -90.00000);
	CreateDynamicObject(2360, 2963.19263, -818.71503, 1009.48999,   90.00000, 0.00000, -90.00000);
	CreateDynamicObject(2360, 2963.19189, -817.27802, 1009.49048,   90.00000, 0.00000, -90.00000);
	CreateDynamicObject(2360, 2963.19263, -815.84497, 1009.48999,   90.00000, 0.00000, -90.00000);
	CreateDynamicObject(2360, 2963.19189, -814.40900, 1009.49048,   90.00000, 0.00000, -90.00000);
	CreateDynamicObject(869, 2933.17114, -829.79602, 1010.06372,   0.00000, 0.00000, -12.90000);
	CreateDynamicObject(863, 2935.94751, -829.25543, 1009.51593,   0.00000, 0.00000, 86.94001);
	CreateDynamicObject(826, 2932.24243, -831.67639, 1009.99292,   0.00000, 0.00000, 72.84001);
	CreateDynamicObject(822, 2935.61133, -832.54730, 1009.64532,   0.00000, 0.00000, 115.19999);
	CreateDynamicObject(2357, 2914.37817, -829.46240, 1005.22278,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2357, 2915.69897, -829.46240, 1005.22278,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1739, 2915.02832, -832.27948, 1005.73608,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2120, 2916.85010, -828.30530, 1005.48700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2120, 2916.85010, -829.44531, 1005.48700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2120, 2916.85010, -830.64532, 1005.48700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2120, 2913.15015, -829.44531, 1005.48700,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2120, 2913.15015, -830.64532, 1005.48700,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2120, 2913.15015, -828.30530, 1005.48700,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2120, 2915.70605, -826.77863, 1005.48700,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2120, 2914.36621, -826.77863, 1005.48700,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1667, 2914.16528, -827.47162, 1005.72028,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1667, 2915.14575, -827.49841, 1005.72028,   0.00000, 0.00000, 56.58000);
	CreateDynamicObject(1667, 2916.11768, -827.96478, 1005.72028,   0.00000, 0.00000, 56.58000);
	CreateDynamicObject(1667, 2916.12744, -829.09253, 1005.72028,   0.00000, 0.00000, 56.58000);
	CreateDynamicObject(1667, 2916.13330, -830.29279, 1005.72028,   0.00000, 0.00000, 56.58000);
	CreateDynamicObject(1667, 2915.29199, -831.36572, 1005.72028,   0.00000, 0.00000, 56.58000);
	CreateDynamicObject(1667, 2913.95239, -830.94452, 1005.72028,   0.00000, 0.00000, 56.58000);
	CreateDynamicObject(1667, 2913.93921, -829.80573, 1005.72028,   0.00000, 0.00000, 56.58000);
	CreateDynamicObject(1667, 2913.91943, -828.64508, 1005.72028,   0.00000, 0.00000, 56.58000);
	CreateDynamicObject(1668, 2915.02271, -829.49622, 1005.79962,   0.00000, 0.00000, 8.64000);
	CreateDynamicObject(1669, 2915.11670, -829.34637, 1005.79962,   0.00000, 0.00000, -19.14000);
	CreateDynamicObject(1753, 2924.51367, -834.11627, 1004.83820,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1746, 2921.30933, -832.73291, 1004.83820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1754, 2925.75293, -833.22516, 1004.83820,   0.00000, 0.00000, 240.59995);
	CreateDynamicObject(1746, 2921.95972, -831.01135, 1004.83820,   0.00000, 0.00000, -46.13999);
	CreateDynamicObject(1823, 2922.46704, -833.03528, 1004.81317,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1823, 2923.63159, -833.03528, 1004.81317,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2305, 2895.81909, -833.38000, 1004.85193,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2137, 2896.81201, -833.38000, 1004.85193,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2139, 2897.80005, -833.37201, 1004.84497,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2137, 2898.79199, -833.38000, 1004.85193,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2137, 2899.77979, -833.38000, 1004.85193,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2136, 2902.77979, -833.40002, 1004.85193,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2140, 2903.76904, -833.38989, 1004.85193,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2140, 2904.75195, -833.38989, 1004.85193,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2138, 2905.72461, -833.38989, 1004.85193,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2137, 2906.72290, -833.38989, 1004.85193,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2135, 2907.70288, -833.39661, 1004.85193,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2305, 2908.66797, -833.38501, 1004.85193,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2137, 2908.66797, -832.39203, 1004.85193,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2138, 2908.66797, -831.41199, 1004.85193,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2140, 2908.66797, -830.41199, 1004.85193,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2109, 2900.25098, -828.92529, 1005.21167,   0.00000, 0.00000, 32.46000);
	CreateDynamicObject(2124, 2901.64014, -828.07806, 1005.68903,   0.00000, 0.00000, 35.58001);
	CreateDynamicObject(2124, 2900.21069, -827.46667, 1005.68903,   0.00000, 0.00000, 90.00004);
	CreateDynamicObject(2124, 2898.77441, -828.92523, 1005.68903,   0.00000, 0.00000, 182.10005);
	CreateDynamicObject(2124, 2900.89722, -830.22675, 1005.68903,   0.00000, 0.00000, 292.61990);
	CreateDynamicObject(14455, 2908.93604, -820.57092, 1006.53088,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(14455, 2914.69580, -820.57092, 1006.53088,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(14455, 2920.43579, -820.57092, 1006.53088,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2204, 2909.42212, -833.36871, 1004.87421,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(948, 2909.68188, -830.46051, 1004.83173,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2964, 2944.39624, -818.84534, 1008.99829,   0.00000, 0.00000, 42.24000);
	CreateDynamicObject(2965, 2944.54663, -818.14758, 1009.96149,   0.00000, 10.00000, -47.88003);
	CreateDynamicObject(3004, 2943.93237, -819.25281, 1009.93201,   -4.00000, 0.00000, -44.82000);
	CreateDynamicObject(3004, 2943.97095, -819.27600, 1009.93201,   -4.00000, 0.00000, -62.40000);
	CreateDynamicObject(3004, 2943.97266, -819.25604, 1009.93201,   -4.00000, 0.00000, -54.89999);
	CreateDynamicObject(1753, 2943.02661, -815.07288, 1008.97882,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1753, 2947.18652, -815.07288, 1008.97882,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1823, 2946.54199, -815.72278, 1008.98993,   0.00000, 0.00000, 80.10000);
	CreateDynamicObject(2245, 2946.06738, -815.33258, 1009.77844,   0.00000, 0.00000, 13.44000);
	CreateDynamicObject(2105, 2946.42700, -814.80975, 1009.93158,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2082, 2959.69165, -833.91193, 1008.89471,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18077, 2960.43018, -826.23883, 1009.55817,   0.00000, 0.00000, 90.41999);
	CreateDynamicObject(18077, 2949.42017, -819.38989, 1009.55823,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2232, 2933.85864, -819.72394, 1009.58185,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2229, 2933.66602, -818.32703, 1008.95453,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2232, 2933.85864, -819.72394, 1010.77631,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2232, 2933.85864, -819.18390, 1009.58179,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2232, 2933.85864, -819.18390, 1010.77631,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2232, 2933.85864, -817.84387, 1009.33862,   0.00000, -90.00000, 90.00000);
	CreateDynamicObject(2232, 2933.85864, -816.64990, 1009.35663,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(2229, 2933.66992, -815.55499, 1008.95453,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2232, 2933.85864, -815.34387, 1009.58179,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2232, 2933.85864, -814.82391, 1009.58179,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2232, 2933.85864, -815.34387, 1010.77631,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2232, 2933.85864, -814.82391, 1010.77631,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2102, 2933.83423, -815.64838, 1010.95856,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2102, 2933.57422, -815.64838, 1010.95862,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2102, 2933.81421, -818.84839, 1010.95862,   0.00000, 90.00000, 180.00000);
	CreateDynamicObject(2102, 2934.05420, -818.84839, 1010.95862,   0.00000, 90.00000, 180.00000);
	CreateDynamicObject(1957, 2933.81006, -818.03491, 1009.76947,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1958, 2933.81006, -817.45490, 1009.71271,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1956, 2933.81006, -818.09491, 1009.82953,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1954, 2933.81006, -816.87488, 1009.76947,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1953, 2933.81006, -816.93488, 1009.82953,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1955, 2933.65015, -816.65491, 1009.84949,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2227, 2933.65088, -815.89783, 1008.86115,   0.00000, 0.00000, 69.00000);
	CreateDynamicObject(1715, 2934.92065, -817.42212, 1008.95740,   0.00000, 0.00000, -88.86000);
	CreateDynamicObject(1753, 2943.34717, -833.21832, 1008.97882,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1753, 2940.22388, -832.32758, 1008.97882,   0.00000, 0.00000, 108.36000);
	CreateDynamicObject(1746, 2944.27100, -831.54181, 1008.97882,   0.00000, 0.00000, 13.26000);
	CreateDynamicObject(1746, 2943.47632, -829.84277, 1008.97882,   0.00000, 0.00000, 40.56001);
	CreateDynamicObject(1746, 2942.21021, -828.58160, 1008.97882,   0.00000, 0.00000, 55.44000);
	CreateDynamicObject(1823, 2942.60962, -831.06848, 1008.98993,   0.00000, 0.00000, 130.98003);
	CreateDynamicObject(1670, 2941.84277, -830.91150, 1009.49860,   0.00000, 0.00000, 2.40000);
	CreateDynamicObject(19173, 2942.19482, -833.90601, 1011.55884,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19174, 2944.16431, -814.41309, 1011.55878,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19175, 2949.13501, -814.40723, 1011.55878,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1536, 2947.99731, -837.10211, 1008.98962,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1536, 2951.01611, -837.06549, 1008.98962,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2991, 2954.22095, -813.15045, 1009.62683,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2991, 2954.22095, -813.15051, 1010.88397,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3630, 2946.40771, -810.74512, 1010.48877,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2991, 2927.63013, -816.86859, 1010.61517,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2991, 2930.29004, -816.86859, 1010.61517,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2991, 2927.63013, -816.86859, 1011.87268,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2991, 2930.29004, -816.86859, 1011.87268,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2571, 2914.53052, -806.94427, 1009.98279,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2571, 2922.45044, -806.94427, 1009.98279,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2571, 2906.41040, -806.94427, 1009.98279,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1964, 2906.83911, -817.18335, 1010.91150,   0.00000, 0.00000, 98.93999);
	CreateDynamicObject(2894, 2906.80298, -818.50726, 1010.77588,   0.00000, 0.00000, -137.46001);
	CreateDynamicObject(2332, 2904.09253, -818.21759, 1010.44562,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2332, 2904.09253, -819.11761, 1010.44562,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1754, 2912.30469, -810.96478, 1009.98407,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1754, 2911.14990, -811.61957, 1009.98407,   0.00000, 0.00000, 50.58000);
	CreateDynamicObject(1753, 2910.75122, -814.84686, 1009.98407,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1754, 2911.35547, -815.97864, 1009.98407,   0.00000, 0.00000, 144.35994);
	CreateDynamicObject(1754, 2913.45093, -811.08777, 1009.98407,   0.00000, 0.00000, -13.08000);
	CreateDynamicObject(2104, 2904.19824, -810.58832, 1009.97028,   0.00000, 0.00000, 45.00000);
	CreateDynamicObject(2229, 2905.09326, -810.32214, 1009.98590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2229, 2903.71240, -811.20898, 1009.98590,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1823, 2905.43091, -811.22601, 1009.98041,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1823, 2913.05322, -813.67297, 1009.98041,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1823, 2913.05322, -814.84003, 1009.98041,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1670, 2912.52075, -813.13818, 1010.48859,   0.00000, 0.00000, 58.80000);
	CreateDynamicObject(1670, 2912.61279, -814.41882, 1010.48859,   0.00000, 0.00000, 115.44001);
	CreateDynamicObject(19175, 2911.81348, -810.20258, 1012.38037,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1720, 2908.30688, -816.71814, 1009.97382,   0.00000, 0.00000, -70.61997);
	CreateDynamicObject(1720, 2908.37207, -818.66748, 1009.97382,   0.00000, 0.00000, -108.36002);
	CreateDynamicObject(2565, 2916.33301, -812.72180, 1010.54852,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2565, 2923.12012, -814.24182, 1010.54852,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2576, 2916.32104, -819.98547, 1009.98828,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2566, 2918.33105, -816.58691, 1010.54852,   0.00000, 0.00000, 89.82000);
	CreateDynamicObject(2576, 2922.13135, -810.66040, 1009.98828,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1668, 2909.68506, -831.59222, 1006.43042,   0.00000, 0.00000, 8.64000);
	CreateDynamicObject(1668, 2909.68506, -831.31219, 1006.43042,   0.00000, 0.00000, 38.58000);
	CreateDynamicObject(1669, 2909.60498, -831.11218, 1006.43042,   0.00000, 0.00000, -17.88000);
	CreateDynamicObject(1486, 2957.90063, -823.48077, 1010.12030,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1486, 2958.46411, -823.20605, 1010.12030,   0.00000, 0.00000, -0.12000);
	CreateDynamicObject(1486, 2957.90063, -823.48077, 1010.12030,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1486, 2959.05542, -823.28656, 1010.12030,   0.00000, 0.00000, -0.12000);
	CreateDynamicObject(1486, 2959.89404, -823.05402, 1010.12030,   0.00000, 0.00000, -0.12000);
	CreateDynamicObject(1486, 2960.81445, -823.46997, 1010.12030,   0.00000, 0.00000, -0.18000);
	CreateDynamicObject(1486, 2961.57739, -823.24738, 1010.12030,   0.00000, 0.00000, -0.18000);
	CreateDynamicObject(1486, 2956.47583, -823.40686, 1010.12030,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1486, 2955.69629, -822.95081, 1010.12030,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1486, 2953.29053, -822.22888, 1010.12030,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1486, 2953.13916, -821.34534, 1010.12030,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1486, 2952.48853, -820.87366, 1010.12030,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1486, 2952.25757, -818.37366, 1010.12030,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1486, 2952.56616, -817.51062, 1010.12030,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1486, 2952.28931, -816.52777, 1010.12030,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1717, 2921.70117, -819.16370, 1009.94977,   0.00000, 0.00000, 134.99998);
	CreateDynamicObject(2204, 2915.59668, -810.69482, 1009.99640,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2204, 2915.59668, -813.64801, 1009.99640,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2204, 2915.59668, -810.69482, 1011.77899,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2204, 2915.59668, -813.64801, 1011.77899,   0.00000, 0.00000, -90.00000);
	Textura = CreateDynamicObject(2296, 2915.39404, -816.61713, 1010.00079,   0.00000, 0.00000, -90.00000);
	SetDynamicObjectMaterial(Textura, 3, 2204, "cj_office", "CJ_WOOD5", -1);
	SetDynamicObjectMaterial(Textura, 7, 2204, "cj_office", "CJ_WOOD5", -1);
	CreateDynamicObject(1823, 2914.24438, -819.75378, 1009.98041,   0.00000, 0.00000, 46.08000);
	CreateDynamicObject(2245, 2913.88672, -819.14642, 1010.75989,   0.00000, 0.00000, 28.50000);
	CreateDynamicObject(2247, 2914.40405, -818.95721, 1010.92798,   0.00000, 0.00000, 40.08000);
	CreateDynamicObject(19325, 2907.26318, -820.08270, 1012.04718,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19325, 2913.14331, -820.08270, 1011.83417,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19325, 2918.36328, -820.08270, 1011.93390,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19325, 2923.62329, -820.08270, 1011.93390,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(2606, 2915.23071, -818.86218, 1014.14899,   10.00000, 0.00000, -90.00000);
	CreateDynamicObject(2606, 2915.22974, -816.88318, 1014.14899,   10.00000, 0.00000, -90.00000);

/*
//====================================REJA TANA=================================
	BERTGate = CreateObject(971, 1245.07910, -767.55127, 90.60150,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(18980, 1240.07996, -767.14990, 81.72060,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18980, 1241.07996, -767.14990, 81.72060,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18980, 1250.98499, -767.14990, 81.72060,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18980, 1249.98499, -767.14990, 81.72060,   0.00000, 0.00000, 0.00000);
	
//====================================REJA CHINA================================
	CHINGate[0] = CreateObject(971, 324.34799, -1185.18579, 75.42600,   0.00000, 0.00000, 37.50000);
	CHINGate[1] = CreateObject(971, 317.32422, -1190.57642, 75.42602,   0.00000, 0.00000, 37.49999);
	CreateDynamicObject(18762, 313.66541, -1193.70801, 77.41848,   0.00000, 0.00000, 37.08000);
	CreateDynamicObject(18762, 328.41751, -1182.00623, 77.41800,   0.00000, 0.00000, 37.08000);
	CreateDynamicObject(18762, 327.65201, -1182.58411, 77.41850,   0.00000, 0.00000, 37.08000);
	
//====================================REJA FORZA================================
	FORZGate = CreateObject(971, 263.59546, -1333.77124, 51.39749,   0.00000, 0.00000, 35.82000);
*/

//============================ESTACION DE SERVICIO NORTE========================
	CreateDynamicObject(16107, 1008.38977, -922.83356, 41.65400,   0.00000, 0.00000, 278.20004);
	CreateDynamicObject(1676, 998.50000, -937.59998, 42.90000,   0.00000, 0.00000, 8.00000);
	CreateDynamicObject(1676, 1002.40002, -937.09998, 42.90000,   0.00000, 0.00000, 6.99829);
	CreateDynamicObject(1676, 1005.50000, -936.59998, 42.90000,   0.00000, 0.00000, 6.99829);
	CreateDynamicObject(1676, 1009.29999, -936.09998, 42.90000,   0.00000, 0.00000, 8.99829);
	CreateDynamicObject(7311, 1017.53650, -917.89362, 43.40000,   0.00000, 0.00000, 277.99509);
	CreateDynamicObject(1280, 1001.50000, -926.79999, 41.70000,   0.00000, 0.00000, 7.99805);
	CreateDynamicObject(1280, 1000.90002, -922.50000, 41.70000,   0.00000, 0.00000, 7.99805);
	CreateDynamicObject(1280, 999.40002, -912.59998, 41.70000,   0.00000, 0.00000, 8.74512);
	CreateDynamicObject(2714, 1001.15143, -922.41357, 43.31778,   0.00000, 0.00000, 278.00000);
	CreateDynamicObject(1775, 999.79999, -915.90002, 42.40000,   0.00000, 0.00000, 280.00000);
	CreateDynamicObject(1886, 995.20001, -932.00000, 46.60000,   20.00000, 0.00000, 76.00000);
	CreateDynamicObject(1367, 1009.36621, -948.56531, 41.90220,   0.00000, 0.00000, 5.25400);
	CreateDynamicObject(9192, 1012.58270, -947.37512, 46.14170,   0.00000, 0.00000, -81.96000);
	CreateDynamicObject(984, 1003.94843, -937.62518, 41.82510,   0.00000, 0.00000, -82.02000);
	CreateDynamicObject(984, 1003.75623, -936.05951, 41.82510,   0.00000, 0.00000, -82.02000);
	CreateDynamicObject(1280, 1006.20831, -948.07727, 41.59710,   0.00000, 0.00000, 97.80000);
	CreateDynamicObject(1280, 1002.36914, -948.59900, 41.55710,   0.00000, 0.00000, 97.80000);
	
//============================ESTACION DE SERVICIO PIGPEN=======================
	CreateDynamicObject(13296, 2325.20508, -1355.67761, 26.27400,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1676, 2319.55054, -1358.84802, 24.70120,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1676, 2319.55054, -1354.08887, 24.70120,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(9192, 2315.27661, -1373.10754, 27.79730,   0.00000, 0.00000, 225.00000);
	CreateDynamicObject(984, 2318.83154, -1356.27258, 23.65950,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(984, 2320.19629, -1356.27258, 23.65950,   0.00000, 0.00000, 0.00000);
	
//============================ESTACION DE SERVICIO UNITY========================
	CreateDynamicObject(984, 1940.84546, -1772.84338, 13.05690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(984, 1951.64490, -1770.88342, 13.21690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(984, 1925.48303, -1762.31604, 13.21690,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(984, 1942.44727, -1772.93127, 13.01110,   0.00000, 0.00000, 0.00000);
	
//============================ESTACION DE SERVICIO FARO=========================
	CreateDynamicObject(9192, 618.66846, -1510.80493, 18.73229,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1676, 609.23718, -1517.07373, 15.65070,   0.00000, 0.00000, 90.00000);
	Textura = CreateDynamicObject(12853, 598.19482, -1510.96594, 16.07810,   0.00000, -1.00000, 180.00000);
	SetDynamicObjectMaterial(Textura, 0, 4828, "airport3_las", "gnhotelwall02_128", -1);
	CreateDynamicObject(1676, 609.23718, -1505.11365, 15.65070,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19458, 602.77368, -1505.88232, 14.97950,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 610.11249, -1506.61218, 14.58300,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 608.36182, -1506.61218, 14.60300,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 610.13251, -1515.51428, 14.64300,   0.50000, 0.00000, 180.00000);
	CreateDynamicObject(983, 608.36121, -1515.51428, 14.64300,   0.50000, 0.00000, 180.00000);
	
//============================ESTACION DE SERVICIO PUERTO=======================
	CreateDynamicObject(12853, 2268.51929, -2439.89038, 14.53370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19458, 2263.91431, -2441.95947, 13.71640,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1676, 2257.45752, -2434.35596, 14.21490,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1676, 2257.52637, -2445.42700, 14.21490,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(9192, 2255.75122, -2419.47144, 17.19479,   0.00000, 0.00000, 133.19998);
	CreateDynamicObject(984, 2256.52905, -2439.83105, 13.18160,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(984, 2258.32471, -2439.83105, 13.18160,   0.00000, 0.00000, 0.00000);
	
//============================ESTACION DE SERVICIO AYUNTA=======================
	CreateDynamicObject(13296, 1371.59045, -1758.69226, 15.76920,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(9192, 1379.25208, -1742.16565, 17.31170,   0.00000, 0.00000, 45.00000);
	CreateDynamicObject(1676, 1377.29614, -1760.25854, 14.18680,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1676, 1377.29614, -1755.50012, 14.18680,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1377.95166, -1760.49829, 13.23840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1377.95471, -1755.69409, 13.23840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1376.57288, -1760.49829, 13.23840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1376.57593, -1755.69409, 13.23840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, 1370.57751, -1774.69153, 13.04783,   0.00000, 0.00000, 154.20000);
	CreateDynamicObject(3440, 1364.59509, -1774.68665, 12.63327,   0.00000, 0.00000, 154.20000);

//==================================PASILLO LA MERCA============================
    CreateObject(5628, 2028.53503, -1773.95313, 16.67970,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14414, 1973.36255, -1776.09998, 6.10330,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19456, 1973.28516, -1780.84985, 6.24230,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, 1974.90515, -1772.03784, 7.30150,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16312, 2019.00183, -1763.40552, 9.98130,   0.00000, 0.00000, -9.18000);
	CreateDynamicObject(19378, 1971.55505, -1772.03784, 7.29650,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19378, 1974.90515, -1781.66785, 7.30150,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19378, 1971.55505, -1781.66785, 7.29650,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1973.26111, -1779.03235, 11.46620,   0.00000, 55.00000, 90.00000);
	CreateDynamicObject(19364, 1973.28113, -1780.05225, 10.75430,   0.00000, 55.00000, 90.00000);
	CreateDynamicObject(17969, 1971.67798, -1797.54724, 8.00390,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(14840, 1974.91028, -1780.07861, 8.43550,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19458, 1973.38721, -1793.00000, 9.76750,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(4227, 2006.80139, -1805.78406, 8.19560,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(19456, 1973.28516, -1790.48035, 6.24230,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19393, 1974.89966, -1787.26904, 7.97670,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 1974.89355, -1792.63953, 8.07670,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19393, 1974.90100, -1799.05713, 7.97670,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19458, 1973.28516, -1800.10461, 6.24230,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19364, 1974.89758, -1804.43469, 8.07670,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1971.55505, -1788.08655, 8.07670,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19393, 1971.55505, -1791.29346, 7.97670,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 1971.55908, -1796.66785, 8.07670,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19378, 1980.28406, -1809.73425, 6.24230,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19393, 1971.55505, -1803.08606, 7.97670,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4227, 1971.56165, -1775.57166, 7.79380,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, 1971.55908, -1808.46777, 8.07670,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 1976.29443, -1813.13586, 8.07670,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, 1973.38721, -1800.56311, 9.77150,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19456, 1979.80396, -1805.95166, 8.07670,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14794, 1995.69824, -1800.10327, 8.76380,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(19456, 1973.28516, -1809.73328, 6.24230,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19456, 1973.38721, -1810.19336, 9.76750,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19393, 1984.73438, -1807.60046, 8.07670,   0.00000, 0.00000, 0.72000);
	CreateDynamicObject(19456, 1984.75342, -1814.02222, 8.07670,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1974.89758, -1801.23254, 8.07670,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 1985.92041, -1813.13586, 8.07670,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14840, 1971.65869, -1808.45569, 8.01960,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(17969, 1974.77502, -1802.86609, 8.00390,   30.00000, 180.00000, 180.00000);
	CreateDynamicObject(14486, 1981.56018, -1810.40540, 7.81550,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14792, 1995.97815, -1800.22327, 7.82450,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(14793, 1995.96814, -1800.32935, 11.18620,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2627, 2005.49170, -1793.62146, 6.32920,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2627, 2005.43579, -1791.81812, 6.32920,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2628, 1996.21533, -1809.16101, 6.32920,   0.00000, 0.00000, 217.31993);
	CreateDynamicObject(2629, 1993.39771, -1809.33850, 6.32920,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2629, 1993.76001, -1806.82703, 6.32920,   0.00000, 0.00000, 62.64001);
	CreateDynamicObject(2628, 1996.23975, -1806.32068, 6.32920,   0.00000, 0.00000, 306.95975);
	CreateDynamicObject(14791, 1995.46912, -1799.19006, 8.33900,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1497, 1984.05249, -1798.99170, 5.68950,   0.00000, 0.00000, -270.00000);
	CreateDynamicObject(4227, 1981.27454, -1813.13293, 8.49540,   180.00000, 8.00000, 0.00000);
	CreateDynamicObject(1497, 1984.06592, -1787.19885, 5.68950,   0.00000, 0.00000, -270.00000);
	CreateDynamicObject(1497, 1962.42798, -1803.01868, 5.68950,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1985, 2005.07397, -1807.01563, 9.45690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1985, 2002.79834, -1807.00293, 9.45690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1985, 1999.60779, -1807.51074, 9.45690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4227, 1974.90369, -1798.09448, 6.05160,   0.00000, 20.00000, -88.92000);
	CreateDynamicObject(3502, 1957.89832, -1791.88293, 7.20870,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19366, 1962.10620, -1792.83801, 9.81960,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19378, 1962.10217, -1797.40234, 6.47640,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19378, 1962.10217, -1786.41736, 6.47640,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3502, 1952.56079, -1791.87622, 5.40196,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(14414, 1975.22253, -1775.69995, 9.34920,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 1973.23975, -1777.85999, 8.08710,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 1976.14380, -1769.04919, 10.64177,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, 1973.38721, -1786.25000, 9.76700,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19437, 1974.02332, -1782.57202, 8.08710,   0.00000, 0.00000, 90.00000);
	CreateObject(19456, 1971.72095, -1767.30005, 14.31150,   0.00000, 0.00000, 0.00000);
	CreateObject(19364, 1973.23633, -1762.39478, 14.31150,   0.00000, 0.00000, 90.00000);
	CreateObject(19456, 1971.72095, -1776.93396, 14.31150,   0.00000, 0.00000, 0.00000);
	CreateObject(19456, 1971.75000, -1786.56799, 14.31150,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1441, 1984.28027, -1811.41992, 6.95010,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1442, 1984.22339, -1806.47729, 6.90909,   0.00000, 0.00000, -16.80000);
	CreateDynamicObject(1483, 1988.46289, -1783.72266, 14.28590,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1483, 1974.98853, -1776.28625, 14.28590,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1483, 1974.98853, -1772.56799, 14.28590,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1771, 1970.43469, -1794.04871, 6.11641,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1771, 1976.81128, -1783.48376, 6.17033,   0.00000, 0.00000, -67.62000);
	CreateDynamicObject(1793, 1965.44153, -1807.95544, 5.67276,   0.00000, 0.00000, 48.60001);
	CreateDynamicObject(1812, 1964.83508, -1789.30090, 5.69278,   0.00000, 0.00000, 38.94000);
	CreateDynamicObject(1893, 1972.76306, -1798.83130, 9.63307,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1985, 1999.60913, -1809.81006, 9.45690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2035, 1971.77258, -1812.93933, 6.79900,   0.00000, -80.00000, 216.17999);
	CreateDynamicObject(2042, 1971.93701, -1806.20251, 6.41100,   0.00000, 0.00000, 56.46000);
	CreateDynamicObject(2046, 1973.96680, -1782.85864, 6.85295,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2055, 1976.13892, -1794.04700, 7.75560,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2060, 1962.74524, -1795.83765, 6.26166,   0.00000, 80.00000, 56.10001);
	CreateDynamicObject(2060, 1963.37866, -1796.02466, 6.26170,   0.00000, 80.00000, 89.99998);
	CreateDynamicObject(2062, 1975.55347, -1803.00781, 6.29759,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2062, 1974.38892, -1805.78406, 6.89458,   0.00000, 0.00000, -0.54000);
	CreateDynamicObject(2063, 1969.56665, -1807.56628, 6.59541,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2063, 1979.94495, -1782.52075, 6.59540,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2068, 1979.81763, -1809.53455, 9.14320,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2649, 1974.03870, -1783.12341, 9.61913,   0.00000, 90.00000, -90.00000);
	CreateDynamicObject(1728, 1977.56824, -1791.04224, 5.68495,   0.00000, 0.00000, -199.79999);
	CreateDynamicObject(3085, 1971.59912, -1782.47815, 6.73920,   0.00000, 10.00000, -90.00000);
	CreateDynamicObject(3097, 1983.39514, -1793.93555, 8.94970,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14880, 1982.52454, -1790.20593, 6.09380,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14863, 1968.63831, -1788.78430, 6.31690,   0.00000, 0.00000, 80.45998);
	CreateDynamicObject(19378, 1980.06409, -1809.73425, 9.76350,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19456, 1973.23901, -1777.86060, 10.78747,   0.00000, 0.00000, 0.00000);
	Textura = CreateDynamicObject(19510, 1978.31226, -1786.99524, 8.39330,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(Textura, 1, 19456, "all_walls", "mp_carter_bwall", -1);
	Textura = CreateDynamicObject(19510, 1978.31226, -1798.79626, 8.39330,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(Textura, 1, 19456, "all_walls", "mp_carter_bwall", -1);
	Textura = CreateDynamicObject(19510, 1968.18494, -1803.14685, 8.39330,   0.00000, 0.00000, -90.00000);
	SetDynamicObjectMaterial(Textura, 1, 19456, "all_walls", "mp_carter_bwall", -1);
	Textura = CreateDynamicObject(19510, 1968.18250, -1791.34070, 8.39330,   0.00000, 0.00000, -90.00000);
	SetDynamicObjectMaterial(Textura, 1, 19456, "all_walls", "mp_carter_bwall", -1);
	Textura = CreateDynamicObject(19375, 2018.20837, -1777.0940, 12.46690,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(Textura, 0, 5628, "idlewood6_lae", "greyground256", -1);
	Textura = CreateDynamicObject(19456, 1973.35596, -1767.12720, 12.46390,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(Textura, 0, 5628, "idlewood6_lae", "greyground256", -1);
	Textura = CreateDynamicObject(19456, 1971.56702, -1772.72449, 12.45180,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(Textura, 0, 5628, "idlewood6_lae", "greyground256", -1);
	Textura = CreateDynamicObject(19456, 1973.40723, -1782.34985, 12.46390,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(Textura, 0, 5628, "idlewood6_lae", "greyground256", -1);
	CreateDynamicObject(18688, 1983.92639, -1806.62024, 5.75090,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1442, 1972.00708, -1793.89624, 6.90910,   0.00000, 0.00000, -16.80000);
	CreateDynamicObject(18688, 1972.13264, -1794.03162, 5.76800,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8653, 1700.52930, -1872.60559, 13.50380,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3085, 1976.12988, -1809.97498, 6.28910,   90.00000, 0.00000, 117.36000);
	CreateDynamicObject(4227, 1978.12195, -1818.96790, 6.45160,   90.00000, 20.00000, -88.92000);
	CreateDynamicObject(17969, 1973.12793, -1796.34021, 6.36400,   0.00000, 90.00000, 360.35999);
	CreateDynamicObject(3085, 1971.59302, -1772.19690, 12.73220,   0.00000, 200.00000, -90.00000);
	CreateDynamicObject(17969, 1980.59558, -1806.05969, 7.35670,   130.00000, 180.00000, -90.00000);
	CreateDynamicObject(17969, 1992.84167, -1810.29614, 8.98890,   20.00000, 0.00000, -90.00000);
	
//=============================PARADAS DE COLECTIVO=============================
//=================================LINEA AMARILLA===============================
	CreateObject(1257, 1590.58606, -1865.89673, 13.82070,   0.00000, 0.00000, 90.00000);
	CreateObject(1257, 1582.01001, -1878.56262, 13.82070,   0.00000, 0.00000, -90.00000);
	CreateObject(1257, 1342.48938, -1726.02234, 13.81770,   0.00000, 0.00000, 90.00000);
	CreateObject(1257, 1335.25708, -1738.68323, 13.81770,   0.00000, 0.00000, 270.96002);
	CreateObject(1257, 1298.88599, -1389.01489, 13.75607,   0.00000, 0.00000, 89.99998);
	CreateObject(1257, 1296.25940, -1412.03040, 13.75610,   0.00000, 0.00000, -90.00000);
	CreateObject(1257, 1069.07764, -1167.97559, 24.05531,   0.00000, 0.00000, 0.00000);
	CreateObject(1257, 1076.08167, -1123.75500, 24.29900,   0.00000, 0.00000, 180.00000);
	CreateObject(1257, 1333.54675, -943.36792, 36.33890,   -3.00000, 0.00000, -105.12000);
	CreateObject(1257, 1323.99866, -917.97498, 37.63510,   4.00000, 0.00000, 82.50000);
	CreateObject(1257, 1483.47510, -1167.27783, 24.34922,   0.00000, 0.00000, -90.00000);
	CreateObject(1257, 1494.82739, -1154.47424, 24.34920,   0.00000, 0.00000, 90.00000);
	CreateObject(1257, 1909.36987, -1142.32373, 24.94210,   0.00000, 0.00000, -90.78000);
	CreateObject(1257, 1887.77954, -1129.33264, 24.38420,   0.00000, 0.00000, 90.36000);
	CreateObject(1257, 2004.34180, -1454.46619, 13.81730,   0.00000, 0.00000, 90.00000);
	CreateObject(1257, 2006.02698, -1472.27222, 13.81730,   0.00000, 0.00000, -90.00000);
	CreateObject(1257, 1815.35242, -1596.41919, 13.81580,   0.00000, 0.00000, 180.00000);
	CreateObject(1257, 1828.20251, -1588.92676, 13.81580,   0.00000, 0.00000, 0.00000);
//===================================LINEA ROJA=================================
	CreateObject(1257, 2175.16724, -2151.25293, 13.82450,   0.00000, 0.00000, -134.99994);
	CreateObject(1257, 2184.54175, -2142.18188, 13.82450,   0.00000, 0.00000, 44.46000);
	CreateObject(1257, 2391.93774, -1978.88147, 13.81264,   0.00000, 0.00000, -90.00000);
	CreateObject(1257, 2384.88232, -1965.92102, 13.83260,   0.00000, 0.00000, 90.00000);
	CreateObject(1257, 2420.25195, -1747.47559, 13.80274,   0.00000, 0.00000, 0.00000);
	CreateObject(1257, 2407.53931, -1768.25122, 13.80270,   0.00000, 0.00000, 180.00000);
	CreateObject(1257, 2437.30762, -1468.75940, 24.22298,   0.00000, 0.00000, 0.00000);
	CreateObject(1257, 2424.71216, -1467.90967, 24.22300,   0.00000, 0.00000, 180.00000);
	CreateObject(1257, 2377.36914, -1220.75024, 27.68080,   0.00000, 0.00000, 0.00000);
	CreateObject(1257, 2364.79053, -1219.80493, 27.86080,   0.00000, 0.00000, 180.00000);
	CreateObject(1257, 2032.02222, -1065.32666, 25.41950,   0.00000, 0.00000, 66.30000);
	CreateObject(1257, 2027.49768, -1077.67017, 24.91730,   0.00000, 0.00000, 245.51990);
	CreateObject(1257, 2219.08984, -1429.63257, 24.28370,   0.00000, 0.00000, 0.00000);
	CreateObject(1257, 2206.04297, -1436.75427, 24.28370,   0.00000, 0.00000, 180.00000);
	CreateObject(1257, 2172.79907, -1643.05237, 15.03290,   1.00000, 0.00000, -105.00001);
	CreateObject(1257, 2165.46362, -1627.29346, 14.46503,   -1.00000, 0.00000, -288.47961);
	CreateObject(1257, 2036.43127, -1758.86426, 13.80459,   0.00000, 0.00000, -90.00000);
	CreateObject(1257, 2034.12976, -1745.68030, 13.80460,   0.00000, 0.00000, 90.00000);
//==================================LINEA VERDE=================================
	CreateObject(1257, 1488.97754, -1586.04126, 13.77824,   0.00000, 0.00000, 90.00000);
	CreateObject(1257, 1492.30469, -1598.44775, 13.77820,   0.00000, 0.00000, -90.00000);
	CreateObject(1257, 1422.50366, -1151.95544, 24.18831,   0.00000, 0.00000, 77.52003);
	CreateObject(1257, 1419.15808, -1164.58093, 24.18830,   0.00000, 0.00000, -102.78002);
	CreateObject(1257, 985.23663, -1134.35864, 24.04237,   0.00000, 0.00000, 90.00000);
	CreateObject(1257, 1012.79791, -1155.82202, 24.04240,   0.00000, 0.00000, -90.00000);
	CreateObject(1257, 640.87854, -1243.47937, 17.79839,   3.00000, 0.00000, 8.88000);
	CreateObject(1257, 619.96136, -1257.34290, 18.26734,   -1.00000, 0.00000, -173.39996);
	CreateObject(1257, 1048.72705, -1477.23779, 13.73778,   0.00000, 0.00000, 165.42000);
	CreateObject(1257, 1063.06104, -1472.76270, 13.73778,   0.00000, 0.00000, -15.24000);
	CreateObject(1257, 1135.20862, -1718.55005, 14.07449,   0.00000, 0.00000, -90.00000);
	CreateObject(1257, 1132.39001, -1706.07336, 14.07450,   0.00000, 0.00000, 90.00000);
	CreateObject(1257, 1500.08264, -1878.49695, 13.79910,   0.00000, 0.00000, -90.00000);
	CreateObject(1257, 1493.45691, -1866.14539, 13.79910,   0.00000, 0.00000, 90.00000);
	CreateObject(1257, 1829.37427, -2069.79980, 13.74623,   0.00000, 0.00000, 0.00000);
	CreateObject(1257, 1816.65747, -2096.87329, 13.74620,   0.00000, 0.00000, 180.00000);

//==============================TALLER MECANICO MERCURY=========================
	TMMAGate = CreateObject(980, 1623.01730, -1862.1691, 12.00760, 0.00000, 0.00000, 180.00000);
	SetObjectMaterial(TMMAGate, 0, 2660, "cj_banner", "CJ_MERC_LOGO", -1);
	SetObjectMaterial(TMMAGate, 1, 2660, "cj_banner", "CJ_MERC_LOGO", -1);

	new InscripcionTaller;

	InscripcionTaller = CreateDynamicObject(19353, 1606.72083, -1862.22827, 13.56220,   0.50000, -0.09990, -90.02810);
	SetDynamicObjectMaterialText(InscripcionTaller, 0, "Taller", 60, "Impact", 50, 1, -8388608, 0, 1);
	InscripcionTaller = CreateDynamicObject(19353, 1609.90735, -1862.23767, 13.58060,   0.00000, 0.00000, -89.99180);
	SetDynamicObjectMaterialText(InscripcionTaller, 0, "Mecá", 60, "Impact", 50, 0, -8388608, 0, 1);
	InscripcionTaller = CreateDynamicObject(19353, 1611.95422, -1862.23010, 13.59280,   0.00000, 0.00000, -89.96790);
	SetDynamicObjectMaterialText(InscripcionTaller, 0, "nico", 60, "Impact", 50, 0, -8388608, 0, 1);
	InscripcionTaller = CreateDynamicObject(19353, 1614.91736, -1862.23401, 13.55060,   -0.59990, 0.00000, -90.04910);
	SetDynamicObjectMaterialText(InscripcionTaller, 0, "Mercury", 60, "Impact", 45, 0, -8388608, 0, 1);

	new BoxTaller;

	BoxTaller = CreateDynamicObject(2643, 1582.5987, -1806.6667, 15.7696, 0.3999, 0.0000, 89.5721);
	SetDynamicObjectMaterialText(BoxTaller, 0, "BOX 1", 60, "Impact", 40, 1, -16777216, -8092540, 1);
	BoxTaller = CreateDynamicObject(2643, 1582.5153, -1802.3011, 15.7696, 0.0000, 0.0000, 88.8721);
	SetDynamicObjectMaterialText(BoxTaller, 0, "BOX 2", 60, "Impact", 40, 1, -16777216, -8092540, 1);
	BoxTaller = CreateDynamicObject(2643, 1582.6104, -1797.2202, 15.7696, 0.0000, 0.0000, 89.6819);
	SetDynamicObjectMaterialText(BoxTaller, 0, "BOX 3", 60, "Impact", 40, 1, -16777216, -8092540, 1);
	BoxTaller = CreateDynamicObject(2643, 1582.5877, -1792.0277, 15.7696, 0.0000, 0.0000, 89.6417);
	SetDynamicObjectMaterialText(BoxTaller, 0, "BOX 4", 60, "Impact", 40, 1, -16777216, -8092540, 1);
	BoxTaller = CreateDynamicObject(2643, 1596.2342, -1783.0355, 15.7696, 0.0000, 0.0000, -0.2454);
	SetDynamicObjectMaterialText(BoxTaller, 0, "BOX 5", 60, "Impact", 40, 1, -16777216, -8092540, 1);
	BoxTaller = CreateDynamicObject(2643, 1606.8875, -1796.7723, 15.7696, 0.0000, 0.0000, -89.6864);
	SetDynamicObjectMaterialText(BoxTaller, 0, "BOX 6", 60, "Impact", 40, 1, -16777216, -8092540, 1);
	BoxTaller = CreateDynamicObject(2643, 1606.8218, -1807.1680, 15.7696, 0.0000, 0.0000, -89.7264);
	SetDynamicObjectMaterialText(BoxTaller, 0, "BOX 7", 60, "Impact", 40, 1, -16777216, -8092540, 1);

	CreateDynamicObject(3624, 1594.79736, -1848.25525, 16.63494,   0.00000, 0.00000, 630.24011);
	CreateDynamicObject(3624, 1594.80249, -1796.63037, 16.60672,   0.00000, 0.00000, 449.63977);
	CreateDynamicObject(5170, 1654.28992, -1809.88416, 15.19335,   0.00000, 0.00000, -0.12002);
	CreateDynamicObject(10183, 1653.35315, -1845.75574, 12.56823,   0.00000, 0.00000, 765.65991);
	CreateDynamicObject(5170, 1654.28027, -1841.13538, 15.19335,   0.00000, 0.00000, -0.12002);
	CreateDynamicObject(10183, 1656.52344, -1805.50708, 12.56823,   0.00000, 0.00000, 585.24023);
	CreateDynamicObject(10183, 1653.44983, -1836.48914, 12.56823,   0.00000, 0.00000, 585.24023);
	CreateDynamicObject(10183, 1656.54175, -1814.28088, 12.56823,   0.00000, 0.00000, 765.65991);
	CreateDynamicObject(1290, 1663.51245, -1832.80896, 18.24097,   0.00000, 0.00000, -2.22000);
	CreateDynamicObject(1290, 1643.39587, -1832.74683, 18.24097,   0.00000, 0.00000, -2.22000);
	CreateDynamicObject(1290, 1666.71375, -1817.99695, 18.24097,   0.00000, 0.00000, -0.66000);
	CreateDynamicObject(1290, 1646.56677, -1818.08923, 18.24097,   0.00000, 0.00000, -0.66000);
	CreateDynamicObject(1290, 1646.39539, -1801.74231, 18.24097,   0.00000, 0.00000, -0.66000);
	CreateDynamicObject(1290, 1666.60046, -1801.76160, 18.24097,   0.00000, 0.00000, -0.66000);
	CreateDynamicObject(1290, 1663.45105, -1849.54944, 18.24097,   0.00000, 0.00000, -2.22000);
	CreateDynamicObject(1290, 1643.30139, -1849.55212, 18.44046,   0.00000, 0.00000, -2.22000);
	Textura = CreateDynamicObject(19456, 1587.52820, -1772.92578, 13.17584,   0.00000, 0.00000, -90.06001);
	SetDynamicObjectMaterial(Textura, 0, 4122, "civic06_lan", "Bow_stained_wall", -1);
	Textura = CreateDynamicObject(2196, 1592.52869, -1772.40979, 12.16300,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(Textura, 0, 4122, "civic06_lan", "Bow_stained_wall", -1);
	Textura = CreateDynamicObject(19364, 1581.10339, -1772.90723, 13.17382,   0.00000, 0.00000, -90.48000);
	SetDynamicObjectMaterial(Textura, 0, 4122, "civic06_lan", "Bow_stained_wall", -1);
	Textura = CreateDynamicObject(19456, 1579.51526, -1777.63440, 13.17584,   0.00000, 0.00000, -180.89987);
	SetDynamicObjectMaterial(Textura, 0, 4122, "civic06_lan", "Bow_stained_wall", -1);
	Textura = CreateDynamicObject(19456, 1579.39026, -1787.14685, 13.17584,   0.00000, 0.00000, -180.59988);
	SetDynamicObjectMaterial(Textura, 0, 4122, "civic06_lan", "Bow_stained_wall", -1);
	Textura = CreateDynamicObject(19456, 1579.33289, -1796.74048, 13.17584,   0.00000, 0.00000, -180.11990);
	SetDynamicObjectMaterial(Textura, 0, 4122, "civic06_lan", "Bow_stained_wall", -1);
	Textura = CreateDynamicObject(19456, 1579.42517, -1835.16956, 13.17584,   0.00000, 0.00000, -179.57993);
	SetDynamicObjectMaterial(Textura, 0, 4122, "civic06_lan", "Bow_stained_wall", -1);
	Textura = CreateDynamicObject(19456, 1579.58203, -1857.45947, 13.17584,   0.00000, 0.00000, 180.40009);
	SetDynamicObjectMaterial(Textura, 0, 4122, "civic06_lan", "Bow_stained_wall", -1);
	Textura = CreateDynamicObject(19456, 1584.34521, -1862.21106, 13.17584,   0.00000, 0.00000, -89.99996);
	SetDynamicObjectMaterial(Textura, 0, 4122, "civic06_lan", "Bow_stained_wall", -1);
	Textura = CreateDynamicObject(19456, 1593.97681, -1862.21472, 13.17584,   0.00000, 0.00000, -89.99996);
	SetDynamicObjectMaterial(Textura, 0, 4122, "civic06_lan", "Bow_stained_wall", -1);
	Textura = CreateDynamicObject(19456, 1603.56738, -1862.21716, 13.17584,   0.00000, 0.00000, -89.99996);
	SetDynamicObjectMaterial(Textura, 0, 4122, "civic06_lan", "Bow_stained_wall", -1);
	Textura = CreateDynamicObject(19456, 1613.19067, -1862.21716, 13.17584,   0.00000, 0.00000, -89.99996);
	SetDynamicObjectMaterial(Textura, 0, 4122, "civic06_lan", "Bow_stained_wall", -1);
	Textura = CreateDynamicObject(19456, 1665.58093, -1791.24683, 13.18893,   0.00000, 0.00000, -89.99996);
	SetDynamicObjectMaterial(Textura, 0, 4122, "civic06_lan", "Bow_stained_wall", -1);
	Textura = CreateDynamicObject(19456, 1674.60596, -1791.24719, 13.18893,   0.00000, 0.00000, -89.99996);
	SetDynamicObjectMaterial(Textura, 0, 4122, "civic06_lan", "Bow_stained_wall", -1);
	Textura = CreateDynamicObject(19456, 1679.47058, -1795.96289, 13.18893,   0.00000, 0.00000, 0.00003);
	SetDynamicObjectMaterial(Textura, 0, 4122, "civic06_lan", "Bow_stained_wall", -1);
	Textura = CreateDynamicObject(19456, 1679.47266, -1805.49561, 13.18893,   0.00000, 0.00000, 0.06003);
	SetDynamicObjectMaterial(Textura, 0, 4122, "civic06_lan", "Bow_stained_wall", -1);
	Textura = CreateDynamicObject(19456, 1679.47900, -1815.10291, 13.18893,   0.00000, 0.00000, 0.06003);
	SetDynamicObjectMaterial(Textura, 0, 4122, "civic06_lan", "Bow_stained_wall", -1);
	Textura = CreateDynamicObject(19456, 1679.49084, -1824.64453, 13.18893,   0.00000, 0.00000, 0.06003);
	SetDynamicObjectMaterial(Textura, 0, 4122, "civic06_lan", "Bow_stained_wall", -1);
	Textura = CreateDynamicObject(19456, 1679.50574, -1834.20825, 13.18893,   0.00000, 0.00000, 0.06003);
	SetDynamicObjectMaterial(Textura, 0, 4122, "civic06_lan", "Bow_stained_wall", -1);
	Textura = CreateDynamicObject(19364, 1679.51501, -1840.62549, 13.18396,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(Textura, 0, 4122, "civic06_lan", "Bow_stained_wall", -1);
	Textura = CreateDynamicObject(19364, 1679.20117, -1843.74634, 13.18396,   0.00000, 0.00000, -11.34000);
	SetDynamicObjectMaterial(Textura, 0, 4122, "civic06_lan", "Bow_stained_wall", -1);
	Textura = CreateDynamicObject(19364, 1678.58081, -1846.85620, 13.18396,   0.00000, 0.00000, -11.34000);
	SetDynamicObjectMaterial(Textura, 0, 4122, "civic06_lan", "Bow_stained_wall", -1);
	Textura = CreateDynamicObject(19364, 1678.24243, -1848.56787, 13.18396,   0.00000, 0.00000, -11.34000);
	SetDynamicObjectMaterial(Textura, 0, 4122, "civic06_lan", "Bow_stained_wall", -1);
	Textura = CreateDynamicObject(19364, 1677.03125, -1851.44165, 13.18396,   0.00000, 0.00000, -33.96000);
	SetDynamicObjectMaterial(Textura, 0, 4122, "civic06_lan", "Bow_stained_wall", -1);
	Textura = CreateDynamicObject(19364, 1675.26538, -1854.05994, 13.18396,   0.00000, 0.00000, -33.96000);
	SetDynamicObjectMaterial(Textura, 0, 4122, "civic06_lan", "Bow_stained_wall", -1);
	Textura = CreateDynamicObject(19437, 1674.08789, -1855.82349, 13.18159,   0.00000, 0.00000, -33.72000);
	SetDynamicObjectMaterial(Textura, 0, 4122, "civic06_lan", "Bow_stained_wall", -1);
	Textura = CreateDynamicObject(19364, 1672.33984, -1857.34973, 13.18396,   0.00000, 0.00000, -56.09999);
	SetDynamicObjectMaterial(Textura, 0, 4122, "civic06_lan", "Bow_stained_wall", -1);
	Textura = CreateDynamicObject(19364, 1669.72363, -1859.11389, 13.18396,   0.00000, 0.00000, -56.09999);
	SetDynamicObjectMaterial(Textura, 0, 4122, "civic06_lan", "Bow_stained_wall", -1);
	Textura = CreateDynamicObject(19437, 1667.95789, -1860.29114, 13.18159,   0.00000, 0.00000, -57.42000);
	SetDynamicObjectMaterial(Textura, 0, 4122, "civic06_lan", "Bow_stained_wall", -1);
	Textura = CreateDynamicObject(19456, 1654.85547, -1862.24683, 13.18893,   0.00000, 0.00000, 89.75997);
	SetDynamicObjectMaterial(Textura, 0, 4122, "civic06_lan", "Bow_stained_wall", -1);
	Textura = CreateDynamicObject(19364, 1665.73596, -1861.03162, 13.18396,   0.00000, 0.00000, -78.48000);
	SetDynamicObjectMaterial(Textura, 0, 4122, "civic06_lan", "Bow_stained_wall", -1);
	Textura = CreateDynamicObject(19364, 1629.80505, -1862.18994, 13.18396,   0.00000, 0.00000, -89.63999);
	SetDynamicObjectMaterial(Textura, 0, 4122, "civic06_lan", "Bow_stained_wall", -1);
	Textura = CreateDynamicObject(19364, 1662.77405, -1861.63281, 13.18396,   0.00000, 0.00000, -78.48000);
	SetDynamicObjectMaterial(Textura, 0, 4122, "civic06_lan", "Bow_stained_wall", -1);
	Textura = CreateDynamicObject(19437, 1660.42688, -1862.10999, 13.18137,   0.00000, 0.00000, -78.54002);
	SetDynamicObjectMaterial(Textura, 0, 4122, "civic06_lan", "Bow_stained_wall", -1);
	Textura = CreateDynamicObject(19456, 1645.48071, -1862.20789, 13.18893,   0.00000, 0.00000, 89.75997);
	SetDynamicObjectMaterial(Textura, 0, 4122, "civic06_lan", "Bow_stained_wall", -1);
	Textura = CreateDynamicObject(19456, 1636.02319, -1862.18579, 13.18893,   0.00000, 0.00000, 89.93996);
	SetDynamicObjectMaterial(Textura, 0, 4122, "civic06_lan", "Bow_stained_wall", -1);
	Textura = CreateDynamicObject(19456, 1579.33423, -1806.32751, 13.17584,   0.00000, 0.00000, -179.87991);
	SetDynamicObjectMaterial(Textura, 0, 4122, "civic06_lan", "Bow_stained_wall", -1);
	Textura = CreateDynamicObject(19456, 1579.35913, -1815.94897, 13.17584,   0.00000, 0.00000, -179.87991);
	SetDynamicObjectMaterial(Textura, 0, 4122, "civic06_lan", "Bow_stained_wall", -1);
	Textura = CreateDynamicObject(19456, 1579.36096, -1825.53687, 13.17584,   0.00000, 0.00000, -179.87991);
	SetDynamicObjectMaterial(Textura, 0, 4122, "civic06_lan", "Bow_stained_wall", -1);
	Textura = CreateDynamicObject(19456, 1579.49487, -1844.65381, 13.17584,   0.00000, 0.00000, -179.57993);
	SetDynamicObjectMaterial(Textura, 0, 4122, "civic06_lan", "Bow_stained_wall", -1);
	Textura = CreateDynamicObject(19364, 1579.54114, -1851.04199, 13.17970,   0.00000, 0.00000, 180.35985);
	SetDynamicObjectMaterial(Textura, 0, 4122, "civic06_lan", "Bow_stained_wall", -1);
	Textura = CreateDynamicObject(9361, 1586.58081, -1819.36975, 14.83900,   0.00000, 0.00000, 45.00000);
	SetDynamicObjectMaterial(Textura, 0, 4122, "civic06_lan", "Bow_stained_wall", -1);
	SetDynamicObjectMaterial(Textura, 1, 4122, "civic06_lan", "Bow_stained_wall", -1);
	SetDynamicObjectMaterial(Textura, 2, 4122, "civic06_lan", "Bow_stained_wall", -1);
	SetDynamicObjectMaterial(Textura, 7, 4122, "civic06_lan", "Bow_stained_wall", -1);
	CreateDynamicObject(2308, 1587.63599, -1822.00061, 12.47510,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2073, 1586.13416, -1820.78003, 15.74718,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2069, 1583.87793, -1823.09351, 12.52110,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2167, 1583.52466, -1820.52319, 12.45500,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2164, 1583.52466, -1819.60364, 12.45500,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1808, 1587.90967, -1820.17163, 12.44980,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1806, 1586.42627, -1821.98682, 12.45640,   0.00000, 0.00000, -125.40015);
	CreateDynamicObject(1806, 1587.09949, -1816.45679, 12.44463,   0.00000, 0.00000, 92.69999);
	CreateDynamicObject(2008, 1585.49072, -1815.83313, 12.46910,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1714, 1584.10339, -1816.15283, 12.46240,   0.00000, 0.00000, 66.72000);
	Textura = CreateDynamicObject(17950, 1583.83875, -1827.23999, 13.56490,   0.00000, 0.00000, -90.54000);
	SetDynamicObjectMaterial(Textura, 0, 4122, "civic06_lan", "Bow_stained_wall", -1);
	SetDynamicObjectMaterial(Textura, 1, 4122, "civic06_lan", "Bow_stained_wall", -1);
	SetDynamicObjectMaterial(Textura, 2, 4122, "civic06_lan", "Bow_stained_wall", -1);
	SetDynamicObjectMaterial(Textura, 3, 4122, "civic06_lan", "Bow_stained_wall", -1);
	SetDynamicObjectMaterial(Textura, 4, 4122, "civic06_lan", "Bow_stained_wall", -1);
	CreateDynamicObject(17951, 1587.83484, -1827.26685, 15.10790,   0.90000, -81.24000, -1.02000);
	CreateDynamicObject(1893, 1583.85352, -1826.39685, 15.05550,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1893, 1583.75684, -1828.60583, 15.05470,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16780, 1585.56323, -1817.48535, 15.86265,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1491, 1588.22717, -1817.69690, 12.06680,   0.00000, 0.00000, -90.00000);
	Textura = CreateDynamicObject(19444, 1588.20898, -1820.00146, 13.26250,   0.00000, 0.00000, 180.00000);
	SetDynamicObjectMaterial(Textura, 0, 4122, "civic06_lan", "Bow_stained_wall", -1);
	CreateDynamicObject(2400, 1606.91431, -1841.58801, 13.74057,   0.00000, 0.00000, -89.39996);
	CreateDynamicObject(4227, 1579.33838, -1834.63245, 13.43336,   0.00000, 0.00000, -90.05999);
	CreateDynamicObject(939, 1598.61255, -1859.28357, 14.69939,   0.00000, 0.00000, 90.18000);
	CreateDynamicObject(942, 1591.24768, -1859.21570, 14.71178,   0.00000, 0.00000, -90.71998);
	CreateDynamicObject(2463, 1582.61633, -1837.39954, 13.93498,   0.00000, 0.00000, 450.24008);
	CreateDynamicObject(2660, 1588.32349, -1821.88464, 14.64000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2660, 1583.55774, -1820.47424, 16.35820,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2610, 1583.87073, -1841.14771, 13.31877,   0.00000, 0.00000, -269.93964);
	CreateDynamicObject(2460, 1586.49121, -1835.95557, 12.41338,   0.00000, 0.00000, 0.78000);
	CreateDynamicObject(939, 1594.83789, -1859.26990, 14.69939,   0.00000, 0.00000, 90.18000);
	CreateDynamicObject(939, 1591.24243, -1852.68738, 14.69939,   0.00000, 0.00000, 90.18000);
	CreateDynamicObject(942, 1594.87268, -1852.64673, 14.71178,   0.00000, 0.00000, -89.81998);
	CreateDynamicObject(939, 1598.61267, -1852.39233, 14.69939,   0.00000, 0.00000, 90.18000);
	CreateDynamicObject(942, 1586.16113, -1857.05676, 13.06986,   0.00000, 0.00000, 0.30001);
	CreateDynamicObject(942, 1586.14038, -1853.37988, 13.06986,   0.00000, 0.06000, 0.30001);
	CreateDynamicObject(942, 1586.15845, -1850.03894, 13.06986,   0.00000, 0.00000, 0.30001);
	CreateDynamicObject(942, 1603.53430, -1856.04468, 13.06986,   0.00000, 0.00000, 0.30001);
	CreateDynamicObject(942, 1603.53125, -1852.36475, 13.06986,   0.00000, 0.00000, 0.30001);
	CreateDynamicObject(942, 1603.51575, -1849.11743, 13.06986,   0.00000, 0.00000, 0.30001);
	CreateDynamicObject(1370, 1604.72961, -1852.66492, 14.79580,   0.00000, 0.00000, -80.64000);
	CreateDynamicObject(1370, 1602.27686, -1856.16016, 14.79580,   0.00000, 0.00000, -80.64000);
	CreateDynamicObject(1370, 1604.29077, -1856.07068, 14.79580,   0.00000, 0.00000, -80.64000);
	CreateDynamicObject(1370, 1605.27856, -1852.03564, 14.79580,   0.00000, 0.00000, -80.64000);
	CreateDynamicObject(1079, 1587.56421, -1853.14392, 14.73376,   0.00000, 0.00000, -0.78000);
	CreateDynamicObject(1049, 1586.00793, -1853.49316, 14.28382,   0.00000, 0.00000, 54.24000);
	CreateDynamicObject(1049, 1584.96179, -1853.58313, 14.28382,   0.00000, 0.00000, 54.24000);
	CreateDynamicObject(1163, 1603.92896, -1849.49719, 14.49436,   0.00000, 0.00000, -37.62000);
	CreateDynamicObject(1163, 1604.38330, -1848.85669, 14.49436,   0.00000, 0.00000, -37.62000);
	CreateDynamicObject(1370, 1602.52185, -1855.44788, 14.79580,   0.00000, 0.00000, -80.64000);
	CreateDynamicObject(1008, 1601.54309, -1849.01428, 14.27687,   0.00000, 0.00000, -123.72000);
	CreateDynamicObject(1008, 1602.05957, -1849.16577, 14.27687,   0.00000, 0.00000, -123.72000);
	CreateDynamicObject(1037, 1593.62537, -1852.46216, 16.41469,   0.00000, 0.00000, 135.29999);
	CreateDynamicObject(1037, 1593.70007, -1854.07300, 16.41469,   0.00000, 0.00000, 135.29999);
	CreateDynamicObject(2418, 1605.45642, -1838.07471, 12.40319,   0.00000, 0.00000, -89.82001);
	CreateDynamicObject(1558, 1605.34839, -1836.20801, 13.09406,   0.00000, 0.00000, 45.42000);
	CreateDynamicObject(2418, 1605.46716, -1839.90198, 12.40319,   0.00000, 0.00000, -89.82001);
	CreateDynamicObject(2419, 1601.51550, -1836.11267, 12.39305,   0.00000, 0.00000, 0.53997);
	CreateDynamicObject(2610, 1583.87195, -1841.63257, 13.31877,   0.00000, 0.00000, -269.93964);
	CreateDynamicObject(2610, 1583.86194, -1840.65698, 13.31877,   0.00000, 0.00000, -269.93964);
	CreateDynamicObject(2610, 1583.86890, -1840.16040, 13.31877,   0.00000, 0.00000, -269.93964);
	CreateDynamicObject(1115, 1587.14954, -1836.37646, 12.70424,   92.21996, -22.86000, 201.23988);
	CreateDynamicObject(1010, 1587.14746, -1836.02759, 13.50462,   0.00000, 0.00000, 39.35999);
	CreateDynamicObject(1080, 1587.70581, -1849.92981, 14.71822,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1080, 1587.21240, -1849.95203, 14.71822,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1073, 1585.73706, -1849.42383, 14.75990,   0.00000, 0.00000, 39.29999);
	CreateDynamicObject(1073, 1585.24878, -1849.71021, 14.75990,   0.00000, 0.00000, 39.29999);
	CreateDynamicObject(1079, 1588.20020, -1852.69714, 14.73376,   0.00000, 0.00000, 39.05999);
	CreateDynamicObject(1079, 1587.22339, -1853.15002, 14.73376,   0.00000, 0.00000, -2.76000);
	CreateDynamicObject(1082, 1601.42493, -1851.73145, 14.71475,   0.00000, 0.00000, 132.48001);
	CreateDynamicObject(1082, 1601.83838, -1852.10071, 14.71475,   0.00000, 0.00000, 132.48001);
	CreateDynamicObject(1076, 1602.90515, -1851.95300, 14.72450,   0.00000, 0.00000, 158.10005);
	CreateDynamicObject(1076, 1603.29541, -1852.04834, 14.72450,   0.00000, 0.00000, 158.10005);
	CreateDynamicObject(18635, 1605.23474, -1840.53723, 13.46480,   5.16001, 83.87998, 0.00000);
	CreateDynamicObject(18635, 1582.73413, -1837.47388, 14.15573,   5.16001, 83.87998, 49.38000);
	CreateDynamicObject(18635, 1584.10828, -1836.31006, 13.45467,   5.16001, 83.87998, 150.41998);
	CreateDynamicObject(18644, 1584.05164, -1838.38403, 13.37181,   -14.51999, -85.68002, -49.50000);
	CreateDynamicObject(18644, 1582.70093, -1836.87146, 14.41655,   -14.51999, -85.68002, -49.50000);
	CreateDynamicObject(18644, 1582.71191, -1837.47937, 14.41655,   -14.51999, -85.68002, -49.50000);
	CreateDynamicObject(942, 1586.19604, -1846.69250, 13.06986,   0.00000, 0.00000, 0.30001);
	CreateDynamicObject(942, 1586.24207, -1843.49377, 13.06986,   0.00000, 0.00000, 0.30001);
	CreateDynamicObject(1558, 1585.44690, -1857.29370, 14.84553,   0.00000, 0.00000, 27.59999);
	CreateDynamicObject(1558, 1587.42310, -1857.12244, 14.84553,   0.00000, 0.00000, 27.59999);
	CreateDynamicObject(1085, 1587.95020, -1843.52051, 14.71328,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1085, 1587.47461, -1843.42981, 14.71328,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1029, 1584.64685, -1847.95251, 14.74954,   0.00000, 0.00000, 124.98003);
	CreateDynamicObject(1029, 1586.23047, -1847.89697, 14.74954,   0.00000, 0.00000, 124.98003);
	CreateDynamicObject(1084, 1585.85828, -1843.07605, 14.71442,   0.00000, 0.00000, 62.40000);
	CreateDynamicObject(1084, 1585.59497, -1843.55469, 14.71442,   0.00000, 0.00000, 62.40000);
	CreateDynamicObject(1073, 1606.87659, -1844.15625, 16.15183,   0.00000, 0.00000, -180.60005);
	CreateDynamicObject(1074, 1606.77527, -1843.01563, 16.16987,   0.00000, 0.00000, 170.75996);
	CreateDynamicObject(1075, 1606.82678, -1841.80188, 16.15084,   0.00000, 0.00000, 179.39996);
	CreateDynamicObject(1076, 1606.48718, -1841.48486, 15.00408,   0.00000, 0.00000, 183.36034);
	CreateDynamicObject(1077, 1606.50708, -1842.68848, 15.03714,   0.00000, 0.00000, 179.76006);
	CreateDynamicObject(1078, 1606.48645, -1843.88159, 15.01865,   0.00000, 0.00000, 180.66006);
	CreateDynamicObject(1079, 1606.55444, -1844.50488, 14.21001,   0.00000, 0.00000, -181.01997);
	CreateDynamicObject(1080, 1606.52551, -1843.29895, 14.17984,   0.00000, 0.00000, 177.65996);
	CreateDynamicObject(1081, 1606.48926, -1842.08484, 14.20169,   0.00000, 0.00000, 186.54005);
	CreateDynamicObject(2228, 1604.90466, -1837.99805, 12.99490,   -15.48000, -3.24000, -90.77997);
	CreateDynamicObject(2690, 1605.11243, -1837.01611, 12.83458,   0.00000, 0.00000, -42.60001);
	CreateDynamicObject(2418, 1584.02783, -1836.88794, 12.40319,   0.00000, 0.00000, 89.81996);
	CreateDynamicObject(2418, 1584.02405, -1838.77197, 12.40319,   0.00000, 0.00000, 89.81996);
	CreateDynamicObject(18644, 1583.91345, -1838.17566, 13.37181,   -14.51999, -85.68002, -140.21997);
	CreateDynamicObject(2369, 1602.08997, -1836.15100, 13.33981,   0.00000, 0.00000, 179.69994);
	CreateDynamicObject(2680, 1582.78528, -1836.80945, 15.16368,   -102.95994, -133.01993, 96.30000);
	CreateDynamicObject(1327, 1585.78345, -1831.86670, 13.28169,   -337.08020, 245.22029, 133.86002);
	CreateDynamicObject(1327, 1584.45496, -1831.84082, 12.98471,   -360.53967, 267.53995, 0.84000);
	CreateDynamicObject(3504, 1580.14453, -1832.38403, 13.68711,   0.00000, 0.00000, 90.54001);
	CreateDynamicObject(1226, 1603.99744, -1812.44067, 16.25553,   -0.09841, 1.86000, 87.12001);
	CreateDynamicObject(1226, 1603.57056, -1832.74768, 16.25553,   -0.09841, 1.86000, -87.95998);
	CreateDynamicObject(923, 1604.80518, -1846.35022, 13.37787,   0.00000, 0.00000, 59.22002);
	CreateDynamicObject(1712, 1605.40442, -1842.57837, 12.47678,   0.00000, 0.00000, -90.65999);
	CreateDynamicObject(1226, 1592.06531, -1774.38062, 16.25553,   -0.09841, 1.86000, -273.05994);
	CreateDynamicObject(1226, 1614.63232, -1786.64380, 16.25553,   -0.09841, 1.86000, -360.29980);
	CreateDynamicObject(11474, 1620.54492, -1787.93665, 13.19824,   -1.74000, 2.82000, 186.82083);
	CreateDynamicObject(11474, 1617.55371, -1787.94202, 13.22953,   -1.74000, 2.82000, 186.71996);
	CreateDynamicObject(11474, 1616.21350, -1786.67529, 13.40851,   -2.40000, -3.00000, 95.39999);
	CreateDynamicObject(11474, 1622.17712, -1786.66040, 13.31426,   -0.78000, -2.16000, 96.61198);
	CreateDynamicObject(982, 1579.45190, -1785.69348, 15.60281,   0.00000, 0.00000, -0.66000);
	CreateDynamicObject(984, 1579.32849, -1804.92480, 15.55480,   0.00000, 0.00000, 0.18000);
	CreateDynamicObject(982, 1579.37134, -1824.11963, 15.60281,   0.00000, 0.00000, 0.12000);
	CreateDynamicObject(982, 1579.51587, -1849.39160, 15.60320,   0.00000, 0.00000, 0.54000);
	CreateDynamicObject(982, 1592.43591, -1862.20605, 15.60150,   0.00000, 0.00000, 90.07490);
	CreateDynamicObject(984, 1611.61542, -1862.16907, 15.55540,   0.00000, 0.00000, -89.88000);
	CreateDynamicObject(984, 1585.98840, -1772.92529, 15.54641,   0.00000, 0.00000, 89.94001);
	CreateDynamicObject(982, 1604.76172, -1776.24963, 15.60851,   0.00000, 0.00000, 75.05997);
	CreateDynamicObject(982, 1648.52307, -1787.96423, 15.62233,   0.00000, 0.00000, 75.05997);
	CreateDynamicObject(984, 1673.06128, -1791.25769, 15.57333,   0.00000, 0.00000, 89.99998);
	CreateDynamicObject(983, 1664.10681, -1791.27710, 15.61413,   0.00000, 0.00000, 90.06003);
	CreateDynamicObject(984, 1629.95728, -1783.02075, 15.57787,   0.00000, 0.00000, 75.05998);
	CreateDynamicObject(983, 1620.68726, -1780.52014, 15.63279,   0.00000, 0.00000, 74.87999);
	CreateDynamicObject(982, 1679.45447, -1804.06177, 15.62577,   0.00000, 0.00000, -0.00003);
	CreateDynamicObject(982, 1679.46802, -1829.24194, 15.62577,   0.00000, 0.00000, 0.23997);
	CreateDynamicObject(983, 1678.89368, -1845.19226, 15.62544,   0.00000, 0.00000, -11.28000);
	CreateDynamicObject(983, 1678.58472, -1846.75500, 15.62544,   0.00000, 0.00000, -11.28000);
	CreateDynamicObject(983, 1676.17834, -1852.58972, 15.62240,   0.00000, 0.00000, -33.89999);
	CreateDynamicObject(983, 1675.26770, -1853.90491, 15.62240,   0.00000, 0.00000, -33.71999);
	CreateDynamicObject(983, 1670.83508, -1858.34534, 15.61779,   0.00000, 0.00000, -55.86000);
	CreateDynamicObject(983, 1669.92822, -1858.97241, 15.61779,   0.00000, 0.00000, -55.86000);
	CreateDynamicObject(983, 1664.13696, -1861.37231, 15.62247,   0.00000, 0.00000, -78.54002);
	CreateDynamicObject(983, 1662.59106, -1861.69080, 15.62247,   0.00000, 0.00000, -78.54002);
	CreateDynamicObject(982, 1646.64734, -1862.26379, 15.62167,   0.00000, 0.00000, -90.18003);
	CreateDynamicObject(983, 1631.51489, -1862.23364, 15.61721,   0.00000, 0.00000, -89.87997);
	CreateDynamicObject(1362, 1641.08044, -1888.16711, 13.12548,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18688, 1640.96469, -1888.17414, 11.54970,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1226, 1625.97400, -1841.27783, 16.25553,   -0.09841, 1.86000, -0.71997);
	CreateDynamicObject(1226, 1625.76709, -1809.98364, 16.25553,   -0.09841, 1.86000, -0.71997);
	CreateDynamicObject(18633, 1582.58228, -1837.58777, 14.97634,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18633, 1582.66260, -1836.86548, 14.97634,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18634, 1582.56396, -1836.97791, 15.65204,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18634, 1582.56726, -1837.66589, 15.65204,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18633, 1605.67664, -1840.78247, 13.39340,   1.80000, 84.47990, 45.60000);
	CreateDynamicObject(18634, 1605.38440, -1838.84644, 13.41255,   -8.39994, 169.97980, 0.00000);
	CreateDynamicObject(18644, 1605.49829, -1839.79822, 13.37430,   90.54000, -40.62000, -100.80000);
	CreateDynamicObject(18644, 1605.73804, -1839.86011, 13.37430,   90.54000, -40.62000, -23.04000);
	CreateDynamicObject(8843, 1625.67834, -1853.02600, 12.55818,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8843, 1621.89063, -1853.18787, 12.55066,   0.00000, 0.00000, 181.07999);
	CreateDynamicObject(2418, 1584.05078, -1803.45398, 12.29270,   0.00000, 0.00000, 89.76000);
	CreateDynamicObject(2418, 1584.03223, -1801.58728, 12.29270,   0.00000, 0.00000, 89.76000);
	CreateDynamicObject(2419, 1584.05383, -1798.85779, 12.29270,   0.00000, 0.00000, 89.21999);
	CreateDynamicObject(2418, 1584.05774, -1796.96716, 12.29270,   0.00000, 0.00000, 89.76000);
	CreateDynamicObject(2418, 1584.02734, -1808.02026, 12.29270,   0.00000, 0.00000, 89.76000);
	CreateDynamicObject(2419, 1584.04724, -1806.15271, 12.29270,   0.00000, 0.00000, 89.21999);
	CreateDynamicObject(2419, 1605.45569, -1807.49304, 12.43270,   0.00000, 0.00000, 269.70010);
	CreateDynamicObject(2419, 1605.48999, -1805.61572, 12.43270,   0.00000, 0.00000, 269.70010);
	CreateDynamicObject(3281, 1601.69360, -1804.75989, 13.28799,   0.00000, 0.00000, 360.12036);
	CreateDynamicObject(3281, 1601.82214, -1800.45068, 13.28799,   0.00000, 0.00000, 360.24030);
	CreateDynamicObject(1348, 1601.46423, -1802.65967, 13.47456,   0.00000, 0.00000, -67.56000);
	CreateDynamicObject(3789, 1601.44714, -1802.65271, 12.78095,   0.00000, 0.00000, -247.01984);
	CreateDynamicObject(3281, 1588.24670, -1795.12000, 13.28799,   0.00000, 0.00000, 358.26010);
	CreateDynamicObject(3281, 1588.32996, -1799.91382, 13.28799,   0.00000, 0.00000, 358.26010);
	CreateDynamicObject(3281, 1588.14246, -1804.47449, 13.28799,   0.00000, 0.00000, 358.26010);
	CreateDynamicObject(1597, 1655.76221, -1861.12805, 15.22873,   0.36000, 2.40000, -89.82001);
	CreateDynamicObject(1597, 1674.68127, -1852.67444, 15.05705,   0.00000, 0.00000, -33.90001);
	CreateDynamicObject(1597, 1678.26367, -1828.17859, 15.05705,   0.00000, 0.00000, 0.06000);
	CreateDynamicObject(1597, 1678.26440, -1815.31482, 15.05705,   0.00000, 0.00000, 0.06000);
	CreateDynamicObject(1597, 1678.24927, -1799.39844, 15.07661,   0.00000, 0.00000, 0.06000);
	CreateDynamicObject(1698, 1586.20325, -1789.09937, 13.29107,   0.00000, 0.00000, 50.16001);
	CreateDynamicObject(1698, 1588.59290, -1791.09534, 13.29110,   0.00000, 0.00000, 50.16000);
	CreateDynamicObject(1698, 1590.21008, -1789.20044, 13.29110,   0.00000, 0.00000, 50.16000);
	CreateDynamicObject(1698, 1587.70203, -1787.11096, 13.29110,   0.00000, 0.00000, 50.16000);
	CreateDynamicObject(1698, 1590.96362, -1793.06140, 12.58489,   25.02000, -0.06000, 50.70000);
	CreateDynamicObject(1698, 1592.59839, -1791.17126, 12.58489,   24.96000, -0.30000, 50.70000);
	CreateDynamicObject(1698, 1584.84961, -1787.97375, 11.91020,   88.68010, -0.54000, 50.16000);
	CreateDynamicObject(1698, 1586.50159, -1786.11426, 11.91020,   88.68010, -0.54000, 54.05999);
	CreateDynamicObject(1698, 1586.44299, -1786.05994, 11.90349,   88.68010, -0.54000, -126.96001);
	CreateDynamicObject(1698, 1584.80249, -1787.91907, 11.90930,   88.68010, -0.54000, 230.16010);
	CreateDynamicObject(1698, 1604.44031, -1788.85083, 13.29110,   0.00000, 0.00000, -26.88001);
	CreateDynamicObject(1698, 1602.96155, -1791.76208, 13.29110,   0.00000, 0.00000, -26.88001);
	CreateDynamicObject(1698, 1602.27295, -1787.81494, 13.29110,   0.00000, 0.00000, -26.88001);
	CreateDynamicObject(1698, 1600.79053, -1790.74036, 13.29110,   0.00000, 0.00000, -26.88001);
	CreateDynamicObject(1698, 1599.40540, -1793.50854, 12.58489,   24.96000, 0.00000, -26.40000);
	CreateDynamicObject(1698, 1601.58337, -1794.51953, 12.58489,   24.96000, 0.00000, -26.40000);
	CreateDynamicObject(1698, 1603.04407, -1786.26514, 11.97469,   88.68010, -0.54000, -25.14001);
	CreateDynamicObject(1698, 1603.09277, -1786.21216, 11.97469,   88.68010, -0.54000, 154.91997);
	CreateDynamicObject(1698, 1605.20166, -1787.34448, 11.97469,   88.68010, -0.54000, -25.14001);
	CreateDynamicObject(1698, 1605.25879, -1787.26636, 11.96672,   88.68010, -0.54000, 155.03989);
	CreateDynamicObject(3281, 1593.91199, -1787.24463, 13.28799,   0.00000, 0.00000, 448.98019);
	CreateDynamicObject(3281, 1599.04321, -1787.40796, 13.28799,   0.00000, 0.00000, 629.27997);
	CreateDynamicObject(2418, 1594.90015, -1783.58899, 12.29270,   0.00000, 0.00000, -0.42001);
	CreateDynamicObject(2418, 1596.78906, -1783.56702, 12.29270,   0.00000, 0.00000, -0.42001);
	CreateDynamicObject(2419, 1605.48792, -1795.25903, 12.43270,   0.00000, 0.00000, 269.70010);
	CreateDynamicObject(2419, 1605.49585, -1797.13440, 12.43270,   0.00000, 0.00000, 269.70010);
	CreateDynamicObject(2419, 1584.10388, -1793.51501, 12.29270,   0.00000, 0.00000, 89.21999);
	CreateDynamicObject(2418, 1584.09009, -1791.62195, 12.29270,   0.00000, 0.00000, 89.76000);
	CreateDynamicObject(18635, 1584.08228, -1807.25916, 13.22180,   90.00000, 0.00000, -65.40000);
	CreateDynamicObject(18644, 1583.86841, -1796.44299, 13.26250,   90.00000, 0.00000, -125.57990);
	CreateDynamicObject(18635, 1584.11414, -1801.52222, 13.22180,   90.00000, 0.00000, -111.11999);
	CreateDynamicObject(18644, 1583.90894, -1805.76489, 13.26250,   90.00000, 0.00000, -106.07986);
	CreateDynamicObject(18644, 1583.88306, -1801.04089, 13.26250,   90.00000, 0.00000, -125.57990);
	CreateDynamicObject(18635, 1584.09204, -1798.21960, 13.22180,   90.00000, 0.00000, -68.15997);
	CreateDynamicObject(18644, 1584.08179, -1792.98975, 13.26250,   90.00000, 0.00000, -67.61987);
	CreateDynamicObject(18635, 1584.18567, -1792.45325, 13.22180,   90.00000, 0.00000, -113.52000);
	CreateDynamicObject(18635, 1596.44348, -1783.38965, 13.22180,   90.00000, 0.00000, -113.52000);
	CreateDynamicObject(18644, 1595.25659, -1783.56372, 13.26250,   90.00000, 0.00000, -67.61990);
	CreateDynamicObject(18635, 1605.53540, -1796.08838, 13.36180,   90.00000, 0.00000, 129.00000);
	CreateDynamicObject(18644, 1605.51648, -1796.85901, 13.40250,   90.00000, 0.00000, 45.90010);
	CreateDynamicObject(18644, 1605.27209, -1807.84326, 13.40250,   90.00000, 0.00000, -97.37990);
	CreateDynamicObject(18635, 1605.50391, -1808.38879, 13.36180,   90.00000, 0.00000, 129.00000);
	CreateDynamicObject(638, 1579.77283, -1819.66174, 12.82500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(638, 1579.77246, -1822.33606, 12.82500,   0.00000, 0.00000, 0.00000);
	Textura = CreateDynamicObject(19444, 1588.19495, -1820.00549, 13.26250,   0.00000, 0.00000, 180.00000);
	SetDynamicObjectMaterial(Textura, 0, 19463, "all_walls", "stormdrain3_nt", -1);
	
//=================================TERRAZA PFA==================================
	CreateDynamicObject(14819, 1558.0999755859, -1674.8000488281, 28.545364379883, 0, 0, 90);
	CreateDynamicObject(970, 1551.701171875, -1650.7998046875, 27.953596115112, 0, 0, 0);
	CreateDynamicObject(970, 1547.5999755859, -1650.8000488281, 27.953596115112, 0, 0, 0);
	CreateDynamicObject(970, 1544.6259765625, -1714.5, 27.946290969849, 0, 0, 0);
	CreateDynamicObject(970, 1548.7275390625, -1714.5, 27.946290969849, 0, 0, 0);
	CreateDynamicObject(970, 1552.943359375, -1714.5, 27.946290969849, 0, 0, 0);
	CreateDynamicObject(970, 1557, -1714.5, 27.946290969849, 0, 0, 0);
	CreateDynamicObject(970, 1561.099609375, -1714.5, 27.946290969849, 0, 0, 0);
	CreateDynamicObject(970, 1565.19921875, -1714.5, 27.946290969849, 0, 0, 0);
	CreateDynamicObject(970, 1569.2998046875, -1714.5, 27.946290969849, 0, 0, 0);
	CreateDynamicObject(970, 1573.3994140625, -1714.5, 27.946290969849, 0, 0, 0);
	CreateDynamicObject(970, 1544.6260986328, -1700.4000244141, 27.946290969849, 0, 0, 0);
	CreateDynamicObject(970, 1548.6999511719, -1700.4000244141, 27.946290969849, 0, 0, 0);
	CreateDynamicObject(970, 1542.5, -1712.4000244141, 27.946290969849, 0, 0, 90);
	CreateDynamicObject(970, 1542.5, -1708.2998046875, 27.946290969849, 0, 0, 90);
	CreateDynamicObject(970, 1542.5, -1704.1999511719, 27.946290969849, 0, 0, 90);
	CreateDynamicObject(970, 1553.7337646484, -1698.2742919922, 27.947069168091, 0, 0, 90);
	CreateDynamicObject(970, 1553.7337646484, -1694.0999755859, 27.947069168091, 0, 0, 90);
	CreateDynamicObject(970, 1553.7337646484, -1690, 27.947069168091, 0, 0, 90);
	CreateDynamicObject(970, 1553.7337646484, -1685.9000244141, 27.947069168091, 0, 0, 90);
	CreateDynamicObject(970, 1553.7337646484, -1681.8000488281, 27.947069168091, 0, 0, 90);
	CreateDynamicObject(970, 1553.7333984375, -1677.69921875, 27.946933746338, 0, 0, 90);
	CreateDynamicObject(970, 1553.7333984375, -1673.599609375, 27.947088241577, 0, 0, 90);
	CreateDynamicObject(970, 1553.7337646484, -1665.4000244141, 27.947088241577, 0, 0, 90);
	CreateDynamicObject(970, 1553.7337646484, -1653.0999755859, 27.947088241577, 0, 0, 90);
	CreateDynamicObject(970, 1553.7337646484, -1657.1999511719, 27.947088241577, 0, 0, 90);
	CreateDynamicObject(970, 1553.7337646484, -1661.3000488281, 27.947088241577, 0, 0, 90);
	CreateDynamicObject(970, 1542.5, -1640.5, 27.953596115112, 0, 0, 90);
	CreateDynamicObject(970, 1542.5, -1644.5999755859, 27.953596115112, 0, 0, 90);
	CreateDynamicObject(970, 1542.5, -1648.69921875, 27.953596115112, 0, 0, 90);
	CreateDynamicObject(970, 1542.5, -1639.369140625, 27.953596115112, 0, 0, 90);
	CreateDynamicObject(970, 1544.599609375, -1650.7998046875, 27.953596115112, 0, 0, 179.99450683594);
	CreateDynamicObject(970, 1542.5, -1702.19921875, 27.946290969849, 0, 0, 90);
	CreateDynamicObject(970, 1552.8232421875, -1700.3994140625, 27.946290969849, 0, 0, 0);
	CreateDynamicObject(970, 1553.7333984375, -1669.5, 27.947088241577, 0, 0, 90);
	CreateDynamicObject(3877, 1557.1474609375, -1671.578125, 29.061347961426, 0, 0, 0);
	CreateDynamicObject(3763, 1565.9296875, -1696.7861328125, 46, 0, 0, 357.99499511719);
	CreateDynamicObject(3876, 1564.4697265625, -1675.6357421875, 22, 0, 0, 337.99438476563);
	CreateDynamicObject(3877, 1557.1474609375, -1679.5078125, 29.061347961426, 0, 0, 0);
	CreateDynamicObject(970, 1575.5, -1714.5, 27.946290969849, 0, 0, 0);
	CreateDynamicObject(970, 1577.58984375, -1712.4609375, 27.946290969849, 0, 0, 90);
	CreateDynamicObject(970, 1577.5841064453, -1708.3000488281, 27.946290969849, 0, 0, 90);
	CreateDynamicObject(970, 1577.5841064453, -1704.1490478516, 27.946290969849, 0, 0, 90);
	CreateDynamicObject(970, 1577.5841064453, -1700, 27.946290969849, 0, 0, 90);
	CreateDynamicObject(970, 1577.5841064453, -1695.8900146484, 27.946290969849, 0, 0, 90);
	CreateDynamicObject(970, 1577.5841064453, -1691.7900390625, 27.946290969849, 0, 0, 90);
	CreateDynamicObject(970, 1577.5841064453, -1687.6999511719, 27.946290969849, 0, 0, 90);
	CreateDynamicObject(970, 1577.5841064453, -1683.5999755859, 27.946290969849, 0, 0, 90);
	CreateDynamicObject(970, 1577.5841064453, -1679.4890136719, 27.946290969849, 0, 0, 90);
	CreateDynamicObject(970, 1577.5841064453, -1675.3690185547, 27.946290969849, 0, 0, 90);
	CreateDynamicObject(970, 1577.5841064453, -1671.2290039063, 27.946290969849, 0, 0, 90);
	CreateDynamicObject(970, 1577.5841064453, -1667.0899658203, 27.946290969849, 0, 0, 90);
	CreateDynamicObject(970, 1577.5841064453, -1663, 27.946290969849, 0, 0, 90);
	CreateDynamicObject(970, 1577.5841064453, -1658.8800048828, 27.946290969849, 0, 0, 90);
	CreateDynamicObject(970, 1577.5841064453, -1654.7099609375, 27.946290969849, 0, 0, 90);
	CreateDynamicObject(970, 1577.5841064453, -1650.5489501953, 27.946290969849, 0, 0, 90);
	CreateDynamicObject(970, 1577.5841064453, -1646.3900146484, 27.946290969849, 0, 0, 90);
	CreateDynamicObject(970, 1577.5841064453, -1642.2189941406, 27.946290969849, 0, 0, 90);
	CreateDynamicObject(970, 1577.5841064453, -1640.1290283203, 27.946290969849, 0, 0, 90);
	CreateDynamicObject(970, 1577.583984375, -1639.189453125, 27.946290969849, 0, 0, 90);
	CreateDynamicObject(970, 1554.3000488281, -1677.69921875, 27.39999961853, 90, 0, 90);
	CreateDynamicObject(970, 1554.3000488281, -1673.599609375, 27.39999961853, 90, 0, 90);
	CreateDynamicObject(3465, 1577.0893554688, -1620.2534179688, 13.862384796143, 0, 0, 0);
	CreateDynamicObject(970, 1575.5446777344, -1637.1436767578, 27.953596115112, 0, 0, 0);
	CreateDynamicObject(16375, 1586.8674316406, -1662.0954589844, 27.440000534058, 0, 0, 0);
	CreateDynamicObject(970, 1571.4699707031, -1637.1436767578, 27.953596115112, 0, 0, 0);
	CreateDynamicObject(970, 1567.3000488281, -1637.1436767578, 27.953596115112, 0, 0, 0);
	CreateDynamicObject(970, 1563.1999511719, -1637.1436767578, 27.953596115112, 0, 0, 0);
	CreateDynamicObject(970, 1559.0999755859, -1637.1436767578, 27.953596115112, 0, 0, 0);
	CreateDynamicObject(970, 1554.9851074219, -1637.1436767578, 27.953596115112, 0, 0, 0);
	CreateDynamicObject(970, 1550.9000244141, -1637.1436767578, 27.953596115112, 0, 0, 0);
	CreateDynamicObject(970, 1546.8000488281, -1637.1436767578, 27.953596115112, 0, 0, 0);
	CreateDynamicObject(970, 1544.5511474609, -1637.1324462891, 27.953596115112, 0, 0, 0);
    CreateDynamicObject(1411, 1544.53125, -1620.23145, 17.49430, 0.00000, 0.00000, 90.00000);
    CreateDynamicObject(18766, 1545.35889, -1637.86829, 14.97600, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18766, 1544.69885, -1620.35559, 10.91820, 0.00000, 90.00000, 90.00000);
	CreateDynamicObject(18766, 1589.58215, -1640.34448, 19.33980,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(18766, 1597.07544, -1642.84583, 19.33980,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(1523, 1582.5750732422, -1638.1031494141, 12.300000190735, 0, 0, 0);
	CreateDynamicObject(1533, 1582.564453125, -1638.01171875, 14.800000190735, 0, 0, 0);
	CreateDynamicObject(1523, 1577.2667236328, -1637.3781738281, 12.563405990601, 0, 0, 90);
	CreateDynamicObject(1533, 1577.2353515625, -1638.3509521484, 15, 0, 270, 270);

//================ESTACIONAMIENTO PUBLICO - CASA DE GOBIERNO====================
	CreateDynamicObject(994, 1377.013671875, -1659.703125, 12.546875, 0, 0, 90);
	CreateDynamicObject(997, 1376.9912109375, -1663.0107421875, 12.53639793396, 0, 0, 90);
	CreateDynamicObject(994, 1378.8916015625, -1669.0771484375, 12.546875, 0, 0, 107.86376953125);
	CreateDynamicObject(994, 1379.3250732422, -1675.4213867188, 12.546875, 0, 0, 93.998931884766);
	CreateDynamicObject(997, 1379.5831298828, -1678.9580078125, 12.53639793396, 0, 0, 93.75);
	CreateDynamicObject(994, 1377.78515625, -1652.7060546875, 12.546875, 0, 0, 0);
	CreateDynamicObject(994, 1384.1164550781, -1652.6926269531, 12.546875, 0, 0, 0);
	CreateDynamicObject(994, 1390.4899902344, -1652.6882324219, 12.546875, 0, 0, 0);
	CreateDynamicObject(994, 1396.8488769531, -1652.6896972656, 12.546875, 0, 0, 0);
	CreateDynamicObject(994, 1403.2501220703, -1652.6815185547, 12.546875, 0, 0, 0);
	CreateDynamicObject(994, 1409.6002197266, -1652.6804199219, 12.546875, 0, 0, 0);
	CreateDynamicObject(997, 1368.73828125, -1673.5234375, 12.53639793396, 0, 0, 81.83642578125);
	CreateDynamicObject(997, 1369.203125, -1670.251953125, 12.53639793396, 0, 0, 80.826416015625);
	CreateDynamicObject(997, 1369.7890625, -1666.9638671875, 12.53639793396, 0, 0, 114.57092285156);
	CreateDynamicObject(997, 1368.3968505859, -1663.904296875, 12.53639793396, 0, 0, 168.16577148438);
	CreateDynamicObject(997, 1365.1944580078, -1663.2689208984, 12.53639793396, 0, 0, 180.07214355469);
	CreateDynamicObject(997, 1361.7891845703, -1663.2750244141, 12.53639793396, 0, 0, 180.07141113281);
	CreateDynamicObject(997, 1376.9970703125, -1644.11328125, 12.3828125, 0, 0, 359.80773925781);
	CreateDynamicObject(994, 1376.9591064453, -1643.9116210938, 12.546875, 0, 0, 90);
	CreateDynamicObject(994, 1376.9436035156, -1637.5939941406, 12.546875, 0, 0, 90);
	CreateDynamicObject(994, 1370.58203125, -1631.35546875, 12.546875, 0, 0, 0);
	CreateDynamicObject(994, 1364.208984375, -1631.369140625, 12.546875, 0, 0, 0);
	CreateDynamicObject(994, 1357.80078125, -1631.3671875, 12.546875, 0, 0, 0);
	CreateDynamicObject(10183, 1364.5498046875, -1642.4228515625, 12.394755363464, 0, 0, 135.20874023438);
	CreateDynamicObject(8406, 1357.3173828125, -1650.06640625, 20, 0, 0, 90.247192382813);
	CreateDynamicObject(967, 1416.8515625, -1653.9541015625, 12.546875, 0, 0, 89.923095703125);
	CreateDynamicObject(1294, 1375.4072265625, -1632.791015625, 16.900936126709, 0, 0, 39.995727539063);
	CreateDynamicObject(1294, 1362.8255615234, -1663.0451660156, 16.900936126709, 0, 0, 219.99572753906);
	CreateDynamicObject(1294, 1362.8251953125, -1632.791015625, 16.900936126709, 0, 0, 127.99072265625);
	CreateDynamicObject(1294, 1376.794921875, -1655.1083984375, 16.900936126709, 0, 0, 39.995727539063);
	CreateDynamicObject(1294, 1378.712890625, -1669.927734375, 16.900936126709, 0, 0, 39.995727539063);
	CreateDynamicObject(1294, 1373.2962646484, -1700.0479736328, 16.900936126709, 0, 0, 323.99572753906);
	CreateDynamicObject(1294, 1368.7213134766, -1684.6470947266, 16.900936126709, 0, 0, 123.99026489258);
	CreateDynamicObject(3091, 1367.2252197266, -1696.8881835938, 8.5870733261108, 0, 0, 304);
	CreateDynamicObject(3091, 1369.5506591797, -1700.6794433594, 8.6833829879761, 0, 0, 303.99719238281);
	
//=============================BLOQUEOS PAYNSPRAY===============================
	CreateDynamicObject(985, 720.66430664063, -462.59594726563, 15.60000038147, 0, 0, 180);
	CreateDynamicObject(985, -1420.7413330078, 2591.1958007813, 55, 0, 0, 0);
	CreateDynamicObject(985, -100.21936035156, 1111.3374023438, 19.39999961853, 0, 0, 0);
	CreateDynamicObject(985, 2071.5534667969, -1830.9703369141, 13.382800102234, 0, 0, 270);
	CreateDynamicObject(985, -2425.8344726563, 1028.1407470703, 50.390598297119, 0, 0, 0);
	CreateDynamicObject(985, 1968.4382324219, 2161.9348144531, 10.820300102234, 0, 0, 90);
	CreateDynamicObject(985, 488.38320922852, -1734.6398925781, 11.245200157166, 0, 0, 352);
	CreateDynamicObject(985, 1024.3717041016, -1029.4647216797, 31.529300689697, 0, 0, 0);
	CreateDynamicObject(985, 2394.212890625, 1483.556640625, 10.671899795532, 0, 0, 180);
	CreateDynamicObject(985, -1904.1252441406, 277.83969116211, 41.039100646973, 0, 0, 180);

//============================INTERIOR AYUNTAMIENTO=============================
	CreateDynamicObject(1535, 372.78, 166.67, 1007.39,   0.00, 0.00, 180.00);
	CreateDynamicObject(1535, 365.78, 189.49, 1007.38,   0.00, 0.00, 0.00);

//===============================CENTRO DE LICENCIAS============================
	CreateDynamicObject(982, 1103.09, -1765.55, 13.22,   0.00, 0.00, 0.00);
	CreateDynamicObject(982, 1090.28, -1778.37, 13.22,   0.00, 0.00, 90.00);
	CreateDynamicObject(982, 1071.07, -1778.38, 13.22,   0.00, 0.00, 90.00);
	CreateDynamicObject(982, 1058.28, -1765.56, 13.22,   0.00, 0.00, 0.00);
	CreateDynamicObject(982, 1058.28, -1747.96, 13.22,   0.00, 0.00, 0.00);
	CreateDynamicObject(982, 1071.08, -1735.17, 13.22,   0.00, 0.00, 90.00);
	CreateDynamicObject(982, 1093.48, -1735.17, 13.22,   0.00, 0.00, 90.00);

//=================================JAIL OOC=====================================
	CreateDynamicObject(18856, 1411.23, -2.94, 1001.44, 0.00, 0.00, 0.00);
	
//====================================PMA=======================================
//===================================EXTERIOR===================================
	PMGate = CreateObject(3037, 1589.73499, -1638.32410, 14.27130,   0.00000, 0.00000, 90.00000);
    PMBarrier = CreateObject(968, 1544.68, -1631.00, 13.19,   0.00, 90.00, 90.00);
    
//===================================INTERIOR===================================
	PMHallDoor[1] = CreateObject(19303, 245.54, 72.44, 1003.87, 0.00, 0.00, 180.00);
	PMHallDoor[2] = CreateObject(19303, 247.29, 72.44, 1003.87, 0.00, 0.00, 0.00);
	PMWindow[1] = CreateObject(3352, 250.46, 68.02, 1005.13, 0.00, 180.00, 0.00);
	PMJailMainDoor[1] = CreateObject(19303, 259.08, 90.67, 1002.70, 0.00, 0.00, 90.00);
	PMJail1[1] = CreateObject(19303, 266.29, 78.45, 1001.30, 0.00, 0.00, 90.00);
	PMJail2[1] = CreateObject(19303, 266.29, 82.96, 1001.30, 0.00, 0.00, 90.00);
	PMJail3[1] = CreateObject(19303, 266.29, 87.46, 1001.30, 0.00, 0.00, 90.00);
	CreateDynamicObject(19303, 266.32, 76.68, 1001.30, 0.00, 0.00, 270.00);
	CreateDynamicObject(19303, 266.36, 81.22, 1001.30, 0.00, 0.00, 270.00);
	CreateDynamicObject(19303, 266.36, 85.71, 1001.30, 0.00, 0.00, 270.00);
	CreateDynamicObject(19303, 258.98, 92.44, 1002.70, 0.00, 0.00, 270.00);
	CreateDynamicObject(1999, 256.85, 86.45, 1001.44, 0.00, 0.00, 90.00);
	CreateDynamicObject(2309, 255.04, 87.24, 1001.45, 0.00, 0.00, -94.02);
	CreateDynamicObject(2309, 255.10, 85.88, 1001.45, 0.00, 0.00, -82.62);
	CreateDynamicObject(2309, 258.26, 87.50, 1001.45, 0.00, 0.00, 93.90);
	CreateDynamicObject(2309, 258.26, 86.20, 1001.44, 0.00, 0.00, 83.22);
	CreateDynamicObject(2611, 258.84, 85.52, 1003.24, 0.00, 0.00, 270.00);
	
	CreateDynamicObject(1999, 219.89999, 78, 1004, 0, 0, 0);
	CreateDynamicObject(1999, 214.7, 77.8, 1004, 0, 0, 0);
	CreateDynamicObject(1663, 219.89941, 76.69922, 1004.5, 0, 0, 175.995);
	CreateDynamicObject(1663, 221, 76.69922, 1004.5, 0, 0, 179.995);
	CreateDynamicObject(1663, 221.2, 74.2, 1004.5, 0, 0, 189.995);
	CreateDynamicObject(1663, 220, 74.2, 1004.5, 0, 0, 179.992);
	CreateDynamicObject(1999, 219.89999, 75.5, 1004, 0, 0, 0);
	CreateDynamicObject(1999, 214.7998, 75.59961, 1004, 0, 0, 0);
	CreateDynamicObject(1663, 215.7, 74.2, 1004.5, 0, 0, 177.995);
	CreateDynamicObject(1663, 214.89941, 74.59961, 1004.5, 0, 0, 175.995);
	CreateDynamicObject(1663, 215.89999, 76.6, 1004.5, 0, 0, 177.995);
	CreateDynamicObject(1663, 214.89999, 76.7, 1004.5, 0, 0, 175.995);
	CreateDynamicObject(2065, 214.3, 80.8, 1004, 0, 0, 90);
	CreateDynamicObject(2065, 214.2998, 79.59961, 1004, 0, 0, 90);
	CreateDynamicObject(2065, 214.2998, 80.19922, 1004, 0, 0, 90);
	CreateDynamicObject(1651, 217.8, 82.9, 1005.59998, 0, 0, 270);
	CreateDynamicObject(1886, 217.7, 78, 1007.5, 20, 0, 180);
	CreateDynamicObject(2737, 217.45703, 73.8796, 1005.37091, 0, 0, 180);
	CreateDynamicObject(2612, 214, 78.4, 1005.59998, 0, 0, 90);
	CreateDynamicObject(2611, 221.86, 81.9, 1005.5, 0, 0, 270);
	CreateDynamicObject(2894, 219.8, 78, 1004.79999, 0, 0, 0);
	CreateDynamicObject(2894, 214.7, 75.5, 1004.79999, 0, 0, 18);
	CreateDynamicObject(1247, 216.89999, 67.4, 1005.59998, 0, 0, 90);
	CreateDynamicObject(1498, 218.60001, 72.8, 1004, 0, 0, 0);
	CreateDynamicObject(1505, 216.84999, 69.2, 1004, 0, 0, 270);
	CreateDynamicObject(2008, 224, 72.3, 1004, 0, 0, 268);
	CreateDynamicObject(1671, 223, 71.7, 1004.5, 0, 0, 88);
	CreateDynamicObject(2894, 224.10001, 72.2, 1004.79999, 0, 0, 276);
	CreateDynamicObject(2616, 222.47653, 76.55, 1005.40002, 0, 0, 90);
	CreateDynamicObject(2615, 222.5, 76.2, 1005.5, 0, 0, 90);
	CreateDynamicObject(2055, 224.3, 80.8, 1005.70001, 0, 0, 0);
	CreateDynamicObject(2051, 225.86, 77.9, 1005.70001, 0, 0, 270);
	CreateDynamicObject(1806, 231.5, 75.7, 1004, 0, 0, 0);
	CreateDynamicObject(1806, 235, 79.1, 1004, 0, 0, 0);
	CreateDynamicObject(1806, 240.5, 78.2, 1004, 0, 0, 0);
	CreateDynamicObject(1806, 240.8, 81.7, 1004, 0, 0, 180);
	CreateDynamicObject(1806, 238, 70.8, 1004, 0, 0, 0);
	CreateDynamicObject(1806, 235.10001, 73.9, 1004, 0, 0, 0);
	CreateDynamicObject(2191, 217.5, 72.2, 1004, 0, 0, 0);
	CreateDynamicObject(2164, 221.89999, 72.2, 1004.09998, 0, 0, 270);
	CreateDynamicObject(2167, 220.7, 65.8, 1004, 0, 0, 179.995);
	CreateDynamicObject(2162, 218.2, 65.9, 1004, 0, 0, 180);
	CreateDynamicObject(2615, 217.70001, 73.89, 1005.5, 0, 0, 180);
	CreateDynamicObject(3077, 226.89999, 80.1, 1004, 0, 0, 88);
	CreateDynamicObject(2606, 235.8, 82.6, 1006.5, 0, 0, 0);
	CreateDynamicObject(2775, 254.2, 80.59305, 1005.5, 0, 0, 0);
	CreateDynamicObject(2611, 244, 72.3, 1004.20001, 0, 0, 0);
	CreateDynamicObject(2612, 248.8, 72.3, 1004.20001, 0, 0, 0);
	CreateDynamicObject(3051, 241.89999, 65.8, 1004, 0, 0, 226);
	CreateDynamicObject(3051, 241.89941, 66.89941, 1004, 0, 0, 46);
	CreateDynamicObject(2922, 242.39999, 67.6, 1004, 0, 0, 270);
	CreateDynamicObject(1721, 242.5, 71.5, 1002.60999, 0, 0, 270);
	CreateDynamicObject(1721, 242.5, 70.3, 1002.60999, 0, 0, 270);
	CreateDynamicObject(1721, 242.5, 69.12, 1002.60999, 0, 0, 270);
	CreateDynamicObject(15055, 225.2, 82, 1221.19995, 0, 0, 0);
	CreateDynamicObject(1505, 223.60001, 85.6, 1220, 0, 0, 90);
	CreateDynamicObject(1671, 229, 87, 1220.40002, 0, 0, 270);
	CreateDynamicObject(2008, 227.8, 86.6, 1220, 0, 0, 90);
	CreateDynamicObject(2162, 228.3, 90.4, 1219.90002, 0, 0, 0);
	CreateDynamicObject(2163, 224.2, 90.4, 1219.90002, 0, 0, 0);
	CreateDynamicObject(2164, 227.3, 84.4, 1219.90002, 0, 0, 180);
	CreateDynamicObject(2164, 225.5, 84.39941, 1219.90002, 0, 0, 179.995);
	CreateDynamicObject(2289, 224.7, 90.45, 1222.30005, 0, 0, 0);
	CreateDynamicObject(2265, 224.60449, 90.47656, 1221.76746, 0, 0, 0);
	CreateDynamicObject(2263, 228.89999, 84.9, 1221.80005, 0, 0, 180);
	CreateDynamicObject(2267, 223.69, 88.30003, 1222.20007, 0, 0, 90);
	CreateDynamicObject(2894, 227.89999, 86.8, 1220.80005, 0, 0, 100);
	CreateDynamicObject(2596, 228.10001, 90.147, 1222.90002, 7, 0, 0);
	CreateDynamicObject(1616, 249.9003, 64.9, 1007.40002, 0, 0, 0);
	CreateDynamicObject(2921, 258.89999, 82.7, 1004.09998, 0, 0, 0);
	CreateDynamicObject(2191, 219.7, 66.3, 1004, 0, 0, 180);
	CreateDynamicObject(15059, 179.28223, 66.86621, 996.54865, 0, 0, 0);
	CreateDynamicObject(15059, 209.7, 122.7, 1174, 0, 0, 0);
	CreateDynamicObject(1498, 208.39999, 128.10001, 1174, 0, 0, 90);
	CreateDynamicObject(1999, 204.8, 126.6, 1174, 0, 0, 0);
	CreateDynamicObject(2008, 205.60001, 130.8, 1174, 0, 0, 180);
	CreateDynamicObject(1663, 205.10001, 132.2, 1174.5, 0, 0, 0);
	CreateDynamicObject(1663, 205.2, 125.4, 1174.5, 0, 0, 180);
	CreateDynamicObject(2894, 204.89999, 126.5, 1174.80005, 0, 0, 24);
	CreateDynamicObject(2196, 205.10001, 127.1, 1174.80005, 0, 0, 330);
	CreateDynamicObject(2196, 205.39999, 130.89999, 1174.80005, 0, 0, 93.996);
	CreateDynamicObject(2612, 202.34, 127.6, 1175.30005, 0, 0, 90);
	CreateDynamicObject(2611, 204.3, 132.72006, 1175.59998, 0, 0, 0);
	CreateDynamicObject(2356, 204.2, 129.39999, 1174, 0, 0, 336);
	CreateDynamicObject(2356, 205.8, 129.39999, 1174, 0, 0, 11.995);
	CreateDynamicObject(2356, 204.8, 127.7, 1174, 0, 0, 227.995);
	CreateDynamicObject(2356, 206.10001, 127.9, 1174, 0, 0, 175.994);
	CreateDynamicObject(2161, 202.8, 132.7, 1174, 0, 0, 0);
	CreateDynamicObject(2162, 208.3, 131.89999, 1174.09998, 0, 0, 270);
	CreateDynamicObject(2164, 203.7, 124.8, 1174.09998, 0, 0, 180);
	CreateDynamicObject(2167, 208.3, 126.7, 1174, 0, 0, 270);
	CreateDynamicObject(1498, 177.89999, 73.8, 996.59998, 0, 0, 270);
	CreateDynamicObject(2008, 174, 70.8, 996.59998, 0, 0, 0);
	CreateDynamicObject(1999, 175.3, 75.2, 996.59998, 0, 0, 180);
	CreateDynamicObject(1663, 175, 76.3, 997, 0, 0, 0);
	CreateDynamicObject(1663, 174.7, 69.5, 997, 0, 0, 180);
	CreateDynamicObject(2612, 173.2, 76.89001, 998, 0, 0, 0);
	CreateDynamicObject(2611, 171.91994, 71.6, 998, 0, 0, 90);
	CreateDynamicObject(2161, 176.89999, 76.9, 996.59998, 0, 0, 0);
	CreateDynamicObject(2162, 177.89999, 70.2, 996.59998, 0, 0, 270);
	CreateDynamicObject(2164, 173.3, 69, 996.59998, 0, 0, 180);
	CreateDynamicObject(2167, 171.89999, 72.9, 996.59998, 0, 0, 90);
	CreateDynamicObject(2163, 173.3, 68.9, 998.40002, 0, 0, 180);
	CreateDynamicObject(2356, 175.60001, 73.8, 996.59998, 0, 0, 20);
	CreateDynamicObject(2356, 174.10001, 73.7, 996.59998, 0, 0, 336);
	CreateDynamicObject(2356, 175.10001, 72.2, 996.59998, 0, 0, 154);
	CreateDynamicObject(2356, 173.7, 72.3, 996.59998, 0, 0, 190);
	
//==================================SHOPPING====================================
	CreateDynamicObject(19322, 1117.58594, -1490.00781, 32.71880,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19323, 1117.58594, -1490.00781, 32.71880,   0.00000, 0.00000, 0.00000);
	
//============================TIENDA DEPORTIVA SHOPPING=========================
	CreateDynamicObject(2404, 1163.61462, -1449.14478, 16.03050,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2368, 1156.99011, -1451.12231, 14.78151,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2622, 1160.82629, -1459.71863, 15.58081,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2699, 1165.02063, -1457.08862, 15.27797,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2698, 1162.20776, -1454.75854, 15.63268,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2622, 1159.56628, -1459.71863, 15.58080,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2622, 1158.20630, -1459.71863, 15.58080,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2622, 1156.90625, -1459.71863, 15.58080,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2697, 1167.75439, -1456.64417, 15.77322,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2400, 1167.73096, -1457.15649, 14.79250,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2400, 1167.73096, -1453.42395, 14.79250,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2400, 1167.73096, -1449.69104, 14.79250,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2699, 1165.02063, -1452.42859, 15.27800,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2656, 1167.75439, -1452.91968, 15.77320,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2400, 1166.16284, -1460.52942, 13.81705,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2654, 1167.53503, -1450.08630, 16.96445,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(336, 1167.24451, -1453.37854, 15.65600,   84.00000, 0.00000, 0.00000);
	CreateDynamicObject(336, 1167.24451, -1453.37854, 16.47500,   84.00000, 0.00000, 0.00000);
	CreateDynamicObject(333, 1167.31946, -1454.34692, 15.61700,   0.00000, -90.40000, 90.00000);
	CreateDynamicObject(333, 1167.31946, -1454.34692, 16.43400,   0.00000, -90.40000, 90.00000);
	CreateDynamicObject(338, 1167.21252, -1451.50635, 15.66000,   86.00000, 0.00000, 0.00000);
	CreateDynamicObject(338, 1167.35254, -1451.50635, 15.68300,   86.00000, 0.00000, 0.00000);
	CreateDynamicObject(338, 1167.21252, -1449.76636, 15.66000,   86.00000, 0.00000, 0.00000);
	CreateDynamicObject(338, 1167.35254, -1449.76636, 15.68300,   86.00000, 0.00000, 0.00000);
	CreateDynamicObject(338, 1167.21252, -1449.76636, 16.47133,   86.00000, 0.00000, 0.00000);
	CreateDynamicObject(336, 1167.40454, -1453.37854, 15.68400,   84.00000, 0.00000, 0.00000);
	CreateDynamicObject(333, 1167.31946, -1455.54688, 15.61700,   0.00000, -90.40000, 90.00000);
	CreateDynamicObject(333, 1167.31946, -1455.54688, 16.43400,   0.00000, -90.40000, 90.00000);
	CreateDynamicObject(333, 1167.41956, -1455.54688, 15.63300,   0.00000, -90.40000, 90.00000);
	CreateDynamicObject(2114, 1167.48547, -1451.15100, 16.89800,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2114, 1167.45105, -1451.70459, 16.89800,   -4.86001, 12.72001, 0.00000);
	CreateDynamicObject(2114, 1167.52942, -1452.15564, 16.91533,   43.20000, 13.14001, 0.00000);
	CreateDynamicObject(2114, 1167.51892, -1452.67212, 16.89800,   -20.64000, 8.28000, 0.00000);
	CreateDynamicObject(2654, 1167.47314, -1453.63782, 16.96445,   0.00000, 0.00000, 5.82000);
	CreateDynamicObject(2654, 1167.50720, -1459.56396, 16.96445,   0.00000, 0.00000, 5.82000);
	CreateDynamicObject(2114, 1167.50037, -1454.68774, 16.89800,   -20.64000, 8.28000, 0.00000);
	CreateDynamicObject(2114, 1167.58301, -1455.21362, 16.89800,   -57.24000, 89.40000, 0.00000);
	CreateDynamicObject(2114, 1167.46973, -1455.80322, 16.89800,   -57.24000, 89.40000, 86.16000);
	CreateDynamicObject(2114, 1167.55750, -1456.53125, 16.89800,   -57.24000, 89.40000, 86.16000);
	CreateDynamicObject(2654, 1167.56812, -1458.03101, 16.96445,   0.00000, 0.00000, 182.40001);
	CreateDynamicObject(338, 1167.21252, -1457.20630, 15.66000,   86.00000, 0.00000, 0.00000);
	CreateDynamicObject(338, 1167.21252, -1458.96631, 15.66000,   86.00000, 0.00000, 0.00000);
	CreateDynamicObject(338, 1167.35254, -1457.20630, 15.68300,   86.00000, 0.00000, 0.00000);
	CreateDynamicObject(338, 1167.21252, -1457.20630, 16.48226,   86.00000, 0.00000, 0.00000);
	CreateDynamicObject(336, 1167.24451, -1458.87854, 16.47900,   84.00000, 0.00000, 0.00000);
	CreateDynamicObject(336, 1167.36450, -1458.87854, 16.49700,   84.00000, 0.00000, 0.00000);
	CreateDynamicObject(2694, 1165.21265, -1456.99976, 16.01813,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2694, 1164.69507, -1457.23462, 16.01813,   0.00000, 0.00000, 31.20000);
	CreateDynamicObject(336, 1164.81592, -1456.70190, 15.88990,   84.00000, 0.00000, 10.38000);
	CreateDynamicObject(2114, 1164.85303, -1452.84009, 16.04489,   67.25999, -22.14001, 0.18000);
	CreateDynamicObject(2114, 1164.74170, -1452.38477, 16.04489,   14.22000, -84.42000, 87.66000);
	CreateDynamicObject(2114, 1165.13745, -1452.25439, 16.04489,   -9.12000, -37.55999, 87.66000);
	CreateDynamicObject(336, 1165.25146, -1452.19678, 15.89990,   84.00000, 0.00000, -27.30000);
	CreateDynamicObject(336, 1165.33704, -1452.25903, 15.89990,   84.00000, 0.00000, -14.76000);
	CreateDynamicObject(336, 1165.19434, -1451.97607, 15.89990,   84.00000, 0.00000, -77.64000);
	CreateDynamicObject(333, 1159.17224, -1451.08179, 15.81314,   99.96001, -102.53999, 0.00000);
	CreateDynamicObject(333, 1159.29346, -1451.06946, 15.81314,   99.96001, -102.53999, -2.58000);
	CreateDynamicObject(2694, 1166.19519, -1460.24524, 15.87805,   0.00000, 0.00000, 96.11997);
	CreateDynamicObject(2694, 1165.57434, -1460.26563, 15.87805,   0.00000, 0.00000, 96.11997);
	CreateDynamicObject(2114, 1164.94922, -1460.26245, 15.91790,   14.22000, -84.42000, 0.18000);
	CreateDynamicObject(2114, 1164.37476, -1460.22180, 15.91790,   74.76000, -117.84002, 0.18000);
	CreateDynamicObject(2114, 1163.78857, -1460.24780, 15.91790,   16.26000, -14.46000, 0.18000);
	CreateDynamicObject(2114, 1163.26013, -1460.25317, 15.91790,   82.20001, -19.44000, 0.18000);
	CreateDynamicObject(2694, 1165.92920, -1460.24158, 16.10500,   0.00000, 0.00000, 102.90000);
	CreateDynamicObject(2661, 1156.95007, -1460.44446, 16.90139,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2657, 1159.03979, -1460.43420, 16.90140,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2691, 1163.27734, -1460.42285, 17.62290,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2695, 1160.97900, -1449.11646, 16.84351,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2696, 1162.04297, -1449.08057, 16.84350,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2697, 1165.79065, -1449.06494, 16.84350,   0.00000, 0.00000, -0.18000);
	CreateDynamicObject(2405, 1164.23462, -1449.14478, 16.03050,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2406, 1164.85461, -1449.14478, 16.03050,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2410, 1163.00122, -1449.12415, 16.04700,   0.00000, 90.00000, -90.00000);
	CreateDynamicObject(2691, 1156.96387, -1449.10291, 17.06674,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1514, 1156.93213, -1451.23035, 16.06731,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2596, 1157.18335, -1460.12573, 18.05181,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2382, 1167.74438, -1452.54382, 16.15427,   8.00000, 0.00000, -90.00000);
	CreateDynamicObject(2392, 1167.75928, -1451.95374, 16.19400,   8.00000, 0.00000, -90.00000);
	CreateDynamicObject(2394, 1168.16614, -1451.36401, 16.21990,   -1.30000, 6.00000, -179.99980);

//===============================FERRETERIA SHOPPING============================
	CreateDynamicObject(1984, 1166.02283, -1471.21948, 14.78000,   0.00000, 0.00000, 107.56000);
	CreateDynamicObject(2379, 1160.37000, -1468.70996, 14.76000,   0.00000, 0.00000, 108.01000);
	CreateDynamicObject(2379, 1158.53003, -1466.67004, 14.76000,   0.00000, 0.00000, 288.16000);
	CreateDynamicObject(1428, 1164.30005, -1480.18994, 16.26000,   0.00000, 0.00000, 201.14000);
	CreateDynamicObject(1428, 1162.88000, -1480.76001, 16.26000,   0.00000, 0.00000, 201.14000);
	CreateDynamicObject(2228, 1158.67004, -1468.40002, 15.99000,   0.00000, 0.00000, 116.46000);
	CreateDynamicObject(2228, 1158.12000, -1466.84998, 15.99000,   0.00000, 0.00000, 116.46000);
	CreateDynamicObject(2228, 1158.33997, -1467.59998, 15.99000,   0.00000, 0.00000, 116.46000);
	CreateDynamicObject(2237, 1158.76001, -1469.20996, 16.38000,   0.00000, 0.00000, 303.85999);
	CreateDynamicObject(1650, 1159.17480, -1469.05786, 15.29000,   0.00000, 0.00000, 286.84000);
	CreateDynamicObject(2068, 1162.16003, -1468.57996, 18.59000,   0.00000, 0.00000, 9.09000);
	CreateDynamicObject(2057, 1166.03284, -1471.19739, 15.89000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(918, 1160.98340, -1468.73071, 15.13000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(918, 1160.69995, -1467.97998, 15.13000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1219, 1162.38586, -1477.38342, 15.02345,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1299, 1161.94421, -1478.03857, 15.73344,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(939, 1167.24011, -1478.59216, 15.46928,   0.00000, 0.00000, 16.62000);
	CreateDynamicObject(2690, 1169.32959, -1477.98328, 17.02519,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2690, 1169.17200, -1478.63245, 17.02519,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2690, 1168.64514, -1478.17395, 17.02519,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1217, 1165.66260, -1479.03833, 17.10100,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1218, 1168.84082, -1475.19031, 15.24830,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1218, 1167.98303, -1476.71130, 15.24830,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1220, 1167.80310, -1475.67993, 15.07156,   0.00000, 0.00000, -107.82003);
	CreateDynamicObject(1221, 1168.28613, -1474.21240, 15.20472,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1222, 1168.07117, -1473.01233, 15.44578,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(1222, 1167.78650, -1472.08533, 15.44578,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(1224, 1160.59302, -1464.48340, 15.35254,   0.00000, 0.00000, 17.58000);
	CreateDynamicObject(2690, 1167.89221, -1470.83911, 15.12721,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2690, 1167.80420, -1470.49243, 15.12721,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1228, 1166.53979, -1475.09656, 15.18398,   0.00000, 0.00000, -44.75999);
	CreateDynamicObject(2228, 1160.22913, -1466.99951, 15.99000,   0.00000, 0.00000, 287.81992);
	CreateDynamicObject(2228, 1160.72180, -1468.61523, 15.99000,   0.00000, 0.00000, 287.81992);
	CreateDynamicObject(2228, 1167.44836, -1469.53394, 15.31798,   -23.82000, 5.27999, 296.70016);
	CreateDynamicObject(2228, 1167.63660, -1470.14746, 15.31798,   -23.82000, 5.27999, 297.12030);
	CreateDynamicObject(1219, 1164.27380, -1464.39526, 15.04254,   0.00000, 0.00000, 16.98000);
	CreateDynamicObject(1222, 1164.80664, -1464.59961, 15.74119,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1222, 1163.85986, -1464.00610, 15.74119,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1221, 1161.89063, -1464.14648, 15.16029,   0.00000, 0.00000, 16.44000);
	CreateDynamicObject(1221, 1162.46863, -1465.41833, 15.16029,   0.00000, 0.00000, -36.48000);
	CreateDynamicObject(1230, 1160.49841, -1466.04163, 15.18244,   0.00000, 0.00000, 58.98001);
	CreateDynamicObject(1230, 1161.33423, -1465.60010, 15.18244,   0.00000, 0.00000, 14.88001);
	CreateDynamicObject(923, 1165.84424, -1466.46899, 15.66292,   0.00000, 0.00000, -74.22000);
	CreateDynamicObject(1558, 1163.35327, -1471.95056, 15.40341,   0.00000, 0.00000, 19.14000);
	CreateDynamicObject(1558, 1163.70557, -1472.98047, 15.40341,   0.00000, 0.00000, 19.14000);
	CreateDynamicObject(1558, 1162.28052, -1472.32800, 15.40341,   0.00000, 0.00000, 19.14000);
	CreateDynamicObject(1558, 1162.68591, -1473.34399, 15.40341,   0.00000, 0.00000, 19.14000);

//=================================VIDRIOS SHOPPING=============================
	CreateDynamicObject(19325, 1155.40002, -1434.89001, 16.49000,   0.00000, 0.00000, 0.30000);
	CreateDynamicObject(19325, 1155.37000, -1445.41003, 16.31000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 1155.29004, -1452.38000, 16.31000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 1157.35999, -1468.34998, 16.31000,   0.00000, 0.00000, 18.66000);
	CreateDynamicObject(19325, 1160.64001, -1478.37000, 16.31000,   0.00000, 0.00000, 17.76000);
	CreateDynamicObject(19325, 1159.83997, -1502.06006, 16.31000,   0.00000, 0.00000, -19.92000);
	CreateDynamicObject(19325, 1139.28003, -1523.70996, 16.31000,   0.00000, 0.00000, -69.36000);
	CreateDynamicObject(19325, 1117.06006, -1523.43005, 16.51000,   0.00000, 0.00000, -109.44000);
	CreateDynamicObject(19325, 1097.18005, -1502.43005, 16.51000,   0.00000, 0.00000, -158.58000);
	CreateDynamicObject(19325, 1096.46997, -1478.29004, 16.51000,   0.00000, 0.00000, -197.94000);
	CreateDynamicObject(19325, 1099.69995, -1468.27002, 16.51000,   0.00000, 0.00000, -197.94000);
	CreateDynamicObject(19325, 1101.81006, -1445.44995, 16.22000,   0.00000, 0.00000, -180.24001);
	CreateDynamicObject(19325, 1101.76001, -1452.46997, 16.22000,   0.00000, 0.00000, -181.62000);
	CreateDynamicObject(19325, 1101.77002, -1434.88000, 16.22000,   0.00000, 0.00000, -180.24001);
	CreateDynamicObject(19325, 1094.31006, -1444.92004, 23.47000,   0.00000, 0.00000, -180.24001);
	CreateDynamicObject(19325, 1094.37000, -1458.37000, 23.47000,   0.00000, 0.00000, -179.46001);
	CreateDynamicObject(19325, 1093.01001, -1517.43994, 23.44000,   0.00000, 0.00000, -138.72000);
	CreateDynamicObject(19325, 1101.07996, -1526.64001, 23.42000,   0.00000, 0.00000, -137.34000);
	CreateDynamicObject(19325, 1155.12000, -1526.38000, 23.46000,   0.00000, 0.00000, -42.12000);
	CreateDynamicObject(19325, 1163.08997, -1517.25000, 23.46000,   0.00000, 0.00000, -40.74000);
	CreateDynamicObject(19325, 1163.04004, -1442.06006, 23.40000,   0.00000, 0.00000, -0.12000);
	CreateDynamicObject(19325, 1163.08997, -1428.46997, 23.50000,   0.00000, 0.00000, 0.54000);

//================================24-7 SHOPPING=================================
	CreateDynamicObject(19326, 1155.33997, -1446.72998, 16.38000,   0.00000, 0.00000, -89.82000);
	CreateDynamicObject(19326, 1155.25000, -1443.84998, 16.36000,   0.00000, 0.00000, -89.82000);
	CreateDynamicObject(19326, 1155.37000, -1436.31995, 16.36000,   0.00000, 0.00000, -89.82000);
	CreateDynamicObject(19326, 1155.34998, -1433.51001, 16.36000,   0.00000, 0.00000, -89.70000);
	CreateDynamicObject(19329, 1155.18005, -1440.21997, 18.70000,   0.00000, 0.00000, 89.04000);
	CreateDynamicObject(19329, 1161.58997, -1431.50000, 17.93000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19329, 1160.40002, -1448.79004, 17.96000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2543, 1168.18005, -1436.39001, 14.79000,   0.00000, 0.00000, 0.30000);
	CreateDynamicObject(2535, 1182.73999, -1448.30005, 14.70000,   0.00000, 0.00000, -90.96000);
	CreateDynamicObject(2543, 1167.09998, -1436.40002, 14.79000,   0.00000, 0.00000, 0.31000);
	CreateDynamicObject(2538, 1172.31006, -1435.31995, 14.79000,   0.00000, 0.00000, 180.34000);
	CreateDynamicObject(2539, 1171.38000, -1435.31006, 14.79000,   0.00000, 0.00000, 180.19000);
	CreateDynamicObject(2540, 1169.56006, -1435.35999, 14.79000,   0.00000, 0.00000, 180.17000);
	CreateDynamicObject(1984, 1157.37000, -1442.58997, 14.79000,   0.00000, 0.00000, -450.06000);
	CreateDynamicObject(2012, 1163.25000, -1448.31006, 14.75000,   0.00000, 0.00000, -179.16000);
	CreateDynamicObject(2012, 1169.29004, -1431.92004, 14.75000,   0.00000, 0.00000, 359.79999);
	CreateDynamicObject(1987, 1163.13000, -1436.33997, 14.79000,   0.00000, 0.00000, 361.06000);
	CreateDynamicObject(1988, 1164.13000, -1436.32996, 14.79000,   0.00000, 0.00000, 360.79999);
	CreateDynamicObject(2871, 1164.79004, -1443.95996, 14.79000,   0.00000, 0.00000, 177.73000);
	CreateDynamicObject(2871, 1164.69995, -1444.97998, 14.79000,   0.00000, 0.00000, 358.07001);
	CreateDynamicObject(1987, 1164.12000, -1435.31995, 14.77000,   0.00000, 0.00000, 180.96001);
	CreateDynamicObject(2530, 1171.13000, -1443.79004, 14.79000,   0.00000, 0.00000, -182.16000);
	CreateDynamicObject(1991, 1173.75000, -1439.56006, 14.79000,   0.00000, 0.00000, 179.47000);
	CreateDynamicObject(1996, 1169.81995, -1439.50000, 14.79000,   0.00000, 0.00000, 179.10001);
	CreateDynamicObject(1996, 1174.23999, -1435.38000, 14.79000,   0.00000, 0.00000, 179.24001);
	CreateDynamicObject(1991, 1175.22998, -1435.39001, 14.79000,   0.00000, 0.00000, 179.57001);
	CreateDynamicObject(1995, 1182.65002, -1435.09998, 14.79000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1994, 1182.66003, -1438.06995, 14.79000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1993, 1182.66003, -1437.07996, 14.79000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2542, 1163.78003, -1443.92004, 14.76000,   0.00000, 0.00000, 178.77000);
	CreateDynamicObject(2536, 1166.88000, -1445.06995, 14.70000,   0.00000, 0.00000, -0.42000);
	CreateDynamicObject(2542, 1163.69995, -1444.93005, 14.78000,   0.00000, 0.00000, -1.74000);
	CreateDynamicObject(1984, 1157.33997, -1435.70996, 14.79000,   0.00000, 0.00000, -450.06000);
	CreateDynamicObject(2012, 1166.31006, -1448.28003, 14.75000,   0.00000, 0.00000, -180.12000);
	CreateDynamicObject(2530, 1172.14001, -1443.82996, 14.79000,   0.00000, 0.00000, -181.38000);
	CreateDynamicObject(2530, 1173.14001, -1443.84998, 14.79000,   0.00000, 0.00000, -180.96001);
	CreateDynamicObject(2530, 1174.13000, -1443.88000, 14.79000,   0.00000, 0.00000, -181.50000);
	CreateDynamicObject(1981, 1170.76001, -1439.52002, 14.79000,   0.00000, 0.00000, -181.74001);
	CreateDynamicObject(1981, 1171.76001, -1439.54004, 14.79000,   0.00000, 0.00000, -180.80000);
	CreateDynamicObject(1981, 1172.75000, -1439.55005, 14.79000,   0.00000, 0.00000, -180.84000);
	CreateDynamicObject(2535, 1182.75000, -1447.28003, 14.70000,   0.00000, 0.00000, -90.78000);
	CreateDynamicObject(2535, 1182.73999, -1446.28003, 14.70000,   0.00000, 0.00000, -90.78000);
	CreateDynamicObject(2535, 1182.73999, -1445.26001, 14.70000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2541, 1182.75000, -1444.21997, 14.79000,   0.00000, 0.00000, -90.06000);
	CreateDynamicObject(2541, 1182.75000, -1443.19995, 14.79000,   0.00000, 0.00000, -90.06000);
	CreateDynamicObject(2541, 1182.73999, -1442.16003, 14.79000,   0.00000, 0.00000, -90.06000);
	CreateDynamicObject(2543, 1182.76001, -1441.18005, 14.79000,   0.00000, 0.00000, -90.84000);
	CreateDynamicObject(2541, 1182.79004, -1440.17004, 14.79000,   0.00000, 0.00000, -90.06000);
	CreateDynamicObject(2543, 1182.71997, -1439.15002, 14.79000,   0.00000, 0.00000, -90.84000);
	CreateDynamicObject(1990, 1182.66003, -1431.67004, 14.79000,   0.00000, 0.00000, 3.30000);
	CreateDynamicObject(1990, 1181.63000, -1431.72998, 14.79000,   0.00000, 0.00000, 3.30000);
	CreateDynamicObject(1990, 1180.60999, -1431.81006, 14.79000,   0.00000, 0.00000, 3.30000);
	CreateDynamicObject(1990, 1179.60999, -1431.82996, 14.79000,   0.00000, 0.00000, 3.30000);
	CreateDynamicObject(1990, 1178.60999, -1431.89001, 14.79000,   0.00000, 0.00000, 3.30000);
	CreateDynamicObject(1990, 1177.58997, -1431.85999, 14.79000,   0.00000, 0.00000, 3.30000);
	CreateDynamicObject(1993, 1182.66003, -1436.08997, 14.79000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2012, 1175.50000, -1431.81995, 14.75000,   0.00000, 0.00000, 361.17001);
	CreateDynamicObject(2012, 1172.42004, -1431.87000, 14.75000,   0.00000, 0.00000, 359.92999);
	CreateDynamicObject(2012, 1160.09998, -1448.34998, 14.75000,   0.00000, 0.00000, -179.94000);
	CreateDynamicObject(2539, 1170.44995, -1435.32996, 14.79000,   0.00000, 0.00000, 181.25999);
	CreateDynamicObject(2545, 1161.81995, -1431.83997, 14.91000,   0.00000, 0.00000, -90.54000);
	CreateDynamicObject(2545, 1160.81995, -1431.82996, 14.91000,   0.00000, 0.00000, -90.54000);
	CreateDynamicObject(2545, 1159.81006, -1431.85999, 14.91000,   0.00000, 0.00000, -90.54000);
	CreateDynamicObject(2545, 1162.81995, -1431.87000, 14.91000,   0.00000, 0.00000, -90.54000);
	CreateDynamicObject(1988, 1163.13000, -1435.33997, 14.79000,   0.00000, 0.00000, 541.46002);
	CreateDynamicObject(1988, 1166.06995, -1436.31995, 14.79000,   0.00000, 0.00000, 360.79999);
	CreateDynamicObject(1987, 1165.06995, -1436.32996, 14.79000,   0.00000, 0.00000, 361.06000);
	CreateDynamicObject(1987, 1166.10999, -1435.30005, 14.77000,   0.00000, 0.00000, 180.96001);
	CreateDynamicObject(1988, 1165.06995, -1435.31006, 14.79000,   0.00000, 0.00000, 540.44000);
	CreateDynamicObject(2536, 1165.79004, -1445.06995, 14.70000,   0.00000, 0.00000, -1.20000);
	CreateDynamicObject(2536, 1167.82996, -1445.06995, 14.70000,   0.00000, 0.00000, -0.06000);
	CreateDynamicObject(2871, 1165.79004, -1444.00000, 14.79000,   0.00000, 0.00000, 178.27000);
	CreateDynamicObject(2871, 1166.81006, -1444.03003, 14.79000,   0.00000, 0.00000, 179.35001);
	CreateDynamicObject(2871, 1167.79004, -1444.04004, 14.79000,   0.00000, 0.00000, 179.89000);
	CreateDynamicObject(2543, 1168.13000, -1435.35999, 14.79000,   0.00000, 0.00000, 180.05000);
	CreateDynamicObject(2543, 1167.09998, -1435.37000, 14.79000,   0.00000, 0.00000, 180.35001);
	CreateDynamicObject(2012, 1170.63000, -1440.67004, 14.75000,   0.00000, 0.00000, 359.50000);
	CreateDynamicObject(2012, 1173.77002, -1440.71997, 14.75000,   0.00000, 0.00000, 359.82001);
	CreateDynamicObject(2012, 1177.30005, -1445.31006, 14.75000,   0.00000, 0.00000, 359.92999);
	CreateDynamicObject(1996, 1173.35999, -1448.30005, 14.79000,   0.00000, 0.00000, 179.10001);
	CreateDynamicObject(1981, 1174.32996, -1448.31995, 14.79000,   0.00000, 0.00000, -181.74001);
	CreateDynamicObject(1981, 1175.31995, -1448.34998, 14.79000,   0.00000, 0.00000, -180.84000);
	CreateDynamicObject(1981, 1176.30005, -1448.37000, 14.79000,   0.00000, 0.00000, -180.84000);
	CreateDynamicObject(1991, 1177.28003, -1448.37000, 14.79000,   0.00000, 0.00000, 179.47000);
	CreateDynamicObject(1996, 1178.32996, -1448.35999, 14.79000,   0.00000, 0.00000, 179.24001);
	CreateDynamicObject(1991, 1179.32996, -1448.37000, 14.79000,   0.00000, 0.00000, 179.57001);
	CreateDynamicObject(1994, 1176.81995, -1444.16003, 14.79000,   0.00000, 0.00000, -0.84000);
	CreateDynamicObject(1995, 1178.81006, -1444.19995, 14.79000,   0.00000, 0.00000, -1.26000);
	CreateDynamicObject(2543, 1168.89001, -1444.06006, 14.79000,   0.00000, 0.00000, 178.97000);
	CreateDynamicObject(2543, 1169.91003, -1444.06995, 14.79000,   0.00000, 0.00000, 179.69000);
	CreateDynamicObject(2543, 1169.87000, -1445.12000, 14.79000,   0.00000, 0.00000, -0.06000);
	CreateDynamicObject(2543, 1168.85999, -1445.10999, 14.79000,   0.00000, 0.00000, 0.31000);
	CreateDynamicObject(2538, 1167.02002, -1431.87000, 14.79000,   0.00000, 0.00000, 0.42000);
	CreateDynamicObject(2539, 1166.03003, -1431.89001, 14.79000,   0.00000, 0.00000, 0.70000);
	CreateDynamicObject(2540, 1164.04004, -1431.91003, 14.79000,   0.00000, 0.00000, 0.60000);
	CreateDynamicObject(2539, 1165.03003, -1431.91003, 14.79000,   0.00000, 0.00000, 1.02000);
	CreateDynamicObject(2538, 1176.17004, -1436.38000, 14.79000,   0.00000, 0.00000, 0.24000);
	CreateDynamicObject(2539, 1174.21997, -1436.37000, 14.79000,   0.00000, 0.00000, -0.06000);
	CreateDynamicObject(2540, 1173.21997, -1436.35999, 14.79000,   0.00000, 0.00000, 0.18000);
	CreateDynamicObject(2539, 1175.19995, -1436.38000, 14.79000,   0.00000, 0.00000, -2.06000);
	CreateDynamicObject(2540, 1173.26001, -1435.31006, 14.79000,   0.00000, 0.00000, 180.17000);
	CreateDynamicObject(1991, 1175.73999, -1439.57996, 14.79000,   0.00000, 0.00000, 179.57001);
	CreateDynamicObject(1996, 1174.73999, -1439.56995, 14.79000,   0.00000, 0.00000, 179.24001);
	CreateDynamicObject(1996, 1176.17004, -1435.37000, 14.79000,   0.00000, 0.00000, 179.24001);
	CreateDynamicObject(1991, 1177.16003, -1435.38000, 14.79000,   0.00000, 0.00000, 179.57001);
	CreateDynamicObject(2540, 1169.43994, -1436.34998, 14.79000,   0.00000, 0.00000, 0.18000);
	CreateDynamicObject(2539, 1170.43005, -1436.34998, 14.79000,   0.00000, 0.00000, 0.90000);
	CreateDynamicObject(2539, 1171.33997, -1436.32996, 14.79000,   0.00000, 0.00000, 0.58000);
	CreateDynamicObject(2538, 1172.21997, -1436.31995, 14.79000,   0.00000, 0.00000, 0.30000);
	CreateDynamicObject(2871, 1163.40002, -1440.68005, 14.79000,   0.00000, 0.00000, 360.41000);
	CreateDynamicObject(2536, 1164.48999, -1440.72998, 14.70000,   0.00000, 0.00000, -1.20000);
	CreateDynamicObject(2536, 1165.48999, -1440.75000, 14.70000,   0.00000, 0.00000, -0.42000);
	CreateDynamicObject(2536, 1166.50000, -1440.75000, 14.70000,   0.00000, 0.00000, -0.06000);
	CreateDynamicObject(2543, 1167.60999, -1440.64001, 14.79000,   0.00000, 0.00000, 0.31000);
	CreateDynamicObject(2543, 1168.62000, -1440.64001, 14.79000,   0.00000, 0.00000, 0.30000);
	CreateDynamicObject(2543, 1168.64001, -1439.59998, 14.79000,   0.00000, 0.00000, 180.05000);
	CreateDynamicObject(2543, 1167.67004, -1439.60999, 14.79000,   0.00000, 0.00000, 180.35001);
	CreateDynamicObject(2871, 1163.65002, -1439.67004, 14.79000,   0.00000, 0.00000, 180.61000);
	CreateDynamicObject(2871, 1164.68005, -1439.67004, 14.79000,   0.00000, 0.00000, 179.77000);
	CreateDynamicObject(2871, 1165.68005, -1439.68005, 14.79000,   0.00000, 0.00000, 180.61000);
	CreateDynamicObject(2871, 1166.68005, -1439.66003, 14.79000,   0.00000, 0.00000, 180.61000);
	CreateDynamicObject(1990, 1175.08997, -1444.96997, 14.79000,   0.00000, 0.00000, -2.46000);
	CreateDynamicObject(1990, 1181.63000, -1431.72998, 14.79000,   0.00000, 0.00000, 3.30000);
	CreateDynamicObject(1990, 1174.06995, -1444.93994, 14.79000,   0.00000, 0.00000, 0.48000);
	CreateDynamicObject(1990, 1173.08997, -1444.93994, 14.79000,   0.00000, 0.00000, -1.20000);
	CreateDynamicObject(1990, 1172.10999, -1444.92004, 14.79000,   0.00000, 0.00000, -1.14000);
	CreateDynamicObject(1990, 1171.12000, -1444.91003, 14.79000,   0.00000, 0.00000, -0.72000);
	CreateDynamicObject(2530, 1168.54004, -1448.31006, 14.79000,   0.00000, 0.00000, -178.98000);
	CreateDynamicObject(2530, 1169.59998, -1448.29004, 14.79000,   0.00000, 0.00000, -178.98000);
	CreateDynamicObject(2530, 1170.67004, -1448.30005, 14.79000,   0.00000, 0.00000, -178.98000);
	CreateDynamicObject(2530, 1171.71997, -1448.31995, 14.79000,   0.00000, 0.00000, -181.50000);
	CreateDynamicObject(2530, 1175.13000, -1443.91003, 14.79000,   0.00000, 0.00000, -181.50000);
	CreateDynamicObject(2012, 1176.81995, -1440.75000, 14.75000,   0.00000, 0.00000, 359.92999);
	CreateDynamicObject(1995, 1177.70996, -1439.63000, 14.79000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1994, 1176.72998, -1439.63000, 14.79000,   0.00000, 0.00000, 0.06000);
	CreateDynamicObject(1993, 1177.82996, -1444.15002, 14.79000,   0.00000, 0.00000, 179.46001);

//===================================HOSPITAL===================================
	CreateObject(14595, 1163.09668, -1324.38770, 1022.64990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1166.39648, -1324.88770, 1020.34991,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1649, 1166.39673, -1329.28809, 1020.34991,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1649, 1166.39648, -1318.48828, 1020.34991,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1533, 1166.07666, -1335.18848, 1018.64990,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1998, 1161.19629, -1335.68848, 1018.64990,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2008, 1162.19629, -1337.68848, 1018.64990,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1715, 1160.79688, -1336.58789, 1018.64990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1715, 1160.79688, -1338.58789, 1018.64990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2164, 1161.29663, -1341.18811, 1018.64990,   0.00000, 0.00000, 179.99500);
	CreateDynamicObject(2162, 1161.29663, -1341.25806, 1020.49994,   0.00000, 0.00000, 179.99500);
	CreateDynamicObject(2162, 1159.99670, -1337.18811, 1020.34991,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2161, 1159.99707, -1338.68848, 1020.34991,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2001, 1160.29688, -1335.58789, 1018.64990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2173, 1163.19629, -1338.88770, 1018.64990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2610, 1165.79688, -1340.98828, 1019.54993,   0.00000, 0.00000, 179.99500);
	CreateDynamicObject(2610, 1165.29688, -1340.98828, 1019.54993,   0.00000, 0.00000, 179.99500);
	CreateDynamicObject(2610, 1164.79688, -1340.98828, 1019.54993,   0.00000, 0.00000, 179.99500);
	CreateDynamicObject(1509, 1163.49670, -1338.98804, 1018.84991,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2146, 1165.59668, -1331.28809, 1019.14990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1523, 1151.73633, -1329.48828, 1018.68988,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2700, 1167.89648, -1319.63611, 1021.94995,   0.00000, 7.00000, 274.99899);
	CreateDynamicObject(1713, 1157.49670, -1319.88806, 1018.64990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1713, 1153.75684, -1324.18848, 1018.64990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1713, 1157.49707, -1324.18848, 1018.64990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1713, 1159.13672, -1323.08789, 1018.64990,   0.00000, 0.00000, 179.99500);
	CreateDynamicObject(1713, 1155.39673, -1323.08813, 1018.64990,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1713, 1159.29663, -1328.68811, 1018.64990,   0.00000, 0.00000, 179.99500);
	CreateDynamicObject(1713, 1155.69629, -1328.68848, 1018.64990,   0.00000, 0.00000, 179.99500);
	CreateDynamicObject(2596, 1146.32166, -1324.38806, 1022.14990,   5.00000, 0.00000, 90.00000);
	CreateDynamicObject(1808, 1156.69629, -1328.98828, 1018.64990,   0.00000, 0.00000, 179.99500);
	CreateDynamicObject(2011, 1156.39648, -1319.88770, 1018.64990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2146, 1165.59668, -1315.38770, 1019.14990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1533, 1139.50708, -1329.30774, 1018.69989,   0.00000, 0.00000, 179.99500);
	CreateDynamicObject(19455, 1166.18799, -1335.64172, 1020.63971,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2690, 1150.59668, -1329.08789, 1020.44995,   0.00000, 0.00000, 179.99500);
	CreateDynamicObject(1210, 1154.49670, -1335.28809, 1018.84991,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2961, 1151.79663, -1319.31812, 1020.14990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2962, 1151.79663, -1319.31812, 1020.14990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3389, 1150.29688, -1299.28809, 1018.64990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3388, 1150.29663, -1301.28809, 1018.64990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3387, 1150.29663, -1300.28809, 1018.64990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3386, 1150.29663, -1302.28809, 1018.64990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1523, 1134.52478, -1327.78564, 1018.61987,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1800, 1147.19666, -1334.28809, 1018.74994,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1776, 1171.59668, -1319.78809, 1019.74994,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1775, 1170.29663, -1319.78809, 1019.74994,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1998, 1153.29663, -1336.38806, 1018.64990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2066, 1155.09668, -1335.38806, 1018.74994,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2684, 1154.09668, -1329.98804, 1020.34991,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2986, 1154.43665, -1338.28809, 1020.92993,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(2191, 1154.99670, -1337.68811, 1018.64990,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1714, 1154.39673, -1336.68811, 1018.64990,   0.00000, 0.00000, 200.00000);
	CreateDynamicObject(1668, 1153.99670, -1335.38806, 1018.84991,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2163, 1149.49670, -1329.88806, 1020.14990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2196, 1146.63965, -1331.05957, 1020.04364,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2200, 1150.19629, -1337.98828, 1018.74994,   0.00000, 0.00000, 179.99500);
	CreateDynamicObject(1808, 1146.89648, -1335.28809, 1018.74994,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2010, 1147.19629, -1337.68848, 1018.74994,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2146, 1149.14709, -1300.26758, 1019.14990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3384, 1149.19666, -1298.78809, 1020.14990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3389, 1150.37671, -1310.28809, 1018.64990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3388, 1150.37671, -1308.28809, 1018.64990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3387, 1150.37671, -1309.28809, 1018.64990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3386, 1150.37671, -1306.28809, 1018.64990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3387, 1150.37671, -1307.28809, 1018.64990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1998, 1164.09668, -1306.28809, 1018.64990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2610, 1162.99670, -1304.48804, 1019.54993,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2610, 1163.54663, -1303.89807, 1019.54993,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2001, 1162.89673, -1303.88806, 1018.64990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1715, 1164.39673, -1305.08813, 1018.64990,   0.00000, 0.00000, 285.00000);
	CreateDynamicObject(2636, 1153.59668, -1334.08813, 1019.34991,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2636, 1152.49670, -1334.08813, 1019.34991,   0.00000, 0.00000, 100.00000);
	CreateDynamicObject(1800, 1153.99670, -1311.78809, 1018.64990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1800, 1158.49670, -1311.78809, 1018.64990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1800, 1153.89673, -1302.38806, 1018.64990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1800, 1158.99670, -1302.38806, 1018.64990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1523, 1150.83655, -1302.78809, 1018.64990,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1523, 1150.93652, -1305.78809, 1018.64990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3386, 1148.39673, -1311.28809, 1018.64990,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1997, 1149.37671, -1309.78809, 1018.64990,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1997, 1147.49670, -1309.78809, 1018.64990,   0.00000, 0.00000, 179.99500);
	CreateDynamicObject(2994, 1163.29688, -1301.38770, 1019.24994,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1738, 1156.39648, -1310.68848, 1019.34991,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1738, 1156.69666, -1298.98804, 1019.34991,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2163, 1161.09668, -1310.78809, 1020.34991,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2200, 1165.79663, -1304.68811, 1020.04993,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2163, 1163.79688, -1300.88770, 1020.24994,   0.00000, 0.00000, 269.99500);
	CreateDynamicObject(2163, 1152.69666, -1310.88806, 1020.34991,   0.00000, 0.00000, 179.99500);
	CreateDynamicObject(19377, 1150.79565, -1297.99756, 1018.13092,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2596, 1156.39648, -1310.38806, 1021.54993,   9.99800, 0.00000, 179.99500);
	CreateDynamicObject(2596, 1156.79663, -1299.18811, 1021.54993,   9.99800, 0.00000, 0.00000);
	CreateDynamicObject(1738, 1148.79663, -1329.08813, 1019.34991,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2380, 1131.99670, -1319.38806, 1020.04993,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2200, 1125.79663, -1319.38806, 1020.64990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2200, 1127.99707, -1319.38770, 1018.74994,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2200, 1125.79663, -1319.38806, 1018.74994,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2200, 1127.99707, -1319.38770, 1020.64990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1778, 1134.01929, -1322.58142, 1018.64990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2131, 1125.79663, -1328.78809, 1018.64990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2131, 1127.49670, -1328.78809, 1018.64990,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2131, 1129.39648, -1328.78809, 1018.64990,   0.00000, 0.00000, 179.99500);
	CreateDynamicObject(3787, 1125.89673, -1325.48804, 1019.24994,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2360, 1128.29663, -1324.38806, 1018.64990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1580, 1128.89673, -1324.18811, 1018.74994,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1789, 1134.11487, -1324.63672, 1019.24988,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2528, 1133.93481, -1323.52966, 1018.64990,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2146, 1133.99670, -1320.58813, 1019.14990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1337, 1134.02441, -1325.84229, 1019.34991,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1703, 1170.29688, -1328.68848, 1018.64990,   0.00000, 0.00000, 179.99500);
	CreateDynamicObject(1703, 1171.59668, -1325.68811, 1018.64990,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1703, 1167.09668, -1327.68811, 1018.64990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2069, 1171.69666, -1328.88806, 1018.74994,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2010, 1167.19666, -1328.68811, 1018.74994,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1817, 1168.79663, -1327.48804, 1018.64990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1817, 1168.79663, -1326.48804, 1018.64990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1808, 1171.99707, -1322.28809, 1018.64990,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1704, 1171.09668, -1323.98804, 1018.64990,   0.00000, 0.00000, 290.00000);
	CreateDynamicObject(1705, 1167.49707, -1324.48828, 1018.64990,   0.00000, 0.00000, 31.99800);
	CreateDynamicObject(1738, 1168.19666, -1319.48804, 1019.34991,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1806, 1160.19666, -1340.58813, 1018.64990,   0.00000, 0.00000, 339.99899);
	CreateDynamicObject(1208, 1134.18823, -1324.65100, 1019.65552,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1580, 1128.29663, -1324.18811, 1018.74994,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2132, 1131.39648, -1328.78809, 1018.64990,   0.00000, 0.00000, 179.99500);
	CreateDynamicObject(2186, 1163.49670, -1340.82813, 1018.64990,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2686, 1131.99670, -1319.38806, 1020.94995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2146, 1125.79663, -1322.58813, 1019.14990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1713, 1137.89673, -1319.88806, 1018.64990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1134.99670, -1319.68811, 1018.64990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2194, 1165.79663, -1341.08813, 1020.64990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2010, 1135.21851, -1326.54309, 1018.74994,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1713, 1153.79688, -1319.88770, 1018.64990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1713, 1144.49670, -1328.68811, 1018.64990,   0.00000, 0.00000, 179.99500);
	CreateDynamicObject(8948, 1147.19629, -1338.28809, 1020.14990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2752, 1134.14197, -1324.09143, 1018.92938,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2685, 1130.89648, -1329.18848, 1020.14990,   0.00000, 0.00000, 179.99500);
	CreateDynamicObject(2596, 1162.58508, -1324.70508, 1022.14990,   5.00000, 0.00000, -56.58000);
	CreateDynamicObject(19377, 1150.79565, -1310.40857, 1018.13092,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19362, 1150.79578, -1304.18274, 1022.90417,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19379, 1134.54553, -1322.99487, 1018.13092,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1713, 1135.18042, -1324.53394, 1018.64990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19173, 1134.66553, -1323.74817, 1021.10809,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19370, 1134.54553, -1329.41797, 1022.88422,   0.00000, 0.00000, 0.00000);
	CreateObject(14597, 1148.14648, -1305.58496, 1031.69409,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1523, 1151.44434, -1313.13574, 1029.67175,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1523, 1144.80688, -1313.13440, 1029.67896,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1523, 1151.41797, -1303.79883, 1029.68945,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3383, 1156.69995, -1310.50000, 1029.50000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3383, 1135.79980, -1313.29980, 1029.50000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3383, 1135.69995, -1305.50000, 1029.50000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3383, 1157.09998, -1308.09998, 1029.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3394, 1137.30701, -1316.21313, 1029.69971,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3395, 1138.50000, -1308.51660, 1029.69971,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3396, 1138.07080, -1302.24707, 1029.69971,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3394, 1141.65906, -1302.24609, 1029.69971,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3395, 1161.20215, -1307.25391, 1029.69971,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3396, 1161.17285, -1303.57129, 1029.69971,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3394, 1157.99609, -1302.19629, 1029.69971,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3394, 1161.19995, -1311.30005, 1029.69995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3395, 1161.19995, -1314.90002, 1029.69995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3396, 1158.40002, -1316.30005, 1029.69995,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3396, 1140.00000, -1310.00000, 1029.69995,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3395, 1136.40002, -1310.00000, 1029.69995,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1523, 1144.82996, -1303.78003, 1029.68457,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1523, 1148.93298, -1301.28003, 1029.69995,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2146, 1149.80005, -1295.59998, 1030.19995,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2146, 1146.52991, -1295.59998, 1030.19995,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1989, 1146.80005, -1300.59998, 1029.69995,   0.00000, 0.00000, 179.99500);
	CreateDynamicObject(1989, 1145.80005, -1300.59998, 1029.69995,   0.00000, 0.00000, 179.99500);
	CreateDynamicObject(1989, 1145.79980, -1300.59961, 1029.69995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1989, 1146.79980, -1300.59961, 1029.69995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1989, 1150.50000, -1300.59998, 1029.69995,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1989, 1149.50000, -1300.59998, 1029.69995,   0.00000, 0.00000, 179.99500);
	CreateDynamicObject(1989, 1149.50000, -1300.59961, 1029.69995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1989, 1150.50000, -1300.59961, 1029.69995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2146, 1146.52991, -1298.00000, 1030.19995,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2146, 1149.80005, -1298.00000, 1030.19995,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3394, 1147.09998, -1292.90002, 1029.69995,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2360, 1149.59998, -1292.90002, 1029.69995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2610, 1150.68884, -1296.80493, 1030.50000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2610, 1145.60925, -1296.81653, 1030.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1620, 1151.00000, -1298.00000, 1031.19995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1620, 1151.00000, -1295.59961, 1031.19995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1620, 1145.30005, -1298.00000, 1031.19995,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1620, 1145.30005, -1295.59998, 1031.19995,   0.00000, 0.00000, 179.99500);
	CreateDynamicObject(3813, 1144.90002, -1299.00000, 1032.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3813, 1144.90002, -1294.69995, 1032.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3813, 1148.18994, -1292.09998, 1032.40002,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3813, 1151.40002, -1299.00000, 1032.50000,   0.00000, 0.00000, 179.99500);
	CreateDynamicObject(3813, 1151.40039, -1294.70020, 1032.50000,   0.00000, 0.00000, 179.99500);
	CreateDynamicObject(18755, 1148.20166, -1320.73755, 1031.57629,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(18756, 1148.21167, -1320.73755, 1031.57629,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(18757, 1148.20166, -1320.73755, 1031.57629,   0.00000, 0.00000, -90.00000);
	
//===================================AYUNTAMIENTO===============================
	CreateDynamicObject(996, 1534.6118164063, -1662.9228515625, 13.131567955017, 0, 0, 90);
	CreateDynamicObject(996, 1534.6096191406, -1654.0778808594, 13.131567955017, 0, 0, 90);
	CreateDynamicObject(996, 1534.6334228516, -1645.2020263672, 13.131567955017, 0, 0, 90);
	CreateDynamicObject(996, 1534.6560058594, -1689.423828125, 13.131567955017, 0, 0, 90);
	CreateDynamicObject(996, 1534.6643066406, -1698.7019042969, 13.131567955017, 0, 0, 90);
	CreateDynamicObject(996, 1534.6284179688, -1707.8771972656, 13.131567955017, 0, 0, 90);
	CreateDynamicObject(996, 1534.6474609375, -1716.9077148438, 13.131567955017, 0, 0, 90);
	CreateDynamicObject(1411, 1542.3238525391, -1617.9587402344, 17.533721923828, 0, 0, 180);
	CreateDynamicObject(1411, 1539.4150390625, -1615.154296875, 17.532625198364, 0, 0, 90);
	CreateDynamicObject(1411, 1539.4091796875, -1610.1021728516, 17.532625198364, 0, 0, 90);
	CreateDynamicObject(1411, 1539.4382324219, -1605.0238037109, 17.532625198364, 0, 0, 90);
	CreateDynamicObject(1411, 1542.3197021484, -1602.2147216797, 17.520538330078, 0, 0, 0);
	CreateDynamicObject(1411, 1547.3712158203, -1602.2253417969, 17.520538330078, 0, 0, 0);
	CreateDynamicObject(1411, 1552.4479980469, -1602.2357177734, 17.520538330078, 0, 0, 0);
	CreateDynamicObject(1411, 1557.4991455078, -1602.2468261719, 17.520538330078, 0, 0, 0);
	CreateDynamicObject(1411, 1562.5749511719, -1602.2596435547, 17.520538330078, 0, 0, 0);
	CreateDynamicObject(1411, 1567.6253662109, -1602.2720947266, 17.520538330078, 0, 0, 0);
	CreateDynamicObject(1411, 1572.6772460938, -1602.2561035156, 17.520538330078, 0, 0, 0);
	CreateDynamicObject(1411, 1577.7286376953, -1602.2673339844, 17.520538330078, 0, 0, 0);
	CreateDynamicObject(1411, 1582.7799072266, -1602.279296875, 17.520538330078, 0, 0, 0);
	CreateDynamicObject(1411, 1587.8316650391, -1602.2895507813, 17.520538330078, 0, 0, 0);
	CreateDynamicObject(1411, 1592.8822021484, -1602.3023681641, 17.520538330078, 0, 0, 0);
	CreateDynamicObject(1411, 1597.9356689453, -1602.3023681641, 17.520538330078, 0, 0, 0);
	CreateDynamicObject(1411, 1601.5360107422, -1602.3171386719, 17.520538330078, 0, 0, 0);
	CreateDynamicObject(1411, 1605.1602783203, -1602.3072509766, 17.520538330078, 0, 0, 0);
	CreateDynamicObject(1411, 1608.1733398438, -1605.1098632813, 17.520538330078, 0, 0, 270);
	CreateDynamicObject(1411, 1608.1657714844, -1610.1676025391, 17.520538330078, 0, 0, 270);
	CreateDynamicObject(1411, 1608.1926269531, -1615.2462158203, 17.520538330078, 0, 0, 270);
	CreateDynamicObject(1411, 1608.1947021484, -1620.3253173828, 17.520538330078, 0, 0, 270);
	CreateDynamicObject(1411, 1608.1975097656, -1625.3786621094, 17.520538330078, 0, 0, 270);
	CreateDynamicObject(1411, 1608.2005615234, -1630.4311523438, 17.520538330078, 0, 0, 270);
	CreateDynamicObject(1411, 1608.2291259766, -1635.4588623047, 17.520538330078, 0, 0, 268.01501464844);
	CreateDynamicObject(1411, 1605.2269287109, -1638.2204589844, 17, 0, 0, 180);
	CreateDynamicObject(984, 1500.6081542969, -1738.8432617188, 11.121054649353, 0, 0, 0);
	CreateDynamicObject(996, 1495.7841796875, -1737.5595703125, 13.295630455017, 0, 0, 0);
	CreateDynamicObject(996, 1486.4326171875, -1737.5380859375, 13.295630455017, 0, 0, 0);
	CreateDynamicObject(996, 1476.8563232422, -1737.5650634766, 13.295630455017, 0, 0, 0);
	CreateDynamicObject(996, 1467.2033691406, -1737.6159667969, 13.295630455017, 0, 0, 0);
	CreateDynamicObject(996, 1457.6767578125, -1737.642578125, 13.295630455017, 0, 0, 0);
	CreateDynamicObject(638, 1480.1916503906, -1715.1301269531, 13.743908882141, 0, 0, 0);
	CreateDynamicObject(1215, 1456.5692138672, -1737.6424560547, 13.111198425293, 0, 0, 0);
	CreateDynamicObject(1215, 1465.79296875, -1737.6315917969, 13.111198425293, 0, 0, 0);
	CreateDynamicObject(1215, 1475.4395751953, -1737.5128173828, 13.111198425293, 0, 0, 1.9849853515625);
	CreateDynamicObject(1215, 1485.0278320313, -1737.5229492188, 13.111198425293, 0, 0, 0);
	CreateDynamicObject(1215, 1494.4827880859, -1737.537109375, 13.111198425293, 0, 0, 0);
	CreateDynamicObject(1215, 1503.8212890625, -1737.4946289063, 13.111198425293, 0, 0, 0);
	CreateDynamicObject(3935, 1481.1412353516, -1758.1439208984, 19, 0, 0, 0);
	CreateDynamicObject(1215, 1480.0407714844, -1758.1776123047, 17.095573425293, 0, 0, 0);
	CreateDynamicObject(1215, 1481.1413574219, -1757.1016845703, 17.095573425293, 0, 0, 0);
	CreateDynamicObject(1215, 1482.1901855469, -1758.1805419922, 17.095573425293, 0, 0, 0);
	CreateDynamicObject(1215, 1481.0645751953, -1759.2813720703, 17.095573425293, 0, 0, 0);
	CreateDynamicObject(8397, 1479.546875, -1639.8696289063, 18.928268432617, 0, 0, 0);
	CreateDynamicObject(1215, 1511.2250976563, -1727.0775146484, 13.111198425293, 0, 0, 0);
	CreateDynamicObject(1215, 1494.4976806641, -1727.0446777344, 13.111198425293, 0, 0, 0);
	CreateDynamicObject(1215, 1484.9616699219, -1727.0346679688, 13.111198425293, 0, 0, 0);
	CreateDynamicObject(1215, 1475.3570556641, -1727.0461425781, 13.111198425293, 0, 0, 0);
	CreateDynamicObject(1215, 1466.2568359375, -1727.0751953125, 13.111198425293, 0, 0, 0);
	CreateDynamicObject(1215, 1456.5732421875, -1727.0712890625, 13.111198425293, 0, 0, 0);
	CreateDynamicObject(995, 1617.1428222656, -1788.2346191406, 13.5, 90, 0, 0);
	CreateDynamicObject(994, 1616.0981445313, -1787.4678955078, 12.90095615387, 0, 327, 90);
	CreateDynamicObject(994, 1621.96484375, -1787.5439453125, 12.90095615387, 0, 326.9970703125, 90);
	CreateDynamicObject(1346, 1514.9868164063, -1713.0247802734, 14.397880554199, 0, 0, 90);
	CreateDynamicObject(1346, 1514.9702148438, -1716.6158447266, 14.397880554199, 0, 0, 90);
	CreateDynamicObject(1234, 1514.771484375, -1717.8471679688, 14.606554985046, 0, 0, 0);
	CreateDynamicObject(1233, 1535.1580810547, -1663.2541503906, 14.106554985046, 0, 0, 309.99572753906);
	CreateDynamicObject(996, 1457.771484375, -1727.1376953125, 13.295630455017, 0, 0, 0);
	CreateDynamicObject(996, 1467.4311523438, -1727.0974121094, 13.295630455017, 0, 0, 0);
	CreateDynamicObject(996, 1476.8000488281, -1727.0970458984, 13.295630455017, 0, 0, 0);
	CreateDynamicObject(996, 1486.341796875, -1727.115234375, 13.295630455017, 0, 0, 0);
	CreateDynamicObject(996, 1495.7734375, -1727.09375, 13.295630455017, 0, 0, 0);
	CreateDynamicObject(1215, 1534.7584228516, -1709.0456542969, 13.111198425293, 0, 0, 0);
	CreateDynamicObject(1215, 1534.7543945313, -1699.8643798828, 13.111198425293, 0, 0, 0);
	CreateDynamicObject(1215, 1534.7254638672, -1690.6827392578, 13.111198425293, 0, 0, 0);
	CreateDynamicObject(1215, 1534.9538574219, -1681.9622802734, 13.111198425293, 0, 0, 0);
	CreateDynamicObject(1215, 1534.8795166016, -1663.5001220703, 13.111198425293, 0, 0, 0);
	CreateDynamicObject(1215, 1534.76953125, -1655.0581054688, 13.111198425293, 0, 0, 0);
	CreateDynamicObject(1215, 1534.7038574219, -1646.2072753906, 13.111198425293, 0, 0, 0);
	CreateDynamicObject(1215, 1479.6611328125, -1652.166015625, 14.611198425293, 0, 0, 0);
	CreateDynamicObject(1215, 1483.8743896484, -1651.4013671875, 14.611198425293, 0, 0, 0);
	CreateDynamicObject(1215, 1487.6296386719, -1649.1977539063, 14.611198425293, 0, 0, 0);
	CreateDynamicObject(1215, 1490.3245849609, -1645.9844970703, 14.611198425293, 0, 0, 0);
	CreateDynamicObject(1215, 1491.8333740234, -1642.0086669922, 14.611198425293, 0, 0, 0);
	CreateDynamicObject(1215, 1491.7976074219, -1637.5653076172, 14.611198425293, 0, 0, 0);
	CreateDynamicObject(1215, 1490.2287597656, -1633.1789550781, 14.611198425293, 0, 0, 0);
	CreateDynamicObject(1215, 1487.5855712891, -1630.0091552734, 14.611198425293, 0, 0, 0);
	CreateDynamicObject(1215, 1483.8425292969, -1627.8568115234, 14.611198425293, 0, 0, 0);
	CreateDynamicObject(1215, 1479.3814697266, -1627.1318359375, 14.611198425293, 0, 0, 0);
	CreateDynamicObject(1215, 1474.9836425781, -1627.9865722656, 14.611198425293, 0, 0, 0);
	CreateDynamicObject(1215, 1471.4976806641, -1630.0904541016, 14.611198425293, 0, 0, 0);
	CreateDynamicObject(1215, 1468.3781738281, -1633.8559570313, 14.611198425293, 0, 0, 0);
	CreateDynamicObject(1215, 1467.20703125, -1637.9409179688, 14.611198425293, 0, 0, 0);
	CreateDynamicObject(1215, 1467.2664794922, -1642.0050048828, 14.611198425293, 0, 0, 0);
	CreateDynamicObject(1215, 1468.7824707031, -1645.9383544922, 14.611198425293, 0, 0, 0);
	CreateDynamicObject(1215, 1472.1296386719, -1649.8388671875, 14.611198425293, 0, 0, 0);
	CreateDynamicObject(1215, 1475.4299316406, -1651.4583740234, 14.611198425293, 0, 0, 0);
	CreateDynamicObject(3033, 286.1653137207, -29.467658996582, 1002.7752685547, 0, 0, 0);
	CreateDynamicObject(1585, 287.92520141602, -17.461397171021, 1000.515625, 0, 0, 0);
	CreateDynamicObject(1585, 286.86123657227, -12.353670120239, 1000.515625, 0, 0, 180);
	CreateDynamicObject(1584, 290.01593017578, -7.7531304359436, 1000.515625, 0, 0, 0);
	CreateDynamicObject(1584, 285.49844360352, -17.013711929321, 1000.515625, 0, 0, 180);
	CreateDynamicObject(1583, 290.66409301758, -14.995994567871, 1000.515625, 0, 0, 0);
	CreateDynamicObject(1583, 287.41778564453, -6.8925919532776, 1000.515625, 0, 0, 180);
	CreateDynamicObject(3025, 295.31909179688, -12.34193611145, 1004.1082763672, 0, 0, 0);
	CreateDynamicObject(3024, 295.28518676758, -12.28234577179, 1004.1345214844, 0, 0, 0);
	CreateDynamicObject(3023, 295.29000854492, -12.300000190735, 1004.1300048828, 0, 0, 0);
	CreateDynamicObject(3022, 295.29046630859, -12.35977935791, 1004.1499633789, 0, 0, 0);
	CreateDynamicObject(3020, 295.27984619141, -12.33873462677, 1004.1300048828, 0, 0, 0);
	CreateDynamicObject(3021, 295.27325439453, -12.377779006958, 1004.1399536133, 0, 0, 0);
	CreateDynamicObject(3019, 295.27984619141, -12.33873462677, 1004.1199951172, 0, 0, 0);
	CreateDynamicObject(3018, 295.27963256836, -12.31902217865, 1004.1199951172, 0, 0, 0);
	CreateDynamicObject(1584, 289.37969970703, -19.303646087646, 1000.515625, 0, 0, 0);
	CreateDynamicObject(1583, 286.7763671875, -19.233737945557, 1000.515625, 0, 0, 180);
	CreateDynamicObject(1583, 287.32055664063, -15.966422080994, 1000.515625, 0, 0, 179.99450683594);
	CreateDynamicObject(1585, 285.47705078125, -8.7603225708008, 1000.515625, 0, 0, 0);
	CreateDynamicObject(1584, 289.2668762207, -12.955247879028, 1000.515625, 0, 0, 180);
	CreateDynamicObject(1585, 290.44650268555, -18.455762863159, 1000.515625, 0, 0, 180);
	CreateDynamicObject(3019, 297.6794128418, -10.07746219635, 1004.1199951172, 0, 0, 0);
	CreateDynamicObject(3018, 297.67749023438, -10.096518516541, 1004.1199951172, 0, 0, 0);
	CreateDynamicObject(3020, 297.6770324707, -10.106291770935, 1004.1300048828, 0, 0, 0);
	CreateDynamicObject(3021, 297.68771362305, -10.175274848938, 1004.1399536133, 0, 0, 0);
	CreateDynamicObject(3023, 297.6796875, -10.127469062805, 1004.1300048828, 0, 0, 0);
	CreateDynamicObject(3024, 297.68316650391, -10.176573753357, 1004.1345214844, 0, 0, 0);
	CreateDynamicObject(3022, 297.67471313477, -10.173128128052, 1004.1499633789, 0, 0, 0);
	CreateDynamicObject(3024, 298.57052612305, -15.313140869141, 1004.1345214844, 0, 0, 0);
	CreateDynamicObject(3023, 298.56527709961, -15.329438209534, 1004.1300048828, 0, 0, 0);
	CreateDynamicObject(3022, 298.56448364258, -15.33508682251, 1004.1499633789, 0, 0, 0);
	CreateDynamicObject(3021, 298.55322265625, -15.406620025635, 1004.1399536133, 0, 0, 0);
	CreateDynamicObject(3020, 298.54806518555, -15.357648849487, 1004.1300048828, 0, 0, 0);
	CreateDynamicObject(3018, 298.56079101563, -15.369505882263, 1004.1199951172, 0, 0, 0);
	CreateDynamicObject(3019, 298.55291748047, -15.3664894104, 1004.1199951172, 0, 0, 0);
	CreateDynamicObject(3025, 297.69644165039, -10.101514816284, 1004.1082763672, 0, 0, 0);
	CreateDynamicObject(3025, 298.61791992188, -15.3076171875, 1004.1082763672, 0, 0, 0);
	CreateDynamicObject(3025, 296.2102355957, -17.325653076172, 1004.1082763672, 0, 0, 0);
	CreateDynamicObject(3018, 296.07208251953, -17.329774856567, 1004.1199951172, 0, 0, 0);
	CreateDynamicObject(3019, 296.07864379883, -17.325073242188, 1004.1199951172, 0, 0, 0);
	CreateDynamicObject(3021, 296.09118652344, -17.324825286865, 1004.1399536133, 0, 0, 0);
	CreateDynamicObject(3020, 296.06805419922, -17.340553283691, 1004.1300048828, 0, 0, 0);
	CreateDynamicObject(3022, 296.11001586914, -17.373176574707, 1004.1499633789, 0, 0, 0);
	CreateDynamicObject(3023, 296.07064819336, -17.285484313965, 1004.1300048828, 0, 0, 0);
	CreateDynamicObject(3024, 296.09674072266, -17.286308288574, 1004.1345214844, 0, 0, 0);
	CreateDynamicObject(996, 1448.6561279297, -1727.1162109375, 13.295630455017, 0, 0, 0);
	CreateDynamicObject(1215, 1447.5306396484, -1727.0659179688, 13.111198425293, 0, 0, 0);
	CreateDynamicObject(996, 1439.5805664063, -1727.1096191406, 13.295630455017, 0, 0, 0);
	CreateDynamicObject(996, 1434.6198730469, -1721.6154785156, 13.295630455017, 0, 0, 90);
	CreateDynamicObject(996, 1434.6354980469, -1708.3796386719, 13.295630455017, 0, 0, 90);
	CreateDynamicObject(1215, 1434.6988525391, -1700.4803466797, 13.111198425293, 0, 0, 0);
	CreateDynamicObject(996, 1434.658203125, -1699.3994140625, 13.295630455017, 0, 0, 90);
	CreateDynamicObject(1215, 1434.67578125, -1691.4353027344, 13.111198425293, 0, 0, 0);
	CreateDynamicObject(996, 1434.6420898438, -1690.2465820313, 13.295630455017, 0, 0, 90);
	CreateDynamicObject(996, 1512.2033691406, -1727.1419677734, 13.295630455017, 0, 0, 0);
	CreateDynamicObject(996, 1524.38671875, -1721.8577880859, 13.295630455017, 0, 0, 90);
	CreateDynamicObject(1215, 1434.6235351563, -1682.2932128906, 13.111198425293, 0, 0, 0);
	CreateDynamicObject(996, 1434.7623291016, -1673.3452148438, 13.295630455017, 0, 0, 90);
	CreateDynamicObject(1215, 1434.7835693359, -1674.4700927734, 13.111198425293, 0, 0, 0);
	CreateDynamicObject(1215, 1434.6926269531, -1665.3354492188, 13.111198425293, 0, 0, 0);
	CreateDynamicObject(996, 1434.7700195313, -1664.2023925781, 13.295630455017, 0, 0, 90);
	CreateDynamicObject(996, 1434.7426757813, -1654.7072753906, 13.295630455017, 0, 0, 90);
	CreateDynamicObject(996, 1434.6993408203, -1635.0185546875, 13.295630455017, 0, 0, 90);
	CreateDynamicObject(1215, 1434.7469482422, -1646.7705078125, 13.111198425293, 0, 0, 0);
	CreateDynamicObject(1215, 1434.7238769531, -1627, 13.111198425293, 0, 0, 0);
	CreateDynamicObject(996, 1434.6722412109, -1625.8123779297, 13.295630455017, 0, 0, 90);
	CreateDynamicObject(1215, 1447.8693847656, -1597.6081542969, 13.111198425293, 0, 0, 0);
	CreateDynamicObject(996, 1434.6884765625, -1609.3773193359, 13.295630455017, 0, 0, 90);
	CreateDynamicObject(996, 1434.6536865234, -1617.5798339844, 13.295630455017, 0, 0, 90);
	CreateDynamicObject(996, 1440.0012207031, -1597.5257568359, 13.295630455017, 0, 0, 0);
	CreateDynamicObject(996, 1448.943359375, -1597.5367431641, 13.295630455017, 0, 0, 0);
	CreateDynamicObject(1215, 1474.1430664063, -1597.6860351563, 13.111198425293, 0, 0, 0);
	CreateDynamicObject(997, 1457.2895507813, -1597.6011962891, 12.546875, 0, 0, 0);
	CreateDynamicObject(996, 1466.2496337891, -1597.5759277344, 13.295630455017, 0, 0, 0);
	CreateDynamicObject(996, 1475.2561035156, -1597.6351318359, 13.295630455017, 0, 0, 0);
	CreateDynamicObject(1215, 1456.81640625, -1597.6015625, 13.111198425293, 0, 0, 0);
	CreateDynamicObject(1215, 1483.1604003906, -1597.6496582031, 13.111198425293, 0, 0, 0);
	CreateDynamicObject(1215, 1489.1614990234, -1597.625, 13.111198425293, 0, 0, 0);
	CreateDynamicObject(997, 1489.4583740234, -1597.5732421875, 12.546875, 0, 0, 0);
	CreateDynamicObject(997, 1497.8295898438, -1597.548828125, 12.546875, 0, 0, 0);
	CreateDynamicObject(1215, 1501.3735351563, -1597.5600585938, 13.111198425293, 0, 0, 0);
	CreateDynamicObject(1215, 1507.0947265625, -1597.6215820313, 13.111198425293, 0, 0, 0);
	CreateDynamicObject(997, 1507.4521484375, -1597.5699462891, 12.546875, 0, 0, 0);
	CreateDynamicObject(996, 1524.4215087891, -1655.57421875, 13.287930488586, 0, 0, 90);
	CreateDynamicObject(996, 1512.07421875, -1597.490234375, 13.295630455017, 0, 0, 0);
	CreateDynamicObject(1215, 1511.029296875, -1597.6328125, 13.111198425293, 0, 0, 0);
	CreateDynamicObject(996, 1524.4072265625, -1609.595703125, 13.295630455017, 0, 0, 90);
	CreateDynamicObject(996, 1524.4814453125, -1619.2119140625, 13.295630455017, 0, 0, 90);
	CreateDynamicObject(1215, 1524.3583984375, -1610.8642578125, 13.111198425293, 0, 0, 0);
	CreateDynamicObject(1215, 1524.3623046875, -1620.2978515625, 13.111198425293, 0, 0, 0);
	CreateDynamicObject(996, 1524.453125, -1628.2216796875, 13.295630455017, 0, 0, 90);
	CreateDynamicObject(1215, 1524.369140625, -1629.4150390625, 13.111198425293, 0, 0, 0);
	CreateDynamicObject(996, 1524.4580078125, -1637.3505859375, 13.295630455017, 0, 0, 90);
	CreateDynamicObject(1215, 1524.359375, -1638.501953125, 13.111198425293, 0, 0, 0);
	CreateDynamicObject(996, 1524.3980712891, -1646.5079345703, 13.287930488586, 0, 0, 90);
	CreateDynamicObject(1215, 1524.37109375, -1647.630859375, 13.103498458862, 0, 0, 0);
	CreateDynamicObject(1215, 1503.6022949219, -1727.0637207031, 13.111198425293, 0, 0, 0);
	CreateDynamicObject(996, 1524.4776611328, -1705.2019042969, 13.295630455017, 0, 0, 90);
	CreateDynamicObject(1215, 1524.4091796875, -1656.578125, 13.103498458862, 0, 0, 0);
	CreateDynamicObject(1215, 1524.3674316406, -1706.2467041016, 13.111198425293, 0, 0, 0);
	CreateDynamicObject(997, 1524.4757080078, -1677.0072021484, 12.546875, 0, 0, 90);
	CreateDynamicObject(1215, 1524.3985595703, -1677.2755126953, 13.111198425293, 0, 0, 0);
	CreateDynamicObject(997, 1524.4248046875, -1668.5439453125, 12.546875, 0, 0, 90);
	CreateDynamicObject(996, 1524.4384765625, -1664.5068359375, 13.287930488586, 0, 0, 90);
	CreateDynamicObject(996, 1524.5, -1685.0703125, 13.295630455017, 0, 0, 90);
	CreateDynamicObject(1215, 1524.3819580078, -1697.4334716797, 13.111198425293, 0, 0, 0);
	CreateDynamicObject(1215, 1524.2954101563, -1713.9982910156, 13.111198425293, 0, 0, 0);
	CreateDynamicObject(997, 1524.484375, -1689.0415039063, 12.546875, 0, 0, 90);
	CreateDynamicObject(997, 1524.3620605469, -1709.7733154297, 12.546875, 0, 0, 90);
	CreateDynamicObject(997, 1524.4404296875, -1697.212890625, 12.546875, 0, 0, 90);
	CreateDynamicObject(997, 1524.3513183594, -1713.6997070313, 12.546875, 0, 0, 90);
	CreateDynamicObject(1215, 1524.287109375, -1710.1027832031, 13.111198425293, 0, 0, 0);
	CreateDynamicObject(1215, 1434.7490234375, -1636.5086669922, 13.111198425293, 0, 0, 0);
	CreateDynamicObject(1346, 1514.958984375, -1714.7578125, 14.397880554199, 0, 0, 90);
	CreateDynamicObject(1364, 1467.5090332031, -1646.6319580078, 13.830996513367, 0, 0, 299.45043945313);
	CreateDynamicObject(1364, 1465.6231689453, -1639.8630371094, 13.830996513367, 0, 0, 270);
	CreateDynamicObject(1364, 1467.3090820313, -1632.9625244141, 13.830996513367, 0, 0, 239.23474121094);
	CreateDynamicObject(1364, 1472.4841308594, -1627.6229248047, 13.830996513367, 0, 0, 209.9580078125);
	CreateDynamicObject(1364, 1479.3990478516, -1625.7136230469, 13.830996513367, 0, 0, 180);
	CreateDynamicObject(1364, 1486.4986572266, -1627.5522460938, 13.830996513367, 0, 0, 149.4697265625);
	CreateDynamicObject(1364, 1486.498046875, -1627.5517578125, 13.830996513367, 0, 0, 149.46899414063);
	CreateDynamicObject(1364, 1491.6169433594, -1632.6771240234, 13.830996513367, 0, 0, 119.80902099609);
	CreateDynamicObject(1364, 1493.4478759766, -1639.6108398438, 13.830996513367, 0, 0, 89.75);
	CreateDynamicObject(1364, 1480.0727539063, -1653.4903564453, 13.830996513367, 0, 0, 0);
	CreateDynamicObject(1364, 1472.74609375, -1651.796875, 13.830996513367, 0, 0, 329.22180175781);
	CreateDynamicObject(1364, 1486.4986572266, -1651.6983642578, 13.830996513367, 0, 0, 29.774780273438);
	CreateDynamicObject(1364, 1491.5333251953, -1646.623046875, 13.830996513367, 0, 0, 59.547821044922);
	CreateDynamicObject(1360, 1483.4458007813, -1653.7984619141, 13.81889629364, 0, 0, 0);
	CreateDynamicObject(1360, 1476.2430419922, -1653.9611816406, 13.81889629364, 0, 0, 0);
	CreateDynamicObject(1360, 1469.5316162109, -1650.2634277344, 13.81889629364, 0, 0, 322.28527832031);
	CreateDynamicObject(1360, 1465.2667236328, -1643.4174804688, 13.81889629364, 0, 0, 270);
	CreateDynamicObject(1360, 1465.2268066406, -1636.4658203125, 13.81889629364, 0, 0, 269.99450683594);
	CreateDynamicObject(1360, 1469.0654296875, -1629.5424804688, 13.81889629364, 0, 0, 222.35485839844);
	CreateDynamicObject(1360, 1475.6097412109, -1625.4243164063, 13.81889629364, 0, 0, 180);
	CreateDynamicObject(1360, 1482.9633789063, -1625.1518554688, 13.81889629364, 0, 0, 179.99450683594);
	CreateDynamicObject(1360, 1489.8259277344, -1629.1512451172, 13.81889629364, 0, 0, 136.32482910156);
	CreateDynamicObject(1360, 1494.0006103516, -1635.6907958984, 13.81889629364, 0, 0, 90);
	CreateDynamicObject(1360, 1493.9901123047, -1643.3293457031, 13.81889629364, 0, 0, 90);
	CreateDynamicObject(1360, 1489.9749755859, -1649.7607421875, 13.81889629364, 0, 0, 48.315155029297);
	CreateDynamicObject(638, 1480.1929931641, -1712.2214355469, 13.743908882141, 0, 0, 0);
	CreateDynamicObject(638, 1480.2198486328, -1709.3780517578, 13.743908882141, 0, 0, 0);
	CreateDynamicObject(638, 1480.2723388672, -1706.5877685547, 13.743908882141, 0, 0, 0);
	CreateDynamicObject(638, 1480.2991943359, -1703.7453613281, 13.743908882141, 0, 0, 0);
	CreateDynamicObject(638, 1479.1300048828, -1703.7038574219, 13.743908882141, 0, 0, 0);
	CreateDynamicObject(638, 1479.1027832031, -1706.5899658203, 13.743908882141, 0, 0, 0);
	CreateDynamicObject(638, 1479.099609375, -1709.4256591797, 13.743908882141, 0, 0, 0);
	CreateDynamicObject(638, 1479.1206054688, -1712.2454833984, 13.743908882141, 0, 0, 0);
	CreateDynamicObject(638, 1479.1412353516, -1715.1175537109, 13.743908882141, 0, 0, 0);
	CreateDynamicObject(638, 1480.2731933594, -1700.8666992188, 13.743908882141, 0, 0, 0);
	CreateDynamicObject(638, 1479.0949707031, -1700.8903808594, 13.743908882141, 0, 0, 0);
	CreateDynamicObject(638, 1480.2576904297, -1698.0756835938, 13.743908882141, 0, 0, 0);
	CreateDynamicObject(638, 1479.0819091797, -1698.1164550781, 13.743908882141, 0, 0, 0);
	CreateDynamicObject(638, 1479.0804443359, -1695.3211669922, 13.743908882141, 0, 0, 0);
	CreateDynamicObject(638, 1480.2401123047, -1695.2829589844, 13.743908882141, 0, 0, 0);
	CreateDynamicObject(638, 1480.2446289063, -1689.6655273438, 13.743908882141, 0, 0, 0);
	CreateDynamicObject(638, 1480.2298583984, -1692.4332275391, 13.743908882141, 0, 0, 0);
	CreateDynamicObject(638, 1480.2277832031, -1692.4616699219, 13.743908882141, 0, 0, 0);
	CreateDynamicObject(638, 1480.2231445313, -1686.7938232422, 13.743908882141, 0, 0, 0);
	CreateDynamicObject(638, 1480.2243652344, -1683.8798828125, 13.743908882141, 0, 0, 0);
	CreateDynamicObject(638, 1480.2493896484, -1680.591796875, 13.743908882141, 0, 0, 0);
	CreateDynamicObject(638, 1479.1110839844, -1680.5286865234, 13.743908882141, 0, 0, 0);
	CreateDynamicObject(638, 1479.1981201172, -1684.2557373047, 13.743908882141, 0, 0, 0);
	CreateDynamicObject(638, 1479.1604003906, -1690.2459716797, 13.743908882141, 0, 0, 0);
	CreateDynamicObject(638, 1479.1771240234, -1687.2917480469, 13.743908882141, 0, 0, 0);
	CreateDynamicObject(1340, 1447.9888916016, -1712.3670654297, 14.174461364746, 0, 0, 90);
	CreateDynamicObject(1340, 1447.9747314453, -1713.6821289063, 14.174461364746, 0, 0, 270);
	CreateDynamicObject(1341, 1504.5814208984, -1696.3989257813, 14.049461364746, 0, 0, 0);
	CreateDynamicObject(1341, 1504.5688476563, -1698.6971435547, 14.049461364746, 0, 0, 0);
	CreateDynamicObject(1341, 1504.5698242188, -1700.8142089844, 14.049461364746, 0, 0, 0);

//======================================UNITY===================================
    CreateDynamicObject(3660, 1769.42896, -1941.80811, 15.19510,   0.00000, 0.00000, 180.72000);
	CreateDynamicObject(16362, 1801.40, -1916.90, 15.40,   0.00, 0.00, 0.00);
	CreateDynamicObject(16362, 1779.70, -1916.80, 15.40,   0.00, 0.00, 0.00);
	
	return 1;
}

stock LoadTDs() {

	textdrawVariables[0] = TextDrawCreate(149.000000, 420.000000, "Presiona ~r~~k~~SNEAK_ABOUT~~w~ para cerrar el modo espectador.");
	TextDrawBackgroundColor(textdrawVariables[0], 255);
	TextDrawFont(textdrawVariables[0], 2);
	TextDrawLetterSize(textdrawVariables[0], 0.390000, 1.200000);
	TextDrawColor(textdrawVariables[0], -1);
	TextDrawSetOutline(textdrawVariables[0], 0);
	TextDrawSetProportional(textdrawVariables[0], 1);
	TextDrawSetShadow(textdrawVariables[0], 1);
	
	textdrawVariables[1] = TextDrawCreate(499.000000, 7.000000, "isamp.com.ar");
	TextDrawBackgroundColor(textdrawVariables[1], 255);
	TextDrawFont(textdrawVariables[1], 1);
	TextDrawLetterSize(textdrawVariables[1], 0.300000, 1.200000);
	TextDrawColor(textdrawVariables[1], 929337855);
	TextDrawSetOutline(textdrawVariables[1], 1);
	TextDrawSetProportional(textdrawVariables[1], 1);
	
	ThirstTD = TextDrawCreate(547.000000, 52.000000, "Sed");
	TextDrawBackgroundColor(ThirstTD, 255);
	TextDrawFont(ThirstTD, 1);
	TextDrawLetterSize(ThirstTD, 0.260000, 0.799999);
	TextDrawColor(ThirstTD, -1);
	TextDrawSetOutline(ThirstTD, 0);
	TextDrawSetProportional(ThirstTD, 1);
	TextDrawSetShadow(ThirstTD, 1);

	HungerTD = TextDrawCreate(547.000000, 58.000000, "Hambre");
	TextDrawBackgroundColor(HungerTD, 255);
	TextDrawFont(HungerTD, 1);
	TextDrawLetterSize(HungerTD, 0.230000, 1.000000);
	TextDrawColor(HungerTD, -1);
	TextDrawSetOutline(HungerTD, 0);
	TextDrawSetProportional(HungerTD, 1);
	TextDrawSetShadow(HungerTD, 1);
    
	RegTDBorder1 = TextDrawCreate(635.000000, 106.000000, " ");
	TextDrawBackgroundColor(RegTDBorder1, 255);
	TextDrawFont(RegTDBorder1, 1);
	TextDrawLetterSize(RegTDBorder1, 0.500000, 1.000000);
	TextDrawColor(RegTDBorder1, -1);
	TextDrawSetOutline(RegTDBorder1, 0);
	TextDrawSetProportional(RegTDBorder1, 1);
	TextDrawSetShadow(RegTDBorder1, 1);
	TextDrawUseBox(RegTDBorder1, 1);
	TextDrawBoxColor(RegTDBorder1, 255);
	TextDrawTextSize(RegTDBorder1, 495.000000, 121.000000);

	RegTDBorder2 = TextDrawCreate(635.000000, 172.000000, " ");
	TextDrawBackgroundColor(RegTDBorder2, 255);
	TextDrawFont(RegTDBorder2, 1);
	TextDrawLetterSize(RegTDBorder2, 0.500000, 1.000000);
	TextDrawColor(RegTDBorder2, -1);
	TextDrawSetOutline(RegTDBorder2, 0);
	TextDrawSetProportional(RegTDBorder2, 1);
	TextDrawSetShadow(RegTDBorder2, 1);
	TextDrawUseBox(RegTDBorder2, 1);
	TextDrawBoxColor(RegTDBorder2, 255);
	TextDrawTextSize(RegTDBorder2, 495.000000, 121.000000);

	RegTDBackground = TextDrawCreate(565.000000, 109.000000, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~");
	TextDrawAlignment(RegTDBackground, 2);
	TextDrawBackgroundColor(RegTDBackground, 255);
	TextDrawFont(RegTDBackground, 1);
	TextDrawLetterSize(RegTDBackground, 0.480000, 0.554000);
	TextDrawColor(RegTDBackground, -1);
	TextDrawSetOutline(RegTDBackground, 0);
	TextDrawSetProportional(RegTDBackground, 1);
	TextDrawSetShadow(RegTDBackground, 1);
	TextDrawUseBox(RegTDBackground, 1);
	TextDrawBoxColor(RegTDBackground, -1936946099);
	TextDrawTextSize(RegTDBackground, 32.000000, 132.000000);

    RegTDTitle = TextDrawCreate(502.000000, 110.000000, "Datos de tu personaje:");
	TextDrawBackgroundColor(RegTDTitle, 255);
	TextDrawFont(RegTDTitle, 2);
	TextDrawLetterSize(RegTDTitle, 0.234000, 1.200000);
	TextDrawColor(RegTDTitle, 1684301055);
	TextDrawSetOutline(RegTDTitle, 1);
	TextDrawSetProportional(RegTDTitle, 1);
	
	TutTDBackground = TextDrawCreate(318.000000, 335.000000, "~n~~n~~n~~n~~n~~n~~n~~n~~n~");
	TextDrawAlignment(TutTDBackground, 2);
	TextDrawBackgroundColor(TutTDBackground, 255);
	TextDrawFont(TutTDBackground, 1);
	TextDrawLetterSize(TutTDBackground, 0.500000, 1.000000);
	TextDrawColor(TutTDBackground, -1);
	TextDrawSetOutline(TutTDBackground, 0);
	TextDrawSetProportional(TutTDBackground, 1);
	TextDrawSetShadow(TutTDBackground, 1);
	TextDrawUseBox(TutTDBackground, 1);
	TextDrawBoxColor(TutTDBackground, 120);
	TextDrawTextSize(TutTDBackground, 70.000000, -607.000000);
	return 1;
}


public restartTimer(type) {
	iGMXTick--;
	new string[128];
    if(type == 0) {
        format(string, sizeof(string), "reiniciando");
    } else {
        format(string, sizeof(string), "apagando");
    }
	if(iGMXTick == 0) {
	   	if(type == 0) {
			SendClientMessageToAll(COLOR_LIGHTRED, "{FFFFFF}El servidor se está reiniciando.");
			SendRconCommand("gmx");
	    } else {
  			SendClientMessageToAll(COLOR_LIGHTRED, "{FFFFFF}El servidor se está apagando.");
			SendRconCommand("exit");
	    }
	    KillTimer(timersID[9]);
	}
 	format(string, sizeof(string), "~w~%s servidor en...~n~ ~r~ %d ~w~ segundo/s.", string, iGMXTick); GameTextForAll(string, 1110, 5);
	return 1;
}

stock split2(const strsrc[], strdest[][], delimiter) {
    new i, li;
    new aNum;
    new len;
    while(i <= strlen(strsrc)) {
        if(strsrc[i] == delimiter || i == strlen(strsrc)) {
            len = strmid(strdest[aNum], strsrc, li, i, 128);
            strdest[aNum][len] = 0;
            li = i+1;
            aNum++;
        }
        i++;
    }
    return 1;
}

public OnPlayerUpdate(playerid) {
	return 1;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[]) {

	if(!isnull(inputtext))
		for(new strPos; inputtext[strPos] > 0; strPos++)
			if(inputtext[strPos] == '%')
				inputtext[strPos] = '\0'; // SA-MP placeholder exploit patch

	switch(dialogid)
	{
        case DLG_247:
		{
            new business = GetPlayerBusiness(playerid);
            TogglePlayerControllable(playerid, true);
            if(response)
			{
				switch(listitem)
				{
					case 0:
					{
				        if(GetPlayerCash(playerid) < PRICE_ASPIRIN)
							return SendClientMessage(playerid, COLOR_YELLOW2, "No tienes el dinero necesario.");
 						PlayerActionMessage(playerid, 15.0, "le paga al empleado por una aspirina.");
						SendFMessage(playerid, COLOR_WHITE, "¡Has comprado una aspirina $%d!", PRICE_ASPIRIN);
                        new Float:health;
						GetPlayerHealthEx(playerid, health);
						if(health > 50.0) // Solo para curar heridas menores
						{
							if(health + HEALTH_ASPIRIN > 100)
	      						SetPlayerHealthEx(playerid, 100);
	      					else
	           					SetPlayerHealthEx(playerid, health + HEALTH_ASPIRIN);
						} else
						    SendClientMessage(playerid, COLOR_YELLOW2, "La aspirina no ha sido de mucha ayuda debido a que tus heridas son graves. Vé al hospital.");
						GivePlayerCash(playerid, -PRICE_ASPIRIN);
		   				Business[business][bTill] += PRICE_ASPIRIN;
			        	Business[business][bProducts]--;
			        	saveBusiness(business);
					}
		            case 1:
					{
				        if(GetPlayerCash(playerid) < PRICE_ALFAJOR)
							return SendClientMessage(playerid, COLOR_YELLOW2, "No tienes el dinero necesario.");
						new validslot = -1;
						for(new i = 0; i < INV_MAX_SLOTS; i++)
						{
					    	if(getItemType(getInvItem(playerid, i)) == ITEM_NONE || (getInvItem(playerid, i) == 53 && getInvParam(playerid, i) < 4))
							{
								validslot = i;
								break;
	    					}
						}
						if(validslot < 0)
						    return SendClientMessage(playerid, COLOR_YELLOW2, "No tienes espacio en el inventario.");
		    			if(getItemType(getInvItem(playerid, validslot)) == ITEM_NONE)
		    			{
							setInvItem(playerid, validslot, 53);
							setInvParam(playerid, validslot, 1);
						} else
						    setInvParam(playerid, validslot, getInvParam(playerid, validslot) + 1);
						GivePlayerCash(playerid, -PRICE_ALFAJOR);
						PlayerActionMessage(playerid, 15.0, "le paga al empleado por un alfajor y se lo guarda.");
						SendFMessage(playerid, COLOR_WHITE, "¡Has comprado un alfajor por $%d. Lo has guardado en tu inventario!", PRICE_ALFAJOR);
						Business[business][bTill] += PRICE_ALFAJOR;
			        	Business[business][bProducts]--;
			        	saveBusiness(business);
					}
			        case 2:
					{
				        if(GetPlayerCash(playerid) < PRICE_CIGARETTES)
				            return SendClientMessage(playerid, COLOR_YELLOW2, "No tienes el dinero necesario.");
            			if(PlayerInfo[playerid][pCigarettes] > 20)
               				return SendClientMessage(playerid, COLOR_YELLOW2, "Tienes demasiados cigarrillos.");
						GivePlayerCash(playerid, -PRICE_CIGARETTES);
						PlayerActionMessage(playerid, 15.0, "le paga al empleado por un atado de cigarrilos y se lo guarda en el bolsillo.");
						SendFMessage(playerid, COLOR_WHITE, "Has comprado un atado de cigarrillos (5 unidades) por $%d, puedes utilizar /fumar.", PRICE_CIGARETTES);
						PlayerInfo[playerid][pCigarettes] += 5;
						Business[business][bTill] += PRICE_CIGARETTES;
				        Business[business][bProducts]--;
				        saveBusiness(business);
			        }
			        case 3:
					{
				        if(GetPlayerCash(playerid) < PRICE_LIGHTER)
							return SendClientMessage(playerid, COLOR_YELLOW2, "No tienes el dinero necesario.");
       					if(PlayerInfo[playerid][pLighter])
            				return SendClientMessage(playerid, COLOR_YELLOW2, "Ya tienes un encendedor.");
						GivePlayerCash(playerid, -PRICE_LIGHTER);
						PlayerActionMessage(playerid, 15.0, "le paga al empleado por un encendedor y se lo guarda en el bolsillo.");
						SendFMessage(playerid, COLOR_WHITE, "¡Has comprado un encendedor por $%d!", PRICE_LIGHTER);
						PlayerInfo[playerid][pLighter] = 1;
		   				Business[business][bTill] += PRICE_LIGHTER;
	        			Business[business][bProducts]--;
	        			saveBusiness(business);
			        }
					case 4:
					{
						if(GetPlayerCash(playerid) < PRICE_PHONE)
							return SendClientMessage(playerid, COLOR_YELLOW2, "¡No tienes el dinero suficiente!");
       					new phoneNumber = 40000 + random(999999);
						GivePlayerCash(playerid, -PRICE_PHONE);
						PlayerActionMessage(playerid, 15.0, "toma dinero de su bolsillo, le paga al empleado y recibe un teléfono a cambio.");
						SendFMessage(playerid, COLOR_WHITE, "¡Felicidades! has comprado un teléfono celular ($%d) utiliza /ayuda para ver los comandos disponibles.", PRICE_PHONE);
						PlayerInfo[playerid][pPhoneNumber] = phoneNumber;
						PlayerInfo[playerid][pPhoneC] = 0;
						PlayerInfo[playerid][pListNumber] = 1;
						Business[business][bTill] += PRICE_PHONE;
			        	Business[business][bProducts]--;
        				saveBusiness(business);
					}
					case 5:
					{
				        if(GetPlayerCash(playerid) < PRICE_PHONEBOOK)
							return SendClientMessage(playerid, COLOR_YELLOW2, "No tienes el dinero necesario.");
						if(PlayerInfo[playerid][pPhoneBook] == 1)
						    return SendClientMessage(playerid, COLOR_YELLOW2, "Ya tienes una guía telefónica.");
						GivePlayerCash(playerid, -PRICE_PHONEBOOK);
						PlayerActionMessage(playerid, 15.0, "le paga al empleado por una guía telefónica.");
						SendFMessage(playerid, COLOR_WHITE, "¡Has comprado una guía telefónica por $%d!", PRICE_PHONEBOOK);
						PlayerInfo[playerid][pPhoneBook] = 1;
		   				Business[business][bTill] += PRICE_PHONEBOOK;
				        Business[business][bProducts]--;
				        saveBusiness(business);
			        }
			        case 6:
					{
				        if(GetPlayerCash(playerid) < PRICE_FUELCAN)
							return SendClientMessage(playerid, COLOR_YELLOW2, "No tienes el dinero necesario.");
      					new validslot = -1;
						for(new i = 0; i < INV_MAX_SLOTS; i++)
						{
					    	if(getItemType(getInvItem(playerid, i)) == ITEM_NONE)
							{
								validslot = i;
								break;
	    					}
						}
						if(validslot < 0)
						    return SendClientMessage(playerid, COLOR_YELLOW2, "No tienes espacio en el inventario.");
						setInvItem(playerid, validslot, 48);
						setInvParam(playerid, validslot, 0);
						GivePlayerCash(playerid, -PRICE_FUELCAN);
						PlayerActionMessage(playerid, 15.0, "le paga al empleado por un bidón de combustible.");
						SendFMessage(playerid, COLOR_WHITE, "Has comprado un bidón por $%d, utiliza '/bidon' para más información.", PRICE_FUELCAN);
		   				Business[business][bTill] += PRICE_FUELCAN;
        				Business[business][bProducts]--;
				        saveBusiness(business);
			        }
			     	case 7:
					 {
				        if(GetPlayerCash(playerid) < PRICE_CAMERA)
							return SendClientMessage(playerid, COLOR_YELLOW2, "No tienes el dinero necesario.");
						GivePlayerCash(playerid, -PRICE_CAMERA);
						PlayerActionMessage(playerid, 15.0, "le paga al empleado por una cámara fotográfica.");
						SendFMessage(playerid, COLOR_WHITE, "Has comprado una cámara fotográfica por $%d.", PRICE_CAMERA);
						GivePlayerWeapon(playerid, 43, 35);
 						Business[business][bTill] += PRICE_CAMERA;
        				Business[business][bProducts]--;
				        saveBusiness(business);
			        }
			        case 8:
					{
				        if(GetPlayerCash(playerid) < PRICE_SANDWICH)
							return SendClientMessage(playerid, COLOR_YELLOW2, "No tienes el dinero necesario.");
						new validslot = -1;
						for(new i = 0; i < INV_MAX_SLOTS; i++)
						{
					    	if(getItemType(getInvItem(playerid, i)) == ITEM_NONE || (getInvItem(playerid, i) == 52 && getInvParam(playerid, i) < 2))
							{
								validslot = i;
								break;
	    					}
						}
						if(validslot < 0)
						    return SendClientMessage(playerid, COLOR_YELLOW2, "No tienes espacio en el inventario.");
		    			if(getItemType(getInvItem(playerid, validslot)) == ITEM_NONE)
		    			{
							setInvItem(playerid, validslot, 52);
							setInvParam(playerid, validslot, 1);
						} else
						    setInvParam(playerid, validslot, getInvParam(playerid, validslot) + 1);
						GivePlayerCash(playerid, -PRICE_SANDWICH);
						PlayerActionMessage(playerid, 15.0, "le paga al empleado por un sandwich y se lo guarda.");
						SendFMessage(playerid, COLOR_WHITE, "¡Has comprado un sandwich por $%d. Se ha guardado en tu inventario!", PRICE_SANDWICH);
		   				Business[business][bTill] += PRICE_SANDWICH;
			        	Business[business][bProducts]--;
			        	saveBusiness(business);
					}
					case 9:
					{
				        if(GetPlayerCash(playerid) < PRICE_WATERBOTTLE)
							return SendClientMessage(playerid, COLOR_YELLOW2, "No tienes el dinero necesario.");
						new validslot = -1;
						for(new i = 0; i < INV_MAX_SLOTS; i++)
						{
					    	if(getItemType(getInvItem(playerid, i)) == ITEM_NONE || (getInvItem(playerid, i) == 54 && getInvParam(playerid, i) < 2))
							{
								validslot = i;
								break;
	    					}
						}
						if(validslot < 0)
						    return SendClientMessage(playerid, COLOR_YELLOW2, "No tienes espacio en el inventario.");
		    			if(getItemType(getInvItem(playerid, validslot)) == ITEM_NONE)
		    			{
							setInvItem(playerid, validslot, 54);
							setInvParam(playerid, validslot, 1);
						} else
						    setInvParam(playerid, validslot, getInvParam(playerid, validslot) + 1);
						GivePlayerCash(playerid, -PRICE_WATERBOTTLE);
						PlayerActionMessage(playerid, 15.0, "le paga al empleado por un agua mineral.");
						SendFMessage(playerid, COLOR_WHITE, "¡Has comprado una botella de agua por $%d. Se ha guardado en tu inventario!", PRICE_WATERBOTTLE);
		   				Business[business][bTill] += PRICE_WATERBOTTLE;
			        	Business[business][bProducts]--;
			        	saveBusiness(business);
					}
					case 10:
					{
				        if(GetPlayerCash(playerid) < PRICE_RADIO)
							return SendClientMessage(playerid, COLOR_YELLOW2, "No tienes el dinero necesario.");
						if(PlayerInfo[playerid][pRadio] != 0)
						    return SendClientMessage(playerid, COLOR_YELLOW2, "¡Ya tienes una radio!");
						GivePlayerCash(playerid, -PRICE_RADIO);
						PlayerInfo[playerid][pRadio] = 1;
						PlayerActionMessage(playerid, 15.0, "le paga al empleado por un radio walkie talkie.");
						SendFMessage(playerid, COLOR_WHITE, "¡Has comprado un radio walkie talkie por $%d!", PRICE_RADIO);
		   				Business[business][bTill] += PRICE_RADIO;
			        	Business[business][bProducts]--;
			        	saveBusiness(business);
					}
				}
			}
			return 1;
        }
	    case DLG_GUIDE: {
	        if(response) {
			     switch(listitem) {
				   	case 0: {
		   				SendClientMessage(playerid, COLOR_WHITE, "Guía: para rentar un vehículo, vé al lugar marcado con rojo en el mapa o a alguna agencia de renta.");
		                SetPlayerCheckpoint(playerid, 1568.4810, -2253.9084, 13.5425, 5.0);
		   			}
		   			case 1: {
		   				SendClientMessage(playerid, COLOR_WHITE, "Guía: puedes tomar la prueba de conducción en la localización marcada con rojo en el mapa.");
		                SetPlayerCheckpoint(playerid, 1153.9204, -1771.8287, 16.5992, 5.0);
		   			}
		   			case 2: {
		   				SendClientMessage(playerid, COLOR_WHITE, "Guía: el centro de empleos se encuentra en la localización marcada con rojo en el mapa.");
		                SetPlayerCheckpoint(playerid, 1480.9441, -1771.7863, 18.7958, 5.0);
		   			}
		   			case 3: {
		   				SendClientMessage(playerid, COLOR_WHITE, "Guía: la tienda de ropa se encuentra en la localización marcada con rojo en el mapa.");
		                SetPlayerCheckpoint(playerid, 2244.7151, -1664.2365, 15.4766, 5.0);
		   			}
		   			case 4: {
		   				SendClientMessage(playerid, COLOR_WHITE, "Guía: la tienda de ropa se encuentra en la localización marcada con rojo en el mapa.");
		                SetPlayerCheckpoint(playerid, 461.3749, -1500.8853, 31.0594, 5.0);
		   			}
		   			case 5: {
						SendClientMessage(playerid, COLOR_WHITE, "Guía: el Mercado de Malos Aires se encuentra en la localización marcada con rojo en el mapa.");
						SetPlayerCheckpoint(playerid, 1132.9373, -1410.2246, 13.4747, 5.0);
					}
				}
	        }
	        TogglePlayerControllable(playerid, true);
		    return 1;
	    }
		case DLG_JOBS: {
		    if(response) {
		    	switch(listitem) {
			   		case 0: {
			   		    SendClientMessage(playerid, COLOR_WHITE, "Asistente dice: puedes tomar el empleo si te diriges a la siguiente localización.");
		                PlayerActionMessage(playerid, 15.0, "recibe un mapa por parte de la asistente con una localización marcada en rojo.");
		                SetPlayerCheckpoint(playerid, 1621.6262, -1863.1412, 13.5469, 5.0);
			   		}
			   		case 1: {
			   		    SendClientMessage(playerid, COLOR_WHITE, "Asistente dice: vé a la siguiente localización, probablemente deberás realizar ciertas pruebas y desde luego necesitarás una licencia de conducción.");
		                PlayerActionMessage(playerid, 15.0, "recibe un mapa por parte de la asistente con una localización marcada en rojo.");
		                SetPlayerCheckpoint(playerid, JobInfo[JOB_TAXI][jTakeX], JobInfo[JOB_TAXI][jTakeY], JobInfo[JOB_TAXI][jTakeZ], 5.0);
			   		}
			   		case 2: {
			   		    SendClientMessage(playerid, COLOR_WHITE, "Asistente dice: puedes tomar el empleo si te diriges a la siguiente localización.");
		                PlayerActionMessage(playerid, 15.0, "recibe un mapa por parte de la asistente con una localización marcada en rojo.");
		                SetPlayerCheckpoint(playerid, JobInfo[JOB_FARM][jTakeX], JobInfo[JOB_FARM][jTakeY], JobInfo[JOB_FARM][jTakeZ], 5.0);
			   		}
			   		case 3: {
			   		    SendClientMessage(playerid, COLOR_WHITE, "Asistente dice: puedes tomar el empleo si te diriges a la siguiente localización.");
		                PlayerActionMessage(playerid, 15.0, "recibe un mapa por parte de la asistente con una localización marcada en rojo.");
		                SetPlayerCheckpoint(playerid, JobInfo[JOB_TRAN][jTakeX], JobInfo[JOB_TRAN][jTakeY], JobInfo[JOB_TRAN][jTakeZ], 5.0);
			   		}
		  			case 4: {
			   		    SendClientMessage(playerid, COLOR_WHITE, "Asistente dice: puedes tomar el empleo si te diriges a la siguiente localización.");
		                PlayerActionMessage(playerid, 15.0, "recibe un mapa por parte de la asistente con una localización marcada en rojo.");
		                SetPlayerCheckpoint(playerid, JobInfo[JOB_GARB][jTakeX], JobInfo[JOB_GARB][jTakeY], JobInfo[JOB_GARB][jTakeZ], 5.0);
			   		}
				}
		    }
			TogglePlayerControllable(playerid, true);
		    return 1;
		}
		case DLG_RULES: {
		    if(response) {
				if(listitem == 0) { ShowPlayerDialog(playerid,DLG_RULESMSG,DIALOG_STYLE_MSGBOX,"Terminos de RP - DM","DeathMatch:\nMatar a un jugador sin razon, sin motivo de rol.\nPegarle a alguien porque si.\nSi haces DM serás sancionado por un administrador.","Aceptar","Cancelar"); }
				else if(listitem == 1) { ShowPlayerDialog(playerid,DLG_RULESMSG,DIALOG_STYLE_MSGBOX,"Terminos de RP - PG","PowerGaming:\nHacer cosas que en la vida real no puedes hacer.\nEl PG es sancionado.","Aceptar","Cancelar"); }
				else if(listitem == 2) { ShowPlayerDialog(playerid,DLG_RULESMSG,DIALOG_STYLE_MSGBOX,"Terminos de RP - CJ","CarJacking:\nRobar un auto sin un rol previo.\nSubirse al auto de otro sin rolear el intento de robo.\n Si haces CJ serás sancionado por un administrador.","Aceptar","Cancelar"); }
				else if(listitem == 3) { ShowPlayerDialog(playerid,DLG_RULESMSG,DIALOG_STYLE_MSGBOX,"Terminos de RP - MG","MetaGaming:\nUsar informacion OOC dentro del rol (IC).\nEjemplo: Preguntar a un user donde esta por /w.\nLlamar a alguien por su nombre cuando IC no lo conocemos.\n El MG es sancionado.","Aceptar","Cancelar"); }
				else if(listitem == 4) { ShowPlayerDialog(playerid,DLG_RULESMSG,DIALOG_STYLE_MSGBOX,"Terminos de RP - RK","RevengeKill:\nVengarte de que te mataron matando al usuario que te mato.\nEsto no esta permitido ya que cuando mueres\npierdes la memoria.","Aceptar","Cancelar"); }
				else if(listitem == 5) { ShowPlayerDialog(playerid,DLG_RULESMSG,DIALOG_STYLE_MSGBOX,"Terminos de RP - BH","BunnyHop:\nSaltar abusivamente con el personaje o con la bicicleta.\nEsto no esta permitido y seras sancionado si lo haces.","Aceptar","Cancelar"); }
				else if(listitem == 6) { ShowPlayerDialog(playerid,DLG_RULESMSG,DIALOG_STYLE_MSGBOX,"Terminos de RP - CK","CarKill:\n Usar el auto para atropellar a un sujeto repetitivas veces hasta dejarlo desangado o para matarlo.\nEsto no esta permitido y seras sancionado si lo haces.","Aceptar","Cancelar"); }
				else if(listitem == 7) { ShowPlayerDialog(playerid,DLG_RULESMSG,DIALOG_STYLE_MSGBOX,"Terminos de RP - ZZ","ZigZag:\nMoverte de un lado al otro para esquivar las balas.\nEs considerado PowerGaming.\nSeras sancionado si lo haces.","Aceptar","Cancelar"); }
				else if(listitem == 8) { ShowPlayerDialog(playerid,DLG_RULESMSG,DIALOG_STYLE_MSGBOX,"Terminos de RP - HK","HeliKill:\nUsar las haspas del helicoptero para matar a alguien.\nSi lo haces seras sancionado.","Aceptar","Cancelar"); }
				else if(listitem == 9) { ShowPlayerDialog(playerid,DLG_RULESMSG,DIALOG_STYLE_MSGBOX,"Terminos de RP - DB","DriveBy:\nDisparar estando como conductor de un auto o una moto.\nSi lo haces seras sancionado.","Aceptar","Cancelar"); }
				else if(listitem == 10) { ShowPlayerDialog(playerid,DLG_RULESMSG,DIALOG_STYLE_MSGBOX,"Terminos de RP - OOC","OutOfCharacter:\nSignifica afuera del personaje, cosas que no tienen nada que ver\ncon el rol de Malos Aires y de tu personaje.","Aceptar","Cancelar"); }
				else if(listitem == 11) { ShowPlayerDialog(playerid,DLG_RULESMSG,DIALOG_STYLE_MSGBOX,"Terminos de RP - IC","InCharacter:\nSignifica dentro del personaje, cosas que tienen que ver con el rol de\nMalos Aires y el de tu personaje.","Aceptar","Cancelar"); }
				else if(listitem == 12) { ShowPlayerDialog(playerid,DLG_RULESMSG,DIALOG_STYLE_MSGBOX,"Comandos - /ME","/ME:\nPara describir acciones de tu personaje. Por ejemplo:\n/me se rasca la cabeza.\n/me saca unos auriculares de su bolsillo.","Aceptar","Cancelar"); }
				else if(listitem == 13) { ShowPlayerDialog(playerid,DLG_RULESMSG,DIALOG_STYLE_MSGBOX,"Comandos - /DO","/DO:\nPara describir acciones del ambiente, en tercera persona. Por ejemplo:\n/do Se escucha a un gallo cacarear.\n/do Hay una mancha de sangre en el piso.","Aceptar","Cancelar"); }
				else if(listitem == 14) { ShowPlayerDialog(playerid,DLG_RULESMSG,DIALOG_STYLE_MSGBOX,"Comandos - /INTENTAR","/INTENTAR:\nPara poder realizar una accion que tal vez puede fallar. Por ejemplo:\n/intentar sacar al sujeto del auto.\nSolo se puede hacer un /intentar cada 1 minuto.","Aceptar","Cancelar"); }
			}
			return 1;
		}
		case DLG_LOGIN: {
	        if(!response) {
			    KickPlayer(playerid, "el sistema", "evadir inicio de sesión");
			    return 0;
			} else if(gPlayerLogged[playerid] == 0) {
				OnPlayerLogin(playerid, inputtext);
			}
	        return 1;
	    }
	    case DLG_REGISTER: {
		    if(!response) {
			    KickPlayer(playerid, "el sistema", "evadir registro");
			    return 0;
			} else if(gPlayerLogged[playerid] == 0)	{
			    if(strlen(inputtext) < 6 || strlen(inputtext) > 16) {
			    	ShowPlayerDialog(playerid, DLG_REGISTER, DIALOG_STYLE_PASSWORD, "¡Bienvenido! - nombre no registrado.", "Para registrar esta cuenta, ingresa una contraseña a continuación: \r\n{BE0000}- Debe tener al menos 6 caracteres y no mas de 16.","Registar","");
				} else {
					OnPlayerRegister(playerid, inputtext);
				}
			}
	        return 1;
		}
		case DLG_TUT1: {
			if(!response) {
			    KickPlayer(playerid, "el sistema", "evadir tutorial");
			    return 0;
			} else if(listitem == 0 || listitem == 4) {
				ShowPlayerDialog(playerid, DLG_TUT2, DIALOG_STYLE_LIST, "Escoge una razón rolera para asesinar a otro personaje", "Te ha insultado por /b\nTe ha amenazado por /gritar\nNo ha cumple con las normas del servidor\nNo sabe jugar\nTe debe dinero y no te lo paga", "Siguiente", "");
            } else {
                tutorial(playerid, 1);
            }
		}
		case DLG_TUT2: {
			if(!response) {
			    KickPlayer(playerid, "el sistema", "evadir tutorial");
			    return 0;
			} else if(listitem == 1 || listitem == 4) {
				ShowPlayerDialog(playerid, DLG_TUT3, DIALOG_STYLE_LIST, "¿Como reaccionas ante un robo a mano armada?", "Le robo el arma\nMe quedo quieto y levanto las manos\nEntro en shock\nLe trato de pegar\nLo reporto ante un moderador", "Siguiente", "");
            } else {
                tutorial(playerid, 1);
            }
		}
		case DLG_TUT3: {
			if(!response) {
			    KickPlayer(playerid, "el sistema", "evadir tutorial");
			    return 0;
			} else if(listitem == 1 || listitem == 2) {
				ShowPlayerDialog(playerid, DLG_TUT4, DIALOG_STYLE_LIST, "¿Como reaccionas ante alguien que incumple las reglas?", "Le pego y lo reporto aun moderador\nLo reporto y cancelo el rol\nLo reporto y continúo roleando\nLe disparo con un arma hasta matarlo\nNo hago nada", "Siguiente", "");
            } else {
                tutorial(playerid, 1);
            }
		}
		case DLG_TUT4: {
			if(!response) {
			    KickPlayer(playerid, "el sistema", "evadir tutorial");
			    return 0;
			} else if(listitem == 2) {
				ShowPlayerDialog(playerid, DLG_TUT5, DIALOG_STYLE_LIST, "¿Dónde debes sugerir, opinar o reportar un bug (error del juego)?", "Por /mp a un scripter\nMediante el foro\nPor /duda\nPor MP a un scripter", "Siguiente", "");
            } else {
                tutorial(playerid, 1);
            }
		}
		case DLG_TUT5: {
			if(!response) {
			    KickPlayer(playerid, "el sistema", "evadir tutorial");
			    return 0;
			} else if(listitem == 1 || listitem == 3) {
			    StopAudioStreamForPlayer(playerid);
				PlayerInfo[playerid][pTutorial] = 1;
				if(PlayerInfo[playerid][pRegStep] != 0) {
					TextDrawShowForPlayer(playerid, RegTDBorder1);
					TextDrawShowForPlayer(playerid, RegTDBorder2);
					TextDrawShowForPlayer(playerid, RegTDTitle);
					TextDrawShowForPlayer(playerid, RegTDBackground);
					PlayerTextDrawShow(playerid, RegTDGender[playerid]);
					PlayerTextDrawShow(playerid, RegTDSkin[playerid]);
					PlayerTextDrawShow(playerid, RegTDAge[playerid]);
					PlayerTextDrawShow(playerid, RegTDOrigin[playerid]);

					PlayerInfo[playerid][pSex] = 1;
					PlayerInfo[playerid][pSkin] = SkinRegMale[0][0];
					PlayerInfo[playerid][pRegStep] = 1;

					SetPlayerInterior(playerid, 14);
			     	SetPlayerVirtualWorld(playerid, random(100000) + 44000);

					SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "Presiona ~k~~PED_SPRINT~ para seleccionar una opción, ~k~~VEHICLE_ENTER_EXIT~ para finalizar.");
					SetSpawnInfo(playerid, 0, SkinRegMale[0][0], -1828.2881, -30.3119, 1061.1436, 182.0051, 0, 0, 0, 0, 0, 0);
				} else {
					SetSpawnInfo(playerid, 0, PlayerInfo[playerid][pSkin], PlayerInfo[playerid][pX], PlayerInfo[playerid][pY], PlayerInfo[playerid][pZ], PlayerInfo[playerid][pA], 0, 0, 0, 0, 0, 0);
				}
				TogglePlayerSpectating(playerid, false);
            } else {
                tutorial(playerid, 1);
            }
		}

//=========================SISTEMA DE TUNING DE MECANICOS=======================

		case DLG_TUNING:
		{
		    TogglePlayerControllable(playerid, true);
		    if(response == 0) // Si clickearon cerrar
		        return 0;

			new title[64];
			new content[256];
		    switch(listitem)
		    {
		        case 0:
			    {
					format(title, sizeof(title), "Color 1");
					format(content, sizeof(content), "{FFEFD5}Ingrese el ID del color 1 a pintar:");
					TogglePlayerControllable(playerid, false);
					ShowPlayerDialog(playerid, DLG_TUNING_COLOR1, DIALOG_STYLE_INPUT, title, content, "Pintar", "Cerrar");
				}
				case 1:
				{
					format(title, sizeof(title), "Color 2");
					format(content, sizeof(content), "{FFEFD5}Ingrese el ID del color 2 a pintar:");
					TogglePlayerControllable(playerid, false);
					ShowPlayerDialog(playerid, DLG_TUNING_COLOR2, DIALOG_STYLE_INPUT, title, content, "Pintar", "Cerrar");
				}
				case 2:
    			{
    			    if(GetVehicleType(GetPlayerVehicleID(playerid)) == VTYPE_BIKE)
            			return SendClientMessage(playerid, COLOR_WHITE, "Vehiculo invalido!");

					format(title, sizeof(title), "Llantas");
					format(content, sizeof(content), "Offroad\nShadow\nMega\nRimshine\nWires\nClassic\nTwist\nCutter\nSwitch\nGrove\nImport\nDollar\nTrance\nAtomic\nAhab\nVirtual\nAccess");
					TogglePlayerControllable(playerid, false);
					ShowPlayerDialog(playerid, DLG_TUNING_LLANTAS, DIALOG_STYLE_LIST, title, content, "Instalar", "Cerrar");
				}
				case 3:
				{
				    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
				        return SendClientMessage(playerid, COLOR_WHITE, "Debes estar de conductor!");
				    if(GetVehicleType(GetPlayerVehicleID(playerid)) == VTYPE_BIKE)
            			return SendClientMessage(playerid, COLOR_WHITE, "Vehiculo invalido!");
					if(GetPlayerCash(playerid) < 4000)
					    return SendClientMessage(playerid, COLOR_WHITE, "No tienes el dinero suficiente ($4000).");

				    VehicleInfo[GetPlayerVehicleID(playerid)][VehCompSlot][9] = 1087;
				    AddVehicleComponent(GetPlayerVehicleID(playerid), 1087);
					GivePlayerCash(playerid, -4000);
				    PlayerActionMessage(playerid, 15.0, "comienza a instalar la suspension hidraulica en el vehiculo.");
				}
				case 4:
				{
				    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
				        return SendClientMessage(playerid, COLOR_WHITE, "Debes estar de conductor!");
				    if(GetVehicleType(GetPlayerVehicleID(playerid)) == VTYPE_BIKE)
            			return SendClientMessage(playerid, COLOR_WHITE, "Vehiculo invalido!");
					if(GetPlayerCash(playerid) < 10000)
					    return SendClientMessage(playerid, COLOR_WHITE, "No tienes el dinero suficiente ($10000).");

				    VehicleInfo[GetPlayerVehicleID(playerid)][VehCompSlot][5] = 1010;
				    AddVehicleComponent(GetPlayerVehicleID(playerid), 1010);
					GivePlayerCash(playerid, -10000);
				    PlayerActionMessage(playerid, 15.0, "comienza a instalar el oxido nitroso en el vehiculo.");
				}
			}
		}
		case DLG_TUNING_COLOR1:
		{
		    TogglePlayerControllable(playerid, true);
		    if(response == 0) // Si clickearon cerrar
		        return 0;
		    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
      			return SendClientMessage(playerid, COLOR_WHITE, "Debes estar de conductor!");
			if(GetPlayerCash(playerid) < 1500)
				return SendClientMessage(playerid, COLOR_WHITE, "No tienes el dinero suficiente ($1500).");
			new integerColorValue = strval(inputtext);
			if(integerColorValue < 0 || integerColorValue > 255)
			    return SendClientMessage(playerid, COLOR_WHITE, "Ingresa un valor entre 0 y 255");

			PlayerActionMessage(playerid, 15.0, "comienza a pintar el color primario del vehiculo.");
			new vID = GetPlayerVehicleID(playerid);
            GivePlayerCash(playerid, -1500);
	        VehicleInfo[vID][VehColor1] = integerColorValue;
	        ChangeVehicleColor(vID, VehicleInfo[vID][VehColor1], VehicleInfo[vID][VehColor2]);
		}
		case DLG_TUNING_COLOR2:
		{
		    TogglePlayerControllable(playerid, true);
		    if(response == 0) // Si clickearon cerrar
		        return 0;
		    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
      			return SendClientMessage(playerid, COLOR_WHITE, "Debes estar de conductor!");
			if(GetPlayerCash(playerid) < 1500)
				return SendClientMessage(playerid, COLOR_WHITE, "No tienes el dinero suficiente ($1500).");
			new integerColorValue = strval(inputtext);
			if(integerColorValue < 0 || integerColorValue > 255)
			    return SendClientMessage(playerid, COLOR_WHITE, "Ingresa un valor entre 0 y 255.");

			PlayerActionMessage(playerid, 15.0, "comienza a pintar el color secundario del vehiculo.");
   			new vID = GetPlayerVehicleID(playerid);
            GivePlayerCash(playerid, -1500);
	        VehicleInfo[vID][VehColor2] = integerColorValue;
	        ChangeVehicleColor(vID, VehicleInfo[vID][VehColor1], VehicleInfo[vID][VehColor2]);
  		}
  		case DLG_TUNING_LLANTAS:
  		{
  		    TogglePlayerControllable(playerid, true);
		    if(response == 0) // Si clickearon cerrar
		        return 0;
            if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
      			return SendClientMessage(playerid, COLOR_WHITE, "Debes estar de conductor!");
			if(GetPlayerCash(playerid) < 4000)
				return SendClientMessage(playerid, COLOR_WHITE, "No tienes el dinero suficiente ($4000).");

            PlayerActionMessage(playerid, 15.0, "comienza a instalar las nuevas llantas en el vehiculo.");
			GivePlayerCash(playerid, -4000);
    		new vID = GetPlayerVehicleID(playerid);
			switch(listitem)
			{
			    case 0:
			    {
			        AddVehicleComponent(vID, OFFROAD_WHEEL_ID);
			        VehicleInfo[vID][VehCompSlot][7] = OFFROAD_WHEEL_ID;
			    }
			    case 1:
			    {
			        AddVehicleComponent(vID, SHADOW_WHEEL_ID);
			        VehicleInfo[vID][VehCompSlot][7] = SHADOW_WHEEL_ID;
			    }
			    case 2:
			    {
			        AddVehicleComponent(vID, MEGA_WHEEL_ID);
			        VehicleInfo[vID][VehCompSlot][7] = MEGA_WHEEL_ID;
			    }
			    case 3:
			    {
			        AddVehicleComponent(vID, RIMSHINE_WHEEL_ID);
			        VehicleInfo[vID][VehCompSlot][7] = RIMSHINE_WHEEL_ID;
			    }
			    case 4:
			    {
			        AddVehicleComponent(vID, WIRES_WHEEL_ID);
			        VehicleInfo[vID][VehCompSlot][7] = WIRES_WHEEL_ID;
			    }
			    case 5:
			    {
			        AddVehicleComponent(vID, CLASSIC_WHEEL_ID);
			        VehicleInfo[vID][VehCompSlot][7] = CLASSIC_WHEEL_ID;
			    }
			    case 6:
			    {
			        AddVehicleComponent(vID, TWIST_WHEEL_ID);
			        VehicleInfo[vID][VehCompSlot][7] = TWIST_WHEEL_ID;
			    }
			    case 7:
			    {
			        AddVehicleComponent(vID, CUTTER_WHEEL_ID);
			        VehicleInfo[vID][VehCompSlot][7] = CUTTER_WHEEL_ID;
			    }
			    case 8:
			    {
			        AddVehicleComponent(vID, SWITCH_WHEEL_ID);
			        VehicleInfo[vID][VehCompSlot][7] = SWITCH_WHEEL_ID;
			    }
			    case 9:
			    {
			        AddVehicleComponent(vID, GROVE_WHEEL_ID);
			        VehicleInfo[vID][VehCompSlot][7] = GROVE_WHEEL_ID;
			    }
			    case 10:
			    {
			        AddVehicleComponent(vID, IMPORT_WHEEL_ID);
			        VehicleInfo[vID][VehCompSlot][7] = IMPORT_WHEEL_ID;
			    }
			    case 11:
			    {
			        AddVehicleComponent(vID, DOLLAR_WHEEL_ID);
			        VehicleInfo[vID][VehCompSlot][7] = DOLLAR_WHEEL_ID;
			    }
			    case 12:
			    {
			        AddVehicleComponent(vID, TRANCE_WHEEL_ID);
			        VehicleInfo[vID][VehCompSlot][7] = TRANCE_WHEEL_ID;
			    }
			    case 13:
			    {
			        AddVehicleComponent(vID, ATOMIC_WHEEL_ID);
			        VehicleInfo[vID][VehCompSlot][7] = ATOMIC_WHEEL_ID;
			    }
			    case 14:
			    {
			        AddVehicleComponent(vID, AHAB_WHEEL_ID);
			        VehicleInfo[vID][VehCompSlot][7] = AHAB_WHEEL_ID;
			    }
			    case 15:
			    {
			        AddVehicleComponent(vID, VIRTUAL_WHEEL_ID);
			        VehicleInfo[vID][VehCompSlot][7] = VIRTUAL_WHEEL_ID;
			    }
			    case 16:
			    {
			        AddVehicleComponent(vID, ACCESS_WHEEL_ID);
			        VehicleInfo[vID][VehCompSlot][7] = ACCESS_WHEEL_ID;
			    }
			}
  		}
  		
//======================FIN SISTEMA DE TUNING DE MECANICOS======================
		
	}
    return 0;
}

public licenseTimer(playerid, lic) {
	new
	    vehicleID = GetPlayerVehicleID(playerid),
		Float:pSpeed = GetPlayerSpeed(playerid, true),
	    string[128];

	switch(lic) {
	    case 1: {   // Conducción
			if(pSpeed > playerLicense[playerid][lDMaxSpeed])
				playerLicense[playerid][lDMaxSpeed] = pSpeed;

	        playerLicense[playerid][lDTime]++;
	    	format(string, sizeof(string), "Tiempo: %d", playerLicense[playerid][lDTime]);
    		PlayerTextDrawSetString(playerid, PTD_Timer[playerid], string);

    		if(playerLicense[playerid][lDTime] >= 520) {
    		    SendClientMessage(playerid, COLOR_LIGHTRED, "Has fallado la prueba por exceder el tiempo límite (520 segundos).");
          		DisablePlayerCheckpoint(playerid);
		    	SetVehicleToRespawn(vehicleID);
		    	PutPlayerInVehicle(playerid, vehicleID, 0);
				RemovePlayerFromVehicle(playerid);
	            playerLicense[playerid][lDTaking] = 0;
	            playerLicense[playerid][lDTime] = 0;
	            playerLicense[playerid][lDStep] = 0;
	            playerLicense[playerid][lDMaxSpeed] = 0;
	        }
	        
	        if(playerLicense[playerid][lDTaking] != 0)
				timersID[10] = SetTimerEx("licenseTimer", 1000, false, "dd", playerid, 1);
	    }
	}
	return 1;
}

public TutTimer(playerid) {
    CanDoTut[playerid] = 1;
    return 1;
}


//====[ZCMD COMMANDS]===========================================================
CMD:pos(playerid, params[]) {
	new
	    string[128],
		Float:posX,
		Float:posY,
		Float:posZ,
		Float:posAngle,
		virtualWorld,
		interior;

	GetPlayerPos(playerid, posX, posY, posZ);
	GetPlayerFacingAngle(playerid, posAngle);
	virtualWorld = GetPlayerVirtualWorld(playerid);
	interior = GetPlayerInterior(playerid);
	format(string, sizeof(string), "[DEBUG]: xPos:%f yPos:%f zPos:%f Angulo:%f Mundo:%d Int:%d", posX, posY, posZ, posAngle, virtualWorld, interior);
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}

//[CMD_DB]
CMD:resetcars(playerid, params[]) {
	new
		pass[128],
 		id = 1;

	if(PlayerInfo[playerid][pAdmin] < 20) return 1;
	if(sscanf(params, "s[128]", pass)) SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /resetcars [contraseña de seguridad]");
	else if(!strcmp(pass,SECPASS,false)) {
		while(id < MAX_VEH) {
			if(VehicleInfo[id][VehType] == VEH_OWNED) {
				VehicleInfo[id][VehType] = VEH_NONE;
				SetVehicleToRespawn(id);
			}
			id++;
		}
		printf("[RESET]: los vehículos han sido reseteados por %s.",GetPlayerNameEx(playerid));
        SendClientMessage(playerid, COLOR_LIGHTBLUE, "Has reseteado todos los vehículos del servidor.");
	}else {
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, "{FF4600}[Error]:{C8C8C8} contraseña de seguridad incorrecta");
	}
	return 1;
}

//[CMD_A1]
CMD:aservicio(playerid, params[]) {
    new
        Float:hp;

	if(PlayerInfo[playerid][pAdmin] >= 1) {
	    if(AdminDuty[playerid] == 1) {
			AdminDuty[playerid] = 0;
			SetPlayerHealthEx(playerid, GetPVarFloat(playerid, "tempHealth"));
			SetPlayerArmour(playerid, PlayerInfo[playerid][pArmour]);
	     	SetPlayerColor(playerid, 0xFFFFFF00);
	    } else {
			AdminDuty[playerid] = 1;
			SetPlayerColor(playerid, COLOR_ADMINDUTY);
			GetPlayerHealthEx(playerid, hp);
			SetPVarFloat(playerid, "tempHealth", hp);
			GetPlayerArmour(playerid, PlayerInfo[playerid][pArmour]);
			SetPlayerHealthEx(playerid, 50000);
			SetPlayerArmour(playerid, 50000);
	    }
	}
	return 1;
}

CMD:acmds(playerid, params[]) {
    #pragma unused params
	cmd_admincmds(playerid, params);
	return 1;
}

CMD:admincmds(playerid, params[]) {
    if(PlayerInfo[playerid][pAdmin] < 1) {
		return 1;
	}
	if(PlayerInfo[playerid][pAdmin] >= 1) {
		SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "/a /ao /ajail /aservicio /getpos /gotopos /gotols /gotospawn /gotolv /gotosf");
		SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "/goto /kick /mute /skin /traer /up /descongelar /congelar /slap /muteb /teleayuda (/av)hiculo");
	}
	if(PlayerInfo[playerid][pAdmin] >= 2) {
		SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "/acinfo /aninfo /aeinfo /actele /antele /aetele /ban /check /checkinv /fly /sethp");
		SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "/mps /setint /setvw /set /togglegooc /verf");
	}
	if(PlayerInfo[playerid][pAdmin] >= 3) {
		SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "/afexpulsar /cambiarnombre /afinfo /jetx /setarmour /setjob /setcoord");
	}
	if(PlayerInfo[playerid][pAdmin] >= 4) {
    	SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "/givegun /advertir /clima /darlider /desbanear /saltartuto /tutorial /anproductos /annombre /gametext /sinfo");
	}
	if(PlayerInfo[playerid][pAdmin] >= 20) {
		SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "/acasas /aedificios /afacciones /anegocios /ppvehiculos /gmx /exit /tod /unknowngametext /money /givemoney");
		SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "/resetcars /setadmin /rerollplates /abarreracrear /abarreraquitar /abarreraquitartodo");
	}
	return 1;
}

CMD:saltartuto(playerid, params[]) {
	new
		targetID,
		string[128];
		
	if(PlayerInfo[playerid][pAdmin] <= 3) return 1;
	if(sscanf(params, "u", targetID)) {
		SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /saltartuto [ID-Jugador]");
	} else {
	
		StopAudioStreamForPlayer(playerid);
		PlayerInfo[playerid][pTutorial] = 1;
		
		// Cerramos cualquier dialog y textdraw abierto.
		ShowPlayerDialog(playerid, -1, DIALOG_STYLE_MSGBOX, " ", " ", " ", ""); 
		for(new i = 0; i < 7; i++) {
		    PlayerTextDrawHide(playerid, TutTD_Text[playerid][i]);
		}
		TextDrawHideForPlayer(playerid, TutTDBackground);
		
		if(PlayerInfo[playerid][pRegStep] != 0) {
			TextDrawShowForPlayer(playerid, RegTDBorder1);
			TextDrawShowForPlayer(playerid, RegTDBorder2);
			TextDrawShowForPlayer(playerid, RegTDTitle);
			TextDrawShowForPlayer(playerid, RegTDBackground);
			PlayerTextDrawShow(playerid, RegTDGender[playerid]);
			PlayerTextDrawShow(playerid, RegTDSkin[playerid]);
			PlayerTextDrawShow(playerid, RegTDAge[playerid]);
			PlayerTextDrawShow(playerid, RegTDOrigin[playerid]);

			PlayerInfo[playerid][pSex] = 1;
			PlayerInfo[playerid][pSkin] = SkinRegMale[0][0];
			PlayerInfo[playerid][pRegStep] = 1;

			SetPlayerInterior(playerid, 14);
	     	SetPlayerVirtualWorld(playerid, random(100000) + 44000);

			SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "Presiona ~k~~PED_SPRINT~ para seleccionar una opción, ~k~~VEHICLE_ENTER_EXIT~ para finalizar.");
			SetSpawnInfo(playerid, 0, SkinRegMale[0][0], -1828.2881, -30.3119, 1061.1436, 182.0051, 0, 0, 0, 0, 0, 0);
		} else {
			SetSpawnInfo(playerid, 0, PlayerInfo[playerid][pSkin], PlayerInfo[playerid][pX], PlayerInfo[playerid][pY], PlayerInfo[playerid][pZ], PlayerInfo[playerid][pA], 0, 0, 0, 0, 0, 0);
		}
		TogglePlayerSpectating(playerid, false);
		
		SpawnPlayer(targetID);
		format(string, sizeof(string), "[SALTARTUTO] a %s (DBID: %d)", PlayerInfo[targetID][pName], PlayerInfo[targetID][pID]);
		log(playerid, LOG_ADMIN, string);
	}
	return 1;
}

CMD:tutorial(playerid, params[]) {
	new
	    targetID,
		string[128];
		
	if(PlayerInfo[playerid][pAdmin] <= 3) return 1;
	if(sscanf(params, "u", targetID)) {
		SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /tutorial [ID-Jugador]");
	} else {
		PlayerInfo[targetID][pTutorial] = 0;
		KickPlayer(targetID, GetPlayerNameEx(targetID), "rehacer el tutorial");
		format(string, sizeof(string), "[TUTORIAL] a %s (DBID: %d)", PlayerInfo[targetID][pName], PlayerInfo[targetID][pID]);
		log(playerid, LOG_ADMIN, string);
	}
	return 1;
}

CMD:teleayuda(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 1) return 1;
	SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "/up /gotolv /gotosf /gotols /goto /gotopos /traer /gotospawn");
	return 1;
}

CMD:getpos(playerid, params[]) {
	new
	    string[128],
	    targetID,
		Float:posX,
		Float:posY,
		Float:posZ,
		Float:posAngle,
		virtualWorld,
		interior;

	if(PlayerInfo[playerid][pAdmin] < 1) return 1;
	if(sscanf(params,"u", targetID)) SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /getpos [ID-Jugador]");
	else if(targetID != INVALID_PLAYER_ID) {
		GetPlayerPos(targetID, posX, posY, posZ);
		GetPlayerFacingAngle(targetID, posAngle);
		virtualWorld = GetPlayerVirtualWorld(targetID);
		interior = GetPlayerInterior(targetID);
		format(string, sizeof(string), "Posición de %s | xPos:%f yPos:%f zPos:%f Angulo:%f Mundo:%d Int:%d", GetPlayerNameEx(targetID), posX, posY, posZ, posAngle, virtualWorld, interior);
		SendClientMessage(playerid, COLOR_WHITE, string);
	}
	return 1;
}

CMD:ajail(playerid, params[]) {
	new
	    string[128],
	    time[3],
	    targetID,
		minutes,
		reason[64];

	if(PlayerInfo[playerid][pAdmin] < 1) return 1;
	if(sscanf(params,"uds[64]", targetID, minutes, reason)) SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /ajail [ID-Jugador] [minutos] [razón]");
	else if(targetID != INVALID_PLAYER_ID) {
		gettime(time[0], time[1], time[2]);
		format(string, sizeof(string), "[Admin %s] %s ha sido castigado por %d minutos (razón: %s).", GetPlayerNameEx(playerid), GetPlayerNameEx(targetID), minutes, reason);
        log(playerid, LOG_CHAT, string);
		SendClientMessageToAll(COLOR_ADMINCMD, string);
		SendClientMessage(targetID, COLOR_LIGHTYELLOW2, "Recuerda que al estar castigado no se reseteará el tiempo para volver a trabajar hasta el proximo PayDay en libertad.");
		ResetPlayerWeapons(targetID);
		PlayerInfo[targetID][pJailed] = 2;
		PlayerInfo[targetID][pJailTime] = minutes * 60;
		SetPlayerInterior(targetID, 6);
		SetPlayerPos(targetID, 1412.01, -2.59, 1001.47);
		SetPlayerVirtualWorld(targetID, 0);
	}
	return 1;
}

CMD:traer(playerid, params[]) {
	new
		Float:xPos,
		Float:yPos,
		Float:zPos,
		interior,
		virtualWorld,
		targetID,
		string[128];

	if(PlayerInfo[playerid][pAdmin] < 1) return 1;
	if(sscanf(params,"u", targetID)) SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /traer [ID-Jugador]");
	else if(targetID != INVALID_PLAYER_ID) {
		GetPlayerPos(playerid, xPos, yPos, zPos);
		interior = GetPlayerInterior(playerid);
		virtualWorld = GetPlayerVirtualWorld(playerid);
		SetPlayerVirtualWorld(targetID, virtualWorld);
		SetPlayerInterior(targetID, interior);
		if(GetPlayerState(targetID) == 2) {
			SetVehiclePos(GetPlayerVehicleID(targetID), xPos, yPos+4, zPos);
		} else {
			SetPlayerPos(targetID, xPos, yPos+2, zPos);
		}
		format(string, sizeof(string), "{878EE7}[INFO]:{C8C8C8} el administrador %s te ha teletransportado junto a él.", GetPlayerNameEx(playerid));
		SendClientMessage(targetID, COLOR_LIGHTYELLOW2, string);
	}
	return 1;
}

CMD:gotopos(playerid, params[]) {
	new
		Float:xPos,
		Float:yPos,
		Float:zPos;

	if(PlayerInfo[playerid][pAdmin] < 1) return 1;
	if(sscanf(params,"fff", xPos, yPos, zPos)) SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /gotopos [x] [y] [z]");
	else {
		if(GetPlayerState(playerid) == 2) {
			SetVehiclePos(GetPlayerVehicleID(playerid), xPos, yPos, zPos);
		}else {
			SetPlayerPos(playerid, xPos, yPos, zPos);
		}
	}
	return 1;
}

CMD:goto(playerid, params[]) {
	new
		Float:xPos,
		Float:yPos,
		Float:zPos,
		interior,
		virtualWorld,
		targetID;

	if(PlayerInfo[playerid][pAdmin] < 1) return 1;
	if(sscanf(params,"u", targetID)) SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /goto [ID-Jugador]");
	else if(targetID != INVALID_PLAYER_ID) {
		GetPlayerPos(targetID, xPos, yPos, zPos);
		interior = GetPlayerInterior(targetID);
		virtualWorld = GetPlayerVirtualWorld(targetID);
		SetPlayerVirtualWorld(playerid, virtualWorld);
		SetPlayerInterior(playerid, interior);
		if(GetPlayerState(playerid) == 2) {
			SetVehiclePos(GetPlayerVehicleID(playerid), xPos, yPos+4, zPos);
		} else {
			SetPlayerPos(playerid, xPos, yPos+2, zPos);
		}
	}
	return 1;
}

CMD:gotols(playerid, params[]) {
    if(PlayerInfo[playerid][pAdmin] < 1) return 1;

	if(GetPlayerState(playerid) == 2) {
		SetVehiclePos(GetPlayerVehicleID(playerid), 1529.6, -1691.2, 13.3);
	}else {
		SetPlayerPos(playerid, 1529.6, -1691.2, 13.3);
	}
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	return 1;
}

CMD:gotospawn(playerid, params[]) {
    if(PlayerInfo[playerid][pAdmin] < 1) return 1;

	if(GetPlayerState(playerid) == 2) {
		SetVehiclePos(GetPlayerVehicleID(playerid), 1681.5281,-2256.2827,13.3512);
	}else {
		SetPlayerPos(playerid, 1682.9645, -2244.8215, 13.5445);
	}
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	return 1;
}

CMD:gotolv(playerid, params[]) {
    if(PlayerInfo[playerid][pAdmin] < 1) return 1;

	if(GetPlayerState(playerid) == 2) {
		SetVehiclePos(GetPlayerVehicleID(playerid), 1699.2, 1435.1, 10.7);
	}else {
		SetPlayerPos(playerid, 1699.2, 1435.1, 10.7);
	}
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	return 1;
}

CMD:gotosf(playerid, params[]) {
    if(PlayerInfo[playerid][pAdmin] < 1) return 1;

	if(GetPlayerState(playerid) == 2) {
		SetVehiclePos(GetPlayerVehicleID(playerid), -1417.0,-295.8,14.1);
	}else {
		SetPlayerPos(playerid, -1417.0,-295.8,14.1);
	}
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	return 1;
}

CMD:gotobanco(playerid, params[]) {
    if(PlayerInfo[playerid][pAdmin] < 1) return 1;

    SetPlayerPos(playerid, POS_BANK_X, POS_BANK_Y, POS_BANK_Z);
	SetPlayerInterior(playerid, POS_BANK_I);
	SetPlayerVirtualWorld(playerid, POS_BANK_W);
	SetPlayerFacingAngle(playerid, POS_BANK_A);
	return 1;
}

CMD:descongelar(playerid, params[]) {
    new
        string[128],
		targetid;

	if(PlayerInfo[playerid][pAdmin] < 1) return 1;

	if(sscanf(params,"u", targetid)) SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /descongelar [ID-Jugador]");
	else if(IsPlayerConnected(targetid) && targetid != INVALID_PLAYER_ID) {
		TogglePlayerControllable(targetid, 1);
		DeletePVar(playerid, "disabled");
		SendFMessage(targetid,COLOR_LIGHTYELLOW2,"{878EE7}[INFO]:{C8C8C8} has sido descongelado por %s.", GetPlayerNameEx(playerid));
		format(string, sizeof(string), "[Staff]: %s ha descongelado a %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(targetid));
		AdministratorMessage(COLOR_ADMINCMD, string, 1);
	}
	return 1;
}

CMD:congelar(playerid, params[]) {
    new
    	string[128],
		targetid;

	if(PlayerInfo[playerid][pAdmin] < 1) return 1;

	if(sscanf(params,"u", targetid)) SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /congelar [ID-Jugador]");
	else if(IsPlayerConnected(targetid) && targetid != INVALID_PLAYER_ID) {
		TogglePlayerControllable(targetid, 0);
		SetPVarInt(targetid, "disabled", DISABLE_FREEZE);
		format(string, sizeof(string), "{878EE7}[INFO]:{C8C8C8} has sido congelado por %s.", GetPlayerNameEx(playerid));
		SendClientMessage(targetid,COLOR_LIGHTYELLOW2,string);
		format(string, sizeof(string), "[Staff]: %s ha congelado a %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(targetid));
		AdministratorMessage(COLOR_ADMINCMD, string, 1);
	}
	return 1;
}

//[CMD_A3]
CMD:setjob(playerid, params[]) {
	new
	    string[128],
		job,
		targetid;

	if(PlayerInfo[playerid][pAdmin] <= 2)
		return 1;

	if(sscanf(params,"ud", targetid, job)) {
		SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /setjob [ID-Jugador] [empleo]");
	} else if(IsPlayerConnected(targetid)) {
		SendFMessage(targetid,COLOR_LIGHTYELLOW2,"{878EE7}[INFO]:{C8C8C8} %s te ha seteado el empleo a %d (%s).", GetPlayerNameEx(playerid), job, JobInfo[job][jName]);
		format(string, sizeof(string), "[Staff]: %s ha seteado el empleo de %s a %d (%s).", GetPlayerNameEx(playerid), GetPlayerNameEx(targetid), job, JobInfo[job][jName]);
		AdministratorMessage(COLOR_ADMINCMD, string, 1);
        PlayerInfo[targetid][pJob] = job;
	}
	return 1;
}


CMD:setcoord(playerid, params[]) {
	new
		targetid,
		Float:x,
		Float:y,
		Float:z,
		string[128];

	if(PlayerInfo[playerid][pAdmin] <= 2) return 1;

	if(sscanf(params, "dfff", targetid, x, y, z)) SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /setcoord [ID-Jugador] [x] [y] [z]");
	else
	{
		if(IsPlayerInAnyVehicle(targetid))
		{
			SetVehiclePos(GetPlayerVehicleID(targetid), x,y,z);
		}
		else
		{
			SetPlayerPos(targetid, x,y,z);
		}
		format(string,sizeof(string),"* El administrador %s te ha teletransportado. *", GetPlayerNameEx(playerid));
        SendClientMessage(targetid, COLOR_LIGHTBLUE, string);
	}
	return 1;
}

CMD:setint(playerid, params[]) {
	new
		interior,
		targetid;

    if(PlayerInfo[playerid][pAdmin] <= 1)
		return 1;

	if(sscanf(params,"ud", targetid, interior)) SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /setint [ID-Jugador] [interior]");
	else
	{
		if(IsPlayerInAnyVehicle(targetid))
		{
		    LinkVehicleToInterior(GetPlayerVehicleID(targetid), interior);
		}
        SetPlayerInterior(targetid, interior);
	}
	return 1;
}

CMD:setvw(playerid, params[]) {
	new
		world,
		targetid;

	if(PlayerInfo[playerid][pAdmin] <= 1)
		return 1;

	if(sscanf(params,"ud", targetid, world)) SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /setvw [ID-Jugador] [mundo virtual]");
	else {
        SetPlayerVirtualWorld(targetid, world);
	}
	return 1;
}

CMD:recordjugadores(playerid, params[]) {
	SendFMessage(playerid, COLOR_LIGHTYELLOW, "{878EE7}[INFO]:{C8C8C8} el record actual de jugadores es de %d.", ServerInfo[sPlayersRecord]);
	return 1;
}

CMD:d(playerid, params[]) {
	cmd_departamento(playerid, params);
	return 1;
}

CMD:departamento(playerid, params[])
{
	new text[128], string[128], factionID = PlayerInfo[playerid][pFaction];

    if(factionID == 0)
		return 1;
	if(FactionInfo[factionID][fType] != FAC_TYPE_GOV)
        return SendClientMessage(playerid, COLOR_YELLOW2, "No tienes permiso para hablar por esta frecuencia.");
	if(sscanf(params, "s[128]", text))
		return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} (/d)epartamento [texto]");
	if(PlayerInfo[playerid][pRadio] == 0)
		return SendClientMessage(playerid, COLOR_YELLOW2, "No tienes una radio, vé y compra una en algún 24-7.");
	if(!RadioEnabled[playerid])
	    return SendClientMessage(playerid, COLOR_YELLOW2, "Tienes tu radio apagada.");
    if(Muted[playerid])
		return SendClientMessage(playerid, COLOR_YELLOW, "{FF4600}[Error]:{C8C8C8} no puedes usar la radio, te encuentras silenciado.");

	PlayerActionMessage(playerid, 15.0, "toma una radio de su bolsillo y habla por ella.");
	if(isUsingMaskInSlot[playerid] == -1)
		format(string, sizeof(string), "%s dice por radio: %s", GetPlayerNameEx(playerid), text);
	else
 		format(string, sizeof(string), "Enmascarado dice por radio: %s", text);
	ProxDetector(15.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5, 0);
	format(string, sizeof(string), "[%s %s]: %s", GetRankName(PlayerInfo[playerid][pFaction], PlayerInfo[playerid][pRank]), GetPlayerNameEx(playerid), text);
 	foreach(new i : Player) {
		if(FactionInfo[PlayerInfo[i][pFaction]][fType] == FAC_TYPE_GOV && RadioEnabled[i] == 1 && PlayerInfo[i][pRadio] != 0) {
			SendClientMessage(i, COLOR_LIGHTGREEN, string);
		}
  	}
	return 1;
}

CMD:gob(playerid, params[]) {
	cmd_gobierno(playerid, params);
	return 1;
}

CMD:gobierno(playerid, params[])
{
	new string[128];

	if(sscanf(params, "s[128]", string))
		return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} (/gob)ierno [texto]");
	if(FactionInfo[PlayerInfo[playerid][pFaction]][fType] != FAC_TYPE_GOV || PlayerInfo[playerid][pRank] != 1)
		return SendClientMessage(playerid, COLOR_YELLOW2, "{FF4600}[Error]:{C8C8C8} No tienes permiso para hablar por esta frecuencia.");

	SendClientMessageToAll(COLOR_YELLOW2, "============================[Cadena Nacional]===========================");
	if(PlayerInfo[playerid][pFaction] == FAC_HOSP) {
		format(string, sizeof(string), "Hospital de Malos Aires: %s", string);
	} else
		if(PlayerInfo[playerid][pFaction] == FAC_PMA) {
	 		format(string, sizeof(string), "Policía Metropolitana: %s", string);
		} else
			if(PlayerInfo[playerid][pFaction] == FAC_SIDE) {
		 		format(string, sizeof(string), "Secretaría de Inteligencia: %s", string);
			}
	SendClientMessageToAll(COLOR_YELLOW2, string);
	SendFMessageToAll(COLOR_YELLOW2, "%s %s", GetRankName(PlayerInfo[playerid][pFaction], PlayerInfo[playerid][pRank]), GetPlayerNameEx(playerid));
	SendClientMessageToAll(COLOR_YELLOW2, "======================================================================");
	return 1;
}

CMD:darlider(playerid, params[])
{
	new targetid, factionid;

    if(PlayerInfo[playerid][pAdmin] < 4)
		return 1;
	if(sscanf(params,"ud", targetid, factionid))
		return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /darlider [ID/Jugador] [IDfacción]");
  	if(targetid == INVALID_PLAYER_ID)
		return SendClientMessage(playerid, COLOR_YELLOW2, "{FF4600}[Error]:{C8C8C8} jugador inválido.");
	if(PlayerInfo[targetid][pFaction] != 0)
 		return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{FF4600}[Error]:{C8C8C8} El sujeto ya tiene facción.");

	SetPlayerFaction(targetid, factionid, 1);
	SendFMessage(playerid, COLOR_LIGHTBLUE, "{878EE7}[INFO]:{C8C8C8} has hecho a %s líder de la facción ID: %d (%s).", GetPlayerNameEx(targetid), factionid, FactionInfo[factionid][fName]);
	SendFMessage(targetid, COLOR_LIGHTBLUE, "{878EE7}[INFO]:{C8C8C8} el administrador %s te ha hecho líder de la facción %s.", GetPlayerNameEx(playerid), FactionInfo[factionid][fName]);
	return 1;
}

//========================COMANDOS ADMIN DE EDIFICIOS===========================

CMD:aedificios(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 20)
		return 1;

	SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[Comandos de edificios]:");
	SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "/aeinfo /aeinsert - /aeremove - /aevworld - /aegetid - /aetexto - /aetexto2 - /aeentrada - /aesalida - /aecosto");
	SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "/aecerrado - /aetele - /aepickup - /aefaccion");
	return 1;
}

CMD:aeinfo(playerid, params[])
{
	new id;

    if(PlayerInfo[playerid][pAdmin] < 2)
		return 1;
	if(sscanf(params, "i", id))
		return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /aeinfo [IDedificio]");
	if(id < 1 || id >= MAX_BUILDINGS)
		return SendClientMessage(playerid, COLOR_YELLOW2, "ID de edificio inválida.");

	SendFMessage(playerid, COLOR_WHITE, "=======================[Negocio %d '%s']=======================", id, Building[id][blText]);
	SendFMessage(playerid, COLOR_WHITE, "- Texto: %s", Building[id][blText]);
	SendFMessage(playerid, COLOR_WHITE, "- Texto2: %s", Building[id][blText2]);
	SendFMessage(playerid, COLOR_WHITE, "- Costo de entrada: $%d", Building[id][blEntranceFee]);
	SendFMessage(playerid, COLOR_WHITE, "- Cerrado: %d", Building[id][blLocked]);
	SendFMessage(playerid, COLOR_WHITE, "- Facción: %d", Building[id][blFaction]);
	return 1;
}

CMD:aeremove(playerid, params[]) {
	new
	    blid;

    if(PlayerInfo[playerid][pAdmin] < 20)
		return 1;

	if(sscanf(params, "d", blid)) SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /aeremove [idedificio]");
	else if(blid >= 1 && blid < MAX_BUILDINGS) {
		Building[blid][blDelete] = true;
		saveBuilding(blid);
	}
	return 1;
}

CMD:aeinsert(playerid, params[]) {
	new
	    blid,
	    name[32],
      	Float:entAngle,
	    locked,
	    fee,
	    faction,
		pickupModel;

    if(PlayerInfo[playerid][pAdmin] < 20)
		return 1;

	if(sscanf(params, "dddds[32]", fee, locked, pickupModel,  faction, name))
		SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /aeinsert [costo entrada] [locked] [modelo pickup] [faccion, 0 = n/a] [text (64 ch)]");
	else if(locked != 1 && locked != 0) {
	    SendClientMessage(playerid, COLOR_RED, "{FF4600}[Error]:{C8C8C8} el valor 'locked' no puede ser diferente a 1 o 0.");
	} else {
		for(new i = 1; i < MAX_BUILDINGS; i++) {
		    if(!Building[i][blLoaded]) {
		        Building[i][blLoaded] = true;
				blid = i;
				break;
			}
		}

	    GetPlayerPos(playerid, Building[blid][blOutsideX], Building[blid][blOutsideY], Building[blid][blOutsideZ]);
	    GetPlayerFacingAngle(playerid, entAngle);

	    Building[blid][blOutsideInt] = GetPlayerInterior(playerid);
		Building[blid][blOutsideAngle] = entAngle + 180;
		Building[blid][blEntranceFee] = fee;
		Building[blid][blLocked] = locked;
		Building[blid][blPickupModel] = pickupModel;
		Building[blid][blFaction] = faction;
		Building[blid][blInsert] = true;
		mysql_real_escape_string(name, name);
	 	strmid(Building[blid][blText], (name), 0, strlen((name)), 64);
	 	saveBuilding(blid);
	}
	return 1;
}

CMD:aegetid(playerid, params[]) {
    if(PlayerInfo[playerid][pAdmin] < 10)
		return 1;

	for(new i = 1; i < MAX_BUILDINGS; i++) {
		if(PlayerToPoint(1.0, playerid, Building[i][blOutsideX], Building[i][blOutsideY], Building[i][blOutsideZ])) {
		    SendFMessage(playerid, COLOR_WHITE, "ID del edificio: %d", i);
		    return 1;
		}
	}
	SendClientMessage(playerid, COLOR_WHITE, "No se ha encontrado ningún edificio en tu posición.");
	return 1;
}

CMD:aetexto(playerid, params[]) {
	new
	    string[128],
	    blid,
		text[64];

    if(PlayerInfo[playerid][pAdmin] < 20)
		return 1;

	if(sscanf(params, "ds[64]", blid, text)) SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /aetexto [idedificio] [texto 64 chars]");
	else if(blid >= 1 && blid < MAX_BUILDINGS && strlen(text) <= 64) {
	 	mysql_real_escape_string(text, text);
	 	strmid(Building[blid][blText], (text), 0, strlen((text)), 64);
		format(string, sizeof(string), "Has seteado el texto del edificio [%d] a '%s'.", blid, text);
		SendClientMessage(playerid, COLOR_ADMINCMD, string);
		saveBuilding(blid);
	}
	return 1;
}

CMD:aetexto2(playerid, params[]) {
	new
	    string[128],
	    blid,
		text[64];

    if(PlayerInfo[playerid][pAdmin] < 20)
		return 1;

	if(sscanf(params, "ds[64]", blid, text)) SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /aetexto2 [idedificio] [texto 64 chars]");
	else if(blid >= 1 && blid < MAX_BUILDINGS && strlen(text) <= 64) {
	 	mysql_real_escape_string(text, text);
	 	strmid(Building[blid][blText2], (text), 0, strlen((text)), 64);
		format(string, sizeof(string), "Has seteado el texto2 del edificio [%d] a '%s'.", blid, text);
		SendClientMessage(playerid, COLOR_ADMINCMD, string);
		saveBuilding(blid);
	}
	return 1;
}

CMD:aeentrada(playerid, params[]) {
	new
	    string[128],
	    blid,
	    entranceInterior,
		Float:entranceX,
		Float:entranceY,
		Float:entranceZ,
		Float:entranceAngle;

    if(PlayerInfo[playerid][pAdmin] < 20)
		return 1;

	if(sscanf(params, "d", blid)) {
		SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /aeentrada [idedificio] - setea la entrada a tu posición, tu ángulo será el adoptado al salir.");
	}
	else if(blid >= 1 && blid < MAX_BUILDINGS) {
	    GetPlayerPos(playerid, entranceX, entranceY, entranceZ);
	    GetPlayerFacingAngle(playerid, entranceAngle);
	    entranceInterior = GetPlayerInterior(playerid);
		Building[blid][blOutsideX] = entranceX;
		Building[blid][blOutsideY] = entranceY;
		Building[blid][blOutsideZ] = entranceZ;
		Building[blid][blOutsideAngle] = entranceAngle + 180;
		Building[blid][blOutsideInt] = entranceInterior;
		format(string, sizeof(string), "Entrada del edificio [%d] seteada a X:%f Y:%f Z:%f A:%f Interior:%d", blid, entranceX, entranceY, entranceZ, entranceAngle, entranceInterior);
		SendClientMessage(playerid, COLOR_ADMINCMD, string);
		saveBuilding(blid);
	}
	return 1;
}

CMD:aesalida(playerid, params[]) {
	new
	    string[128],
	    blid,
	    exitInterior,
		Float:exitX,
		Float:exitY,
		Float:exitZ,
		Float:exitAngle;

    if(PlayerInfo[playerid][pAdmin] < 20)
		return 1;

	if(sscanf(params, "d", blid)) {
		SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /aesalida [idedificio] - setea la salida a tu posición, tu ángulo será el adoptado al ingresar.");
	}
	else if(blid >= 1 && blid < MAX_BUILDINGS) {
		GetPlayerPos(playerid, exitX, exitY, exitZ);
	    GetPlayerFacingAngle(playerid, exitAngle);
	    exitInterior = GetPlayerInterior(playerid);
		Building[blid][blInsideX] = exitX;
		Building[blid][blInsideY] = exitY;
		Building[blid][blInsideZ] = exitZ;
		Building[blid][blInsideAngle] = exitAngle + 180;
		Building[blid][blInsideInt] = exitInterior;
		Building[blid][blInsideWorld] = blid * 1000;
		format(string, sizeof(string), "Salida del negocio [%d] seteada a X:%f Y:%f Z:%f A:%f Interior:%d", blid, exitX, exitY, exitZ, exitAngle, exitInterior);
		SendClientMessage(playerid, COLOR_ADMINCMD, string);
		saveBuilding(blid);
	}
	return 1;
}

CMD:aecosto(playerid, params[]) {
	new
	    string[128],
	    blid,
	    cost;

    if(PlayerInfo[playerid][pAdmin] < 20)
		return 1;

	if(sscanf(params, "dd", blid, cost)) SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /aecosto [idedificio] [costo de entrada]");
	else if(blid >= 1 && blid < MAX_BUILDINGS) {
		Building[blid][blEntranceFee] = cost;
		format(string, sizeof(string), "Has seteado el costo de entrada al edificio [%d] a %d.", blid, cost);
		SendClientMessage(playerid, COLOR_ADMINCMD, string);
		saveBuilding(blid);
	}
	return 1;
}

CMD:aefaccion(playerid, params[]) {
	new
	    string[128],
	    blid,
	    faction;

    if(PlayerInfo[playerid][pAdmin] < 20)
		return 1;

	if(sscanf(params, "dd", blid, faction)) SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /aefaccion [idedificio] [facción, 0 = ninguna]");
	else if(blid >= 1 && blid < MAX_BUILDINGS) {
		Building[blid][blFaction] = faction;
		format(string, sizeof(string), "Has seteado la facción del edificio [%d] a %d.", blid, faction);
		SendClientMessage(playerid, COLOR_ADMINCMD, string);
		saveBuilding(blid);
	}
	return 1;
}

CMD:aepickup(playerid, params[]) {
	new
	    string[128],
	    blid,
	    pickupModel;

    if(PlayerInfo[playerid][pAdmin] < 20)
		return 1;

	if(sscanf(params, "dd", blid, pickupModel)) SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /aepickup [idedificio] [id modelo]");
	else if(blid >= 1 && blid < MAX_BUILDINGS) {
		Building[blid][blPickupModel] = pickupModel;
		format(string, sizeof(string), "Has seteado el pickup del edificio [%d] a %d.", blid, pickupModel);
		SendClientMessage(playerid, COLOR_ADMINCMD, string);
		saveBuilding(blid);
	}
	return 1;
}

CMD:aevworld(playerid, params[]) {
	new
	    string[128],
	    blid,
	    vworld;

    if(PlayerInfo[playerid][pAdmin] < 20)
		return 1;

	if(sscanf(params, "dd", blid, vworld)) SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /aevworld [idedificio] [mundo virtual]");
	else if(blid >= 1 && blid < MAX_BUILDINGS) {
		Building[blid][blInsideWorld] = vworld;
		format(string, sizeof(string), "Has seteado el mundo virtual del edificio [%d] a %d.", blid, vworld);
		SendClientMessage(playerid, COLOR_ADMINCMD, string);
		saveBuilding(blid);
	}
	return 1;
}

CMD:aecerrado(playerid, params[]) {
	new
	    string[128],
	    blid,
	    locked;

    if(PlayerInfo[playerid][pAdmin] < 20)
		return 1;

	if(sscanf(params, "dd", blid, locked)) SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /aecerrado [idedificio] [1=SI, 0=NO]");
	else if(locked < 0 || locked > 1) {
	    SendClientMessage(playerid, COLOR_ADMINCMD, "El valor no puede ser menor a 0 o mayor a 1.");
	    return 1;
	} else if(blid >= 1 && blid < MAX_BUILDINGS) {
		Building[blid][blLocked] = locked;
		switch(locked) {
		    case 0: format(string, sizeof(string), "Has abierto el edificio [%d]", blid);
		    case 1: format(string, sizeof(string), "Has cerrado el edificio [%d]", blid);
		}
		SendClientMessage(playerid, COLOR_ADMINCMD, string);
		saveBuilding(blid);
	}
	return 1;
}

CMD:aetele(playerid, params[])
{
	new blid;

    if(PlayerInfo[playerid][pAdmin] < 2)
		return 1;
	if(sscanf(params, "i", blid))
		return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /aetele [IDedificio]");
	if(blid < 1 || blid >= MAX_BUILDINGS)
		return SendClientMessage(playerid, COLOR_YELLOW2, "ID de edificio inválida.");

	SetPlayerPos(playerid, Building[blid][blOutsideX], Building[blid][blOutsideY], Building[blid][blOutsideZ]);
	SetPlayerInterior(playerid, Building[blid][blOutsideInt]);
	return 1;
}

//=========================COMANDOS VARIOS DE ADMIN=============================

CMD:clima(playerid, params[]) {
	if (PlayerInfo[playerid][pAdmin] < 4)
		return 1;

	if(isnull(params))
		SendClientMessage(playerid, COLOR_RED, "{FF4600}[Error]:{C8C8C8} no se ha especificado una ID.");

	new
		weatherID = strval(params);

	if(weatherID >= -500 && weatherID <= 500) {
		weatherVariables[0] = weatherID;
		foreach(new i : Player) {
			if(!GetPlayerInterior(i))
				SetPlayerWeather(i, weatherVariables[0]);
		}
	} else {
		SendClientMessage(playerid, COLOR_RED, "{FF4600}[Error]:{C8C8C8} ID inválida (-500 - 500).");
	}
	return 1;
}

CMD:gmx(playerid, params[]) {
	new
		Float:x,
		Float:y,
		Float:z,
		Float:a;

	if (PlayerInfo[playerid][pAdmin] < 20) return 1;

	foreach(new i : Player) {
  		DisablePlayerCheckpoint(i);
		SetPlayerCameraPos(i,1460.0, -1324.0, 287.2);
		SetPlayerCameraLookAt(i,1374.5, -1291.1, 239.0, 1);
        GetPlayerPos(i,x,y,z);
        GetPlayerFacingAngle(i, a);
	    PlayerInfo[i][pX] = x;
		PlayerInfo[i][pY] = y;
		PlayerInfo[i][pZ] = z;
		PlayerInfo[i][pInterior] = GetPlayerInterior(i);
		PlayerInfo[i][pVirtualWorld] = GetPlayerVirtualWorld(i);
		PlayerInfo[i][pA] = a;
		SaveAccount(i);
		gPlayerLogged[i] = 0;
	}
	SaveServerInfo();
 	SaveFactions();
	SaveVehicles();
	saveHouses();
	SaveAllBusiness();
	saveBuildings();
	iGMXTick = 11;
	timersID[9] = SetTimerEx("restartTimer", 1000, true, "i", 0);
	return 1;
}

CMD:exit(playerid, params[]) {
	new
		Float:x,
		Float:y,
		Float:z,
		Float:a;

	if (PlayerInfo[playerid][pAdmin] < 20) return 1;

	foreach(new i : Player) {
  		DisablePlayerCheckpoint(i);
		SetPlayerCameraPos(i,1460.0, -1324.0, 287.2);
		SetPlayerCameraLookAt(i,1374.5, -1291.1, 239.0, 1);
        GetPlayerPos(i,x,y,z);
        GetPlayerFacingAngle(i, a);
	    PlayerInfo[i][pX] = x;
		PlayerInfo[i][pY] = y;
		PlayerInfo[i][pZ] = z;
		PlayerInfo[i][pInterior] = GetPlayerInterior(i);
		PlayerInfo[i][pVirtualWorld] = GetPlayerVirtualWorld(i);
		PlayerInfo[i][pA] = a;
		SaveAccount(i);
		gPlayerLogged[i] = 0;
	}
	SaveServerInfo();
 	SaveFactions();
	SaveVehicles();
	saveHouses();
	SaveAllBusiness();
	saveBuildings();
	iGMXTick = 11;
	timersID[9] = SetTimerEx("restartTimer", 1000, true, "i", 1);
	return 1;
}

CMD:tod(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 20) {
		if(isnull(params))
			SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /tod [hora del día] (0-23)");

		new
			tod = strval(params);

		if(tod <= 23 && tod >= 0) {
            SetWorldTime(tod);
		} else {
		    SendClientMessage(playerid, COLOR_RED, "{FF4600}[Error]:{C8C8C8} la hora debe ser mayor a 0 y menor a 23.");
		}
	}
	return 1;
}

/*CMD:noguardar(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] != 20) return 1;
	if(dontsave) {
	    dontsave = false;
	}
	else {
		dontsave = true;
	}
	return 1;
}*/

CMD:payday(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 20) {
		PayDay(playerid);
	}
	return 1;
}

//====================COMANDOS DE COMUNICACION CON STAFF========================

CMD:duda(playerid,params[]) {
	new string[128], string2[128];
	if(sscanf(params, "s[128]", string)) SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /duda [texto]");
	else
	{
	    format(string2,sizeof(string2),"[Duda] (%d) %s: %s",playerid,GetPlayerNameEx(playerid),string);
        AdministratorMessage(COLOR_ADMINQUESTION, string2, 1);
        SendClientMessage(playerid,COLOR_RED,"La duda ha sido enviada, por favor sea paciente.");
	}
	return 1;
}

/*
CMD:reportar(playerid,params[])
{
	new id, string[128], reporttext[128], maskCode;
	if(sscanf(params,"us[128]", id, reporttext))
		return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8tC8} /reportar [ID/Jugador] [razón]");
	maskCode = (id - 155) / 15; // Hago la cuenta inversa para descodificar cual es la ID verdadera
	if(id == INVALID_PLAYER_ID && maskCode == INVALID_PLAYER_ID)
	    return SendClientMessage(playerid,COLOR_LIGHTYELLOW2,"{FF4600}[Error]:{C8C8C8} nombre incorrecto o el jugador no se encuentra conectado.");
	if(maskCode != INVALID_PLAYER_ID)
	{
	    if(isUsingMaskInSlot[playerid] != -1)
	    {
			format(string, sizeof(string), "[Reporte]: %s ha reportado a %s (ID:%d), razón: %s", GetPlayerNameEx(playerid), GetPlayerNameEx(maskCode), maskCode, reporttext);
			AdministratorMessage(COLOR_ADMINCMD, string, 1);
			format(string, sizeof(string), "Has reportado a %s (ID:%d), razón: %s", GetPlayerNameEx(maskCode), maskCode, reporttext);
			SendClientMessage(playerid, COLOR_WHITE, string);
		} else
	  		{
				format(string, sizeof(string), "[Reporte]: %s ha reportado a %s (ID:%d), razón: %s", GetPlayerNameEx(playerid), GetPlayerNameEx(id), id, reporttext);
				AdministratorMessage(COLOR_ADMINCMD, string, 1);
				format(string, sizeof(string), "Has reportado a %s (ID:%d), razón: %s", GetPlayerNameEx(id), id, reporttext);
				SendClientMessage(playerid, COLOR_WHITE, string);
			}
	} else
		{
			format(string, sizeof(string), "[Reporte]: %s ha reportado a %s (ID:%d), razón: %s", GetPlayerNameEx(playerid), GetPlayerNameEx(id), id, reporttext);
			AdministratorMessage(COLOR_ADMINCMD, string, 1);
			format(string, sizeof(string), "Has reportado a %s (ID:%d), razón: %s", GetPlayerNameEx(id), id, reporttext);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
	ReportLog(string);
	return 1;
}
*/

CMD:reportar(playerid,params[])
{
	new id, string[128], reporttext[128];
	if(sscanf(params,"us[128]", id, reporttext)) SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /reportar [ID/ParteDelNombre] [razón]");
	else
	{
		if(id != INVALID_PLAYER_ID)
	    {
			format(string, sizeof(string), "[Reporte]: %s ha reportado a %s (ID:%d), razón: %s", GetPlayerNameEx(playerid), GetPlayerNameEx(id), id, reporttext);
			AdministratorMessage(COLOR_ADMINCMD, string, 1);
			format(string, sizeof(string), "Has reportado a %s (ID:%d), razón: %s", GetPlayerNameEx(id), id, reporttext);
			SendClientMessage(playerid, COLOR_WHITE, string);
			ReportLog(string);
		}
		else
		{
		  	SendClientMessage(playerid,COLOR_LIGHTYELLOW2,"{FF4600}[Error]:{C8C8C8} nombre incorrecto o el jugador no se encuentra conectado.");
		}
	}
	return 1;
}

//===========================COMANDOS DE FACCIONES==============================

CMD:r(playerid, params[]) {
	cmd_radio(playerid, params);
	return 1;
}

CMD:radio(playerid, params[])
{
	new text[128], string[128], factionID = PlayerInfo[playerid][pFaction];

	if(factionID == 0)
	    return 1;
	if(sscanf(params, "s[128]", text))
		return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} (/r)adio [mensaje]");
	if(PlayerInfo[playerid][pRadio] == 0)
		return SendClientMessage(playerid, COLOR_YELLOW2, "No tienes una radio, vé y compra una en algún 24-7.");
	if(!RadioEnabled[playerid])
	    return SendClientMessage(playerid, COLOR_YELLOW2, "Tienes tu radio apagada.");
	if(Muted[playerid])
		return SendClientMessage(playerid, COLOR_RED, "{FF4600}[Error]:{C8C8C8} no puedes usar la radio, te encuentras silenciado.");

	PlayerActionMessage(playerid, 15.0, "toma una radio de su bolsillo y habla por ella.");
	if(isUsingMaskInSlot[playerid] == -1)
		format(string, sizeof(string), "%s dice por radio: %s", GetPlayerNameEx(playerid), text);
	else
	    format(string, sizeof(string), "Enmascarado dice por radio: %s", text);
	ProxDetector(15.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5, 0);
	format(string, sizeof(string), "[RADIO]: %s %s: %s", GetRankName(factionID, PlayerInfo[playerid][pRank]), GetPlayerNameEx(playerid), text);
	foreach(new i : Player)
	{
 		if(PlayerInfo[i][pFaction] == factionID && RadioEnabled[i] == 1 && PlayerInfo[i][pRadio] != 0)
   			SendClientMessage(i, COLOR_PMA, string);
	}
	FactionChatLog(string);
	return 1;
}

CMD:fac(playerid, params[]) {
	cmd_faccion(playerid, params);
	return 1;
}

CMD:faccion(playerid, params[])
{
	new text[128], param[64], param2[64], string[128], factionid;

	factionid = PlayerInfo[playerid][pFaction];
	if(factionid <= 0)
		return 1;
	if(sscanf(params, "s[128]S()[64]S()[64]", text, param, param2)) {
		SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} (/fac)cion [comando]");
		SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "Comandos: abandonar | conectados");
		if(FactionInfo[factionid][fType] == FAC_TYPE_ILLEGAL)
		    SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "Comandos extra: materiales");
		if(PlayerInfo[playerid][pRank] == 1) {
		    SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "Comandos de líder: invitar | expulsar | rango | vehiculos");
            SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "Recuerda que al ser el lider puedes estacionar los vehículos, y gestionar la cuenta bancaria de la facción.");
		}
		    
	} else if(strcmp(text,"abandonar",true) == 0) {
		SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "¡Has abandonado tu facción!");
		SetPlayerFaction(playerid, 0, 0);
		
	} else if(strcmp(text,"materiales",true) == 0) {
	    if(FactionInfo[factionid][fType] == FAC_TYPE_ILLEGAL)
			SendFMessage(playerid, COLOR_WHITE, "Tu HQ cuenta con %d piezas de armas.", FactionInfo[factionid][fMaterials]);

	} else if(strcmp(text,"conectados",true) == 0) {
	    SendFMessage(playerid, COLOR_LIGHTYELLOW2, "Miembros conectados [%s]:", FactionInfo[factionid][fName]);
	    foreach(new i : Player) {
	        if(PlayerInfo[i][pFaction] == factionid)
				SendFMessage(playerid, COLOR_WHITE, "* (%s) %s", GetRankName(factionid, PlayerInfo[i][pRank]), GetPlayerNameEx(i));
	    }
	    
	} else if(strcmp(text,"invitar",true) == 0) {
	    new targetid = ReturnUser(param);
		if(PlayerInfo[playerid][pRank] != 1)
			return 1;
		if(!strlen(param))
			return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} (/fac)cion invitar [ID/Jugador]");
		if(!IsPlayerConnected(targetid) || targetid == INVALID_PLAYER_ID || !gPlayerLogged[targetid])
		    return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{FF4600}[Error]:{C8C8C8} ID incorrecta o personaje no conectado.");
		if(PlayerInfo[targetid][pFaction] != 0)
		    return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{FF4600}[Error]:{C8C8C8} el personaje ya tiene una facción.");
        if(FactionInfo[factionid][fJoinRank] == 0)
            return SendClientMessage(playerid,COLOR_LIGHTYELLOW2,"{FF4600}[Error]:{C8C8C8} por favor configura el rango de ingreso/cantidad de rangos antes de continuar.");

		FactionRequest[targetid] = factionid;
		SendFMessage(targetid, COLOR_LIGHTBLUE, "Has sido invitado a la facción %s por %s. (/aceptar faccion - para ingresar).",FactionInfo[factionid][fName],GetPlayerNameEx(playerid));
		SendFMessage(playerid, COLOR_LIGHTBLUE, "Has invitado a %s a la facción %s.",GetPlayerNameEx(targetid),FactionInfo[factionid][fName]);
		return 1;
		
	} else if(strcmp(text,"expulsar",true) == 0) {
	    new targetid = ReturnUser(param);
		if(PlayerInfo[playerid][pRank] != 1)
			return 1;
		if(!strlen(param))
			return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} (/fac)cion expulsar [playerid/ParteDelNombre]");
		if(!IsPlayerConnected(targetid) || targetid == INVALID_PLAYER_ID || !gPlayerLogged[targetid])
		    return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{FF4600}[Error]:{C8C8C8} ID incorrecta o personaje no conectado.");
		if(PlayerInfo[targetid][pFaction] != PlayerInfo[playerid][pFaction])
		    return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{FF4600}[Error]:{C8C8C8} el personaje no pertenece a tu facción.");

		SetPlayerFaction(targetid, 0, 0);
		SendFMessage(targetid, COLOR_LIGHTBLUE, "Has sido expulsado de la facción %s por %s.", FactionInfo[factionid][fName], GetPlayerNameEx(playerid));
		SendFMessage(playerid, COLOR_LIGHTBLUE, "Has expulsado a %s de la facción %s.", GetPlayerNameEx(targetid), FactionInfo[factionid][fName]);
		return 1;
		
	} else if(strcmp(text,"rango",true) == 0) {
		new targetid = ReturnUser(param), rank = strval(param2);
		if(PlayerInfo[playerid][pRank] != 1)
			return 1;
		if(!strlen(param) || !strlen(param2))
			return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} (/fac)cion rango [playerid/ParteDelNombre] [rango]");
		if(PlayerInfo[targetid][pFaction] != factionid)
			return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{FF4600}[Error]:{C8C8C8} el personaje no pertenece a tu facción.");
		if(rank < 2 || rank > FactionInfo[factionid][fRankAmount]) {
			SendFMessage(playerid, COLOR_LIGHTYELLOW2, "{FF4600}[Error]:{C8C8C8} el rango no debe ser menor a 2 o mayor que %d.", FactionInfo[factionid][fRankAmount]);
			return 1;
		}
		if(!IsPlayerConnected(targetid) || targetid == INVALID_PLAYER_ID || !gPlayerLogged[targetid])
		    return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{FF4600}[Error]:{C8C8C8} ID incorrecta o personaje no conectado.");

		SetPlayerFaction(targetid, factionid, rank);
		SendFMessage(targetid, COLOR_LIGHTBLUE, "{878EE7}[INFO]:{C8C8C8} tu rango ha sido cambiado por %s, ahora eres %s.", GetPlayerNameEx(playerid), GetRankName(factionid, rank));
		SendFMessage(playerid, COLOR_YELLOW, "{878EE7}[INFO]:{C8C8C8} le has cambiado el rango de %s a %s.", GetPlayerNameEx(targetid), GetRankName(factionid, rank));
		format(string, sizeof(string), "[Facción]: %s es ahora %s.", GetPlayerNameEx(targetid), GetRankName(factionid, rank));
		SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_FACTIONCHAT, string);
		return 1;
		
	} else if(strcmp(text,"vehiculos",true) == 0) {
		if(PlayerInfo[playerid][pRank] != 1)
			return 1;
			
   		SendFMessage(playerid, COLOR_YELLOW, "===============|Vehiculos de facción: %s|===============", FactionInfo[factionid][fName]);
		for(new i=0; i<MAX_VEH; i++)
		{
		    if(VehicleInfo[i][VehFaction] == factionid)
		        SendFMessage(playerid, COLOR_ADMINCMD, "{878EE7}[INFO]:{C8C8C8} Vehiculo ID %d - Modelo %s", i, GetVehicleName(i));
		}
		SendClientMessage(playerid, COLOR_YELLOW, "====================================================================");
	}
	return 1;
}

CMD:g(playerid, params[]) {
	cmd_gritar(playerid, params);
	return 1;
}

CMD:gritar(playerid, params[]) {
	new
		text[128],
		string[128];

	if(sscanf(params, "s[128]", text)) {
		return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} (/g)ritar [texto]");
	} else {
		if(isUsingMaskInSlot[playerid] == -1)
			format(string, sizeof(string), "%s grita: ¡¡%s!!", GetPlayerNameEx(playerid), text);
		else
		    format(string, sizeof(string), "Enmascarado grita: ¡¡%s!!", text);
		ProxDetector(35.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
	}
	return 1;
}

CMD:verf(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 2) return 1;

	if(GetPVarInt(playerid, "fac") == 0) {
		SetPVarInt(playerid, "fac", 1);
		SendClientMessage(playerid, COLOR_WHITE, "Lector de faccion activado.");
		return 1;
	}
	if(GetPVarInt(playerid, "fac") == 1) {
		SetPVarInt(playerid, "fac", 0);
		SendClientMessage(playerid, COLOR_WHITE, "Lector de faccion desactivado.");
		return 1;
	}
	return 1;
}

CMD:f(playerid, params[])
{
	new text[128], string[128], faction = PlayerInfo[playerid][pFaction], rank = PlayerInfo[playerid][pRank];

	if(sscanf(params, "s[128]", text))
		return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /f [texto]");
	if(Muted[playerid])
		return SendClientMessage(playerid, COLOR_RED, "{FF4600}[Error]:{C8C8C8} te encuentras silenciado.");
	if(PlayerInfo[playerid][pFaction] == 0)
		return SendClientMessage(playerid, COLOR_YELLOW2, "No perteneces a ninguna facción.");
	if(!FactionEnabled[playerid])
        return SendClientMessage(playerid, COLOR_YELLOW2, "Tienes desactivado el chat OOC de la facción.");

	format(string, sizeof(string), "(( [%s] %s %s(%d): %s ))", FactionInfo[faction][fName], GetRankName(faction, rank), GetPlayerNameEx(playerid), playerid, text);
	foreach(new i : Player)
	{
 		if(PlayerInfo[i][pFaction] == faction && FactionEnabled[i] == 1)
   			SendClientMessage(i, COLOR_FACTIONCHAT, string);
		else // Para no spamear al admin con 2 veces el mismo mensaje
		{
			if(GetPVarInt(i, "fac") == 1)
				SendClientMessage(i, COLOR_GREEN, string);
		}
	}
	FactionChatLog(string);
	return 1;
}

CMD:checkinv(playerid, params[])
{
	new targetID;
	
	if(PlayerInfo[playerid][pAdmin] < 1)
		return 1;
	if(sscanf(params, "u", targetID))
		return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /checkinv [ID/Jugador]");
	if(targetID == INVALID_PLAYER_ID)
	    return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{FF4600}[Error]:{C8C8C8} ID de jugador incorrecta.");

	SendFMessage(playerid, COLOR_WHITE, "Usuario: %s (%d) - DBID: %d", GetPlayerNameEx(targetID), targetID, PlayerInfo[targetID][pID]);
	ShowInv(playerid, targetID);
	ShowPocket(playerid, targetID);
	return 1;
}

CMD:slap(playerid, params[]) {
	new
	    Float:pos[3],
	    Float:hp,
		target;
		
	if(PlayerInfo[playerid][pAdmin] < 1) return 1;
	if(sscanf(params, "u", target)) {
	    SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /slap [IDJugador/ParteDelNombre]");
	} else if(target != INVALID_PLAYER_ID) {
		GetPlayerHealthEx(target, hp);
		SetPlayerHealthEx(target, hp - 5);
		GetPlayerPos(target, pos[0], pos[1], pos[2]);
		SetPlayerPos(target, pos[0], pos[1], pos[2] + 5);
		PlayerPlaySound(target, 1130, pos[0], pos[1], pos[2] + 5);
	}
	return 1;
}

CMD:muteb(playerid, params[]) {
	new
	    string[128],
 		minutes,
		target;

	if(PlayerInfo[playerid][pAdmin] < 1) return 1;
	if(sscanf(params, "ui", target, minutes)) {
	    SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /muteb [IDJugador/ParteDelNombre] [minutos]");
	} else if(target != INVALID_PLAYER_ID) {
	    if(minutes > 30 || minutes < 0)
			return SendClientMessage(playerid, COLOR_YELLOW2, "No puedes mutear por menos de 0 minutos o más de 30.");
			
	    format(string, sizeof(string), "[Staff] el administrador %s ha muteado el canal '/b' de %s por %d minutos.", GetPlayerNameEx(playerid), GetPlayerNameEx(target), minutes);
	   	AdministratorMessage(COLOR_ADMINCMD, string, 1);
		PlayerInfo[target][pMuteB] = 60 * minutes;
	}
	return 1;
}

CMD:fly(playerid, params[]) {
	new
	    Float:fAngle,
	    Float:height,
	    Float:pos[3],
	    Float:dist;

	if(PlayerInfo[playerid][pAdmin] < 2) return 1;
	if(sscanf(params, "ff", dist, height)) {
	    SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /fly [distancia] [altura]");
	} else {
		GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	    GetPlayerFacingAngle(playerid, fAngle);
		pos[0] += dist * floatcos(fAngle - 270);
		pos[1] += dist * floatsin(fAngle - 270);
		SetPlayerPos(playerid, pos[0], pos[1], pos[2] + height);
		PlayerPlaySound(playerid, 1130, pos[0], pos[1], pos[2] + height);
	}
	return 1;
}

CMD:jetx(playerid,params[]) {
	if(PlayerInfo[playerid][pAdmin] < 3)
	    return 1;

    SetPlayerSpecialAction(playerid,2);
    return 1;
}

CMD:inv(playerid, params[]) {
	cmd_inventario(playerid, params);
	return 1;
}

CMD:inventario(playerid, params[]) {
	new
	    itemid,
	    param,
	    returnid,
	    text[128];

    if(sscanf(params, "s[128]I(-1)", text, returnid)) {
        SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} (/inv)entario [comando]");
        SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Comandos]:{C8C8C8} tomar [slot] - guardar [slot, opcional] - desechar - consumir [slot]");
		SendClientMessage(playerid, COLOR_WHITE, "======================[Inventario]======================");
	    for(new i = 0; i < INV_MAX_SLOTS; i++) {
	        itemid = getInvItem(playerid, i);
	        param = getInvParam(playerid, i);
	        if(getItemType(itemid) == ITEM_WEAPON) {
	        	SendFMessage(playerid, COLOR_WHITE, " - %d- Arma: %s - Munición: %d", i, itemName[itemid], param);
			} else if(getItemType(itemid) == ITEM_OTHER) {
                SendFMessage(playerid, COLOR_WHITE, " - %d- Item: %s - Cantidad: %d", i, itemName[itemid], param);
			} else {
			    SendFMessage(playerid, COLOR_WHITE, " - %d- Nada", i);
			}
	    }
    	SendClientMessage(playerid, COLOR_WHITE, "=====================================================");
    } else {
		if(strcmp(text, "tomar", true) == 0) {
		
	        if(getItemType(getInvItem(playerid, returnid)) == ITEM_WEAPON) {
	            GivePlayerWeapon(playerid, getInvItem(playerid, returnid), getInvParam(playerid, returnid));
				setInvItem(playerid, returnid, -1);
	        } else if(getInvItem(playerid, returnid) == 100) {
	            SendClientMessage(playerid, COLOR_YELLOW2, "Las partes de armas no pueden ser tomadas, deben ser ensambladas por alguien con experiencia.");
			} else {
	            SendClientMessage(playerid, COLOR_YELLOW2, "¡Item inválido o inexistente!");
	        }
	        
	    } else if(strcmp(text, "desechar", true) == 0) {
	    
	        if(PlayerInfo[playerid][pHealth] < 25.0)
	            return SendClientMessage(playerid, COLOR_LIGHTBLUE, "No puedes desechar un arma agonizando");
	        if(getItemType(getInvItem(playerid, returnid)) != ITEM_NONE) {
	        	new string[128];
      			format(string, sizeof(string), "ha desechado disimuladamente un/a %s.", itemName[getInvItem(playerid, returnid)]);
         		PlayerActionMessage(playerid, 8.0, string);
				setInvItem(playerid, returnid, -1);
	        } else {
	            SendClientMessage(playerid, COLOR_YELLOW2, "¡Item inválido o inexistente!");
	        }
	        
 		} else if(strcmp(text, "consumir", true) == 0) {

			if(getInvItem(playerid, returnid) == 52) {
	            PlayerActionMessage(playerid, 15.0, "saca un sandwich de su bolsillo y se lo come.");
	            PlayerEat(playerid, 40.0);
	            if(getInvParam(playerid, returnid) - 1 > 0)
	            	setInvParam(playerid, returnid, getInvParam(playerid, returnid) - 1);
				else
					setInvItem(playerid, returnid, -1);
	        } else
				if(getInvItem(playerid, returnid) == 53) {
		            PlayerActionMessage(playerid, 15.0, "saca un alfajor de su bolsillo y se lo come.");
		            PlayerEat(playerid, 15.0);
		            if(getInvParam(playerid, returnid) - 1 > 0)
		            	setInvParam(playerid, returnid, getInvParam(playerid, returnid) - 1);
					else
						setInvItem(playerid, returnid, -1);
				} else
					if(getInvItem(playerid, returnid) == 54) {
			            PlayerActionMessage(playerid, 15.0, "saca una botellita de agua de su bolsillo y se la toma.");
			            PlayerDrink(playerid, 50.0);
			            if(getInvParam(playerid, returnid) - 1 > 0)
			            	setInvParam(playerid, returnid, getInvParam(playerid, returnid) - 1);
						else
							setInvItem(playerid, returnid, -1);
					} else
  						SendClientMessage(playerid, COLOR_YELLOW2, "¡Item inválido o inexistente!");

	    } else if(strcmp(text, "guardar", true) == 0) {
	    
	        if(PlayerInfo[playerid][pHealth] < 25.0)
	            return SendClientMessage(playerid, COLOR_LIGHTBLUE, "No puedes guardar un arma agonizando");
			if(GetPVarInt(playerid, "cantSaveItems") == 1)
	    		return SendClientMessage(playerid, COLOR_YELLOW2, "¡Debes esperar un tiempo antes de volver a interactuar con otro item!");
			if((PlayerInfo[playerid][pFaction] == FAC_PMA && CopDuty[playerid]) || (PlayerInfo[playerid][pFaction] == FAC_SIDE && SIDEDuty[playerid]))
    			return SendClientMessage(playerid, COLOR_YELLOW2, "¡No puedes hacer esto en servicio!");
			new weaponID = GetPlayerWeapon(playerid);
   			if(weaponID != 1 && weaponID != 3 && weaponID != 4 && (weaponID < 10 || weaponID > 24) &&
				weaponID != 28 && weaponID != 32 && weaponID != 41 && weaponID != 43)
				return SendClientMessage(playerid, COLOR_YELLOW2, "¡Item inválido o inexistente!");

			new validslot;
			if(returnid == -1)
			{
				validslot = -1;
				for(new i = 0; i < INV_MAX_SLOTS; i++) {
    				if(getItemType(getInvItem(playerid, i)) == ITEM_NONE) {
						validslot = i;
						break;
				   	}
				}
				if(validslot == -1)
                    return SendClientMessage(playerid, COLOR_YELLOW2, "¡El inventario se encuentra lleno!");
       		} else
			   {
			        validslot = returnid;
			   		if(validslot < 0 || validslot >= INV_MAX_SLOTS)
					   	return SendClientMessage(playerid, COLOR_YELLOW2, "Slot inválido.");
		        	if(getItemType(getInvItem(playerid, validslot)) != ITEM_NONE)
		        	    return SendClientMessage(playerid, COLOR_YELLOW2, "Ya tienes un item en ese slot.");
				}
				
    		SetPVarInt(playerid, "cantSaveItems", 1);
			SetTimerEx("cantSaveItems", 4000, false, "i", playerid);
		    setInvItem(playerid, validslot, GetPlayerWeapon(playerid));
			setInvParam(playerid, validslot, GetPlayerAmmo(playerid));
			RemovePlayerWeapon(playerid, GetPlayerWeapon(playerid));
	    }
	}
	return 1;
}


//[CMD_OTROS]
CMD:cerrar(playerid, params[]) {
	for(new i = 1; i < MAX_BUILDINGS; i++) {
		if(PlayerToPoint(1.0, playerid, Building[i][blOutsideX], Building[i][blOutsideY], Building[i][blOutsideZ]) || PlayerToPoint(1.0, playerid, Building[i][blInsideX], Building[i][blInsideY], Building[i][blInsideZ])) {
			if(Building[i][blFaction] != 0 && PlayerInfo[playerid][pFaction] == Building[i][blFaction]) {
				if(Building[i][blLocked] == 0) {
				    Building[i][blLocked] = 1;
				    GameTextForPlayer(playerid, "Puertas cerradas", 2000, 4);
				    PlayerActionMessage(playerid, 15.0, "toma un manojo de llaves de su bolsillo y cierra la puerta.");
    			}
			} else {
				GameTextForPlayer(playerid, "~r~No tienes las llaves", 2000, 4);
			}
		}
	}
	return 1;
}

CMD:abrir(playerid, params[]) {
	for(new i = 1; i < MAX_BUILDINGS; i++) {
		if(PlayerToPoint(1.0, playerid, Building[i][blOutsideX], Building[i][blOutsideY], Building[i][blOutsideZ]) || PlayerToPoint(1.0, playerid, Building[i][blInsideX], Building[i][blInsideY], Building[i][blInsideZ])) {
			if(Building[i][blFaction] != 0 && PlayerInfo[playerid][pFaction] == Building[i][blFaction]) {
				if(Building[i][blLocked] == 1) {
				    Building[i][blLocked] = 0;
				    GameTextForPlayer(playerid, "Puertas abiertas", 2000, 4);
				    PlayerActionMessage(playerid, 15.0, "toma un manojo de llaves de su bolsillo y abre la puerta.");
    			}
			} else {
				GameTextForPlayer(playerid, "~r~No tienes las llaves", 2000, 4);
			}
		}
	}
	return 1;
}

CMD:ultveh(playerid, params[]) {
	new
		string[128];

	format(string, sizeof(string), "Ultimo vehículo: %d", LastVeh[playerid]);
	SendClientMessage(playerid, COLOR_YELLOW2, string);
	return 1;
}

CMD:ayuda(playerid,params[]) {

    SendClientMessage(playerid, COLOR_YELLOW, " ");
    SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{FFDD00}[Administración]:{C8C8C8} /reportar /duda");
	SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{FFDD00}[General]:{C8C8C8} /stats /hora /animaciones /dar /comprar /clasificado /pagar /id /admins");
	SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{FFDD00}[General]:{C8C8C8} /mostrardoc /mostrarlic /mostrarced (/inv)entario (/bol)sillo /aceptar /llenar /changepass");
	SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{FFDD00}[General]:{C8C8C8} /donar /bidon /dardroga /consumir /desafiarpicada /comprarmascara /mascara");
	SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{FFDD00}[Chat]:{C8C8C8} /mp /vb /local (/g)ritar /susurrar /me /do /intentar /gooc /toggle");
	SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{FFDD00}[Teléfono]:{C8C8C8} /llamar /servicios /atender /colgar /sms /numero");
	SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{FFDD00}[Propiedades]:{C8C8C8} /ayudacasa /ayudanegocio /ayudabanco /ayudacajero");
	SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{FFDD00}[Vehículo]:{C8C8C8} /motor (/veh)iculo /maletero (/cin)turón (/cas)co /emisora /sacar /ventanillas");

    if(PlayerInfo[playerid][pFaction] != 0)
	{
    	SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{FFDD00}[Facción]:{C8C8C8} /f /faccion /fdepositar");
		if(PlayerInfo[playerid][pFaction] == FAC_PMA) {
		    SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{FFDD00}[PMA]:{C8C8C8} /ayudap /gobierno /departamento");

		} else if(PlayerInfo[playerid][pFaction] == FAC_SIDE) {
 	   		SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{FFDD00}[S.I.D.E.]:{C8C8C8} /servicio /chaleco /equipo /ropero /esposar /quitaresposas /revisar /tomartazer /quitar");
			SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{FFDD00}[S.I.D.E.]:{C8C8C8} /guardartazer /arrastrar (/ref)uerzos /vercargos /buscados (/r)adio (/d)epartamento /porton");
			if(PlayerInfo[playerid][pRank] == 1) {
		    	SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{FFDD00}[Líder]:{C8C8C8} /stars");
			}

		} else if(PlayerInfo[playerid][pFaction] == FAC_HOSP) {
		    SendClientMessage(playerid,COLOR_LIGHTYELLOW2,"{FFDD00}[HMA]:{C8C8C8} /mservicio /gobierno /departamento /ultimallamada /curar /rehabilitar");

		} else if(PlayerInfo[playerid][pFaction] == FAC_MECH) {
			SendClientMessage(playerid,COLOR_LIGHTYELLOW2,"{FFDD00}[Taller Mercury]:{C8C8C8} /equipomec /reparar /remolcar (/pt)unear /tunear /tuning /destunear");

		} else if(PlayerInfo[playerid][pFaction] == FAC_MAN) {
			SendClientMessage(playerid,COLOR_LIGHTYELLOW2,"{FFDD00}[CTR-MAN]:{C8C8C8} /noticia /entrevistar");

		} else if(FactionInfo[PlayerInfo[playerid][pFaction]][fType] == FAC_TYPE_GANG) {
			if(PlayerInfo[playerid][pRank] == 1) {
		        SendClientMessage(playerid,COLOR_LIGHTYELLOW2,"{FFDD00}[Líder]:{C8C8C8} /tomarbarrio");
		    }

		} else if(FactionInfo[PlayerInfo[playerid][pFaction]][fType] == FAC_TYPE_ILLEGAL) {
		    if(PlayerInfo[playerid][pRank] == 1) {
		        SendClientMessage(playerid,COLOR_LIGHTYELLOW2,"{FFDD00}[Líder]:{C8C8C8} /comprar (en el shop de materiales) /descargar /ensamblar (dentro del HQ) /ch /it /ru");
		    } else {
		        SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{FFDD00}[Miembro]:{C8C8C8} /comprar (en el shop de materiales) /descargar /ch /it /ru");
		    }
		}
	}

	if(PlayerInfo[playerid][pJob] == JOB_FELON) {
        SendClientMessage(playerid,COLOR_LIGHTYELLOW2,"{FFDD00}[Delincuente]:{C8C8C8} /delincuenteayuda /dejarempleo");
	} else if(PlayerInfo[playerid][pJob] == JOB_DRUGD) {
        SendClientMessage(playerid,COLOR_LIGHTYELLOW2,"{FFDD00}[Narcotraficante]:{C8C8C8} /comenzar /comprar /dardroga /dejarempleo");
	} else {
		SendClientMessage(playerid,COLOR_LIGHTYELLOW2,"{FFDD00}[Empleo]:{C8C8C8} /tomarempleo /dejarempleo /trabajar /terminar");
	}
	return 1;
}

CMD:hora(playerid, params[]) {
	new
	    mText[32],
	    string[128],
	    time[3],
		date[3];

	gettime(time[0], time[1], time[2]);
	getdate(date[0], date[1], date[2]);

	switch(date[1]) {
		case 1:	mText = "Enero";
		case 2:	mText = "Febrero";
		case 3:	mText = "Marzo";
		case 4:	mText = "Abril";
		case 5:	mText = "Mayo";
		case 6:	mText = "Junio";
		case 7:	mText = "Julio";
		case 8:	mText = "Agosto";
		case 9:	mText = "Septiembre";
		case 10: mText = "Octubre";
		case 11: mText = "Noviembre";
		case 12: mText = "Diciembre";
	}

	if(time[1] < 10) {
		format(string, sizeof(string), "La hora actual es %d:0%d:%d del día %d de %s del %d. {5CACC8}Próximo Día de Pago en %d minutos.", time[0], time[1], time[2], date[2], mText, date[0], 60 - (GetPVarInt(playerid, "pPayTime") / 60));
	} else {
		format(string, sizeof(string), "La hora actual es %d:%d:%d del día %d de %s del %d. {5CACC8}Próximo Día de Pago en %d minutos.", time[0], time[1], time[2], date[2], mText, date[0], 60 - (GetPVarInt(playerid, "pPayTime") / 60));
	}
	PlayerActionMessage(playerid, 15.0, "toma su reloj y se fija la hora");
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}

CMD:servicios(playerid, params[]) {
    SendClientMessage(playerid,COLOR_LIGHTYELLOW2,"Emergencias: 911 | Taller mecánico: 555 | Taxi: 444 | Radio CTR-MAN: sms al 3900");
    return 1;
}

CMD:atender(playerid, params[]) {
	if(Mobile[playerid] != 255) {
		SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{FF4600}[Error]:{C8C8C8} ya te encuentras en una llamada, /colgar para colgar.");
		return 1;
	}
	if(eventStep[playerid] == 1) {
	    SendClientMessage(playerid, COLOR_FADE1, "Anónimo dice: nos han llegado nuevas partes, ¿deseas ir a recogerlas? recibirás además $1000 en mano.");
	    Mobile[playerid] = NUM_MISSION;
	    KillTimer(GetPVarInt(playerid, "eventStepTimer"));
	    return 1;
	}
	foreach(new i : Player) {
		if(Mobile[i] == playerid) {
			Mobile[playerid] = i;
			SendClientMessage(i, COLOR_YELLOW2, "Han atendido tu llamada...");
			if(!IsPlayerInAnyVehicle(playerid)) {
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
			}
			PlayerActionMessage(playerid, 15.0, "ha atendido a un llamado telefónico.");
		}
	}
	return 1;
}

CMD:sms(playerid, params[])
	return cmd_msg(playerid, params);

CMD:msg(playerid, params[]) {
	new
		phonenumber,
		string[128],
		text[128];

	if(sscanf(params, "ds[128]", phonenumber, text)) SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /msg [número telefónico] [texto]");
	else {
		if(PlayerInfo[playerid][pPhoneNumber] == 0) {
			SendClientMessage(playerid, COLOR_YELLOW2, "¡No tienes un teléfono celular! consigue uno en un 24/7.");
			return 1;
		}
		if(GetPlayerCash(playerid) >= PRICE_TEXT) {
			PlayerActionMessage(playerid,15.0,"toma su teléfono celular y comienza a escribir un mensaje.");
			if(phonenumber == 3900)
			{
			    SendClientMessage(playerid, COLOR_WHITE, "Telefonista: gracias por comunicarte con CTR-MAN, tu mensaje será recibido.");
			    foreach(new i : Player)
			    {
			        if(PlayerInfo[i][pFaction] == FAC_MAN)
			            SendFMessage(i, COLOR_WHITE, "[Nuevo mensaje a la radio de %d]: %s", PlayerInfo[playerid][pPhoneNumber], text);
			    }
			    return 1;
			}
			foreach(new i : Player) {
				if(PlayerInfo[i][pPhoneNumber] == phonenumber && phonenumber != 0) {
					if(IsPlayerConnected(i) && i != INVALID_PLAYER_ID) {
				        if(PhoneOnline[i]) {
				            SendClientMessage(playerid, COLOR_YELLOW2, "El teléfono al que te quieres contactar no se encuentra en servicio.");
				            return 1;
				        }
				        SendClientMessage(playerid, COLOR_YELLOW2, "Mensaje de texto enviado.");
						format(string, sizeof(string), "SMS de %d: %s", PlayerInfo[playerid][pPhoneNumber],text);
						SendClientMessage(i,COLOR_LIGHTGREEN, string);
						format(string, sizeof(string), "SMS para %d: %s", PlayerInfo[i][pPhoneNumber],text);
						SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
						PhoneAnimation(playerid);
						SMSLog(string);
						GivePlayerCash(playerid, -PRICE_TEXT);
						Business[PlayerInfo[playerid][pPhoneC]][bTill] += PRICE_TEXT;
						return 1;
					}
				}
			}
		}
		SendClientMessage(playerid, COLOR_YELLOW2, "El mensaje no ha podido ser enviado (puede que no tengas dinero o que el jugador no se encuentre conectado).");
	}
	return 1;
}

CMD:colgar(playerid, params[]) {
	new
		caller = Mobile[playerid];

	if(IsPlayerConnected(caller) && caller != INVALID_PLAYER_ID && caller != 255) {
		if(eventStep[playerid] == 1) {
		    PlayerActionMessage(playerid, 15.0, "guarda su teléfono celular en el bolsillo.");
		    eventStep[playerid] = 0;
		    return 1;
		}
		if(caller < 255) {
		    PlayerDoMessage(playerid, 15.0, "Han colgado...");
		    PlayerDoMessage(caller, 15.0, "Han colgado...");
			if(!IsPlayerInAnyVehicle(playerid)) {
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
			}
			if(!IsPlayerInAnyVehicle(caller)) {
				SetPlayerSpecialAction(caller, SPECIAL_ACTION_STOPUSECELLPHONE);
			}
			PlayerActionMessage(playerid,15.0,"guarda su teléfono celular en el bolsillo.");
			PlayerActionMessage(caller,15.0,"guarda su teléfono celular en el bolsillo.");
			Mobile[caller] = 255;
			if(StartedCall[playerid]) {
			    //TODO: Implementar tiempo de llamada
				new callcost = random(PRICE_CALL);
				GivePlayerCash(playerid,-callcost);
				Business[PlayerInfo[playerid][pPhoneC]][bTill] += callcost;
				StartedCall[playerid] = 0;
			}
			else if(StartedCall[caller]) {
			    //TODO: Implementar tiempo de llamada
				new callcost = random(PRICE_CALL);
				GivePlayerCash(caller,-callcost);
				Business[PlayerInfo[caller][pPhoneC]][bTill] += callcost;
				StartedCall[caller] = 0;
			}
		}
		Mobile[playerid] = 255;
		return 1;
	}
	return 1;
}


CMD:llamar(playerid, params[]) {
	new
		workers,
  	    number;

    if(sscanf(params, "d", number)) SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /llamar [número de teléfono]");
	else {
		if(PlayerInfo[playerid][pPhoneNumber] == 0) {
			SendClientMessage(playerid, COLOR_YELLOW2, "¡No puedes realizar una llamada si no tienes un teléfono!");
			return 1;
		}
		if(Mobile[playerid] != 255) {
			SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{FF4600}[Error]:{C8C8C8} ya te encuentras en una llamada.");
			return 1;
		}
		PlayerActionMessage(playerid,15.0,"toma un teléfono celular de su bolsillo y marca un número.");
		// ----
		if(number == 911) {
			SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "Emergencias: ¿que servicio solicita, policia o paramedico?");
			Mobile[playerid] = 911;
			return 1;
		}
		if(number == 555) {
			foreach(new i : Player) {
				if(PlayerInfo[i][pFaction] == FAC_MECH && jobDuty[i]) {
					workers++;
				}
			}
			if(workers < 1) {
			    SendClientMessage(playerid, COLOR_WHITE, "Telefonista: lo sentimos, no hay mecanicos disponibles por el momento.");
			    return 1;
			}
			SendClientMessage(playerid, COLOR_WHITE, "Telefonista: taller mecánico de Malos Aires, ¿en qué le podemos ayudar?");
			Mobile[playerid] = 555;
			return 1;
		}
		if(number == 444) {
		    if(jobDuty[playerid] && PlayerInfo[playerid][pJob] == JOB_TAXI) {
			    SendClientMessage(playerid, COLOR_YELLOW2, "¡No puedes hacerlo mientras te encuentras en servicio como taxista!");
			    return 1;
		    }
			foreach(new i : Player) {
				if(PlayerInfo[i][pJob] == JOB_TAXI && jobDuty[i]) {
					workers++;
				}
			}
			if(workers < 1) {
			    SendClientMessage(playerid, COLOR_WHITE, "Telefonista: lo sentimos, no hay vehículos disponibles por el momento.");
			    return 1;
			}
			SendClientMessage(playerid, COLOR_WHITE, "Telefonista: transporte urbano de Malos Aires, ¿en qué le podemos ayudar?");
			Mobile[playerid] = 444;
			return 1;
		}
		if(number == PlayerInfo[playerid][pPhoneNumber]) {
			SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{FF4600}[Error]:{C8C8C8} la línea está siendo utilizada.");
			return 1;
	    }
	    // ----
		foreach(new giveplayerid : Player) {
			if(PlayerInfo[giveplayerid][pPhoneNumber] == number && number != 0) {
				Mobile[playerid] = giveplayerid; //caller connecting
				if(!IsPlayerConnected(giveplayerid) || giveplayerid == INVALID_PLAYER_ID) {
					SendClientMessage(playerid, COLOR_WHITE, "Operadora dice: no se ha podido contactar el número que ha marcado.");
					return 1;
				}
		        if(PhoneOnline[giveplayerid] || PlayerInfo[giveplayerid][pSpectating] != INVALID_PLAYER_ID) {
		            SendClientMessage(playerid, COLOR_WHITE, "Operadora dice: el teléfono al que intenta comunicarse se encuentra fuera de línea.");
		            return 1;
		        }
				if(Mobile[giveplayerid] == 255) {
					PlayerDoMessage(giveplayerid, 15.0, "Un teléfono ha comenzado a sonar.");
					SendFMessage(giveplayerid, COLOR_WHITE, "Tienes una llamada del %d, utiliza /atender o /colgar.", PlayerInfo[playerid][pPhoneNumber]);
                    StartedCall[playerid] = 1;
                    StartedCall[giveplayerid] = 0;
                    if(!IsPlayerInAnyVehicle(playerid)) {
                    	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
                    }
					return 1;
				}
			}
		}
	}
	return 1;
}

CMD:numero(playerid, params[]) {
	new
	    targetID;

    if(sscanf(params, "u", targetID)) SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /numero [playerid/ParteDelNombre]");
	else if(PlayerInfo[playerid][pPhoneBook] == 1) {
	    if(!IsPlayerConnected(targetID) || targetID == INVALID_PLAYER_ID || !gPlayerLogged[targetID]) {
	        SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{FF4600}[Error]:{C8C8C8} ID de jugador incorrecta o no ha iniciado sesión.");
	        return 1;
	    }
	    PlayerActionMessage(playerid, 15.0, "toma su guia telefónica y busca el número de una persona.");
 		if(PlayerInfo[targetID][pListNumber] == 0 || PlayerInfo[targetID][pPhoneNumber] == 0) {
            PlayerDoMessage(playerid, 15.0, "El número buscado no se encuentra en la guía.");
			return 1;
		}
		SendFMessage(playerid, COLOR_WHITE, "Nombre: %s, número de teléfono: %d.", GetPlayerNameEx(targetID), PlayerInfo[targetID][pPhoneNumber]);
	} else {
		SendClientMessage(playerid, COLOR_YELLOW2, "¡Debes tener una guía telefónica!");
		return 1;
	}
	return 1;
}

CMD:comprar(playerid, params[]) {
	new
	    title[64],
	    content[400],
	    weapon,
	    realWeapon,
	    ammo,
	    business = GetPlayerBusiness(playerid);

	if(GetPVarInt(playerid, "disabled") != DISABLE_NONE)
	    return SendClientMessage(playerid, COLOR_YELLOW2, "No puedes hacerlo en este momento.");

	if(business != 0 && Business[business][bType] == BIZ_247) {
	    if(Business[business][bProducts] <= 0)
     		return SendClientMessage(playerid, COLOR_YELLOW2, "El negocio no tiene stock de productos. Intenta volviendo mas tarde");
		format(title, sizeof(title), "%s", Business[business][bName]);
		format(content, sizeof(content), "{FFEFD5}Aspirina {556B2F}$%d\n{FFEFD5}Alfajor {556B2F}$%d\n{FFEFD5}Cigarrillos 5u. {556B2F}$%d\n{FFEFD5}Encendedor {556B2F}$%d\n{FFEFD5}Teléfono {556B2F}$%d\n{FFEFD5}Guía telefónica {556B2F}$%d\n{FFEFD5}Bidón de combustible vacío {556B2F}$%d\n{FFEFD5}Cámara (35 fotos) {556B2F}$%d\n{FFEFD5}Sandwich {556B2F}$%d\n{FFEFD5}Agua Mineral {556B2F}$%d\n{FFEFD5}Radio Walkie Talkie {556B2F}$%d",
            PRICE_ASPIRIN,
			PRICE_ALFAJOR,
			PRICE_CIGARETTES,
			PRICE_LIGHTER,
			PRICE_PHONE,
			PRICE_PHONEBOOK,
			PRICE_FUELCAN,
			PRICE_CAMERA,
			PRICE_SANDWICH,
			PRICE_WATERBOTTLE,
			PRICE_RADIO
		);
        TogglePlayerControllable(playerid, false);
        ShowPlayerDialog(playerid, DLG_247, DIALOG_STYLE_LIST, title, content, "Comprar", "Cerrar");
	} else if(business != 0 && Business[business][bType] == BIZ_PHON) {
	    TogglePlayerControllable(playerid, false);
		ShowMenuForPlayer(phoneMenu, playerid);
	} else if(business != 0 && Business[business][bType] == BIZ_AMMU) {
	    if(PlayerInfo[playerid][pWepLic]) {
	        if(Business[business][bProducts] <= 0)
				return SendClientMessage(playerid, COLOR_YELLOW2, "El negocio no tiene stock de productos. Intenta volviendo mas tarde");
			if(sscanf(params, "dd", weapon, ammo)) {
				SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /comprar [número] [balas]");
				SendFMessage(playerid, COLOR_LIGHTYELLOW2, " 1 - Pistola 9mm. - $%d por munición", itemPrice[22]);
				SendFMessage(playerid, COLOR_LIGHTYELLOW2, " 2 - Desert Eagle - $%d por munición", itemPrice[24]);
				SendFMessage(playerid, COLOR_LIGHTYELLOW2, " 3 - Escopeta - $%d por munición", itemPrice[25]);
				SendFMessage(playerid, COLOR_LIGHTYELLOW2, " 4 - Rifle de caza - $%d por munición", itemPrice[33]);
			} else if(weapon >= 1 && weapon <= 4) {
				if(ammo > 0 && ammo <= 900) {
				    switch(weapon)
					{
						case 1: realWeapon = 22;
						case 2: realWeapon = 24;
						case 3: realWeapon = 25;
						case 4: realWeapon = 33;
				    }
				    new totalPrice = itemPrice[realWeapon] * ammo;
			        if(GetPlayerCash(playerid) < totalPrice)
			        {
			            SendFMessage(playerid, COLOR_YELLOW2, "No tienes el dinero suficiente, necesitas $%d.", totalPrice);
						return 1;
					}
					GivePlayerWeapon(playerid, realWeapon, ammo);
				    GivePlayerCash(playerid, -totalPrice);
				    new string[128];
				    format(string, sizeof(string), "ha comprado un/a %s con %d municiones a un total de $%d.", itemName[realWeapon], ammo, totalPrice);
				    PlayerActionMessage(playerid, 15.0, string);
					Business[business][bTill] += totalPrice / 2; // la mitad para evitar abusos de sacar armas gratis para el dueño
					Business[business][bProducts]--;
					saveBusiness(business);
				} else {
			    	SendClientMessage(playerid, COLOR_YELLOW2, "No puedes comprar menos de 1 bala ni más de 900.");
				}
			} else {
			    SendClientMessage(playerid, COLOR_YELLOW2, "Número de arma incorrecto, solo puedes de 1 a 4.");
			}
		} else {
		    SendClientMessage(playerid, COLOR_YELLOW2, "No tienes una licencia de portación de armas.");
		}

	} else if(business != 0 && (Business[business][bType] == BIZ_CLOT || Business[business][bType] == BIZ_CLOT2)) {
	    if(Business[business][bProducts] <= 0)
     		return SendClientMessage(playerid, COLOR_YELLOW2, "El negocio no tiene stock de productos. Intenta volviendo mas tarde");
	    new skintype;
   		TogglePlayerControllable(playerid, false);
		DestroySelectionMenu(playerid);
	    SetPVarInt(playerid, "skinc_active", 1);
		if(Business[business][bType] == BIZ_CLOT)
		{
			if(PlayerInfo[playerid][pSex] == 1)
		    	skintype = 1;
			else
				skintype = 3;
		} else
  			if(Business[business][bType] == BIZ_CLOT2)
    		{
    			if(PlayerInfo[playerid][pSex] == 1)
		    		skintype = 2;
				else
					skintype = 4;
		    }
        CreateSelectionMenu(playerid, skintype);
	    SelectTextDraw(playerid, 0xACCBF1FF);

    } else if(business != 0 && Business[business][bType] == BIZ_HARD) {
        if(sscanf(params, "i", weapon))
		{
			SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /comprar [número]");
			SendFMessage(playerid, COLOR_LIGHTYELLOW2, " 1) Nudillos - $%d          6) Palo de pool - $%d", itemPrice[1], itemPrice[7]);
			SendFMessage(playerid, COLOR_LIGHTYELLOW2, " 2) Pala - $%d				7) Consolador - $%d", itemPrice[6], itemPrice[11]);
			SendFMessage(playerid, COLOR_LIGHTYELLOW2, " 3) Baston - $%d 			8) Consolador doble punta - $%d", itemPrice[15], itemPrice[10]);
			SendFMessage(playerid, COLOR_LIGHTYELLOW2, " 4) Palo de golf - $%d		9) Vibrador - $%d", itemPrice[2], itemPrice[12]);
			SendFMessage(playerid, COLOR_LIGHTYELLOW2, " 5) Bate - $%d				10) Vibrador plateado - $%d", itemPrice[5], itemPrice[13]);
			return 1;
		}
		if(Business[business][bProducts] < 1)
		    return SendClientMessage(playerid, COLOR_YELLOW2, "El negocio se ha quedado sin stock, vuelve mas tarde.");
		if(weapon < 1 || weapon > 10)
			return SendClientMessage(playerid, COLOR_YELLOW2, "Ingresa un numero de opcion válido.");
        switch(weapon)
		{
			case 1: realWeapon = 1;
			case 2: realWeapon = 6;
			case 3: realWeapon = 15;
			case 4: realWeapon = 2;
			case 5: realWeapon = 5;
			case 6: realWeapon = 7;
			case 7: realWeapon = 11;
			case 8: realWeapon = 10;
			case 9: realWeapon = 12;
			case 10: realWeapon = 13;
	    }
	    if(GetPlayerCash(playerid) < itemPrice[realWeapon])
	        return SendClientMessage(playerid, COLOR_YELLOW2, "No tienes el dinero en efectivo suficiente.");
		GivePlayerCash(playerid, -itemPrice[realWeapon]);
		GivePlayerWeapon(playerid, realWeapon, 1);
		Business[business][bTill] += itemPrice[realWeapon];
		Business[business][bProducts] --;
		saveBusiness(business);
		format(content, sizeof(content), "le paga al vendedor y compra un/a %s por un total de $%d.", itemName[realWeapon], itemPrice[realWeapon]);
		PlayerActionMessage(playerid, 15.0, content);

	} else if(business == 0) {
		if(PlayerToPoint(4.0, playerid, 2333.2856, -1948.3102, 13.5783)) {
			if(PlayerInfo[playerid][pJob] == JOB_DRUGD) {
			    /* Tengo que optimizar y reescribir todo este código. */
				new
				    amount,
					type,
					vehicleid = GetPlayerVehicleID(playerid);

		        if(!IsPlayerInAnyVehicle(playerid))
		            return SendClientMessage(playerid, COLOR_YELLOW2, "¡Debes estar en un vehículo!");

		        if(VehicleInfo[vehicleid][VehType] != VEH_OWNED && VehicleInfo[vehicleid][VehType] != VEH_FACTION)
		            return SendClientMessage(playerid, COLOR_YELLOW2, "Debes estar en un vehículo con dueño o de facción.");

				if(sscanf(params, "dd", type, amount)) {
	                SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /comprar [tipo] [cant de bolsas de mat. prima a canjear]");
			        SendClientMessage(playerid, COLOR_YELLOW2, "1: marihuana    -    5 grs. por cada bolsa de materia prima.");
			        SendClientMessage(playerid, COLOR_YELLOW2, "2: LSD   	           -    4 grs. por cada bolsa de materia prima.");
			        SendClientMessage(playerid, COLOR_YELLOW2, "3: éxtasis          -    3 grs. por cada bolsa de materia prima.");
			        SendClientMessage(playerid, COLOR_YELLOW2, "4: cocaína         -    2 grs. por cada bolsa de materia prima.");
			    } else if(type >= 1 && type <= 4) {
			        if(amount <= 0 || amount > 50)
			            return SendClientMessage(playerid, COLOR_YELLOW2, "La cantidad de bolsas a canjear no debe ser menor a 0 o mayor a 50.");

					new
						param,
						result = -1;

					for(new i = 0; i < GetVehicleMaxTrunkSlots(vehicleid); i++)
					{
					    if(getTrunkItem(vehicleid, i) == 49)
						{
							param += getTrunkParam(vehicleid, i);
							if(param == amount || amount > param)
							{
							    setTrunkItemAndParam(vehicleid, i, 0, 0);
							    result = param;
							    break;
							} else
								if(param > amount)
								{
		    						param -= amount;
		    						setTrunkItemAndParam(vehicleid, i, 49, param); // Crea el nuevo
							    	result = amount;
							    	break;
								}
					    }
					}

					if(result <= 0)
					    return SendClientMessage(playerid, COLOR_YELLOW2, "No tienes suficiente materia prima.");

					switch(type) {
					    case 1: {
							PlayerInfo[playerid][pMarijuana] += 5 * result;
							SendFMessage(playerid, COLOR_LIGHTBLUE, "Has comprado %d gramos de marihuana por %d bolsas de materia prima.", 5 * result, result);
						}
					    case 2: {
							PlayerInfo[playerid][pLSD] += 4 * result;
							SendFMessage(playerid, COLOR_LIGHTBLUE, "Has comprado %d dosis de LSD por %d bolsas de materia prima.", 4 * result, result);
						}
					    case 3: {
							PlayerInfo[playerid][pEcstasy] += 3 * result;
							SendFMessage(playerid, COLOR_LIGHTBLUE, "Has comprado %d dosis de éxtasis por %d bolsas de materia prima.", 3 * result, result);
					    }
						case 4: {
							PlayerInfo[playerid][pCocaine] += 2 * result;
							SendFMessage(playerid, COLOR_LIGHTBLUE, "Has comprado %d gramos de cocaína por %d bolsas de materia prima.", 2 * result, result);
						}
     				}
			    } else {
			        SendClientMessage(playerid, COLOR_YELLOW2, "Tipo inválido, elige uno de los siguientes:");
			        SendClientMessage(playerid, COLOR_YELLOW2, "1: marihuana    -    5 grs. por cada bolsa de materia prima.");
			        SendClientMessage(playerid, COLOR_YELLOW2, "2: LSD   	           -    4 grs. por cada bolsa de materia prima.");
			        SendClientMessage(playerid, COLOR_YELLOW2, "3: éxtasis          -    3 grs. por cada bolsa de materia prima.");
			        SendClientMessage(playerid, COLOR_YELLOW2, "4: cocaína         -    2 grs. por cada bolsa de materia prima.");
			    }
			}

	 	} else if(PlayerToPoint(4.0, playerid,	JOB_DRUGF_POS[sizeof(JOB_DRUGF_POS) - 1][0], JOB_DRUGF_POS[sizeof(JOB_DRUGF_POS) - 1][1], JOB_DRUGF_POS[sizeof(JOB_DRUGF_POS) - 1][2])) {
		    if(PlayerInfo[playerid][pJob] == JOB_DRUGD) {
		        new vehicleid = GetPlayerVehicleID(playerid), amount;
		        if(!IsPlayerInAnyVehicle(playerid))
		            return SendClientMessage(playerid, COLOR_YELLOW, "¡Debes estar en un vehículo!");

		        if(VehicleInfo[vehicleid][VehType] != VEH_OWNED && VehicleInfo[vehicleid][VehType] != VEH_FACTION)
		            return SendClientMessage(playerid, COLOR_YELLOW, "Debes estar en un vehículo con dueño o de facción.");

                if(sscanf(params, "d", amount)) {
	                SendFMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /comprar [cantidad] | $%d la unidad.", PRICE_DRUG_MAT);
			    } else {
			        if(amount <= 0 || amount > 50)
			            return SendClientMessage(playerid, COLOR_YELLOW2, "La cantidad de bolsas de materia prima no debe ser menor a 0 o mayor a 50.");

			        if(GetPlayerCash(playerid) < amount * PRICE_DRUG_MAT) {
			            SendFMessage(playerid, COLOR_YELLOW2, "No tienes el dinero suficiente, necesitas $%d.", amount * PRICE_DRUG_MAT);
			            return 1;
			        }
			        GivePlayerCash(playerid, -amount * PRICE_DRUG_MAT);
					SetPVarInt(playerid, "buyDrugsTimer", SetTimerEx("buyDrugsTimer", 4000, false, "ii", playerid, amount));
				    TogglePlayerControllable(playerid, false);
					GameTextForPlayer(playerid, "Cargando vehiculo...", 4000, 4);
			    }
		    }

		} else if(PlayerToPoint(4.0, playerid, 2183.9963, -2260.7658, 13.4098)) {
  			new amount;
		    if(sscanf(params, "i", amount))
		    {
	            SendFMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /comprar [cantidad] | $%d el producto.", PRICE_BIZ_PROD);
				return 1;
			}
			if(!IsPlayerInAnyVehicle(playerid))
		    	return SendClientMessage(playerid, COLOR_YELLOW, "¡Debes estar en un vehículo!");
			new vehicleid = GetPlayerVehicleID(playerid);
       		if(VehicleInfo[vehicleid][VehType] != VEH_OWNED && VehicleInfo[vehicleid][VehType] != VEH_FACTION)
       			return SendClientMessage(playerid, COLOR_YELLOW, "Debes estar en un vehículo con dueño o de facción.");
       		if(amount < 1 || amount > 50)
     			return SendClientMessage(playerid, COLOR_YELLOW2, "La cantidad de productos no debe ser menor a 1 o mayor a 50.");
       		if(GetPlayerCash(playerid) < amount * PRICE_BIZ_PROD)
			{
   				SendFMessage(playerid, COLOR_YELLOW2, "No tienes el dinero suficiente, necesitas $%d.", amount * PRICE_BIZ_PROD);
   				return 1;
   			}
   			GivePlayerCash(playerid, -amount * PRICE_BIZ_PROD);
			SetTimerEx("buyProductsTimer", 4000, false, "ii", playerid, amount);
			TogglePlayerControllable(playerid, false);
			GameTextForPlayer(playerid, "Cargando vehiculo...", 4000, 4);

		} else if(PlayerToPoint(4.0, playerid, 2349.8408, -1216.3939, 22.5000)) {
			if(PlayerInfo[playerid][pFaction] != FAC_NONE && FactionInfo[PlayerInfo[playerid][pFaction]][fType] == FAC_TYPE_ILLEGAL) {
				new amount;
				if(sscanf(params, "d", amount)) {
	                SendFMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /comprar [cantidad] | $%d la unidad.", PRICE_MATS);
			    } else if(amount > 0 && amount < 5000) {
					if(IsPlayerInAnyVehicle(playerid) && GetPlayerVehicleID(playerid) == FactionInfo[PlayerInfo[playerid][pFaction]][fMissionVeh]) {
				        if(GetPlayerCash(playerid) < amount * PRICE_MATS) {
					   		SendFMessage(playerid, COLOR_YELLOW2, "No tienes el dinero suficiente, necesitas $%d.", amount * PRICE_MATS);
					   		return 1;
					   	}
                        GivePlayerCash(playerid, -amount * PRICE_MATS);
						SetPVarInt(playerid, "buyMatsTimer", SetTimerEx("buyMatsTimer", 4000, false, "ii", playerid, amount));
					    TogglePlayerControllable(playerid, false);
						GameTextForPlayer(playerid, "Cargando vehiculo...", 4000, 4);
					} else
	    				SendClientMessage(playerid, COLOR_YELLOW2, "Debes estar dentro de la VAN de la facción.");
			    } else
		    		SendClientMessage(playerid, COLOR_YELLOW2, "La cantidad no debe ser menor que 0 ni mayor de 5000.");
			} else
				SendClientMessage(playerid, COLOR_FADE1, "Desconocido dice: ¿Te conozco?");
		} else if(business == 0 && IsAtHardware(playerid)) {
			    if(sscanf(params, "d", weapon)) {
					SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /comprar [número]");
					SendFMessage(playerid, COLOR_LIGHTYELLOW2, " 1 - Manopla. - $%d          3 - Baston. - $%d", itemPrice[1], itemPrice[15]);
					SendFMessage(playerid, COLOR_LIGHTYELLOW2, " 2 - Pala. - $%d", itemPrice[6]);
				} else if(weapon >= 1 && weapon <= 3) {
					    switch(weapon) {
							case 1: realWeapon = 1;
							case 2: realWeapon = 6;
							case 3: realWeapon = 15;
					    }
				        if(GetPlayerCash(playerid) >= itemPrice[realWeapon]) {
							GivePlayerWeapon(playerid, realWeapon, 1);
					    	GivePlayerCash(playerid, -itemPrice[realWeapon]);
					    	SendFMessage(playerid, COLOR_WHITE, "Has comprado un/a %s por un total de $%d.", itemName[realWeapon], itemPrice[realWeapon]);
						} else {
							SendFMessage(playerid, COLOR_YELLOW2, "No tienes el dinero suficiente, necesitas $%d.", itemPrice[realWeapon]);
						}
				} else {
				    SendClientMessage(playerid, COLOR_YELLOW2, "Número de arma incorrecto, solo puedes de 1 a 3.");
				}
		} else if(business == 0 && IsAtSportShop(playerid)) {
			    if(sscanf(params, "d", weapon)) {
					SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /comprar [número]");
					SendFMessage(playerid, COLOR_LIGHTYELLOW2, " 1 - Palo de golf. - $%d          3 - Palo de pool. - $%d", itemPrice[2], itemPrice[7]);
					SendFMessage(playerid, COLOR_LIGHTYELLOW2, " 2 - Bate. - $%d", itemPrice[5]);
				} else if(weapon >= 1 && weapon <= 3) {
					    switch(weapon) {
							case 1: realWeapon = 2;
							case 2: realWeapon = 5;
							case 3: realWeapon = 7;
					    }
				        if(GetPlayerCash(playerid) >= itemPrice[realWeapon]) {
							GivePlayerWeapon(playerid, realWeapon, 1);
					    	GivePlayerCash(playerid, -itemPrice[realWeapon]);
					    	SendFMessage(playerid, COLOR_WHITE, "Has comprado un/a %s por un total de $%d.", itemName[realWeapon], itemPrice[realWeapon]);
						} else {
							SendFMessage(playerid, COLOR_YELLOW2, "No tienes el dinero suficiente, necesitas $%d.", itemPrice[realWeapon]);
						}
				} else {
				    SendClientMessage(playerid, COLOR_YELLOW2, "Número de arma incorrecto, solo puedes de 1 a 3.");
				}
		}
	}
	return 1;
}

CMD:licencias(playerid, params[]) {
	if(PlayerToPoint(4.0, playerid, -2033.2118, -117.4678, 1035.1719)) {
		TogglePlayerControllable(playerid, false);
		ShowMenuForPlayer(licenseMenu, playerid);
	}
	return 1;
}

CMD:empleos(playerid, params[]) {
	if(PlayerToPoint(4.0, playerid, 361.8299, 173.4907, 1008.3828)) {
		TogglePlayerControllable(playerid, false);
		ShowPlayerDialog(playerid, DLG_JOBS, DIALOG_STYLE_LIST, "Empleos de Malos Aires", "Empleo de mecanico\nEmpleo de taxista\nEmpleo de granjero\nEmpleo de transportista\nEmpleo de basurero", "Ver", "Cerrar");
	}
	return 1;
}

CMD:guia(playerid, params[]) {
	for(new i = 0; i < sizeof(P_GUIDE); i++) {
        if(PlayerToPoint(4.0, playerid, GUIDE_POS[i][0], GUIDE_POS[i][1], GUIDE_POS[i][2])) {
			TogglePlayerControllable(playerid, false);
            ShowPlayerDialog(playerid, DLG_GUIDE, DIALOG_STYLE_LIST, "Guía de Malos Aires", "Alquiler de vehiculos\nCentro de licencias\nCentro de empleos\nTienda de ropa urbana\nTienda de ropa fina\nMercado de Malos Aires", "Ver", "Cerrar");
		}
	}
	return 1;
}

CMD:manuales(playerid, params[]) {
	new
	    option;

    if(PlayerToPoint(4.0, playerid, -2033.2118, -117.4678, 1035.1719)) {
        if(sscanf(params, "d", option)) {
			SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /manuales [licencia]");
			SendClientMessage(playerid, COLOR_WHITE, "1: licencia de conducción.");
			SendClientMessage(playerid, COLOR_WHITE, "2: licencia de navegación.");
			SendClientMessage(playerid, COLOR_WHITE, "3: licencia de vuelo.");
		} else {
		    switch(option) {
		        case 1: {
          			SendClientMessage(playerid, COLOR_WHITE, " ");
          			SendClientMessage(playerid, COLOR_WHITE, "---------------------");
		            SendClientMessage(playerid, COLOR_YELLOW2, "Manual de conducción:");
		            SendClientMessage(playerid, COLOR_WHITE, "- (1) Deberá conducir a 50 KM/H en calles y no más de 70 KM/H en avenidas.");
		            SendClientMessage(playerid, COLOR_WHITE, "- (2) Deberá respetar todo semáforo.");
		            SendClientMessage(playerid, COLOR_WHITE, "- (3) Deberá conducir siempre por el carril derecho.");
                    SendClientMessage(playerid, COLOR_WHITE, "- (3-bis) En el caso de tener que pasar a otro vehículo podrá emplearse el carril de la izquierda.");
                    SendClientMessage(playerid, COLOR_WHITE, "- (4) No empleará la bocina para generar disturbios ni molestar a los ciudadanos.");
                    SendClientMessage(playerid, COLOR_WHITE, "- (5) Respetará la dirección de los carriles.");
                    SendClientMessage(playerid, COLOR_WHITE, "- (6) Los peatones tienen prioridad para cruzar en las esquinas.");
                    SendClientMessage(playerid, COLOR_YELLOW2, "De no respetar alguna de las normas podrá ser multado por una suma de entre $100 a $30,000 según la gravedad.");
		        }
		        default: {
		            SendClientMessage(playerid, COLOR_YELLOW2, "El manual que intentó leer no existe o bien la licencia no se encuentra disponible actualmente.");
		        }
		    }
		}
	}
	return 1;
}

CMD:cla(playerid, params[]) {
	cmd_clasificado(playerid, params);
	return 1;
}

CMD:clasificado(playerid,params[])
{
	new text[128], string[128], adminstring[128];

	if(gPlayerLogged[playerid] != 1)
		return 1;
    if(sscanf(params, "s[128]", text))
		return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} (/cla)sificado [texto - 64 carácteres] $280");
    if(PlayerInfo[playerid][pLevel] < 2)
		return SendClientMessage(playerid, COLOR_LIGHTYELLOW2,"Debes ser al menos nivel 2 para enviar un anuncio.");
    if(AllowAdv[playerid] != 1)
        return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "Espere 60 segundos antes de enviar otro anuncio.");
    if(GetPlayerCash(playerid) < PRICE_ADVERTISE) {
    	SendFMessage(playerid, COLOR_YELLOW2, "No tienes el dinero suficiente, necesitas $%d.", PRICE_ADVERTISE);
		return 1;
	}

	GivePlayerCash(playerid, -PRICE_ADVERTISE);
	format(string, sizeof(string), "Descontados $%d", PRICE_ADVERTISE);
	GameTextForPlayer(playerid, string, 1400, 5);
	SetTimerEx("AllowAd", 60000, false, "i", playerid);
	AllowAdv[playerid] = 0;
	format(adminstring, sizeof(adminstring), "[%d] Publicidad: %s", playerid, text);
	format(string, sizeof(string), "Publicidad: %s", text);
	foreach(new i : Player)
	{
		if(PlayerInfo[i][pAdmin] >= 1)
			SendClientMessage(i, COLOR_ADVERTISMENT, adminstring);
		else
			SendClientMessage(i, COLOR_ADVERTISMENT, string);
	}
	FactionInfo[FAC_MAN][fBank] += PRICE_ADVERTISE;
	printf("[Anuncio] %s: %s", GetPlayerNameEx(playerid), text);
	return 1;
}

//=============================RENTA DE VEHICULOS===============================

CMD:rentar(playerid, params[])
{
	new vehicleid, rentcarid, price, time;

	if(sscanf(params, "i", time))
	    return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /rentar [tiempo] (en horas)");
	if(PlayerInfo[playerid][pRentCarID] != 0)
	    return SendClientMessage(playerid, COLOR_YELLOW2, "¡Ya has rentado un vehículo!");
	if(!IsPlayerInAnyVehicle(playerid))
	    return SendClientMessage(playerid, COLOR_YELLOW2, "Debes estar subido a un vehículo de renta disponible para alquilar.");
 	vehicleid = GetPlayerVehicleID(playerid);
	if(VehicleInfo[vehicleid][VehType] != VEH_RENT)
	    return SendClientMessage(playerid, COLOR_YELLOW2, "Debes estar subido a un vehículo de renta disponible para alquilar.");
	for(new i = 1; i < MAX_RENTCAR; i++)
	{
	    if(RentCarInfo[i][rVehicleID] == vehicleid)
		{
	        if(RentCarInfo[i][rRented] == 1)
	            return SendClientMessage(playerid, COLOR_YELLOW2, "Debes estar subido a un vehículo de renta disponible para alquiler.");
			else
			    {
			        rentcarid = i;
			    	break;
				}
		}
	}
	if(time < 1 || time > 3)
	    return SendClientMessage(playerid, COLOR_YELLOW2, "Solo puedes alquilar por un mínimo de una hora, o un máximo de tres.");
	price = (GetVehiclePrice(vehicleid, ServerInfo[sVehiclePricePercent])) / 100;
	if(price < 300)
		price = 300; // Seteamos un mínimo de precio
	if(GetPlayerCash(playerid) < price * time)
    	return SendClientMessage(playerid, COLOR_YELLOW2, "No tienes el dinero necesario.");

	GivePlayerCash(playerid, -(price * time));
	SendClientMessage(playerid, COLOR_WHITE, "¡Has rentado este vehículo! Utiliza /motor para encenderlo. El vehículo será devuelto al acabarse el tiempo.");
    SendClientMessage(playerid, COLOR_WHITE, "(( Si el vehículo respawnea, lo encontrarás en la agencia donde lo rentaste en primer lugar. ))");
	RentCarInfo[rentcarid][rRented] = 1;
	RentCarInfo[rentcarid][rOwnerSQLID] = PlayerInfo[playerid][pID];
	RentCarInfo[rentcarid][rTime] = time * 60; // Guardamos el tiempo en minutos
	PlayerInfo[playerid][pRentCarID] = vehicleid;
	PlayerInfo[playerid][pRentCarRID] = rentcarid;
	return 1;
}

TIMER:rentRespawn()
{
	new ownerid;
	for(new i = 1; i < MAX_RENTCAR; i++)
	{
		if(RentCarInfo[i][rRented] == 1)
		{
 		    RentCarInfo[i][rTime] -= 20;
            if(RentCarInfo[i][rTime] < 30)
            {
                ownerid = -1; // Por default el -1 que significa no está conectado
	           	foreach(new playerid : Player)
			    {
			        if(PlayerInfo[playerid][pID] == RentCarInfo[i][rOwnerSQLID])
			        {
			            ownerid = playerid;
			            break;
					}
				}
				if(RentCarInfo[i][rTime] > 0 && ownerid != 1)
 					SendFMessage(ownerid, COLOR_WHITE, "A tu vehículo de renta le quedan %d minutos de alquiler. Al finalizar será devuelto a la agencia.", RentCarInfo[i][rTime]);
				if(RentCarInfo[i][rTime] <= 0)
				{
				    RentCarInfo[i][rRented] = 0;
				    RentCarInfo[i][rTime] = 0;
				    RentCarInfo[i][rOwnerSQLID] = 0;
				    if(ownerid != -1)
				    {
       					PlayerInfo[ownerid][pRentCarID] = 0;
						PlayerInfo[ownerid][pRentCarRID] = 0;
						SendClientMessage(ownerid, COLOR_WHITE, "Se ha acabado el tiempo de alquiler del vehículo de renta.");
				    }
				}
			}
		}
    	if(RentCarInfo[i][rRented] == 0)
    	{
			VehicleInfo[RentCarInfo[i][rVehicleID]][VehLocked] = 0;
			SetVehicleToRespawn(RentCarInfo[i][rVehicleID]);
			VehicleInfo[RentCarInfo[i][rVehicleID]][VehFuel] = 100;
		}
	}
	return 1;
}

CMD:motor(playerid,params[]) {
    new
		vehicleid = GetPlayerVehicleID(playerid);

	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)	{
		GetVehicleParamsEx(vehicleid, VehicleInfo[vehicleid][VehEngine], VehicleInfo[vehicleid][VehLights], VehicleInfo[vehicleid][VehAlarm], vlocked, VehicleInfo[vehicleid][VehBonnet], VehicleInfo[vehicleid][VehBoot], VehicleInfo[vehicleid][VehObjective]);
	 	if(VehicleInfo[vehicleid][VehType] == VEH_DEALERSHIP || VehicleInfo[vehicleid][VehType] == VEH_DEALERSHIP2 || VehicleInfo[vehicleid][VehType] == VEH_SHIPYARD) {
		    return 1;
		} else if(VehicleInfo[vehicleid][VehFuel] < 1) {
		    SendClientMessage(playerid, COLOR_YELLOW2, "El vehículo no tiene combustible.");
		    return 1;
		} else if(VehicleInfo[vehicleid][VehHP] < 500) {
			PlayerActionMessage(playerid,15.0,"intenta encender el motor del vehículo pero se encuentra dañado.");
			SendClientMessage(playerid, COLOR_YELLOW2, "El vehículo se encuentra averiado.");
			return 1;
		} else if(VehicleInfo[vehicleid][VehType] == VEH_FACTION && VehicleInfo[vehicleid][VehFaction] != PlayerInfo[playerid][pFaction]) {
		    SendClientMessage(playerid, COLOR_YELLOW2, "No tienes las llaves.");
		    return 1;
		} else if(VehicleInfo[vehicleid][VehType] == VEH_RENT && PlayerInfo[playerid][pRentCarID] != vehicleid) {
			SendClientMessage(playerid, COLOR_YELLOW2, "No tienes las llaves.");
		    return 1;
		} else if(VehicleInfo[vehicleid][VehType] == VEH_OWNED && PlayerInfo[playerid][pID] != VehicleInfo[vehicleid][VehOwnerSQLID] && AdminDuty[playerid] != 1) {
		    SendClientMessage(playerid, COLOR_YELLOW2, "No tienes las llaves.");
		    return 1;
		} else if(VehicleInfo[vehicleid][VehJob] == JOB_FARM || VehicleInfo[vehicleid][VehJob] == JOB_DRUGF || VehicleInfo[vehicleid][VehJob] == JOB_TRAN || VehicleInfo[vehicleid][VehJob] == JOB_GARB) {
		    SendClientMessage(playerid, COLOR_WHITE, "Para encender esta vehículo utiliza /trabajar.");
		    return 1;
		} else if(VehicleInfo[vehicleid][VehEngine] != 1) {
			PlayerActionMessage(playerid,15.0,"ha encendido el motor del vehículo.");
			SetEngine(vehicleid, 1);
		} else {
			PlayerActionMessage(playerid,15.0,"ha apagado el motor del vehículo.");
			SetEngine(vehicleid, 0);
		}
	} else {
	    SendClientMessage(playerid,COLOR_LIGHTYELLOW2,"{FF4600}[Error]:{C8C8C8} debes estar en un vehículo para utilizar este comando.");
	}
	return 1;
}

CMD:comenzar(playerid,params[])
	cmd_trabajar(playerid, params);

CMD:trabajar(playerid,params[]) {
	new
	    string[128],
	    job = PlayerInfo[playerid][pJob];
	    
	if(PlayerInfo[playerid][pFaction] == FAC_MECH) {
	    format(string, sizeof(string), "Anuncio: el mecánico %s se encuentra en servicio (Tel: 555).", GetPlayerNameEx(playerid));
		SendClientMessageToAll(COLOR_LIGHTGREEN, string);
		jobDuty[playerid] = true;
	} else if(job != 0) {
		if(!jobDuty[playerid]) {
	        if(PlayerInfo[playerid][pCantWork] == 0) {
			    if(job == JOB_TAXI) {
			    	if(VehicleInfo[GetPlayerVehicleID(playerid)][VehJob] == JOB_TAXI) {
			    	    format(string, sizeof(string), "Anuncio: el taxista %s se encuentra en servicio (Tel: 444).", GetPlayerNameEx(playerid));
						SendClientMessageToAll(COLOR_LIGHTGREEN, string);
						jobDuty[playerid] = true;
			       	} else {
		       	    	SendClientMessage(playerid, COLOR_YELLOW2, "¡Debes ingresar a un taxi!");
		       	    	return 1;
			       	}
			    } else if(job == JOB_FARM) {
			    	if(VehicleInfo[GetPlayerVehicleID(playerid)][VehJob] == JOB_FARM) {
			    	    SendClientMessage(playerid, COLOR_WHITE, "Dirígete a los puntos rojos para cosechar, al finalizar deberás traer la cosecha y tipear /terminar para descargarla.");
                        SendClientMessage(playerid, COLOR_WHITE, "Puedes descargar los materiales cuando quieras, pero te pagarán acorde a la cantidad y no podras volver a trabajar durante este día de pago.");
						new rCP = -1;
						while(rCP == 16 || rCP == -1 || rCP == LastCP[playerid]) {
					 		rCP = random(sizeof(JOB_FARM_POS));
						}
						LastCP[playerid] = rCP;
						SetPlayerCheckpoint(playerid, JOB_FARM_POS[rCP][0], JOB_FARM_POS[rCP][1], JOB_FARM_POS[rCP][2], 5.4);
						jobDuty[playerid] = true;
						PlayerActionMessage(playerid, 15.0, "ha encendido el motor del vehículo.");
						SetEngine(GetPlayerVehicleID(playerid), 1);
			       	} else {
		       	    	SendClientMessage(playerid, COLOR_YELLOW2, "¡Debes ingresar a una cosechadora!");
		       	    	return 1;
			       	}
			    } else if(job == JOB_DRUGF) {
			    	if(VehicleInfo[GetPlayerVehicleID(playerid)][VehJob] == JOB_DRUGF) {
			    	    SendClientMessage(playerid, COLOR_WHITE, "Dirígete a los puntos rojos para cosechar, al finalizar deberás traer la materia prima y tipear /terminar.");
						SendClientMessage(playerid, COLOR_WHITE, "Solo recibirás la paga si terminas completamente con tu trabajo.");
						new rCP = -1;
						while(rCP == 16 || rCP == -1 || rCP == LastCP[playerid]) {
					 		rCP = random(sizeof(JOB_DRUGF_POS));
						}
						LastCP[playerid] = rCP;
						SetPlayerCheckpoint(playerid, JOB_DRUGF_POS[rCP][0], JOB_DRUGF_POS[rCP][1], JOB_DRUGF_POS[rCP][2], 5.4);
						jobDuty[playerid] = true;
						PlayerActionMessage(playerid, 15.0, "ha encendido el motor del vehículo.");
						SetEngine(GetPlayerVehicleID(playerid), 1);
			       	} else {
		       	    	SendClientMessage(playerid, COLOR_YELLOW2, "¡Debes ingresar a una cosechadora!");
		       	    	return 1;
			       	}
			    } else if(job == JOB_DRUGD) {
			        SendClientMessage(playerid, COLOR_WHITE, "Súbete a un vehículo con maletero y dirígete a la granja de drogas. Recuerda que necesitarás algo de espacio en él.");
			        SendClientMessage(playerid, COLOR_WHITE, "Una vez allí, tipea /comprar para comprar las bolsas de materia prima.");
			        SetPlayerCheckpoint(playerid, JOB_DRUGF_POS[sizeof(JOB_DRUGF_POS) - 1][0], JOB_DRUGF_POS[sizeof(JOB_DRUGF_POS) - 1][1], JOB_DRUGF_POS[sizeof(JOB_DRUGF_POS) - 1][2], 5.4);
				} else if(job == JOB_TRAN) {
			    	if(VehicleInfo[GetPlayerVehicleID(playerid)][VehJob] == JOB_TRAN) {
			    	    SendClientMessage(playerid, COLOR_WHITE, "Entrega los paquetes en los puntos rojos del mapa y vuelve a buscar más o bien utiliza /terminar cuando lo desees.");
                        SendClientMessage(playerid, COLOR_WHITE, "Te pagarán acorde a la cantidad de paquetes entregados y no podras volver a trabajar durante este día de pago.");
						SetPlayerCheckpoint(playerid, JOB_TRAN_POS[16][0], JOB_TRAN_POS[16][1], JOB_TRAN_POS[16][2], 5.4);
						jobDuty[playerid] = true;
						SetEngine(GetPlayerVehicleID(playerid), 1);
						PlayerActionMessage(playerid, 15.0, "ha encendido el motor del vehículo.");
			       	} else {
		       	    	SendClientMessage(playerid, COLOR_YELLOW2, "¡Debes ingresar a un camión!");
		       	    	return 1;
			       	}
			    } else if(job == JOB_GARB) {
			    	if(VehicleInfo[GetPlayerVehicleID(playerid)][VehType] == VEH_JOB && VehicleInfo[GetPlayerVehicleID(playerid)][VehJob] == JOB_GARB) {
						new
						    gbCP = 0,
							route = random(2);
						    
                        SetPVarInt(playerid, "jobVehicle", GetPlayerVehicleID(playerid));
             			jobDuty[playerid] = true;
             			if(route == 0) {
			 	 			SetPlayerCheckpoint(playerid, JOB_GARB_POS_R0[gbCP][0], JOB_GARB_POS_R0[gbCP][1], JOB_GARB_POS_R0[gbCP][2], 5.4);
						} else if(route == 1) {
						    SetPlayerCheckpoint(playerid, JOB_GARB_POS_R1[gbCP][0], JOB_GARB_POS_R1[gbCP][1], JOB_GARB_POS_R1[gbCP][2], 5.4);
						}
						PlayerActionMessage(playerid, 15.0, "ha encendido el motor del vehículo.");
						SetEngine(GetPlayerVehicleID(playerid), 1);
						SendClientMessage(playerid, COLOR_WHITE, "Completa el siguiente recorrido para dejar la ciudad libre de basura, al final, serás recompensado por tu trabajo.");
			       	} else {
		       	    	SendClientMessage(playerid, COLOR_YELLOW2, "¡Debes ingresar a un camión recolector!");
		       	    	return 1;
			       	}
			    } else {
					return 1;
				}
			    if(PlayerInfo[playerid][pJobAllowed] == 1 && JobInfo[job][jSkin] > 0) {
					SetPlayerSkin(playerid, JobInfo[job][jSkin]);
				}
			} else {
			    SendClientMessage(playerid, COLOR_YELLOW2, "¡Ya has trabajado lo suficiente! vé, y espera hasta el próximo día de pago.");
			}
		} else {
		    SendClientMessage(playerid, COLOR_YELLOW2, "¡Ya te encuentras trabajando!");
		}
	} else {
		SendClientMessage(playerid, COLOR_YELLOW2, "¡No tienes ningún empleo!");
	}
	return 1;
}

CMD:terminar(playerid,params[]) {
	new
	    job = PlayerInfo[playerid][pJob];

    if(job == 0)
		return 1;
		
    if(!jobDuty[playerid]) {
    	SendClientMessage(playerid, COLOR_YELLOW2, "¡No te encuentras trabajando!");
		return 1;
	}
	
	if(PlayerInfo[playerid][pJob] == JOB_FARM) {
		if(PlayerToPoint(20.0, playerid, JOB_FARM_POS[17][0], JOB_FARM_POS[17][1], JOB_FARM_POS[17][2])) {
            if(VehicleInfo[GetPlayerVehicleID(playerid)][VehJob] == JOB_FARM) {
            	PlayerActionMessage(playerid, 15.0, "descarga todo el producto y estaciona la cosechadora.");
				SendFMessage(playerid, COLOR_LIGHTBLUE, "Has recolectado %d toneladas por lo tanto recibirás $%d en el próximo día de pago.", CollectedProds[playerid], CollectedProds[playerid] * JOB_FARM_PRODVALUE);
			    PlayerInfo[playerid][pCantWork] = 1;
			    LastCP[playerid] = -1;
			    PlayerInfo[playerid][pPayCheck] += CollectedProds[playerid] * JOB_FARM_PRODVALUE;
			    CollectedProds[playerid] = 0;
				SetVehicleToRespawn(GetPlayerVehicleID(playerid));
			} else {
			    SendClientMessage(playerid, COLOR_YELLOW2, "¡Debes estar adentro de una cosechadora!");
		    	return 1;
			}
		} else {
		    SendClientMessage(playerid, COLOR_YELLOW2, "¡Ve y descarga los productos en la zona indicada!");
		    return 1;
		}
	} else if(PlayerInfo[playerid][pJob] == JOB_DRUGF) {
	
		if(!PlayerToPoint(20.0, playerid, JOB_DRUGF_POS[sizeof(JOB_DRUGF_POS) - 1][0], JOB_DRUGF_POS[sizeof(JOB_DRUGF_POS) - 1][1], JOB_DRUGF_POS[sizeof(JOB_DRUGF_POS) - 1][2]))
		    return SendClientMessage(playerid, COLOR_YELLOW2, "¡Ve y descarga los productos en la zona indicada!");

        if(VehicleInfo[GetPlayerVehicleID(playerid)][VehJob] != JOB_DRUGF)
		    return SendClientMessage(playerid, COLOR_YELLOW2, "¡Debes estar en una cosechadora!");
	  
	    if(LastCP[playerid] != sizeof(JOB_DRUGF_POS) - 1)
	        return SendClientMessage(playerid, COLOR_YELLOW2, "¡No has terminado con tu trabajo!, vé y continua cosechando.");

		PlayerActionMessage(playerid, 15.0, "descarga el producto y estaciona la cosechadora.");
		SendFMessage(playerid, COLOR_LIGHTBLUE, "Has recolectado 5 bolsas de materia prima, por lo tanto recibirás $%d en el próximo día de pago.", CollectedProds[playerid] * JOB_DRUGF_PRODVALUE);
	    PlayerInfo[playerid][pCantWork] = 1;
	    LastCP[playerid] = -1;
	    ServerInfo[sDrugRawMats] += 5;
	    GivePlayerCash(playerid, CollectedProds[playerid] * JOB_DRUGF_PRODVALUE);
	    CollectedProds[playerid] = 0;
	
		SetVehicleToRespawn(GetPlayerVehicleID(playerid));
	} else if(PlayerInfo[playerid][pJob] == JOB_TRAN) {
		if(PlayerToPoint(20.0, playerid, JOB_TRAN_POS[16][0], JOB_TRAN_POS[16][1], JOB_TRAN_POS[16][2])) {
			if(VehicleInfo[GetPlayerVehicleID(playerid)][VehJob] == JOB_TRAN) {
			    SendFMessage(playerid, COLOR_WHITE, "Has descargado %d paquetes por lo tanto recibirás $%d en el próximo día de pago.", CollectedProds[playerid], CollectedProds[playerid] * JOB_TRAN_PRODVALUE);
			    PlayerInfo[playerid][pCantWork] = 1;
				carryingProd[playerid] = false;
			    LastCP[playerid] = -1;
			    PlayerInfo[playerid][pPayCheck] += CollectedProds[playerid] * JOB_TRAN_PRODVALUE;
			    CollectedProds[playerid] = 0;
				SetVehicleToRespawn(GetPlayerVehicleID(playerid));
				PlayerActionMessage(playerid, 15.0, "estaciona el camión.");
			} else {
			    SendClientMessage(playerid, COLOR_YELLOW2, "¡Debes estar adentro de un camión!");
		    	return 1;
			}
		} else {
		    SendClientMessage(playerid, COLOR_YELLOW2, "¡Ve a la zona indicada!");
		    return 1;
		}
	}
	if(PlayerInfo[playerid][pJobAllowed] == 1) {
		SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
	}
    jobDuty[playerid] = false;
	return 1;
}

CMD:tomarempleo(playerid,params[])
{
	new string[128];
	
    if(PlayerInfo[playerid][pJobAllowed] == 0)
    	return SendClientMessage(playerid,COLOR_YELLOW2,"¡No puedes tomar este empleo perteneciendo a esta facción!");
    if(PlayerInfo[playerid][pJob] != 0)
		return SendClientMessage(playerid,COLOR_YELLOW2,"¡Ya tienes un empleo!");
	if(PlayerInfo[playerid][pJobTime] != 0)
	{
		format(string, sizeof(string), "¡Debes esperar %d PayDay/s antes de tomar otro empleo!", PlayerInfo[playerid][pJobTime]);
		return SendClientMessage(playerid, COLOR_YELLOW2, string);
	}
	
	for(new id = 1; id < sizeof(JobInfo); id++)
	{
		if(PlayerToPoint(1.0, playerid,JobInfo[id][jTakeX], JobInfo[id][jTakeY], JobInfo[id][jTakeZ]))
		{
		    if(JobInfo[id][jType] != 0)
               	return 1;
            if(id == JOB_DRUGD && (FactionInfo[PlayerInfo[playerid][pFaction]][fType] != FAC_TYPE_ILLEGAL || PlayerInfo[playerid][pLevel] < 3) )
				return SendClientMessage(playerid, COLOR_YELLOW2, "No puedes tomar este empleo. (OOC: Requiere que tengas contactos y seas nivel 3)"); // Si no es de la mafia o es menor a nivel 3
			if(id == JOB_DRUGF && PlayerInfo[playerid][pLevel] < 3) // para coshechar droga minimo nivel 3
				return SendClientMessage(playerid, COLOR_WHITE, "Granjero: buscamos gente con experiencia, no aceptamos novatos. ¡Sal de aquí! (OOC: Requiere nivel 3)"); // Si es uno nuevo en el servidor o multicuenta

			PlayerInfo[playerid][pJobTime] = JOB_WAITTIME;
			PlayerInfo[playerid][pJob] = id;
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			SendFMessage(playerid, COLOR_YELLOW3, "¡Felicidades!, ahora eres un %s, para ver los comandos disponibles, escribe /ayuda.", JobInfo[id][jName]);
			SendFMessage(playerid, COLOR_YELLOW3, "Debes esperar %d PayDay/s antes de volver a tomar un empleo.", PlayerInfo[playerid][pJobTime]);
			return 1;
		}
	}
	SendClientMessage(playerid, COLOR_YELLOW2, "¡No puedes tomar un empleo en cualquier lugar!");
	return 1;
}

CMD:dejarempleo(playerid,params[])
{
    if(PlayerInfo[playerid][pJob] == 0)
		return SendClientMessage(playerid,COLOR_YELLOW2,"No tienes ningún empleo.");
  	if(jobDuty[playerid])
	  	return SendClientMessage(playerid,COLOR_YELLOW2,"¡No puedes hacerlo mientras estás trabajando!");

	for(new id = 1; id < sizeof(JobInfo); id++)
	{
		if(PlayerToPoint(1.0, playerid,JobInfo[id][jTakeX],JobInfo[id][jTakeY],JobInfo[id][jTakeZ]))
		{
  			if(id != PlayerInfo[playerid][pJob])
				return SendClientMessage(playerid,COLOR_YELLOW2,"¡No trabajas aquí!");
			if(JobInfo[id][jType] != 0)
	            return 1;

			SendFMessage(playerid, COLOR_YELLOW2, "¡Has dejado tu empleo de %s!", JobInfo[id][jName]);
			PlayerInfo[playerid][pJob] = 0;
			return 1;
		}
	}
	SendClientMessage(playerid, COLOR_YELLOW2, "¡No puedes dejar tu empleo en cualquier lugar! Vé y presenta la renuncia ante tu jefe.");
	return 1;
}

//===============================COMANDOS DE PMA================================

CMD:ayudap(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] != FAC_PMA)
		return 1;
		
	SendClientMessage(playerid,COLOR_LIGHTYELLOW2,"[Policía Metropolitana]:");
	SendClientMessage(playerid,COLOR_LIGHTYELLOW2,"/apuerta /equipo /pservicio /sospechoso /radio /megafono /arrestar /esposar /quitaresposas /revisar /cono /barricada");
 	SendClientMessage(playerid,COLOR_LIGHTYELLOW2,"/tomartazer /guardartazer /quitar /multar /remolcar /arrastrar /refuerzos /ultimallamada /vercargos /buscados /localizar");
 	if(PlayerInfo[playerid][pRank] <= 4)
        SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[Inspector]: /geof");
	return 1;
}

CMD:apuerta(playerid,params[]) {

    // Policía de Malos Aires
	if(PlayerInfo[playerid][pFaction] == FAC_PMA || AdminDuty[playerid] == 1) {

		if(IsPlayerInRangeOfPoint(playerid, 4.0, 246.3947, 72.0577, 1003.6406)) {
			// PM Puerta que da para el interior del edificio
			if(PMHallDoor[0] == 0) {
			    PMHallDoor[0] = 1;
				MoveObject(PMHallDoor[1], 244.54, 72.44, 1003.87, 1.00, 0.00, 0.00, 180.00);
            	MoveObject(PMHallDoor[2], 248.29, 72.44, 1003.87, 1.00, 0.00, 0.00, 0.00);
			} else {
			    PMHallDoor[0] = 0;
			    MoveObject(PMHallDoor[1], 245.54, 72.44, 1003.87, 1.00, 0.00, 0.00, 180.00);
            	MoveObject(PMHallDoor[2], 247.29, 72.44, 1003.87, 1.00, 0.00, 0.00, 0.00);
			}
        } else if(IsPlayerInRangeOfPoint(playerid, 4.0, 250.0500, 67.8024, 1003.6406)) {
			// PM Ventana a la secretaría
			if(PMWindow[0] == 0) {
			    PMWindow[0] = 1;
				MoveObject(PMWindow[1], 250.46, 68.02, 1006.13, 1.00, 0.00, 180.00, 0.00);
			} else {
			    PMWindow[0] = 0;
			    MoveObject(PMWindow[1], 250.46, 68.02, 1005.13, 1.00, 0.00, 180.00, 0.00);
			}
        } else if(IsPlayerInRangeOfPoint(playerid, 4.0, 258.5691, 90.6539, 1002.4453)) {
            // PM Puerta principal de la cárcel
			if(PMJailMainDoor[0] == 0) {
			    PMJailMainDoor[0] = 1;
			 	MoveObject(PMJailMainDoor[1], 259.08, 92.44, 1002.70, 1.00, 0.00, 0.00, 90.00);
			} else {
				PMJailMainDoor[0] = 0;
				MoveObject(PMJailMainDoor[1], 259.08, 90.67, 1002.70, 1.00, 0.00, 0.00, 90.00);
			}
		} else if(IsPlayerInRangeOfPoint(playerid, 2.0, 266.6638, 78.4081, 1001.0391)) {
            // PM Cárcel 1
			if(PMJail1[0] == 0) {
				PMJail1[0] = 1;
			 	MoveObject(PMJail1[1], 266.29, 76.68, 1001.30, 1.00, 0.00, 0.00, 90.00);
			} else {
				PMJail1[0] = 0;
				MoveObject(PMJail1[1], 266.29, 78.45, 1001.30, 1.00, 0.00, 0.00, 90.00);
			}
		} else if(IsPlayerInRangeOfPoint(playerid, 2.0, 266.6637, 82.9768, 1001.0391)) {
            // PM Cárcel 2
			if(PMJail2[0] == 0) {
			    PMJail2[0] = 1;
			 	MoveObject(PMJail2[1], 266.29, 81.22, 1001.30, 1.00, 0.00, 0.00, 90.00);
			} else {
				PMJail2[0] = 0;
				MoveObject(PMJail2[1], 266.29, 82.96, 1001.30, 1.00, 0.00, 0.00, 90.00);
			}
		} else if(IsPlayerInRangeOfPoint(playerid, 2.0, 266.6637, 87.4364, 1001.0391)) {
            // PM Cárcel 3
			if(PMJail3[0] == 0) {
				PMJail3[0] = 1;
			 	MoveObject(PMJail3[1], 266.29, 85.71, 1001.30, 1.00, 0.00, 0.00, 90.00);
			} else {
				PMJail3[0] = 0;
				MoveObject(PMJail3[1], 266.29, 87.46, 1001.30, 1.00, 0.00, 0.00, 90.00);
			}
		}
	}
}

CMD:multar(playerid, params[])
{
    new reason[64], cost, targetID;

  	if(PlayerInfo[playerid][pFaction] != FAC_PMA)
	  	return 1;
	if(sscanf(params, "uds[64]", targetID, cost, reason))
		return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /multa [ID/Jugador] [costo] [razón]");
	if(CopDuty[playerid] == 0)
	    return SendClientMessage(playerid, COLOR_YELLOW2, "¡Debes estar en servicio como oficial de policía!");
	if(!ProxDetectorS(8.0, playerid, targetID))
		return SendClientMessage(playerid, COLOR_YELLOW2, "¡El objetivo se encuentra demasiado lejos!");
	if(targetID == INVALID_PLAYER_ID)
	    return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{FF4600}[Error]:{C8C8C8} ID de jugador incorrecta.");
	if(targetID == playerid)
		return SendClientMessage(playerid, COLOR_YELLOW2, "¡No puedes multarte a tí mismo!");
	if(cost > 50000 || cost < 1)
		return SendClientMessage(playerid, COLOR_YELLOW2, "¡El costo no puede ser menor a $1 ni sobrepasar los $50.000!");

	SendFMessage(playerid, COLOR_YELLOW2, "Has multado a %s por $%d - razón: %s.", GetPlayerNameEx(targetID), cost, reason);
	SendFMessage(targetID, COLOR_YELLOW2, "%s te ha multado por $%d - razón: %s.", GetPlayerNameEx(playerid), cost, reason);
	SendClientMessage(targetID, COLOR_LIGHTYELLOW2, "{878EE7}[INFO]:{C8C8C8} escribe /aceptar multa, para pagar.");
	TicketOffer[targetID] = playerid;
	TicketMoney[targetID] = cost;
  	return 1;
}

CMD:quitar(playerid, params[])
{
	new itemString[64], targetID;

  	if(PlayerInfo[playerid][pFaction] != FAC_SIDE && PlayerInfo[playerid][pFaction] != FAC_PMA)
	  	return 1;
	if(sscanf(params, "us[64]", targetID, itemString)) {
		SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /quitar [ID/Jugador] [ítem]");
		return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[Items]: licconducir, licvuelo, licarmas, armas.");
  	}
	if(CopDuty[playerid] == 0 && SIDEDuty[playerid] == 0)
		return SendClientMessage(playerid, COLOR_YELLOW2, "¡Debes estar en servicio!");
	if(!ProxDetectorS(2.0, playerid, targetID))
		return SendClientMessage(playerid, COLOR_YELLOW2, "¡El objetivo se encuentra demasiado lejos!");
	if(targetID == INVALID_PLAYER_ID)
 		return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{FF4600}[Error]:{C8C8C8} ID de jugador incorrecta.");
	if(targetID == playerid)
		return SendClientMessage(playerid, COLOR_YELLOW2, "¡No te puedes revocar un ítem a tí mismo!");
		
	if(strcmp(itemString, "licconducir", true) == 0)
	{
		if(PlayerInfo[targetID][pCarLic] == 0)
  			return SendClientMessage(playerid, COLOR_YELLOW2, "¡El sujeto no tiene una licencia de conducir!");
		PlayerPlayerActionMessage(playerid, targetID, 15.0, "le ha quitado la licencia de conducir a");
		PlayerInfo[targetID][pCarLic] = 0;
	} else
	if(strcmp(itemString, "licvuelo", true) == 0)
	{
 		if(PlayerInfo[targetID][pFlyLic] == 0)
   			return SendClientMessage(playerid, COLOR_YELLOW2, "¡El sujeto no tiene una licencia de vuelo!");
		PlayerPlayerActionMessage(playerid, targetID, 10.0, "le ha quitado la licencia de vuelo a");
 		PlayerInfo[targetID][pFlyLic] = 0;
	} else
	if(strcmp(itemString, "licarmas", true) == 0)
	{
 		if(PlayerInfo[targetID][pWepLic] == 0)
    		return SendClientMessage(playerid, COLOR_YELLOW2, "¡El sujeto no tiene una licencia de portación de armas!");
		PlayerPlayerActionMessage(playerid, targetID, 10.0, "le ha quitado la licencia de armas a");
		PlayerInfo[targetID][pWepLic] = 0;
	} else
	if(strcmp(itemString, "armas", true) == 0)
	{
 		PlayerPlayerActionMessage(playerid, targetID, 10.0, "le ha quitado todas las armas a");
		ResetPlayerWeapons(targetID);
		new itemid = -1;
		for(new invslot = 0; invslot < INV_MAX_SLOTS; invslot++) {
			switch(invslot) {
				    case 0:
				    	sscanf(InvInfo[targetID][inv0], "i{i}", itemid);
				    case 1:
						sscanf(InvInfo[targetID][inv1], "i{i}", itemid);
				}
			switch(itemid) {
					case 1 .. 9, 16 .. 38, 41:
						setInvItem(targetID, invslot, 0);
				}
		}
	}
	return 1;
}

CMD:revisar(playerid, params[])
{
	new targetID;

	if(sscanf(params, "u", targetID))
		return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /revisar [ID/Jugador]");
	if(!IsPlayerConnected(targetID) || targetID == INVALID_PLAYER_ID || targetID == playerid)
	    return SendClientMessage(playerid, COLOR_YELLOW2, "Jugador inválido.");
	if(!ProxDetectorS(2.0, playerid, targetID))
		return SendClientMessage(playerid, COLOR_YELLOW2, "¡El objetivo se encuentra demasiado lejos!");

	if( (PlayerInfo[playerid][pFaction] == FAC_PMA && CopDuty[playerid]) ||
		(PlayerInfo[playerid][pFaction] == FAC_SIDE && SIDEDuty[playerid]) ||
		GetPVarInt(targetID, "disabled") == DISABLE_DYING ||
		GetPVarInt(targetID, "disabled") == DISABLE_DEATHBED )
	{
		ShowInv(playerid, targetID);
	  	ShowPocket(playerid, targetID);
		PlayerPlayerActionMessage(playerid, targetID, 15.0, "ha revisado en busca de objetos a");
	} else
	    {
	        SendFMessage(playerid, COLOR_LIGHTBLUE, "Quieres revisar a %s en busca de objetos. Para evitar abusos, debes esperar su respuesta.", GetPlayerNameEx(targetID));
			SendFMessage(targetID, COLOR_LIGHTBLUE, "%s quiere revisarte en busca de objetos. Para evitar abusos, tienes que usar /aceptar revision.", GetPlayerNameEx(playerid));
			ReviseOffer[targetID] = playerid;
		}
	return 1;
}

CMD:buscados(playerid, params[])
{
    new count = 0;

	if(PlayerInfo[playerid][pFaction] != FAC_SIDE && PlayerInfo[playerid][pFaction] != FAC_PMA)
		return 1;
	if(CopDuty[playerid] == 0 && SIDEDuty[playerid] == 0)
    	return SendClientMessage(playerid, COLOR_YELLOW2, "¡Debes estar en servicio!");

	SendClientMessage(playerid, COLOR_LIGHTGREEN, "-----------[Sospechosos buscados]-----------");
    foreach(new i : Player)	{
	    if(PlayerInfo[i][pWantedLevel] >= 1) {
	        SendFMessage(playerid, COLOR_WHITE, "[BUSCADOS]: %s (ID:%d) -  nivel de búsqueda: %d.", GetPlayerNameEx(i), i, PlayerInfo[i][pWantedLevel]);
			count++;
		}
	}
	if(count == 0)
		SendClientMessage(playerid,COLOR_WHITE,"{878EE7}[INFO]:{C8C8C8} no hay criminales buscados on-line.");
	SendClientMessage(playerid, COLOR_LIGHTGREEN, "------------------------------------------------");
	return 1;
}

CMD:esposar(playerid, params[])
{
	new targetID;

 	if(PlayerInfo[playerid][pFaction] != FAC_SIDE && PlayerInfo[playerid][pFaction] != FAC_PMA)
 		return 1;
	if(sscanf(params, "u", targetID))
		return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /esposar [ID/Jugador]");
  	if(CopDuty[playerid] == 0 && SIDEDuty[playerid] == 0)
  		return SendClientMessage(playerid, COLOR_YELLOW2, "¡Debes estar en servicio!");
	if(targetID == INVALID_PLAYER_ID)
 		return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{FF4600}[Error]:{C8C8C8} ID de jugador incorrecta.");
 	if(PlayerCuffed[targetID] == 1)
		return SendClientMessage(playerid, COLOR_YELLOW2, "¡El objetivo ya se encuentra esposado!");
	if(!ProxDetectorS(1.0, playerid, targetID))
		return SendClientMessage(playerid, COLOR_YELLOW2, "¡El objetivo se encuentra demasiado lejos!");
	if(targetID == playerid)
		return SendClientMessage(playerid, COLOR_YELLOW2, "¡No puedes esposarte a tí mismo!");

	SendFMessage(targetID, COLOR_LIGHTBLUE, "¡Has sido esposado por %s!", GetPlayerNameEx(playerid));
	SendFMessage(playerid, COLOR_LIGHTBLUE, "¡Has esposado a %s!", GetPlayerNameEx(targetID));
	PlayerPlayerActionMessage(playerid, targetID, 15.0, "ha esposado a");
	SetPlayerSpecialAction(targetID, SPECIAL_ACTION_CUFFED);
	SetPlayerAttachedObject(targetID, 0, 19418, 6, -0.011000, 0.028000, -0.022000, -15.600012, -33.699977, -81.700035, 0.891999, 1.000000, 1.168000);
	PlayerCuffed[targetID] = 1;
	return 1;
}

CMD:arrastrar(playerid, params[])
{
	new target, vehicleid;

	if(PlayerInfo[playerid][pFaction] != FAC_SIDE && PlayerInfo[playerid][pFaction] != FAC_PMA)
		return 1;
	if(sscanf(params, "u", target))
		return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /arrastrar [ID/Jugador]");
	if(CopDuty[playerid] == 0 && SIDEDuty[playerid] == 0)
		return SendClientMessage(playerid, COLOR_YELLOW2, "¡Debes estar en servicio!");

	if(IsPlayerInAnyVehicle(playerid))
		vehicleid = GetPlayerVehicleID(playerid);
	else
 		vehicleid = GetClosestVehicle(playerid, 4.0);

	if(vehicleid == INVALID_VEHICLE_ID || target == INVALID_PLAYER_ID)
		return SendClientMessage(playerid, COLOR_YELLOW2, "Vehículo o jugador incorrecto.");
	if(VehicleInfo[vehicleid][VehFaction] != FAC_PMA && VehicleInfo[vehicleid][VehFaction] != FAC_SIDE)
	    return SendClientMessage(playerid, COLOR_YELLOW2, "El vehículo no pertenece a tu facción.");
	if(!ProxDetectorS(1.5, playerid, target))
	    return SendClientMessage(playerid, COLOR_YELLOW2, "El jugador se encuentra demasiado lejos.");

 	PutPlayerInVehicle(target, vehicleid, 1);
  	PlayerPlayerActionMessage(playerid, target, 15.0, "ha arrastrado al móvil a");
	return 1;
}

CMD:quitaresposas(playerid, params[])
{
	new targetID;

	if(PlayerInfo[playerid][pFaction] != FAC_SIDE && PlayerInfo[playerid][pFaction] != FAC_PMA)
		return 1;
	if(sscanf(params, "u", targetID))
		return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /quitaresposas [ID/Jugador]");
	if(CopDuty[playerid] == 0 && SIDEDuty[playerid] == 0)
		return SendClientMessage(playerid, COLOR_YELLOW2, "¡Debes estar en servicio!");
	if(targetID == INVALID_PLAYER_ID)
 		return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{FF4600}[Error]:{C8C8C8} ID de jugador incorrecta.");
	if(PlayerCuffed[targetID] == 0)
 		return SendClientMessage(playerid, COLOR_YELLOW2, "¡El objetivo no está esposado!");
	if(!ProxDetectorS(1.0, playerid, targetID))
		return SendClientMessage(playerid, COLOR_YELLOW2, "¡El objetivo se encuentra demasiado lejos!");
	if(targetID == playerid)
		return SendClientMessage(playerid, COLOR_YELLOW2, "¡No puedes quitarte las esposas a tí mismo!");

	SendFMessage(targetID, COLOR_LIGHTBLUE, "¡%s te ha quitado las esposas!", GetPlayerNameEx(playerid));
	SendFMessage(playerid, COLOR_LIGHTBLUE, "¡Le has quitado las esposas a %s!", GetPlayerNameEx(targetID));
	PlayerPlayerActionMessage(playerid, targetID, 15.0, "le ha quitado las esposas a");
	SetPlayerSpecialAction(targetID, SPECIAL_ACTION_NONE);
	RemovePlayerAttachedObject(targetID, 0);
	PlayerCuffed[targetID] = 0;
	return 1;
}

CMD:arrestar(playerid, params[])
{
	new	targetID, time, string[128];

	if(PlayerInfo[playerid][pFaction] != FAC_PMA)
		return 1;
	if(sscanf(params, "ud", targetID, time))
		return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /arrestar [ID/Jugador] [tiempo]");
	if(CopDuty[playerid] == 0)
 		return SendClientMessage(playerid, COLOR_YELLOW2, "¡Debes estar en servicio como oficial de policía!");
	if(!PlayerToPoint(15.0, playerid, POS_POLICE_ARREST_X, POS_POLICE_ARREST_Y, POS_POLICE_ARREST_Z))
		return SendClientMessage(playerid, COLOR_YELLOW2, "¡Debes estar en el escritorio junto al calabozo!");
	if(time < 1 || time > 60)
		return SendClientMessage(playerid, COLOR_YELLOW2, "¡El tiempo no puede ser menor a 1 minuto ni mayor a 60!");
	if(GetDistanceBetweenPlayers(playerid, targetID) > 5)
 		return SendClientMessage(playerid, COLOR_YELLOW2, "¡El sujeto debe estar cerca tuyo!");
	if(PlayerInfo[targetID][pWantedLevel] < 1)
		return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "¡El sujeto no tiene ningún cargo!");

	SendFMessage(playerid, COLOR_LIGHTBLUE, "¡Has arrestado a %s!", GetPlayerNameEx(targetID));
	ResetPlayerWeapons(targetID);
	PlayerInfo[targetID][pJailTime] = time * 60;
	SendFMessage(targetID, COLOR_LIGHTBLUE, "¡Arrestado! - Tiempo: %d minutos.", time);
	SendClientMessage(targetID, COLOR_LIGHTYELLOW2, "Recuerda que al estar arrestado no se reseteará el tiempo para volver a trabajar hasta el proximo PayDay en libertad.");
	format(string, sizeof(string), "[Dpto. de policía]: %s ha arrestado al criminal %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(targetID));
	SendFactionMessage(FAC_PMA, COLOR_PMA, string);
	PlayerInfo[targetID][pJailed] = 1;
	ResetPlayerWantedLevelEx(targetID);
	FactionInfo[PlayerInfo[playerid][pFaction]][fBank] += PlayerInfo[targetID][pJailTime];
	SaveFactions();
	return 1;
}

CMD:m(playerid, params[]) {
	cmd_megafono(playerid, params);
	return 1;
}

CMD:megafono(playerid, params[])
{
	new text[128], string[128], factionID = PlayerInfo[playerid][pFaction];

	if(sscanf(params, "s[128]", text))
		return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} (/m)egáfono [mensaje]");
	if(factionID != FAC_PMA || CopDuty[playerid] != 1)
	    return SendClientMessage(playerid, COLOR_YELLOW2, "No tienes un megáfono o no te encuentras en servicio.");
	if(!IsPlayerInAnyVehicle(playerid) || VehicleInfo[GetPlayerVehicleID(playerid)][VehFaction] != factionID)
		return SendClientMessage(playerid, COLOR_YELLOW2, "¡Debes estar en un vehículo con megáfono!");
	if(Muted[playerid])
		return SendClientMessage(playerid, COLOR_RED, "{FF4600}[Error]:{C8C8C8} no puedes usar el megáfono, te encuentras silenciado.");

	format(string, sizeof(string), "[Megáfono]: %s %s: ¡%s!", GetRankName(PlayerInfo[playerid][pFaction], PlayerInfo[playerid][pRank]), GetPlayerNameEx(playerid), text);
	ProxDetector(60.0, playerid, string, COLOR_PMA, COLOR_PMA, COLOR_PMA, COLOR_PMA, COLOR_PMA);
	return 1;
}

CMD:pservicio(playerid, params[])
{
	new string[128];

    if(PlayerInfo[playerid][pFaction] != FAC_PMA)
		return 1;
	if(!PlayerToPoint(5.0, playerid, POS_POLICE_DUTY_X, POS_POLICE_DUTY_Y, POS_POLICE_DUTY_Z))
	    return SendClientMessage(playerid, COLOR_YELLOW2, "¡Debes estar en el vestuario!");

	if(CopDuty[playerid] == 0) {
		PlayerActionMessage(playerid,15.0,"se coloca el uniforme de policía y toma sus herramientras del armario.");
		SetPlayerArmour(playerid, 100.00);
		CopDuty[playerid] = 1;
		SetPlayerToFactionSkin(playerid);
		format(string, sizeof(string), "[Dpto. de policía]: %s está en servicio como oficial de policía.", GetPlayerNameEx(playerid));
		SendFactionMessage(FAC_PMA, COLOR_PMA, string);
	} else {
		PlayerActionMessage(playerid, 15.0, "se quita el uniforme de policía y guarda sus herramientras en el armario.");
		ResetPlayerWeapons(playerid);
		SetPlayerArmour(playerid, 0);
		CopDuty[playerid] = 0;
		SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
		SetPVarInt(playerid, "cantSaveItems", 1);
		SetTimerEx("cantSaveItems", 4000, false, "i", playerid);
	}
	return 1;
}

CMD:sosp(playerid, params[]) {
	cmd_sospechoso(playerid, params);
	return 1;
}

CMD:sospechoso(playerid, params[])
{
	new string[128], reason[64], targetID;

  	if(PlayerInfo[playerid][pFaction] != FAC_PMA)
	  	return 1;
	if(sscanf(params, "us[64]", targetID, reason))
		return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} (/sosp)echoso [ID/Jugador] [crímen]");
  	if(!IsPlayerConnected(targetID) && targetID != INVALID_PLAYER_ID)
   		return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{FF4600}[Error]:{C8C8C8} ID inválida.");
	if(targetID == playerid)
 		return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{FF4600}[Error]:{C8C8C8} no puedes hacerlo contigo mismo.");
	if(CopDuty[playerid] == 0)
 		return SendClientMessage(playerid, COLOR_YELLOW2, "¡Debes estar en servicio como oficial de policía!");

	SetPlayerWantedLevelEx(targetID, PlayerInfo[targetID][pWantedLevel] + 1);
	SendFMessage(playerid, COLOR_YELLOW2, "Has marcado a %s como sospechoso por: %s.", GetPlayerNameEx(targetID), reason);
	format(string, sizeof(string), "[Dpto. de policía]: %s ha marcado a %s como sospechoso por: %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(targetID), reason);
	SendFactionMessage(FAC_PMA, COLOR_PMA, string);
	PlayerInfo[targetID][pAccusedOf] = reason;
	PlayerInfo[targetID][pAccusedBy] = GetPlayerNameEx(playerid);
	return 1;
}

CMD:localizar(playerid,params[])
{
    new targetVehicle;

	if(PlayerInfo[playerid][pFaction] != FAC_SIDE && PlayerInfo[playerid][pFaction] != FAC_PMA)
		return 1;
    if(sscanf(params, "i", targetVehicle))
   		return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /localizar [ID Vehiculo]");
   	if(CopDuty[playerid] == 0 && SIDEDuty[playerid] == 0)
    	return SendClientMessage(playerid, COLOR_YELLOW2, "¡Debes estar en servicio!");
	if(PlayerInfo[playerid][pFaction] == FAC_PMA)
	{
		if(VehicleInfo[GetPlayerVehicleID(playerid)][VehFaction] != FAC_PMA && GetPlayerBuilding(playerid) != BLD_PMA)
	    	return SendClientMessage(playerid, COLOR_WHITE, "Debes estar en la comisaría o dentro de una patrulla.");
	}
	if(CopTrace[playerid] != 0)
	    return SendClientMessage(playerid, COLOR_WHITE, "Debes esperar 30 segundos antes de usar nuevamente el comando.");
	if(targetVehicle == INVALID_VEHICLE_ID || VehicleInfo[targetVehicle][VehFaction] != PlayerInfo[playerid][pFaction])
	    return SendClientMessage(playerid, COLOR_WHITE, "Vehiculo no disponible para rastreo. (Debe ser de tu facción)");

	new Float:vehPosX, Float:vehPosY, Float:vehPosZ, string[128], area[MAX_ZONE_NAME];
	GetVehiclePos(targetVehicle, vehPosX, vehPosY, vehPosZ);
	SetPlayerCheckpoint(playerid, vehPosX, vehPosY, vehPosZ, 4.0);
	GetCoords2DZone(vehPosX, vehPosY, area, MAX_ZONE_NAME);
	format(string, sizeof(string),"[Central]: %s ha rastreado el móvil Nro.%d en la zona de %s.", GetPlayerNameEx(playerid), targetVehicle, area);
	if(PlayerInfo[playerid][pFaction] == FAC_SIDE)
		SendFactionMessage(FAC_SIDE, COLOR_PMA, string);
	else
	    SendFactionMessage(FAC_PMA, COLOR_PMA, string);
    SendClientMessage(playerid, COLOR_YELLOW2, "Localizas mediante rastreo satelital la ubicación precisa del móvil. Esta se ha marcado en tu GPS.");
	CopTrace[playerid] = 1;
	SetTimerEx("CopTraceAvailable", 30000, false, "i", playerid);
	return 1;
}
public CopTraceAvailable(playerid)
{
	CopTrace[playerid] = 0;
	return 1;
}

CMD:ref(playerid, params[]) {
	cmd_refuerzos(playerid, params);
	return 1;
}

CMD:refuerzos(playerid, params[])
{
	new cmde;

	if(PlayerInfo[playerid][pFaction] != FAC_SIDE && PlayerInfo[playerid][pFaction] != FAC_PMA && PlayerInfo[playerid][pFaction] != FAC_HOSP)
		return 1;
    if(sscanf(params, "d", cmde))
        return SendClientMessage(playerid, COLOR_GREY, "{5CCAF1}[Sintaxis]:{C8C8C8} (/ref)uerzos [PMA = 1, HMA = 2, TODOS = 3]");
	if(CopDuty[playerid] == 0 && SIDEDuty[playerid] == 0 && MedDuty[playerid] == 0)
    	return SendClientMessage(playerid, COLOR_YELLOW2, "¡Debes estar en servicio!");
	if(cmde < 1 || cmde > 3)
	    return SendClientMessage(playerid, COLOR_GREY, "{5CCAF1}[Sintaxis]:{C8C8C8} (/ref)uerzos [PMA = 1, HMA = 2, TODOS = 3]");

	new Float:x, Float:y, Float:z, area[MAX_ZONE_NAME];
	GetPlayerPos(playerid, x, y ,z);
	GetCoords2DZone(x, y, area, MAX_ZONE_NAME);
 	if(GetPVarInt(playerid, "requestingBackup") != 1)
	{
	    SetPVarInt(playerid, "requestingBackup", 1);
		switch(cmde)
		{
			case 1: {
				foreach(Player, i) {
					if(PlayerInfo[i][pFaction] == FAC_PMA && CopDuty[i]) {
						SetPlayerMarkerForPlayer(i, playerid, COLOR_DBLUE);
						SendFMessage(i, COLOR_GREY, "[CENTRAL]: %s requiere asistencia inmediata en la zona de %s, lo marcamos en azul en el mapa.", GetPlayerNameEx(playerid), area);
					}
				}
			}
			case 2: {
				foreach(Player, i) {
					if(PlayerInfo[i][pFaction] == FAC_HOSP && MedDuty[i]) {
						SetPlayerMarkerForPlayer(i, playerid, COLOR_DBLUE);
						SendFMessage(i, COLOR_GREY, "[CENTRAL]: %s requiere asistencia inmediata en la zona de %s, lo marcamos en azul en el mapa.", GetPlayerNameEx(playerid), area);
					}
				}
			}
			case 3: {
				foreach(Player, i) {
					if( (PlayerInfo[i][pFaction] == FAC_PMA && CopDuty[i]) || (PlayerInfo[i][pFaction] == FAC_HOSP && MedDuty[i]) || (PlayerInfo[i][pFaction] == FAC_SIDE && SIDEDuty[i]) ) {
						SetPlayerMarkerForPlayer(i, playerid, COLOR_DBLUE);
						SendFMessage(i, COLOR_GREY, "[CENTRAL]: %s requiere asistencia inmediata en la zona de %s, lo marcamos en azul en el mapa.", GetPlayerNameEx(playerid), area);
					}
				}
			}
		}
	}
	SendClientMessage(playerid, COLOR_WHITE, "Para cancelar la solicitud utiliza /cref");
	return 1;
}

CMD:cref(playerid, params[]) {
	BackupClear(playerid, 0);
	return 1;
}

CMD:vercargos(playerid, params[])
{
	new targetid;
	
	if(PlayerInfo[playerid][pFaction] != FAC_SIDE && PlayerInfo[playerid][pFaction] != FAC_PMA)
		return 1;
    if(sscanf(params, "u", targetid))
        return SendClientMessage(playerid, COLOR_GREY, "{5CCAF1}[Sintaxis]:{C8C8C8} /vercargos [ID/Jugador]");
	if(CopDuty[playerid] == 0 && SIDEDuty[playerid] == 0)
    	return SendClientMessage(playerid, COLOR_YELLOW2, "¡Debes estar en servicio!");
    if(targetid == INVALID_PLAYER_ID)
        return SendClientMessage(playerid, COLOR_YELLOW2, "Jugador inválido.");
	if(PlayerInfo[playerid][pFaction] == FAC_PMA)
	{
	 	if(VehicleInfo[GetPlayerVehicleID(playerid)][VehFaction] != FAC_PMA && GetPlayerBuilding(playerid) != BLD_PMA)
	 	    return SendClientMessage(playerid, COLOR_YELLOW2, "Debes estar en la comisaría o dentro de una patrulla.");
	} else
		if(PlayerInfo[playerid][pFaction] == FAC_SIDE)
		{
		 	if(VehicleInfo[GetPlayerVehicleID(playerid)][VehFaction] != FAC_SIDE && GetPlayerBuilding(playerid) != BLD_SIDE)
		 	    return SendClientMessage(playerid, COLOR_YELLOW2, "Debes estar en la central o dentro de algun móvil.");
		}

	SendFMessage(playerid, COLOR_LIGHTGREEN, "==================[Cargos de %s]==================", GetPlayerNameEx(targetid));
	SendFMessage(playerid, COLOR_WHITE, "- Nivel de búsqueda: %d", PlayerInfo[targetid][pWantedLevel]);
	SendFMessage(playerid, COLOR_WHITE, "- Acusado de: %s", PlayerInfo[targetid][pAccusedOf]);
	SendFMessage(playerid, COLOR_WHITE, "- Acusado por: %s", PlayerInfo[targetid][pAccusedBy]);
	return 1;
}

CMD:geof(playerid, params[])
{
	new string[128], toggle;

	if(PlayerInfo[playerid][pFaction] != FAC_PMA)
		return 1;
	if(PlayerInfo[playerid][pRank] > 4 || !CopDuty[playerid])
	    return SendClientMessage(playerid, COLOR_YELLOW2, "Debes estar en servicio como policía y tener el rango suficiente.");
	if(sscanf(params, "i", toggle)) {
 		SendClientMessage(playerid, COLOR_GREY, "{5CCAF1}[Sintaxis]:{C8C8C8} /geof [0-1]");
   		switch(GEOF) {
			case 0: SendClientMessage(playerid, COLOR_WHITE, "Estado G.E.O.F.: {D40000}desautorizado");
		    case 1: SendClientMessage(playerid, COLOR_WHITE, "Estado G.E.O.F.: {00D41C}autorizado");
   		}
   		return 1;
	}
	if(toggle < 0 || toggle > 1)
	    return SendClientMessage(playerid, COLOR_GREY, "{5CCAF1}[Sintaxis]:{C8C8C8} /geof [0-1]");

	if(toggle == 1 && GEOF != 1) {
 		format(string, sizeof(string), "¡Atención a todas las unidades! el G.E.O.F. ha sido autorizado por %s.", GetPlayerNameEx(playerid));
		SendFactionMessage(FAC_PMA, COLOR_PMA, string);
        GEOF = 1;
	} else
		if(toggle == 0 && GEOF != 0) {
  			format(string, sizeof(string), "¡Atención a todas las unidades! el G.E.O.F. ha sido desautorizado por %s.", GetPlayerNameEx(playerid));
			SendFactionMessage(FAC_PMA, COLOR_PMA, string);
	        GEOF = 0;
		}
	return 1;
}

CMD:ult(playerid, params[]) {
	cmd_ultimallamada(playerid, params);
	return 1;
}

CMD:ultimallamada(playerid, params[])
{
	new faction = PlayerInfo[playerid][pFaction];
	
	if(faction != FAC_PMA && faction != FAC_HOSP)
	    return 1;
	if(!CopDuty[playerid] && !MedDuty[playerid])
	    return SendClientMessage(playerid, COLOR_YELLOW2, "Debes estar en servicio como paramédico o policía.");
	

	if(faction == FAC_PMA)
	{
	    if(lastPoliceCallNumber == 0)
			return SendClientMessage(playerid, COLOR_YELLOW2, "La última llamada no ha podido ser registrada.");
   		if(VehicleInfo[GetPlayerVehicleID(playerid)][VehFaction] != FAC_PMA && GetPlayerBuilding(playerid) != BLD_PMA)
			return SendClientMessage(playerid, COLOR_YELLOW2, "Debes estar en la comisaría o dentro de una patrulla.");
  		SetPlayerCheckpoint(playerid, lastPoliceCallPos[0], lastPoliceCallPos[1], lastPoliceCallPos[2], 3.0);
  		SendFMessage(playerid, COLOR_PMA, "El último llamado al 911 (policía) ha sido con el número %d, ultima localización marcada en tu GPS.", lastPoliceCallNumber);
	} else
		if(faction == FAC_HOSP)
		{
		    if(lastMedicCallNumber == 0)
				return SendClientMessage(playerid, COLOR_YELLOW2, "La última llamada no ha podido ser registrada.");
	   		if(VehicleInfo[GetPlayerVehicleID(playerid)][VehFaction] != FAC_HOSP && GetPlayerBuilding(playerid) != BLD_HOSP && GetPlayerBuilding(playerid) != BLD_HOSP2)
	   		    return SendClientMessage(playerid, COLOR_YELLOW2, "Debes estar en el hospital o dentro de un vehículo de paramédico.");
		    SetPlayerCheckpoint(playerid, lastMedicCallPos[0], lastMedicCallPos[1], lastMedicCallPos[2], 3.0);
		    SendFMessage(playerid, COLOR_PMA, "El último llamado al 911 (paramédicos) ha sido con el número %d, ultima localización marcada en tu GPS.", lastMedicCallNumber);
		}
	return 1;
}

CMD:equipo(playerid, params[]) {
	new
		id;

	if(PlayerInfo[playerid][pFaction] == FAC_SIDE && SIDEDuty[playerid]) {
		if(sscanf(params, "d", id)) {
			SendClientMessage(playerid, COLOR_WHITE, "{5CCAF1}[Sintaxis]:{C8C8C8} /equipo [equipo]");
			SendClientMessage(playerid, COLOR_GREEN, "|_______ Casilleros SIDE _______|");
			SendClientMessage(playerid, COLOR_GRAD1, "| 1: Externo");
			SendClientMessage(playerid, COLOR_GRAD1, "| 2: Agente");
			SendClientMessage(playerid, COLOR_GRAD2, "| 3: Alpha (S.T.A.R.S.)");
			SendClientMessage(playerid, COLOR_GRAD2, "| 4: Bravo (S.T.A.R.S.)");
			SendClientMessage(playerid, COLOR_GRAD3, "| 5: Staff Profesional");
		} else if(PlayerToPoint(5.0, playerid, POS_SIDE_DUTY_X, POS_SIDE_DUTY_Y, POS_SIDE_DUTY_Z)) {
		    switch(id) {
		        case 1: {
                    if(PlayerInfo[playerid][pRank] <= 8) {
		                ResetPlayerWeapons(playerid);
		            	GivePlayerWeapon(playerid, 3, 1); // Macana
						GivePlayerWeapon(playerid, 41, 250); // Spraycan
						GivePlayerWeapon(playerid, 43, 20); // Cámara
						GivePlayerWeapon(playerid, 23, 100); // Silenciada
		            } else {
		            	SendFMessage(playerid, COLOR_YELLOW2, "Debes ser al menos un %s para tener acceso a este equipo.", GetRankName(FAC_SIDE, 8));
						return 1;
		            }
				}
				case 2: {
                    if(PlayerInfo[playerid][pRank] <= 7) {
  						ResetPlayerWeapons(playerid);
		            	GivePlayerWeapon(playerid, 3, 1); // Macana
						GivePlayerWeapon(playerid, 41, 250); // Spraycan
						GivePlayerWeapon(playerid, 43, 20); // Cámara
						GivePlayerWeapon(playerid, 24, 60); // DEagle
		            } else {
		            	SendFMessage(playerid, COLOR_YELLOW2, "Debes ser al menos un %s para tener acceso a este equipo.", GetRankName(FAC_SIDE, 7));
						return 1;
		            }
				}
				case 3: {
                    if(PlayerInfo[playerid][pRank] <= 4 && STARS == 1) {
		                ResetPlayerWeapons(playerid);
		            	GivePlayerWeapon(playerid, 4, 1); // Cuchillo
						GivePlayerWeapon(playerid, 41, 250); // Spraycan
						GivePlayerWeapon(playerid, 43, 20); // Cámara
						GivePlayerWeapon(playerid, 24, 60); // DEagle
						GivePlayerWeapon(playerid, 34, 20); // Sniper
						SetPlayerSkin(playerid, 285);
		            } else {
		            	SendFMessage(playerid, COLOR_YELLOW2, "Debes ser un %s para tener acceso a este equipo.", GetRankName(FAC_SIDE, 4));
						return 1;
		            }
				}
				case 4: {
                    if(PlayerInfo[playerid][pRank] <= 4 && STARS == 1) {
		                ResetPlayerWeapons(playerid);
				        GivePlayerWeapon(playerid, 4, 1); // Cuchillo
						GivePlayerWeapon(playerid, 41, 250); // Spraycan
						GivePlayerWeapon(playerid, 43, 20); // Cámara
						GivePlayerWeapon(playerid, 24, 60); // DEagle
						GivePlayerWeapon(playerid, 31, 250); // M4
						SetPlayerSkin(playerid, 285);
		            } else {
		            	SendFMessage(playerid, COLOR_YELLOW2, "Debes ser un %s para tener acceso a este equipo.", GetRankName(FAC_SIDE, 4));
						return 1;
		            }
				}
				case 5: {
                    if(PlayerInfo[playerid][pRank] <= 3) {
		                ResetPlayerWeapons(playerid);
		                GivePlayerWeapon(playerid, 43, 50); // Cámara
		            	GivePlayerWeapon(playerid, 4, 1); // Cuchillo
						GivePlayerWeapon(playerid, 24, 60); // DEagle
		            } else {
		            	SendFMessage(playerid, COLOR_YELLOW2, "Debes ser al menos un %s para tener acceso a este equipo.", GetRankName(FAC_SIDE, 3));
						return 1;
		            }
				}
		    }
		    TTAZER[playerid] = 1;
		    resetTazerWeapons(playerid);
		}
	} else if(PlayerInfo[playerid][pFaction] == FAC_PMA && CopDuty[playerid]) {
		if(sscanf(params, "d", id)) {
			SendClientMessage(playerid, COLOR_WHITE, "{5CCAF1}[Sintaxis]:{C8C8C8} /equipo [equipo]");
			SendClientMessage(playerid, COLOR_GREEN, "|_______ Casilleros PM _______|");
			SendClientMessage(playerid, COLOR_GRAD1, "| 1: Cadete                8: Comisario ");
			SendClientMessage(playerid, COLOR_GRAD1, "| 2: Oficial                 9: O.E. 1 (G.E.O.F.)");
			SendClientMessage(playerid, COLOR_GRAD2, "| 3: Cabo                   10: O.E. 2 (G.E.O.F.)");
			SendClientMessage(playerid, COLOR_GRAD2, "| 4: Sargento             11: O.E. 3 (G.E.O.F.)");
			SendClientMessage(playerid, COLOR_GRAD3, "| 5: Sargento Mayor  12: O.E. 4 (G.E.O.F.)");
			SendClientMessage(playerid, COLOR_GRAD4, "| 6: Teniente             13: D.I.");
			SendClientMessage(playerid, COLOR_GRAD5, "| 7: Sub Comisario    14: Civil");
		} else if(PlayerToPoint(5.0, playerid, POS_POLICE_DUTY_X, POS_POLICE_DUTY_Y, POS_POLICE_DUTY_Z)) {
		    switch(id) {
		        case 1: {
		            if(PlayerInfo[playerid][pRank] <= 8) {
		                ResetPlayerWeapons(playerid);
		            	GivePlayerWeapon(playerid, 3, 1); // Macana
						GivePlayerWeapon(playerid, 41, 250); // Spraycan
		            	SetPlayerSkin(playerid, 71); // Vigilante
		            } else {
		            	SendFMessage(playerid, COLOR_YELLOW2, "Debes ser un %s para tener acceso a este equipo.", GetRankName(FAC_PMA, 8));
						return 1;
		            }
		        }
		        case 2: {
		            if(PlayerInfo[playerid][pRank] <= 7) {
		                ResetPlayerWeapons(playerid);
		            	GivePlayerWeapon(playerid, 3, 1); // Macana
						GivePlayerWeapon(playerid, 41, 250); // Spraycan
						GivePlayerWeapon(playerid, 22, 100); // 9mm
		            	SetPlayerSkin(playerid, 266); // Oficial
		            } else {
		            	SendFMessage(playerid, COLOR_YELLOW2, "Debes ser un %s para tener acceso a este equipo.", GetRankName(FAC_PMA, 7));
						return 1;
		            }
		        }
		        case 3: {
		            if(PlayerInfo[playerid][pRank] <= 6) {
		                ResetPlayerWeapons(playerid);
		            	GivePlayerWeapon(playerid, 3, 1); // Macana
						GivePlayerWeapon(playerid, 41, 250); // Spraycan
						GivePlayerWeapon(playerid, 22, 100); // 9mm
						GivePlayerWeapon(playerid, 25, 25); // Escopeta
		            	SetPlayerSkin(playerid, 280); // Cabo
		            } else {
		            	SendFMessage(playerid, COLOR_YELLOW2, "Debes ser un %s para tener acceso a este equipo.", GetRankName(FAC_PMA, 6));
						return 1;
		            }
		        }
		        case 4: {
		            if(PlayerInfo[playerid][pRank] <= 5) {
		                ResetPlayerWeapons(playerid);
		            	GivePlayerWeapon(playerid, 3, 1); // Macana
						GivePlayerWeapon(playerid, 41, 250); // Spraycan
						GivePlayerWeapon(playerid, 24, 50); // Desert Eagle
						GivePlayerWeapon(playerid, 25, 35); // Escopeta
		            	SetPlayerSkin(playerid, 284); // Sargento
		            } else {
		            	SendFMessage(playerid, COLOR_YELLOW2, "Debes ser un %s para tener acceso a este equipo.", GetRankName(FAC_PMA, 5));
						return 1;
		            }
		        }
		        case 5: {
		            if(PlayerInfo[playerid][pRank] <= 4) {
		                ResetPlayerWeapons(playerid);
		            	GivePlayerWeapon(playerid, 3, 1); // Macana
						GivePlayerWeapon(playerid, 41, 250); // Spraycan
						GivePlayerWeapon(playerid, 24, 75); // Desert Eagle
						GivePlayerWeapon(playerid, 25, 50); // Escopeta
						GivePlayerWeapon(playerid, 33, 30); // Rifle de Caza
		            	SetPlayerSkin(playerid, 281); // Sargento Mayor
		            } else {
		            	SendFMessage(playerid, COLOR_YELLOW2, "Debes ser un %s para tener acceso a este equipo.", GetRankName(FAC_PMA, 4));
						return 1;
		            }
		        }
		        case 6: {
		            if(PlayerInfo[playerid][pRank] <= 3) {
		                ResetPlayerWeapons(playerid);
		            	GivePlayerWeapon(playerid, 3, 1); // Macana
						GivePlayerWeapon(playerid, 41, 250); // Spraycan
						GivePlayerWeapon(playerid, 24, 100); // Desert Eagle
						GivePlayerWeapon(playerid, 25, 50); // Escopeta
						GivePlayerWeapon(playerid, 33, 35); // Rifle de Caza
		            	SetPlayerSkin(playerid, 283); // Teniente
		            } else {
		            	SendFMessage(playerid, COLOR_YELLOW2, "Debes ser un %s para tener acceso a este equipo.", GetRankName(FAC_PMA, 3));
						return 1;
		            }
		        }
		        case 7: {
		            if(PlayerInfo[playerid][pRank] <= 2) {
		                ResetPlayerWeapons(playerid);
		            	GivePlayerWeapon(playerid, 3, 1); // Macana
						GivePlayerWeapon(playerid, 41, 250); // Spraycan
						GivePlayerWeapon(playerid, 24, 100); // Desert Eagle
						GivePlayerWeapon(playerid, 25, 50); // Escopeta
						GivePlayerWeapon(playerid, 33, 40); // Rifle de Caza
		            	SetPlayerSkin(playerid, 288); // Sub Comisario
		            } else {
		            	SendFMessage(playerid, COLOR_YELLOW2, "Debes ser un %s para tener acceso a este equipo.", GetRankName(FAC_PMA, 2));
						return 1;
		            }
		        }
		        case 8: {
		            if(PlayerInfo[playerid][pRank] <= 1) {
		                ResetPlayerWeapons(playerid);
		            	GivePlayerWeapon(playerid, 3, 1); // Macana
						GivePlayerWeapon(playerid, 41, 250); // Spraycan
						GivePlayerWeapon(playerid, 24, 100); // Desert Eagle
						GivePlayerWeapon(playerid, 25, 50); // Escopeta
						GivePlayerWeapon(playerid, 33, 50); // Rifle de Caza
		            	SetPlayerSkin(playerid, 282); // Comisario
		            } else {
		            	SendFMessage(playerid, COLOR_YELLOW2, "Debes ser un %s para tener acceso a este equipo.", GetRankName(FAC_PMA, 1));
						return 1;
		            }
		        }
		        case 9: {
		        	if(PlayerInfo[playerid][pRank] <= 6 && GEOF == 1) {
		        	    ResetPlayerWeapons(playerid);
		            	GivePlayerWeapon(playerid, 41, 200);
		            	GivePlayerWeapon(playerid, 17, 4);
		            	GivePlayerWeapon(playerid, 24, 50);
		            	GivePlayerWeapon(playerid, 25, 80);
		            	SetPlayerSkin(playerid, 285);
		            } else {
		            	SendFMessage(playerid, COLOR_YELLOW2, "Debes ser un %s para tener acceso a este equipo o tener autorización a G.E.O.F.", GetRankName(1, 6));
						return 1;
		            }
		        }
		        case 10: {
		        	if(PlayerInfo[playerid][pRank] <= 5 && GEOF == 1) {
		        	    ResetPlayerWeapons(playerid);
		            	GivePlayerWeapon(playerid, 41, 200);
		            	GivePlayerWeapon(playerid, 17, 4);
		            	GivePlayerWeapon(playerid, 24, 50);
		            	GivePlayerWeapon(playerid, 29, 200);
		            	SetPlayerSkin(playerid, 285);
		            } else {
		            	SendFMessage(playerid, COLOR_YELLOW2, "Debes ser un %s para tener acceso a este equipo o tener autorización a G.E.O.F.", GetRankName(FAC_PMA, 5));
						return 1;
		            }
		        }
		        case 11: {
		        	if(PlayerInfo[playerid][pRank] <= 4 && GEOF == 1) {
		        	    ResetPlayerWeapons(playerid);
		            	GivePlayerWeapon(playerid, 41, 200);
		            	GivePlayerWeapon(playerid, 17, 4);
		            	GivePlayerWeapon(playerid, 24, 50);
		            	GivePlayerWeapon(playerid, 31, 200);
		            	SetPlayerSkin(playerid, 285);
		            } else {
		            	SendFMessage(playerid, COLOR_YELLOW2, "Debes ser un %s para tener acceso a este equipo o tener autorización a G.E.O.F.", GetRankName(FAC_PMA, 4));
						return 1;
		            }
		        }
		        case 12: {
		        	if(PlayerInfo[playerid][pRank] <= 4 && GEOF == 1) {
		        	    ResetPlayerWeapons(playerid);
	            		GivePlayerWeapon(playerid, 41, 200);
		            	GivePlayerWeapon(playerid, 17, 4);
		            	GivePlayerWeapon(playerid, 24, 50);
		            	GivePlayerWeapon(playerid, 34, 40);
		            	SetPlayerSkin(playerid, 285);
		            } else {
		            	SendFMessage(playerid, COLOR_YELLOW2, "Debes ser un %s para tener acceso a este equipo o tener autorización a G.E.O.F.", GetRankName(FAC_PMA, 4));
						return 1;
		            }
		        }
		        case 13: {
		        	if(PlayerInfo[playerid][pRank] <= 4) {
		        	    ResetPlayerWeapons(playerid);
	            		GivePlayerWeapon(playerid, 41, 200);
		            	GivePlayerWeapon(playerid, 3, 1);
		            	GivePlayerWeapon(playerid, 24, 35);
		            	GivePlayerWeapon(playerid, 29, 200);
                        SetPlayerSkin(playerid, 286);
		            } else {
		            	SendFMessage(playerid, COLOR_YELLOW2, "Debes ser un %s para tener acceso a este equipo.", GetRankName(1, 4));
						return 1;
		            }
		        }
	            case 14: {
					SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
		        }
		    }
			SetPlayerArmour(playerid, 100);
			PlayerActionMessage(playerid, 15.0, "toma su equipo de los casilleros.");
			TTAZER[playerid] = 1;
			resetTazerWeapons(playerid);
		} else {
		    SendClientMessage(playerid, COLOR_YELLOW2, "Debes estar en el vestuario.");
		}
	} else if(PlayerInfo[playerid][pFaction] == FAC_HOSP && MedDuty[playerid]) {
		if(sscanf(params, "d", id)) {
			SendClientMessage(playerid, COLOR_WHITE, "{5CCAF1}[Sintaxis]:{C8C8C8} /equipo [equipo]");
			SendClientMessage(playerid, COLOR_GREEN, "|_______ Casilleros MED _______|");
			SendClientMessage(playerid, COLOR_GRAD1, "| 1: Paramédico Junior    4: Sub Director");
			SendClientMessage(playerid, COLOR_GRAD1, "| 2: Paramédico Senior    5: Director");
			SendClientMessage(playerid, COLOR_GRAD1, "| 3: Médico               6: Civil");
		} else if(PlayerToPoint(5.0, playerid, POS_MEDIC_DUTY_X, POS_MEDIC_DUTY_Y, POS_MEDIC_DUTY_Z)) {
		    switch(id) {
		        case 1: {
		            if(PlayerInfo[playerid][pRank] <= 8) {
		                ResetPlayerWeapons(playerid);
		                GivePlayerWeapon(playerid, 41, 250); // Spraycan
		            	SetPlayerSkin(playerid, 276); // Paramédico Junior
		            } else {
		            	SendFMessage(playerid, COLOR_YELLOW2, "Debes ser un %s para tener acceso a este equipo.", GetRankName(2, 5));
						return 1;
		            }
		        }
		        case 2: {
		            if(PlayerInfo[playerid][pRank] <= 6) {
		                ResetPlayerWeapons(playerid);
		                GivePlayerWeapon(playerid, 41, 250); // Spraycan
		            	SetPlayerSkin(playerid, 275); // Paramédico Senior
		            } else {
		            	SendFMessage(playerid, COLOR_YELLOW2, "Debes ser un %s para tener acceso a este equipo.", GetRankName(2, 4));
						return 1;
		            }
		        }
		        case 3: {
		            if(PlayerInfo[playerid][pRank] <= 5) {
		                ResetPlayerWeapons(playerid);
		                GivePlayerWeapon(playerid, 41, 250); // Spraycan
		            	SetPlayerSkin(playerid, 274); // Médico
		            } else {
		            	SendFMessage(playerid, COLOR_YELLOW2, "Debes ser un %s para tener acceso a este equipo.", GetRankName(2, 3));
						return 1;
		            }
		        }
		        case 4: {
		            if(PlayerInfo[playerid][pRank] <= 3) {
		                ResetPlayerWeapons(playerid);
		                GivePlayerWeapon(playerid, 41, 250); // Spraycan
		            	SetPlayerSkin(playerid, 70); // Sub Director
		            } else {
		            	SendFMessage(playerid, COLOR_YELLOW2, "Debes ser un %s para tener acceso a este equipo.", GetRankName(2, 2));
						return 1;
		            }
		        }
		        case 5: {
		            if(PlayerInfo[playerid][pRank] <= 1) {
		                ResetPlayerWeapons(playerid);
		                GivePlayerWeapon(playerid, 41, 250); // Spraycan
		            	SetPlayerSkin(playerid, 187); // Director
		            } else {
		            	SendFMessage(playerid, COLOR_YELLOW2, "Debes ser un %s para tener acceso a este equipo.", GetRankName(2, 1));
						return 1;
		            }
		        }
	            case 6: {
					SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]); // Civil
		        }
		    }
			PlayerInfo[playerid][pHealth] = 100;
			PlayerActionMessage(playerid, 15.0, "se coloca el uniforme de medico y toma su morral del armario.");
		} else {
		    SendClientMessage(playerid, COLOR_YELLOW2, "Debes estar en el vestuario.");
		}
	} else {
		SendClientMessage(playerid, COLOR_YELLOW2, "Debes estar en servicio.");
	}
	return 1;
}

//=================COMANDOS QUE LISTAN LINEAS / INFORMATIVOS====================

CMD:bol(playerid, params[])
{
	cmd_bolsillo(playerid, params);
	return 1;
}

CMD:bolsillo(playerid, params[])
{
	ShowPocket(playerid, playerid);
	return 1;
}

stock ShowInv(playerid, targetid)
{
	new itemid, param, pWeapons[13], pAmmo[13], weaponName[64];

	SendFMessage(playerid, COLOR_LIGHTGREEN, "==================[%s] (%d)=================", GetPlayerNameEx(targetid), targetid);
	for(new i = 1; i <= 12; i++) {
		GetPlayerWeaponData(targetid, i, pWeapons[i], pAmmo[i]);
		if(pWeapons[i] != 0) {
			GetWeaponName(pWeapons[i], weaponName, 255);
			SendFMessage(playerid, COLOR_WHITE, "- Arma encontrada: %s.", weaponName);
		}
	}
	SendClientMessage(playerid, COLOR_WHITE, "======================[Inventario]======================");
    for(new x = 0; x < INV_MAX_SLOTS; x++) {
    	itemid = getInvItem(targetid, x);
        param = getInvParam(targetid, x);
        if(getItemType(itemid) == ITEM_WEAPON) {
	       	SendFMessage(playerid, COLOR_WHITE, " - %d- Arma: %s - Munición: %d", x, itemName[itemid], param);
		} else
			if(getItemType(itemid) == ITEM_OTHER) {
        		SendFMessage(playerid, COLOR_WHITE, " - %d- Item: %s - Cantidad: %d", x, itemName[itemid], param);
			} else {
		    		SendFMessage(playerid, COLOR_WHITE, " - %d- Nada", x);
				}
  	}
}

stock ShowPocket(playerid, targetid)
{
	SendClientMessage(playerid, COLOR_WHITE, "=======================[Bolsillo]=======================");
   	if(PlayerInfo[targetid][pCigarettes] > 0)
   		SendFMessage(playerid, COLOR_WHITE, "- %d cigarrillos.", PlayerInfo[targetid][pCigarettes]);
	if(PlayerInfo[targetid][pLighter])
		SendClientMessage(playerid, COLOR_WHITE, "- Encendedor.");
	if(PlayerInfo[targetid][pRadio])
	    SendClientMessage(playerid, COLOR_WHITE, "- Radio Walkie Talkie.");
    if(PlayerInfo[targetid][pMask] > 0)
        SendClientMessage(playerid, COLOR_WHITE, "- Pañuelo.");
    if(PlayerInfo[targetid][pPhoneNumber] > 0)
        SendClientMessage(playerid, COLOR_WHITE, "- Teléfono.");
	if(PlayerInfo[targetid][pMarijuana] > 0)
	    SendFMessage(playerid, COLOR_WHITE, "- Marihuana: %d gramos.", PlayerInfo[targetid][pMarijuana]);
	if(PlayerInfo[targetid][pLSD] > 0)
	    SendFMessage(playerid, COLOR_WHITE, "- LSD: %d dosis.", PlayerInfo[targetid][pLSD]);
	if(PlayerInfo[targetid][pEcstasy] > 0)
	    SendFMessage(playerid, COLOR_WHITE, "- Extasis: %d pastillas.", PlayerInfo[targetid][pEcstasy]);
	if(PlayerInfo[targetid][pCocaine] > 0)
	    SendFMessage(playerid, COLOR_WHITE, "- Cocaína: %d gramos.", PlayerInfo[targetid][pCocaine]);
	SendClientMessage(playerid, COLOR_WHITE, "=====================================================");
}

CMD:mostrardoc(playerid, params[])
{
	new targetid, sexText[15];

    if(sscanf(params, "u", targetid))
        return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /mostrardoc [ID/Jugador]");
    if(!IsPlayerConnected(targetid) || targetid == INVALID_PLAYER_ID)
        return SendClientMessage(playerid, COLOR_YELLOW2, "Jugador inválido.");
	if(!ProxDetectorS(2.0, playerid, targetid))
	    return SendClientMessage(playerid, COLOR_YELLOW2, "El jugador se encuentra demasiado lejos.");

	switch(PlayerInfo[targetid][pSex]) {
 		case 0: sexText = "Femenino";
 		case 1: sexText = "Masculino";
	}
	SendClientMessage(targetid, COLOR_LIGHTGREEN, "=====================[Documento de Identidad]=====================");
 	SendFMessage(targetid, COLOR_WHITE, "Nombre: %s", GetPlayerNameEx(playerid));
 	SendFMessage(targetid, COLOR_WHITE, "Edad: %d", PlayerInfo[playerid][pAge]);
 	SendFMessage(targetid, COLOR_WHITE, "Sexo: %s", sexText);
	if(PlayerInfo[playerid][pHouseKey] != 0)
	{
 		new houselocation[MAX_ZONE_NAME];
		GetCoords2DZone(House[PlayerInfo[playerid][pHouseKey]][EntranceX],House[PlayerInfo[playerid][pHouseKey]][EntranceY], houselocation, MAX_ZONE_NAME);
		SendFMessage(targetid, COLOR_WHITE, "Domicilio: %d %s", PlayerInfo[playerid][pHouseKey], houselocation);
	} else
		SendClientMessage(targetid, COLOR_WHITE, "Domicilio: No tiene");
	SendClientMessage(targetid, COLOR_LIGHTGREEN, "===============================================================");
	PlayerPlayerActionMessage(playerid, targetid, 15.0, "toma su documento del bolsillo y se lo muestra a");
	return 1;
}

CMD:mostrarced(playerid, params[])
{
	new targetid, vehicleid;

    if(sscanf(params, "ui", targetid, vehicleid))
        return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /mostrarced [ID/Jugador] [ID vehículo]");
    if(!IsPlayerConnected(targetid) || targetid == INVALID_PLAYER_ID)
        return SendClientMessage(playerid, COLOR_YELLOW2, "Jugador inválido.");
	if(!ProxDetectorS(2.0, playerid, targetid))
	    return SendClientMessage(playerid, COLOR_YELLOW2, "El jugador se encuentra demasiado lejos.");
	if(vehicleid < 1 || vehicleid > MAX_VEH)
        return SendClientMessage(playerid, COLOR_YELLOW2, "Vehículo inválido.");

	if( vehicleid == PlayerInfo[playerid][pVeh1] ||
	    vehicleid == PlayerInfo[playerid][pVeh2] ||
	    (VehicleInfo[vehicleid][VehType] == VEH_FACTION && PlayerInfo[playerid][pFaction] == VehicleInfo[vehicleid][VehFaction]) ||
	    (VehicleInfo[vehicleid][VehType] == VEH_RENT && PlayerInfo[playerid][pRentCarID] == vehicleid) )
	{
		SendClientMessage(targetid, COLOR_LIGHTGREEN, "================[Cédula de Identificación del Automotor]===============");
	    SendFMessage(targetid, COLOR_WHITE, "Vehículo ID: %d", vehicleid);
	    SendFMessage(targetid, COLOR_WHITE, "Modelo %s", GetVehicleName(vehicleid));
	    SendFMessage(targetid, COLOR_WHITE, "Titular: %s", GetPlayerNameEx(playerid));
	    SendClientMessage(targetid, COLOR_WHITE, "Expedido por: Registro Nacional de la Propiedad del Automotor");
	    SendClientMessage(targetid, COLOR_LIGHTGREEN, "===============================================================");
	    PlayerPlayerActionMessage(playerid, targetid, 15.0, "toma una cédula verde del bolsillo y se la muestra a");
    }
    else
    	return SendClientMessage(playerid, COLOR_YELLOW2, "No tienes la cédula de ese vehículo, ¡No es tuyo!");
	return 1;
}

CMD:mostrarlic(playerid, params[])
{
	new targetid, lic[20];

    if(sscanf(params, "s[20]u", lic, targetid))
        return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /mostrarlic [Licencia] [ID/Jugador]. Licencias: conducir - vuelo - armas.");
    if(!IsPlayerConnected(targetid) || targetid == INVALID_PLAYER_ID)
        return SendClientMessage(playerid, COLOR_YELLOW2, "Jugador inválido.");
	if(!ProxDetectorS(2.0, playerid, targetid))
	    return SendClientMessage(playerid, COLOR_YELLOW2, "El jugador se encuentra demasiado lejos.");

    if(strcmp(lic, "conducir", true) == 0)
    {
        if(!PlayerInfo[playerid][pCarLic])
            return SendClientMessage(playerid, COLOR_YELLOW2, "No tienes una licencia de conducir.");
    	SendClientMessage(targetid, COLOR_LIGHTGREEN, "=======================[Licencia de Conducir]======================");
        SendFMessage(targetid, COLOR_WHITE, "Nombre: %s", GetPlayerNameEx(playerid));
       	SendFMessage(targetid, COLOR_WHITE, "Edad: %d", PlayerInfo[playerid][pAge]);
       	SendClientMessage(targetid, COLOR_WHITE, "Categoría: Original");
       	SendClientMessage(targetid, COLOR_WHITE, "Expedido por: Ministerio del Interior");
       	SendClientMessage(targetid, COLOR_LIGHTGREEN, "===============================================================");
       	PlayerPlayerActionMessage(playerid, targetid, 15.0, "toma su licencia de conducir del bolsillo y se la muestra a");
 	} else
	    if(strcmp(lic, "vuelo", true) == 0)
	    {
	        if(!PlayerInfo[playerid][pFlyLic])
	            return SendClientMessage(playerid, COLOR_YELLOW2, "No tienes una licencia de vuelo.");
	    	SendClientMessage(targetid, COLOR_LIGHTGREEN, "========================[Licencia de Vuelo]========================");
	        SendFMessage(targetid, COLOR_WHITE, "Nombre: %s", GetPlayerNameEx(playerid));
	       	SendFMessage(targetid, COLOR_WHITE, "Edad: %d", PlayerInfo[playerid][pAge]);
	       	SendClientMessage(targetid, COLOR_WHITE, "Expedido por: Dirección Nacional de Aeronáutica Civíl");
	       	SendClientMessage(targetid, COLOR_LIGHTGREEN, "===============================================================");
	       	PlayerPlayerActionMessage(playerid, targetid, 15.0, "toma su licencia de vuelo del bolsillo y se la muestra a");
	 	} else
	   		if(strcmp(lic, "armas", true) == 0)
		    {
		        if(!PlayerInfo[playerid][pWepLic])
		            return SendClientMessage(playerid, COLOR_YELLOW2, "No tienes una licencia de portación de armas.");
		    	SendClientMessage(targetid, COLOR_LIGHTGREEN, "==================[Licencia de Portación de Armas]===================");
		        SendFMessage(targetid, COLOR_WHITE, "Nombre: %s", GetPlayerNameEx(playerid));
		       	SendFMessage(targetid, COLOR_WHITE, "Edad: %d", PlayerInfo[playerid][pAge]);
		       	SendClientMessage(targetid, COLOR_WHITE, "Habilita: Pistola 9mm - Pistola Desert Eagle - Escopeta - Rifle de Caza");
		       	SendClientMessage(targetid, COLOR_WHITE, "Expedido por: Ministerio de Seguridad Pública");
		       	SendClientMessage(targetid, COLOR_LIGHTGREEN, "===============================================================");
		       	PlayerPlayerActionMessage(playerid, targetid, 15.0, "toma su licencia de portación de armas del bolsillo y se la muestra a");
		 	} else
		 	    return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /mostrarlic [Licencia] [ID/Jugador]. Licencias: conducir - vuelo - armas.");
	return 1;
}

//===========================SISTEMA DE ADICCIONES==============================

AddPlayerAdiction(playerid, Float:drugAdiction)
{
	if(PlayerInfo[playerid][pAdictionPercent] + drugAdiction < 100.0)
		PlayerInfo[playerid][pAdictionPercent] += drugAdiction;
	else
	    PlayerInfo[playerid][pAdictionPercent] = 100.0;
	PlayerInfo[playerid][pAdictionAbstinence] = 30 * 60 + ADICTION_ABSTINENCE_MAX - floatround(PlayerInfo[playerid][pAdictionPercent] * (ADICTION_ABSTINENCE_MAX / 100), floatround_round);
}

Float:GetPlayerAdiction(playerid)
{
	return PlayerInfo[playerid][pAdictionPercent];
}

DeletePlayerAdiction(playerid, Float:drugAdiction)
{
	if(PlayerInfo[playerid][pAdictionPercent] - drugAdiction > 0.0)
    	PlayerInfo[playerid][pAdictionPercent] -= drugAdiction;
	else
	    PlayerInfo[playerid][pAdictionPercent] = 0.0;
    PlayerInfo[playerid][pAdictionAbstinence] = 30 * 60 + ADICTION_ABSTINENCE_MAX - floatround(PlayerInfo[playerid][pAdictionPercent] * (ADICTION_ABSTINENCE_MAX / 100), floatround_round);
}

forward UpdatePlayerAdiction();
public UpdatePlayerAdiction()
{
    foreach(new playerid : Player)
    {
    	if(cAFK[playerid] == 0 && PlayerInfo[playerid][pJailed] != 2 && AdminDuty[playerid] != 1) // Si no está AFK ni en Jail OOC
		{
			if(PlayerInfo[playerid][pAdictionPercent] > 0.0)
			{
			    if(PlayerInfo[playerid][pAdictionAbstinence] <= 30 * 60)
			    {
			    	if(PlayerInfo[playerid][pAdictionAbstinence] > 0)
					{
			        	PlayerInfo[playerid][pAdictionAbstinence] -= ADICTION_UPDATE_TIME;
			        	if(PlayerInfo[playerid][pAdictionAbstinence] <= 0.0)
			        	    SendClientMessage(playerid, COLOR_RED, "Ultima advertencia, consume alguna droga antes de los próximos 5 minutos o tu estado será crítico");
			        	else
							SendFMessage(playerid, COLOR_RED, "Entras en abstinencia. Consume alguna droga dentro de %d minutos o entrarás en estado crítico.", PlayerInfo[playerid][pAdictionAbstinence] / 60);
					} else
		   				{
							SendClientMessage(playerid, COLOR_RED, "Entras en un estado crítico causado por tu abstinencia. Unos paramédicos te socorren y te llevan al hospital.");
							SendClientMessage(playerid, COLOR_RED, "Luego de un tiempo logran salvarte, cobrándote $20.000. Si no lo tienes se descontará de tu cuenta bancaria.");
	   						if(GetPlayerCash(playerid) > ADICTION_REHAB_PRICE)
								GivePlayerCash(playerid, -ADICTION_REHAB_PRICE); // se cobra 18 mil por el tratamiento + 2 mil normales por morir
							else
								if(GetPlayerCash(playerid) > 0)
								{
									PlayerInfo[playerid][pBank] -= ADICTION_REHAB_PRICE - GetPlayerCash(playerid);
							    	ResetPlayerCash(playerid);
								} else
							    	PlayerInfo[playerid][pBank] -= ADICTION_REHAB_PRICE;
							SetPlayerHealthEx(playerid, 0.0);
		                    PlayerInfo[playerid][pAdictionAbstinence] = 30 * 60 + ADICTION_ABSTINENCE_MAX - floatround(PlayerInfo[playerid][pAdictionPercent] * (ADICTION_ABSTINENCE_MAX / 100), floatround_round);
			    		}
				} else
			        PlayerInfo[playerid][pAdictionAbstinence] -= ADICTION_UPDATE_TIME;
			}
		}
	}
	return 1;
}

//==========================SISTEMA DE HAMBRE Y SED=============================

CreatePlayerBasicNeeds(playerid)
{
    pThirstBar[playerid] = CreateProgressBar(578.00, 55.00, 27.50, 4.19, 14287103, 100.0);
	pHungerBar[playerid] = CreateProgressBar(578.00, 61.00, 27.50, 4.19, -120585985, 100.0);
	
	TextDrawShowForPlayer(playerid, ThirstTD);
	TextDrawShowForPlayer(playerid, HungerTD);

	SetProgressBarValue(pThirstBar[playerid], PlayerInfo[playerid][pThirst]);
	SetProgressBarValue(pHungerBar[playerid], PlayerInfo[playerid][pHunger]);
	ShowProgressBarForPlayer(playerid, pThirstBar[playerid]);
	ShowProgressBarForPlayer(playerid, pHungerBar[playerid]);
	UpdateProgressBar(pThirstBar[playerid], playerid);
	UpdateProgressBar(pHungerBar[playerid], playerid);
}

DeletePlayerBasicNeeds(playerid)
{
	DestroyProgressBar(pThirstBar[playerid]);
	DestroyProgressBar(pHungerBar[playerid]);
 	TextDrawHideForPlayer(playerid, ThirstTD);
    TextDrawHideForPlayer(playerid, HungerTD);
}

RefillPlayerBasicNeeds(playerid)
{
	if(PlayerInfo[playerid][pThirst] <= 0.0) // Si murio por falta de agua
	{
	    PlayerInfo[playerid][pThirst] = 30.0;
	    SetProgressBarValue(pThirstBar[playerid], PlayerInfo[playerid][pThirst]);
	    UpdateProgressBar(pThirstBar[playerid], playerid);
	}
	if(PlayerInfo[playerid][pHunger] <= 0.0) // Si murio por falta de comida
	{
	    PlayerInfo[playerid][pHunger] = 30.0;
	    SetProgressBarValue(pHungerBar[playerid], PlayerInfo[playerid][pHunger]);
		UpdateProgressBar(pHungerBar[playerid], playerid);
	}
}

forward UpdatePlayerBasicNeeds();
public UpdatePlayerBasicNeeds()
{
	new Float:percentLoss = 100 / (BASIC_NEEDS_MAX_TIME / BASIC_NEEDS_UPDATE_TIME);

    foreach(new playerid : Player)
    {
        if(cAFK[playerid] == 0 && PlayerInfo[playerid][pJailed] != 2 && AdminDuty[playerid] != 1) // Si no está AFK ni en Jail OOC
		{
			if(PlayerInfo[playerid][pThirst] > 0.0)
			{
				if(PlayerInfo[playerid][pThirst] - percentLoss <= 0.0)
					PlayerInfo[playerid][pThirst] = 0.0;
				else
					PlayerInfo[playerid][pThirst] -= percentLoss;

			  	SetProgressBarValue(pThirstBar[playerid], PlayerInfo[playerid][pThirst]);
			    UpdateProgressBar(pThirstBar[playerid], playerid);
			} else
			    {
				    if(PlayerInfo[playerid][pHealth] - BASIC_NEEDS_HP_LOSS <= 0.0)
				        PlayerInfo[playerid][pHealth] = 0.0;
					else
			 			PlayerInfo[playerid][pHealth] -= BASIC_NEEDS_HP_LOSS;
			    	SendClientMessage(playerid, COLOR_RED, "Estas deshidratandote, bebe algo urgente o morirás de sed.");
			    }

			if(PlayerInfo[playerid][pHunger] > 0.0)
			{
				if(PlayerInfo[playerid][pHunger] - percentLoss <= 0.0)
					PlayerInfo[playerid][pHunger] = 0.0;
				else
					PlayerInfo[playerid][pHunger] -= percentLoss;

				SetProgressBarValue(pHungerBar[playerid], PlayerInfo[playerid][pHunger]);
			    UpdateProgressBar(pHungerBar[playerid], playerid);
			} else
				{
				    if(PlayerInfo[playerid][pHealth] - BASIC_NEEDS_HP_LOSS <= 0.0)
				        PlayerInfo[playerid][pHealth] = 0.0;
					else
			 			PlayerInfo[playerid][pHealth] -= BASIC_NEEDS_HP_LOSS;
			    	SendClientMessage(playerid, COLOR_RED, "No has comido en mucho tiempo, come algo urgente o morirás de hambre.");
			    }
		}
	}
	return 1;
}

PlayerDrink(playerid, Float:value)
{
	if(PlayerInfo[playerid][pThirst] + value >= 100.0)
	{
    	PlayerInfo[playerid][pThirst] = 100.0;
    	SendClientMessage(playerid, COLOR_YELLOW2, "Has saciado tu sed.");
	}
	else
	    PlayerInfo[playerid][pThirst] += value;
	SetProgressBarValue(pThirstBar[playerid], PlayerInfo[playerid][pThirst]);
	UpdateProgressBar(pThirstBar[playerid], playerid);
}

PlayerEat(playerid, Float:value)
{
	if(PlayerInfo[playerid][pHunger] + value >= 100.0)
	{
    	PlayerInfo[playerid][pHunger] = 100.0;
    	SendClientMessage(playerid, COLOR_YELLOW2, "Te encuentras satisfecho.");
	}
	else
	    PlayerInfo[playerid][pHunger] += value;
	SetProgressBarValue(pHungerBar[playerid], PlayerInfo[playerid][pHunger]);
	UpdateProgressBar(pHungerBar[playerid], playerid);
}

//=============================COMANDOS DEL SAME================================

CMD:morir(playerid, params[]) {
	if(GetPVarInt(playerid, "disabled") == DISABLE_DEATHBED) {
		SetPVarInt(playerid, "disabled", DISABLE_NONE);
        SetPlayerHealthEx(playerid, 0);
    } else {
        SendClientMessage(playerid, COLOR_YELLOW2, "No puedes utilizarlo en este momento.");
    }
    return 1;
}

CMD:mservicio(playerid, params[])
{
	new string[128];

    if(PlayerInfo[playerid][pFaction] != FAC_HOSP)
		return 1;
	if(!PlayerToPoint(5.0, playerid, POS_MEDIC_DUTY_X, POS_MEDIC_DUTY_Y, POS_MEDIC_DUTY_Z))
		return SendClientMessage(playerid, COLOR_YELLOW2, "¡Debes estar en el vestuario!");

	if(MedDuty[playerid] == 0) {
		PlayerInfo[playerid][pHealth] = 100;
		MedDuty[playerid] = 1;
		SetPlayerToFactionSkin(playerid);
		format(string, sizeof(string), "Anuncio: un paramédico se ha puesto en servicio.", GetPlayerNameEx(playerid));
		SendClientMessageToAll(COLOR_LIGHTGREEN, string);
	} else {
		PlayerActionMessage(playerid,15.0,"se quita el uniforme de medico y guarda su morral en el armario.");
		ResetPlayerWeapons(playerid);
		PlayerInfo[playerid][pHealth] = 100;
		MedDuty[playerid] = 0;
		SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
	}
	return 1;
}

forward HospHeal(playerid);
public HospHeal(playerid)
{
	if(HospHealing[playerid])
	{
		TogglePlayerControllable(playerid, 1);
		SetPlayerHealthEx(playerid, 100.0);
		HospHealing[playerid] = 0;
        PlayerDoMessage(playerid, 15.0, "El médico ha finalizado el tratamiento del paciente.");
        SetPVarInt(playerid, "disabled", DISABLE_NONE);
	}
    return 1;
}

CMD:curarse(playerid, params[])
{
	new string[128];

    if(GetPlayerBuilding(playerid) != BLD_HOSP && GetPlayerBuilding(playerid) != BLD_HOSP2)
        return SendClientMessage(playerid, COLOR_YELLOW2, "Debes estar en un hospital para usar este comando.");
	if(!PlayerToPoint(3.0, playerid, POS_HOSP_HEAL_X, POS_HOSP_HEAL_Y, POS_HOSP_HEAL_Z))
		return SendClientMessage(playerid, COLOR_YELLOW2, "Debes registrarte en la sala de recuperación.");
	if(HospHealing[playerid])
		return SendClientMessage(playerid, COLOR_YELLOW2, "Ya estás siendo curado.");
	if(GetPlayerCash(playerid) < PRICE_HOSP_HEAL)
	{
	    SendFMessage(playerid, COLOR_YELLOW2, "No tienes el dinero necesario para el tratamiento ($%d).", PRICE_HOSP_HEAL);
		return 1;
	}

	GivePlayerCash(playerid, -PRICE_HOSP_HEAL);
	FactionInfo[FAC_HOSP][fBank] += PRICE_HOSP_HEAL;
	PlayerDoMessage(playerid, 15.0, "Un médico examina al paciente y tras un diagnostico inicial, comienza a curarlo.");
	TogglePlayerControllable(playerid, 0);
	SetTimerEx("HospHeal", 30000, false, "i", playerid);
	format(string, sizeof(string), "[Hospital]: El paciente %s se ha registrado en el %s y está siendo atendido.", GetPlayerNameEx(playerid), Building[GetPlayerBuilding(playerid)][blText]);
	SendFactionMessage(FAC_HOSP, COLOR_WHITE, string);
	HospHealing[playerid] = 1;
	SetPVarInt(playerid, "disabled", DISABLE_HEALING);
	GameTextForPlayer(playerid, "Aguarda unos instantes mientras te atienden", 10000, 4);
	return 1;
}

CMD:curar(playerid,params[])
{
    new target, cost;

	if(PlayerInfo[playerid][pFaction] != FAC_HOSP)
	    return 1;
    if(!MedDuty[playerid])
		return SendClientMessage(playerid, COLOR_YELLOW2, "¡Debes estar en servicio!");
    if(sscanf(params, "ud", target, cost))
		return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /curar [ID/Jugador] [precio]");
	if(cost < 0 || cost > 500)
	    return SendClientMessage(playerid, COLOR_YELLOW2, "¡El costo no puede ser menor a 0 o mayor a 500!");
    if(GetPVarInt(playerid, "isHealing") != 0)
        return SendClientMessage(playerid, COLOR_YELLOW2, "¡Ya estás curando a una persona: debes esperar 15 segundos para usar nuevamente el comando!");
	if(target == INVALID_PLAYER_ID || target == playerid)
		return SendClientMessage(playerid, COLOR_YELLOW2, "Jugador inválido.");
	if(!ProxDetectorS(2.0, playerid, target))
		return SendClientMessage(playerid, COLOR_YELLOW2, "¡Debes estar cerca del herido!");
  	if(GetPVarInt(target, "disabled") == DISABLE_DEATHBED)
  		return SendClientMessage(playerid, COLOR_YELLOW2, "El sujeto se encuentra en su lecho de muerte y no hay nada que puedas hacer por él.");

	SendFMessage(target, COLOR_LIGHTBLUE, "El médico %s te ha ofrecido un tratamiento curativo por $%d. Escribe (/aceptar medico) para recibirlo.", GetPlayerNameEx(playerid), cost);
    SendClientMessage(target, COLOR_WHITE, "Si no tienes el dinero, se te cobrará hasta lo que tengas, y el resto se descontará de tu cuenta bancaria.");
 	SendFMessage(playerid, COLOR_LIGHTBLUE, "Le has ofrecido a %s un tratamiento curativo por $%d.", GetPlayerNameEx(target), cost);
	SetPVarInt(playerid, "healTarget", target);
	SetPVarInt(playerid, "isHealing", 1);
	SetPVarInt(target, "healIssuer", playerid);
	SetPVarInt(target, "healCost", cost);
	SetTimerEx("healTimer", 15000, false, "i", playerid);
	return 1;
}

CMD:rehabilitar(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pFaction] != FAC_HOSP)
	    return 1;
    if(sscanf(params, "u", targetid))
		return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /rehabilitar [IDJugador/ParteDelNombre]");
	if(GetPlayerBuilding(playerid) != BLD_HOSP && GetPlayerBuilding(playerid) != BLD_HOSP2)
	    return SendClientMessage(playerid, COLOR_YELLOW2, "¡Debes estar en el hospital!");
 	if(!MedDuty[playerid])
		return SendClientMessage(playerid, COLOR_YELLOW2, "¡Debes estar en servicio!");
	if(targetid == INVALID_PLAYER_ID || targetid == playerid)
		return SendClientMessage(playerid, COLOR_YELLOW2, "Jugador inválido.");
	if(RehabOffer[targetid] != 999)
	    return SendClientMessage(playerid, COLOR_YELLOW2, "El sujeto ya está con otro tratamiento en curso.");
	if(GetPlayerAdiction(targetid) == 0)
	    return SendClientMessage(playerid, COLOR_YELLOW2, "El sujeto no parece tener problemas de adicción.");
	if(GetPlayerCash(targetid) < ADICTION_REHAB_PRICE)
	{
	    SendFMessage(playerid, COLOR_YELLOW2, "El sujeto no tiene el dinero necesario para la rehabilitación. ($%d)", ADICTION_REHAB_PRICE);
		return 1;
	}

    SendFMessage(targetid, COLOR_LIGHTBLUE, "El médico %s te ofrece una rehabilitación con $%d de costo. Tipea /rehabilitarse si quieres. La oferta acaba en 15 segundos.", GetPlayerNameEx(playerid), ADICTION_REHAB_PRICE);
	SendFMessage(playerid, COLOR_LIGHTBLUE, "Le has ofrecido a %s un tratamiento de rehabilitación cuyo costo es de $%d. La oferta termina en 15 segundos.", GetPlayerNameEx(targetid), ADICTION_REHAB_PRICE);
	RehabOffer[targetid] = playerid;
	SetTimerEx("RehabOfferCancel", 15000, false, "i", targetid);
	return 1;
}

forward RehabOfferCancel(playerid);
public RehabOfferCancel(playerid)
{
    RehabOffer[playerid] = 999;
}

CMD:rehabilitarse(playerid, params[])
{
	new aleatorio = random(100);

	if(RehabOffer[playerid] == 999)
		return SendClientMessage(playerid, COLOR_YELLOW2, "Nadie te ha ofrecido un tratamiento de rehabilitación.");
 	if(RehabOffer[playerid] == INVALID_PLAYER_ID)
		return SendClientMessage(playerid, COLOR_YELLOW2, "Jugador inválido.");
 	if(GetPlayerBuilding(playerid) != BLD_HOSP && GetPlayerBuilding(playerid) != BLD_HOSP2)
	   	return SendClientMessage(playerid, COLOR_YELLOW2, "¡Ambos, medico y paciente, deben estar en el hospital!");
  	if(GetPlayerCash(playerid) < ADICTION_REHAB_PRICE)
    {
	   	SendFMessage(playerid, COLOR_YELLOW2, "No tienes el dinero necesario para la rehabilitación. ($%d.-)", ADICTION_REHAB_PRICE);
		return 1;
	}

	if(aleatorio < 55)
	    DeletePlayerAdiction(playerid, GetPlayerAdiction(playerid) / 2); // 50 porciento de que baje a la mitad
	else
		if(aleatorio < 75)
	        DeletePlayerAdiction(playerid, (GetPlayerAdiction(playerid) / 10) * 9); // 25 porciento que baje 90 porciento
		else
		    if(aleatorio < 85)
		        DeletePlayerAdiction(playerid, 100.0); // 10 porciento de eliminar la adiccion
   			else
			    DeletePlayerAdiction(playerid, 0.0); // 15 porciento de que no pase nada
	PlayerActionMessage(playerid, 15.0, "es sometido a un tratamiento de rehabilitación en la clínica, veremos como responde ante este.");
    SendClientMessage(RehabOffer[playerid], COLOR_YELLOW2, "Una parte del dinero del paciente te será pagado en la siguiente hora, y otra parte irá al fondo del hospital.");
	GivePlayerCash(playerid, -ADICTION_REHAB_PRICE);
 	PlayerInfo[RehabOffer[playerid]][pPayCheck] += ADICTION_REHAB_PRICE / 4;
	FactionInfo[FAC_HOSP][fBank] += ADICTION_REHAB_PRICE / 4;
	return 1;
}

//==============================MANEJO DE DINERO================================

CMD:pagar(playerid,params[])
{
	new targetID, name[32], string[128], amount;

    if(sscanf(params, "ud", targetID, amount))
        return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /pagar [ID/Jugador] [cantidad]");
    if(GetPlayerCash(playerid) < amount || amount < 1 || amount > 500000)
        return SendClientMessage(playerid, COLOR_YELLOW2, "¡Cantidad de dinero inválida! asegúrate de tener dicha suma y que sea de más de $0 y menos de $500,000).");
	if(targetID == INVALID_PLAYER_ID || targetID == playerid)
		return SendClientMessage(playerid, COLOR_YELLOW2, "Jugador inválido.");
    if(!ProxDetectorS(2.0, playerid, targetID))
        return SendClientMessage(playerid, COLOR_YELLOW2, "¡Deben estar cerca!");
        
    GetPlayerName(targetID, name, 32);
	format(string, sizeof(string), "[PAGO] $%d a %s (DBID: %d)", amount, name, PlayerInfo[playerid][pID]);
  	log(playerid, LOG_MONEY, string);
	GivePlayerCash(playerid, -amount);
	GivePlayerCash(targetID, amount);
	SendFMessage(playerid, COLOR_WHITE, "Le has pagado $%d a %s.", amount, GetPlayerNameEx(targetID));
	SendFMessage(targetID, COLOR_WHITE, "%s te ha pagado $%d.", GetPlayerNameEx(playerid), amount);
	format(string, sizeof(string), "toma algo de dinero y se lo entrega a %s.", GetPlayerNameEx(targetID));
    PlayerActionMessage(playerid, 15.0, string);
    PlayerPlaySound(targetID, 1052, 0.0, 0.0, 0.0);
    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
    return 1;
}

CMD:ayudacajero(playerid,params[])
{
	cmd_ayudabanco(playerid, params);
	return 1;
}

CMD:ayudabanco(playerid,params[])
{
	new string[128];

	if(PlayerInfo[playerid][pFaction] != 0)
	{
		if(PlayerInfo[playerid][pRank] == 1)
	    	format(string, sizeof(string), "- /fverbalance - /fdepositar - /fretirar");
    	else
    		format(string, sizeof(string), "- /fdepositar");
	}
    SendFMessage(playerid, COLOR_LIGHTYELLOW2, "[BANCO/CAJERO]: /verbalance - /depositar - /retirar - /transferir %s", string);
	return 1;
}

CMD:depositar(playerid,params[])
{
	new amount;

	if(!PlayerToPoint(5.0, playerid, POS_BANK_X, POS_BANK_Y, POS_BANK_Z) && !IsAtATM(playerid))
	    return SendClientMessage(playerid, COLOR_YELLOW2, "¡Debes estar en un banco o cajero automático!");
 	if(sscanf(params, "d", amount))
    	return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /depositar [cantidad]");
	if(GetPlayerCash(playerid) < amount || amount < 1)
	    return SendClientMessage(playerid, COLOR_YELLOW2, "¡Cantidad de dinero inválida!");
	    
	GivePlayerCash(playerid, -amount);
	PlayerInfo[playerid][pBank] += amount;
	SendFMessage(playerid, COLOR_WHITE, "Has depositado $%d. Nuevo balance: $%d.", amount, PlayerInfo[playerid][pBank]);
 	PlayerActionMessage(playerid, 15.0, "toma una suma de dinero y la deposita en su cuenta.");
    return 1;
}

CMD:retirar(playerid,params[])
{
	new amount;
	
	if(!PlayerToPoint(5.0, playerid, POS_BANK_X, POS_BANK_Y, POS_BANK_Z) && !IsAtATM(playerid))
	    return SendClientMessage(playerid, COLOR_YELLOW2, "¡Debes estar en un banco o cajero automático!");
 	if(sscanf(params, "d", amount))
    	return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /retirar [cantidad]");
	if(PlayerInfo[playerid][pBank] < amount || amount < 1)
	    return SendClientMessage(playerid, COLOR_YELLOW2, "¡Cantidad de dinero inválida!");

	GivePlayerCash(playerid, amount);
	PlayerInfo[playerid][pBank] -= amount;
	SendFMessage(playerid, COLOR_WHITE, "Has retirado $%d. Nuevo balance: $%d.", amount, PlayerInfo[playerid][pBank]);
    PlayerActionMessage(playerid, 15.0, "retira una suma de dinero de su cuenta.");
    return 1;
}

CMD:transferir(playerid,params[])
{
	new targetID, name[32], string[128], amount;

	if(!PlayerToPoint(5.0, playerid, POS_BANK_X, POS_BANK_Y, POS_BANK_Z) && !IsAtATM(playerid))
	    return SendClientMessage(playerid, COLOR_YELLOW2, "¡Debes estar en un banco o cajero automático!");
	if(sscanf(params, "ud", targetID, amount))
 		return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /transferir [ID/Jugador] [cantidad]");
    if(PlayerInfo[playerid][pBank] < amount || amount < 1)
  		return SendClientMessage(playerid, COLOR_YELLOW2, "¡Cantidad de dinero inválida!");
	if(targetID == INVALID_PLAYER_ID || targetID == playerid)
		return SendClientMessage(playerid, COLOR_YELLOW2, "Jugador inválido.");

	GetPlayerName(targetID, name, 32);
	format(string, sizeof(string), "[TRANSFERENCIA] $%d a %s (DBID: %d)", amount, name, PlayerInfo[playerid][pID]);
	log(playerid, LOG_MONEY, string);
	PlayerInfo[playerid][pBank] -= amount;
	PlayerInfo[targetID][pBank] += amount;
	SendFMessage(playerid, COLOR_WHITE, "Has realizado una transferencia de $%d a la cuenta de %s.", amount, GetPlayerNameEx(targetID));
	SendFMessage(targetID, COLOR_WHITE, "[Mensaje del Banco]: Has recibido una transferencia de la cuenta de %s por $%d.", GetPlayerNameEx(playerid), amount);
    PlayerActionMessage(playerid, 15.0, "aprieta algunos botones del cajero y realiza una operación bancaria.");
 	return 1;
}

CMD:verbalance(playerid,params[])
{
	if(!PlayerToPoint(5.0, playerid, POS_BANK_X, POS_BANK_Y, POS_BANK_Z) && !IsAtATM(playerid))
	    return SendClientMessage(playerid, COLOR_YELLOW2, "¡Debes estar en un banco o cajero automático!");

	SendFMessage(playerid, COLOR_WHITE, "Tu balance actual es de $%d.", PlayerInfo[playerid][pBank]);
	PlayerActionMessage(playerid, 15.0, "recibe un papel con el estado de su cuenta bancaria.");
    return 1;
}

//==========================MANEJO DE DINERO DE FACCION=========================

CMD:fverbalance(playerid,params[])
{
	if(!PlayerToPoint(5.0, playerid, POS_BANK_X, POS_BANK_Y, POS_BANK_Z) && !IsAtATM(playerid))
	    return SendClientMessage(playerid, COLOR_YELLOW2, "¡Debes estar en un banco o cajero automático!");
    if(PlayerInfo[playerid][pFaction] == 0)
        return SendClientMessage(playerid, COLOR_YELLOW2, "¡No perteneces a una facción!");
    if(PlayerInfo[playerid][pRank] != 1)
        return SendClientMessage(playerid, COLOR_YELLOW2, "¡No tienes el rango suficiente!");

	SendFMessage(playerid, COLOR_WHITE, "El balance actual de la cuenta compartida es de $%d.", FactionInfo[PlayerInfo[playerid][pFaction]][fBank]);
	PlayerActionMessage(playerid, 15.0, "recibe un papel con el estado de su cuenta bancaria.");
    return 1;
}

CMD:fdepositar(playerid,params[])
{
	new string[128], amount;
	
	if(!PlayerToPoint(5.0, playerid, POS_BANK_X, POS_BANK_Y, POS_BANK_Z) && !IsAtATM(playerid))
	    return SendClientMessage(playerid, COLOR_YELLOW2, "¡Debes estar en un banco o cajero automático!");
    if(PlayerInfo[playerid][pFaction] == 0)
        return SendClientMessage(playerid, COLOR_YELLOW2, "¡No perteneces a una facción!");
 	if(sscanf(params, "d", amount))
  		return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /fdepositar [cantidad]");
 	if(GetPlayerCash(playerid) < amount || amount < 1)
 	    return SendClientMessage(playerid, COLOR_YELLOW2, "¡Cantidad de dinero inválida!");
 	    
	GivePlayerCash(playerid, -amount);
	FactionInfo[PlayerInfo[playerid][pFaction]][fBank] += amount;
	format(string, sizeof(string), "Has depositado $%d en la cuenta compartida, nuevo balance: $%d.", amount, FactionInfo[PlayerInfo[playerid][pFaction]][fBank]);
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "{878EE7}[INFO]:{C8C8C8} %s ha depositado en la cuenta de faccion (%s) $%d.", GetPlayerNameEx(playerid), FactionInfo[PlayerInfo[playerid][pFaction]][fName], amount);
	log(playerid, LOG_MONEY, string);
 	PlayerActionMessage(playerid, 15.0, "toma una suma de dinero y la deposita en su cuenta.");
    return 1;
}

CMD:fretirar(playerid,params[])
{
	new string[128], amount;

	if(!PlayerToPoint(5.0, playerid, POS_BANK_X, POS_BANK_Y, POS_BANK_Z) && !IsAtATM(playerid))
	    return SendClientMessage(playerid, COLOR_YELLOW2, "¡Debes estar en un banco o cajero automático!");
    if(PlayerInfo[playerid][pFaction] == 0)
        return SendClientMessage(playerid, COLOR_YELLOW2, "¡No perteneces a una facción!");
    if(PlayerInfo[playerid][pRank] != 1)
        return SendClientMessage(playerid, COLOR_YELLOW2, "¡No tienes el rango suficiente!");
 	if(sscanf(params, "d", amount))
  		return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /fretirar [cantidad]");
 	if(FactionInfo[PlayerInfo[playerid][pFaction]][fBank] < amount || amount < 1)
 	    return SendClientMessage(playerid, COLOR_YELLOW2, "¡Cantidad de dinero inválida!");
 	    
	GivePlayerCash(playerid, amount);
	FactionInfo[PlayerInfo[playerid][pFaction]][fBank] -= amount;
	format(string, sizeof(string), "Has retirado $%d de la cuenta compartida, nuevo balance: $%d.", amount, FactionInfo[PlayerInfo[playerid][pFaction]][fBank]);
	SendClientMessage(playerid, COLOR_WHITE, string);
    PlayerActionMessage(playerid, 15.0, "retira una suma de dinero de su cuenta.");
    return 1;
}

TIMER:CancelVehicleTransfer(playerid, timer) {
	if(timer == 1) {
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "La venta ha sido cancelada ya que no has respondido en 30 segundos.");
		SendClientMessage(VehicleOffer[playerid], COLOR_LIGHTBLUE, "La venta ha sido cancelada ya que el comprador no ha respondido en 30 segundos.");
	} else if(timer == 0) {
    	SendClientMessage(playerid, COLOR_LIGHTBLUE, "Has rechazado la oferta.");
		SendFMessage(VehicleOffer[playerid], COLOR_LIGHTBLUE, "%s ha rechazado la oferta.", GetPlayerNameEx(playerid));
	}
	OfferingVehicle[VehicleOffer[playerid]] = false;
	VehicleOfferPrice[playerid] = -1;
	VehicleOffer[playerid] = INVALID_PLAYER_ID;
	VehicleOfferID[playerid] = -1;
	return 1;
}


CMD:aceptar(playerid,params[]) {
	new
		text[128],
		string[128];

	if(sscanf(params, "s[64]", text)) {
		SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /aceptar [comando]");
		
    } else if(strcmp(text,"droga",true) == 0) {
        if(DrugOffer[playerid] == INVALID_PLAYER_ID)
            return SendClientMessage(playerid, COLOR_YELLOW2, "Nadie te ha ofrecido droga.");
		if(GetDistanceBetweenPlayers(playerid, DrugOffer[playerid]) > 4.0)
			return SendClientMessage(playerid, COLOR_YELLOW2, "La persona se encuentra demasiado lejos.");
		if(!IsPlayerConnected(DrugOffer[playerid])) {
		    KillTimer(GetPVarInt(playerid, "CancelDrugTransfer"));
		    CancelDrugTransfer(playerid, 0);
			return SendClientMessage(playerid, COLOR_YELLOW2, "El jugador se ha desconectado.");
		}

        switch(DrugOfferType[playerid])
		{
			case 1:
			{
   				if(PlayerInfo[DrugOffer[playerid]][pMarijuana] < DrugOfferAmount[playerid])
			    	return SendClientMessage(playerid, COLOR_YELLOW2, "El sujeto ya no tiene esa cantidad.");
				PlayerInfo[playerid][pMarijuana] += DrugOfferAmount[playerid];
				PlayerInfo[DrugOffer[playerid]][pMarijuana] -= DrugOfferAmount[playerid];
			}
			case 2:
			{
			    if(PlayerInfo[DrugOffer[playerid]][pLSD] < DrugOfferAmount[playerid])
			    	return SendClientMessage(playerid, COLOR_YELLOW2, "El sujeto ya no tiene esa cantidad.");
            	PlayerInfo[playerid][pLSD] += DrugOfferAmount[playerid];
				PlayerInfo[DrugOffer[playerid]][pLSD] -= DrugOfferAmount[playerid];
			}
			case 3:
			{
			    if(PlayerInfo[DrugOffer[playerid]][pEcstasy] < DrugOfferAmount[playerid])
			    	return SendClientMessage(playerid, COLOR_YELLOW2, "El sujeto ya no tiene esa cantidad.");
                PlayerInfo[playerid][pEcstasy] += DrugOfferAmount[playerid];
				PlayerInfo[DrugOffer[playerid]][pEcstasy] -= DrugOfferAmount[playerid];
			}
			case 4:
			{
			    if(PlayerInfo[DrugOffer[playerid]][pCocaine] < DrugOfferAmount[playerid])
			    	return SendClientMessage(playerid, COLOR_YELLOW2, "El sujeto ya no tiene esa cantidad.");
                PlayerInfo[playerid][pCocaine] += DrugOfferAmount[playerid];
				PlayerInfo[DrugOffer[playerid]][pCocaine] -= DrugOfferAmount[playerid];
			}
			default: {
			    KillTimer(GetPVarInt(playerid, "CancelDrugTransfer"));
		    	CancelDrugTransfer(playerid, 0);
		    	SendClientMessage(DrugOffer[playerid], COLOR_YELLOW2, "Hubo un error con la transacción, cancelando...");
				return SendClientMessage(playerid, COLOR_YELLOW2, "Hubo un error con la transacción, cancelando...");
			}
		}
		format(string, sizeof(string), "agarra un paquete desconocido que le da %s y lo guarda disimuladamente en su bolsillo.", GetPlayerNameEx(DrugOffer[playerid]) );
        PlayerActionMessage(playerid, 8.0, string);
		KillTimer(GetPVarInt(playerid, "CancelDrugTransfer"));
		CancelDrugTransfer(playerid, 0);

 	} else if(strcmp(text,"vehiculo",true) == 0) {
    
        // Comprobamos que exista una oferta para este jugador.
        if(VehicleOffer[playerid] == INVALID_PLAYER_ID)
            return SendClientMessage(playerid, COLOR_YELLOW2, "Nadie te ha ofrecido ningún vehículo.");

		if(GetDistanceBetweenPlayers(playerid, VehicleOffer[playerid]) > 4.0)
			return SendClientMessage(playerid, COLOR_YELLOW2, "La persona se encuentra demasiado lejos.");

		if(!IsPlayerConnected(VehicleOffer[playerid])) {
		    KillTimer(GetPVarInt(playerid, "CancelVehicleTransfer"));
		    CancelVehicleTransfer(playerid, 0);
			return SendClientMessage(playerid, COLOR_YELLOW2, "El vendedor se ha desconectado.");
		}
		// Comprobamos que la ID del vehículo sea válida y que el jugador no se haya desconectado.
		if(VehicleOfferID[playerid] <= 0 || !OfferingVehicle[VehicleOffer[playerid]]) {
			KillTimer(GetPVarInt(playerid, "CancelVehicleTransfer"));
            CancelVehicleTransfer(playerid, 0);
            SendClientMessage(VehicleOffer[playerid], COLOR_YELLOW2, "Debido a un error con la ID del vehículo, la venta ha sido cancelada.");
            return SendClientMessage(playerid, COLOR_YELLOW2, "Error con la ID del vehículo, cancelando...");
		}
		
		// ¿Tiene el dinero necesario?
		if(GetPlayerCash(playerid) < VehicleOfferPrice[playerid]) {
		    KillTimer(GetPVarInt(playerid, "CancelVehicleTransfer"));
		    CancelVehicleTransfer(playerid, 0);
		    SendClientMessage(VehicleOffer[playerid], COLOR_YELLOW2, "El jugador no tiene el dinero necesario, cancelando...");
		    return SendClientMessage(playerid, COLOR_YELLOW2, "No tienes el dinero suficiente, cancelando...");
		}
		
		// Comprobamos que el recipiente tenga un slot libre, si lo tiene realizamos la transacción.
		if(PlayerInfo[playerid][pVeh1] <= 0) {
		    // Seteamos las variables del vehículo con los datos del nuevo dueño.
			VehicleInfo[VehicleOfferID[playerid]][VehOwnerSlot] = 1;
			VehicleInfo[VehicleOfferID[playerid]][VehOwnerSQLID] = PlayerInfo[playerid][pID];
			GetPlayerName(playerid, VehicleInfo[VehicleOfferID[playerid]][VehOwnerName], 24);

			// Le quitamos el vehículo de la cuenta al vendedor.
			if(PlayerInfo[VehicleOffer[playerid]][pVeh1] == VehicleOfferID[playerid]) {
                PlayerInfo[VehicleOffer[playerid]][pVeh1] = 0;
			} else if(PlayerInfo[VehicleOffer[playerid]][pVeh2] == VehicleOfferID[playerid]) {
			    PlayerInfo[VehicleOffer[playerid]][pVeh2] = 0;
			}

			// Se lo seteamos a la cuenta del nuevo dueño y realizamos la transacción de dinero.
			GivePlayerCash(playerid, -VehicleOfferPrice[playerid]);
			GivePlayerCash(VehicleOffer[playerid], VehicleOfferPrice[playerid]);
		    PlayerInfo[playerid][pVeh1] = VehicleOfferID[playerid];
		    PlayerPlayerActionMessage(VehicleOffer[playerid], playerid, 10.0, "recibe una suma de dinero y le entrega unas llaves a");
		    SendFMessage(playerid, COLOR_LIGHTBLUE, "¡Felicidades, has comprado el %s por $%d!", GetVehicleName(VehicleOfferID[playerid]), VehicleOfferPrice[playerid]);
		    SendFMessage(VehicleOffer[playerid], COLOR_LIGHTBLUE, "¡Felicitaciones, has vendido el %s por $%d!", GetVehicleName(VehicleOfferID[playerid]), VehicleOfferPrice[playerid]);
		    PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
		} else if(PlayerInfo[playerid][pVeh2] <= 0) {
		    // Seteamos las variables del vehículo con los datos del nuevo dueño.
			VehicleInfo[VehicleOfferID[playerid]][VehOwnerSlot] = 2;
			VehicleInfo[VehicleOfferID[playerid]][VehOwnerSQLID] = PlayerInfo[playerid][pID];
			GetPlayerName(playerid, VehicleInfo[VehicleOfferID[playerid]][VehOwnerName], 24);
			
			// Le quitamos el vehículo de la cuenta al vendedor.
			if(PlayerInfo[VehicleOffer[playerid]][pVeh1] == VehicleOfferID[playerid]) {
                PlayerInfo[VehicleOffer[playerid]][pVeh1] = 0;
			} else if(PlayerInfo[VehicleOffer[playerid]][pVeh2] == VehicleOfferID[playerid]) {
			    PlayerInfo[VehicleOffer[playerid]][pVeh2] = 0;
			}
			
			// Se lo seteamos a la cuenta del nuevo dueño y realizamos la transacción de dinero.
			GivePlayerCash(playerid, -VehicleOfferPrice[playerid]);
			GivePlayerCash(VehicleOffer[playerid], VehicleOfferPrice[playerid]);
		    PlayerInfo[playerid][pVeh2] = VehicleOfferID[playerid];
		    PlayerPlayerActionMessage(VehicleOffer[playerid], playerid, 10.0, "recibe una suma de dinero y le entrega unas llaves a");
		    SendFMessage(playerid, COLOR_LIGHTBLUE, "¡Felicidades, has comprado el %s por $%d!", GetVehicleName(VehicleOfferID[playerid]), VehicleOfferPrice[playerid]);
		    SendFMessage(VehicleOffer[playerid], COLOR_LIGHTBLUE, "¡Felicitaciones, has vendido el %s por $%d!", GetVehicleName(VehicleOfferID[playerid]), VehicleOfferPrice[playerid]);
		    PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
		} else {
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "No puedes tener más vehículos, cancelando...");
		    SendClientMessage(VehicleOffer[playerid], COLOR_LIGHTBLUE, "El jugador no puede tener más vehículos, cancelando...");
		}
		KillTimer(GetPVarInt(playerid, "CancelVehicleTransfer"));
		CancelVehicleTransfer(playerid, 2);
		
	} else if(strcmp(text,"casa",true) == 0) {
	    new sellerid = HouseOffer[playerid];
	    new price = HouseOfferPrice[playerid];
        if(sellerid == INVALID_PLAYER_ID)
            return SendClientMessage(playerid, COLOR_YELLOW2, "Nadie te está vendiendo una casa.");
		if(!IsPlayerConnected(sellerid) || !OfferingHouse[sellerid])
		{
		    KillTimer(GetPVarInt(playerid, "CancelHouseTransfer"));
		    CancelHouseTransfer(playerid, 0);
			return SendClientMessage(playerid, COLOR_YELLOW2, "Hubo un error durante la venta, cancelando...");
		}
		if(!ProxDetectorS(4.0, playerid, sellerid))
 	    	return SendClientMessage(playerid, COLOR_YELLOW2, "El sujeto no está cerca tuyo.");
		if(GetPlayerCash(playerid) < price)
		{
		    KillTimer(GetPVarInt(playerid, "CancelHouseTransfer"));
		    SendClientMessage(sellerid, COLOR_YELLOW2, "El jugador no tiene el dinero necesario, cancelando...");
		    CancelHouseTransfer(playerid, 0);
		    return SendClientMessage(playerid, COLOR_YELLOW2, "No tienes el dinero suficiente, cancelando...");
		}
		if(PlayerInfo[playerid][pHouseKey] != 0)
		{
		    KillTimer(GetPVarInt(playerid, "CancelHouseTransfer"));
		    SendClientMessage(sellerid, COLOR_YELLOW2, "El jugador ya tiene una casa, cancelando...");
		    CancelHouseTransfer(playerid, 0);
		    return SendClientMessage(playerid, COLOR_YELLOW2, "Ya tienes una casa, cancelando...");
		}
		new houseid = PlayerInfo[sellerid][pHouseKey];
		new name[MAX_PLAYER_NAME];
		GetPlayerName(playerid, name, sizeof(name));
		House[houseid][Locked] = 1;
		House[houseid][Owned] = 1;
		strmid(House[houseid][Owner], name, 0, strlen(name), 255);
		GivePlayerCash(playerid, -price);
        GivePlayerCash(sellerid, price);
        PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
        PlayerPlaySound(sellerid, 1052, 0.0, 0.0, 0.0);
        PlayerInfo[playerid][pHouseKey] = houseid;
        PlayerInfo[sellerid][pHouseKey] = 0;
        PlayerPlayerActionMessage(sellerid, playerid, 15.0 , "toma las llaves y la escritura de su casa y se las entrega a");
  		SendFMessage(playerid, COLOR_LIGHTBLUE, "¡Felicidades, has comprado la casa por $%d!", price);
  		SendFMessage(sellerid, COLOR_LIGHTBLUE, "¡Felicitaciones, has vendido tu casa por $%d!", price);
  		KillTimer(GetPVarInt(playerid, "CancelHouseTransfer"));
		CancelHouseTransfer(playerid, 2);

	} else if(strcmp(text,"medico",true) == 0) {
 		if(GetPVarInt(GetPVarInt(playerid, "healIssuer"), "isHealing") == 1) {
			new medic = GetPVarInt(playerid, "healIssuer");
			new price = GetPVarInt(playerid, "healCost");
			new victimcash = GetPlayerCash(playerid);
			SetPlayerHealthEx(playerid, 100.00);
			TogglePlayerControllable(playerid, true);
			PlayerPlaySound(playerid, 1150, 0.0, 0.0, 0.0);
			PlayerPlaySound(medic, 1150, 0.0, 0.0, 0.0);
			// El pago del medico puede debitarse del banco del herido en caso de no tener efectivo
   			if(victimcash > price)
   			{
				GivePlayerCash(playerid, -price);
				GivePlayerCash(medic, price); // Al ser pago en efectivo, el dinero se le da al medico en el momento
				SendFMessage(playerid, COLOR_LIGHTBLUE, "Has aceptado el tratamiento por $%d en efectivo.", price);
	        	SendFMessage(medic, COLOR_LIGHTBLUE, "El herido ha aceptado el tratamiento y te ha pagado $%d en efectivo.", price);
			}
			else
				if(victimcash > 0)
				{
				    if(PlayerInfo[playerid][pBank] > price - victimcash)
				    {
						PlayerInfo[playerid][pBank] -= price - victimcash; // Se le debita lo que le falta del banco
						PlayerInfo[medic][pPayCheck] += price - victimcash; // Esa parte que se debita le entra al banco mediante payday
					} else
					    if(PlayerInfo[playerid][pBank] > 0) // Esto es para que no saque plata del banco si no tiene
					    {
					        PlayerInfo[medic][pPayCheck] += PlayerInfo[playerid][pBank];
					        PlayerInfo[playerid][pBank] = 0;
						}
					GivePlayerCash(medic, victimcash); // La parte que se pagó en efectivo
				    ResetPlayerCash(playerid); // Todo lo que pudo pagar en efectivo
				    SendFMessage(playerid, COLOR_LIGHTBLUE, "Has aceptado el tratamiento por $%d. Una parte se descontó de tu cuenta bancaria al no tener todo en efectivo.", price);
     				SendFMessage(medic, COLOR_LIGHTBLUE, "El herido aceptó tu tratamiento por $%d. Una parte la pagó vía banco, y la cobraras en el próximo Payday.", price);
				} else
				    {
				    	if(PlayerInfo[playerid][pBank] > price) // Esto es para que no saque plata del banco si no tiene
				    	{
							PlayerInfo[playerid][pBank] -= price; // Se le debita la totalidad del pago
	                        PlayerInfo[medic][pPayCheck] += price; // Y el medico lo cobra via banco con el payday
						} else
						    if(PlayerInfo[playerid][pBank] > 0) // Esto es para que no saque plata del banco si no tiene
						    {
		        				PlayerInfo[medic][pPayCheck] += PlayerInfo[playerid][pBank];
				        		PlayerInfo[playerid][pBank] = 0;
							}
				   		SendFMessage(playerid, COLOR_LIGHTBLUE, "Has aceptado el tratamiento por $%d. Como no tenías efectivo, se descontó de tu cuenta bancaria.", price);
	        			SendFMessage(medic, COLOR_LIGHTBLUE, "El herido ha aceptado el tratamiento por $%d vía banco, y lo cobraras en el próximo Payday.", price);
					}
			SetPVarInt(GetPVarInt(playerid, "healIssuer"), "isHealing", 0);
   		} else {
			SendClientMessage(playerid, COLOR_YELLOW2, "¡Ningún médico te ha ofrecido tratamiento!");
		}
		
	} else if(strcmp(text,"faccion",true) == 0) {
	    new factionid = FactionRequest[playerid];
		if(factionid == 0)
			return SendClientMessage(playerid,COLOR_LIGHTYELLOW2,"{FF4600}[Error]:{C8C8C8} nadie te ha invitado a una facción.");
		if(PlayerInfo[playerid][pFaction] != 0)
			return SendClientMessage(playerid,COLOR_LIGHTYELLOW2,"{FF4600}[Error]:{C8C8C8} ¡ya te encuentras en una facción!, debes dejarla primero.");

		format(string, sizeof(string), "[Facción]: %s ha ingresado a la facción.",GetPlayerNameEx(playerid));
		SendFactionMessage(factionid, COLOR_FACTIONCHAT, string);
  		SendFMessage(playerid, COLOR_LIGHTBLUE, "{878EE7}[INFO]:{C8C8C8} ¡felicitaciones! ahora eres miembro de la facción: %s.",FactionInfo[factionid][fName]);
		SetPlayerFaction(playerid, factionid, FactionInfo[factionid][fJoinRank]);
		FactionRequest[playerid] = 0;
		
	} else if(strcmp(text,"multa",true) == 0) {
	    if(TicketOffer[playerid] < 999) {
	        if(IsPlayerConnected(TicketOffer[playerid])) {
	            if (ProxDetectorS(5.0, playerid, TicketOffer[playerid])) {
					if(GetPlayerCash(playerid) >= TicketMoney[playerid]) {
						format(string, sizeof(string), "{878EE7}[INFO]:{C8C8C8} multa pagada - costo: $%d.", TicketMoney[playerid]);
						SendClientMessage(playerid, COLOR_WHITE, string);
						format(string, sizeof(string), "{878EE7}[INFO]:{C8C8C8} %s ha pagado tu multa - costo: $%d.", GetPlayerNameEx(playerid), TicketMoney[playerid]);
						SendClientMessage(TicketOffer[playerid], COLOR_LIGHTYELLOW2, string);
						new faction = PlayerInfo[TicketOffer[playerid]][pFaction];
						FactionInfo[faction][fBank] += TicketMoney[playerid];
						GivePlayerCash(playerid, - TicketMoney[playerid]);
						TicketOffer[playerid] = 999;
						TicketMoney[playerid] = 0;
						return 1;
					} else {
					    SendClientMessage(playerid, COLOR_YELLOW2, "¡No tienes el dinero suficiente!");
					    return 1;
					}
				} else {
				    SendClientMessage(playerid, COLOR_YELLOW2, "¡Debes estar cerca del oficial que te ha multado!");
				    return 1;
				}
	        }
		} else {
		    SendClientMessage(playerid, COLOR_YELLOW2, "¡No tienes ninguna multa!");
		    return 1;
		}
		
	} else if(strcmp(text,"mecanico",true) == 0) {
		if(PlayerInfo[playerid][pFaction] == FAC_MECH)
		{
			if(MechanicCallTime[playerid] > 0)
				return SendClientMessage(playerid, COLOR_YELLOW2, "¡Ya estás en una llamada!");
			if(MechanicCall == 999)
				return SendClientMessage(playerid, COLOR_YELLOW2, "¡Nadie ha llamado a un mecánico!");
			if(IsPlayerConnected(MechanicCall))
			{
			    new Float:x, Float:y, Float:z;
				SendClientMessage(playerid, COLOR_WHITE, "* Has aceptado la llamada de asistencia mecánica. Vé al punto rojo, tienes 90 segundos.");
				SendClientMessage(MechanicCall, COLOR_WHITE, "* Un mecánico aceptó su llamada, por favor aguarde en su posición actual.");
				format(string, sizeof(string), "* El mecánico %s ha aceptado la ultima llamada de asistencia al taller.", GetPlayerNameEx(playerid));
				SendFactionMessage(FAC_MECH, COLOR_WHITE, string);
				GetPlayerPos(MechanicCall, x, y, z);
				SetPlayerCheckpoint(playerid, x, y, z, 5);
				GameTextForPlayer(playerid, "~w~Llamada de mecanico~n~~r~Dirígete al marcador rojo", 5000, 1);
				MechanicCallTime[playerid] = 1;
				MechanicCall = 999;
				return 1;
			}
		}
		
	} else if(strcmp(text,"revision",true) == 0) {

		new idToShow = ReviseOffer[playerid];
		if(idToShow == 999)
			return SendClientMessage(playerid, COLOR_YELLOW2, "Nadie te quiere revisar.");
		if(!IsPlayerConnected(idToShow))
		    return SendClientMessage(playerid, COLOR_YELLOW2, "El sujeto se ha desconectado.");
		if(!ProxDetectorS(2.0, idToShow, playerid))
			return SendClientMessage(playerid, COLOR_YELLOW2, "El sujeto no está cerca tuyo.");

		ShowInv(idToShow, playerid);
  		ShowPocket(idToShow, playerid);
		PlayerPlayerActionMessage(idToShow, playerid, 15.0, "ha revisado en busca de objetos a");
		ReviseOffer[playerid] = 999;
		return 1;
		
	} else if(strcmp(text,"reparacion",true) == 0) {
	
		if(RepairOffer[playerid] == 999)
			return SendClientMessage(playerid, COLOR_YELLOW2, "¡Nadie te ha ofrecido una reparación!");
		if(GetPlayerCash(playerid) < RepairPrice[playerid])
			return SendClientMessage(playerid, COLOR_YELLOW2, "¡No tienes el dinero suficiente para pagar la reparación!");
        if(IsPlayerConnected(RepairOffer[playerid]))
		{
		    if(IsPlayerInAnyVehicle(playerid))
			{
				if(!ProxDetectorS(6.0, playerid, RepairOffer[playerid]))
					return SendClientMessage(playerid, COLOR_YELLOW2, "El mecánico no está cerca tuyo.");
				GameTextForPlayer(playerid, "Su vehiculo esta siendo reparado...", 6000, 1);
				GameTextForPlayer(RepairOffer[playerid], "Reparando vehiculo...", 6000, 1);
   				TogglePlayerControllable(playerid, false);
   				SetTimerEx("Reparacion", 6000, false, "i", playerid);
				return 1;
			}
		}
		
	} else if(strcmp(text,"taxi",true) == 0) {
	    new
			Float:ptX,
			Float:ptY,
			Float:ptZ;

	    if(!jobDuty[playerid] || PlayerInfo[playerid][pJob] != JOB_TAXI) return 1;
        if(TaxiCallTime[playerid] > 0) {
            SendClientMessage(playerid, COLOR_GREY, "¡Ya has aceptado una llamada!");
		    return 1;
        }
        if(TaxiCall < 999) {
            if(IsPlayerConnected(TaxiCall)) {
            	format(string, sizeof(string), "* Has aceptado la llamada de %s, verás un marcador en el GPS.", GetPlayerNameEx(TaxiCall));
				SendClientMessage(playerid, COLOR_WHITE, string);
				SendClientMessage(TaxiCall, COLOR_WHITE, "* Un taxista ha aceptado tu llamada, espere en el lugar por favor.");
				TaxiCallTime[playerid] = 1;
				TaxiAccepted[playerid] = TaxiCall;
				GetPlayerPos(TaxiCall, ptX, ptY, ptZ);
				SetPlayerCheckpoint(playerid, ptX, ptY, ptZ, 5);
				TaxiCall = 999;
				return 1;
			}
        } else {
            SendClientMessage(playerid, COLOR_YELLOW2, "¡Nadie ha llamado a un taxi!");
	    	return 1;
        }
        
	} else if(strcmp(text,"tuning",true) == 0){
	
		if(TuningOffer[playerid] == 999)
			return SendClientMessage(playerid, COLOR_YELLOW2, "¡Nadie te ha ofrecido un tuneo!");
   		if(!ProxDetectorS(5.0, playerid, TuningOffer[playerid]))
  	    	return SendClientMessage(playerid, COLOR_WHITE, "El mecánico no está cerca tuyo.");
		if(!IsPlayerConnected(TuningOffer[playerid]))
		    return SendClientMessage(playerid, COLOR_WHITE, "El mecanico no está conectado.");
		TuningClient[TuningOffer[playerid]] = playerid;
		GameTextForPlayer(playerid, "Has aceptado la propuesta de tuneo.", 6000, 1);
		SendClientMessage(TuningOffer[playerid], COLOR_YELLOW, "Aceptaron tu propuesta, usa /tuning arriba del vehiculo.");
		return 1;
		
	} else if(strcmp(text,"destuneo",true) == 0){
	
 		if(DestuningOffer[playerid] == 999)
			return SendClientMessage(playerid, COLOR_YELLOW2, "¡Nadie te ha ofrecido sacarle el tuning al vehiculo!");
	    if(!ProxDetectorS(5.0, playerid, DestuningOffer[playerid]))
	  		return SendClientMessage(playerid, COLOR_WHITE, "El mecánico no está cerca tuyo.");
	    if(!IsPlayerConnected(DestuningOffer[playerid]))
		    return SendClientMessage(playerid, COLOR_WHITE, "El mecanico no está conectado.");
	    if(!IsPlayerInAnyVehicle(playerid))
			return SendClientMessage(playerid, COLOR_WHITE, "No estás en un ningún vehiculo.");
		new vID = GetPlayerVehicleID(playerid);
	    if(GetVehicleType(vID) != VTYPE_CAR)
	    	return SendClientMessage(playerid, COLOR_WHITE, "Vehiculo invalido.");
	    if(PlayerInfo[playerid][pVeh1] != vID && PlayerInfo[playerid][pVeh2] != vID)
			return SendClientMessage(playerid, COLOR_WHITE, "No eres dueño de ese vehiculo.");
	    PlayerActionMessage(DestuningOffer[playerid], 15.0, "comienza a desarmar el vehiculo y remover las partes tuneadas.");
		for(new i = 0; i < 14; i++)
		{
			new itemToRemove = VehicleInfo[vID][VehCompSlot][i];
			if(itemToRemove != 0)
			{
		       	RemoveVehicleComponent(vID, itemToRemove);
		       	VehicleInfo[vID][VehCompSlot][i] = 0;
			}
		}
		DestuningOffer[playerid] = 999;
		return 1;

	} else if(strcmp(text,"picada",true) == 0){
	
		startSprintRaceChallenge(playerid); // sistema de picadas
		return 1;
	}
	return 1;
}

CMD:cancelar(playerid,params[]) {
	new
		text[128];

	if(sscanf(params, "s[64]", text)) SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /cancelar [comando]");
	else if(strcmp(text,"mecanico",true) == 0) {
		if(IsPlayerConnected(MechanicCall)) {
			if(MechanicCall == playerid) {
				MechanicCall = 999;
			} else {
				SendClientMessage(playerid, COLOR_YELLOW2, "¡No has solicitado un mecánico!");
				return 1;
			}
		}
	} else if(strcmp(text, "vehiculo", true) == 0) {
		// Comprobamos que exista una oferta para este jugador.
        if(VehicleOffer[playerid] == INVALID_PLAYER_ID)
            return SendClientMessage(playerid, COLOR_YELLOW2, "Nadie te ha ofrecido un vehículo.");

		KillTimer(GetPVarInt(playerid, "CancelVehicleTransfer"));
		CancelVehicleTransfer(playerid, 0);
	} else if(strcmp(text,"taxi",true) == 0) {
	    if(TaxiCall < 999) {
	        if(jobDuty[playerid] && PlayerInfo[playerid][pJob] == JOB_TAXI && TaxiCallTime[playerid] > 0) {
	            TaxiAccepted[playerid] = 999;
				GameTextForPlayer(playerid, "~w~Has~n~~r~cancelado la llamada", 5000, 1);
				TaxiCallTime[playerid] = 0;
    			DisablePlayerCheckpoint(playerid);
				TaxiCall = 999;
	        } else {
				if(IsPlayerConnected(TaxiCall)) {
					if(TaxiCall == playerid) {
						TaxiCall = 999;
					}
				}
				foreach(new i : Player) {
			        if(TaxiAccepted[i] == playerid) {
			            TaxiAccepted[i] = 999;
			            GameTextForPlayer(i, "~w~Han~n~~r~cancelado la llamada", 5000, 1);
			            TaxiCallTime[i] = 0;
               			DisablePlayerCheckpoint(i);
			        }
				}
			}
		}
	}
	return 1;
}

CMD:comprarlic(playerid,params[]) {
	if(PlayerToPoint(1.0, playerid, 249.3701, 71.1788, 1003.6406) && GetPlayerVirtualWorld(playerid) == 16002) {
        if(PlayerInfo[playerid][pWepLic] == 0) {
			if(GetPlayerCash(playerid) >= PRICE_LIC_GUN) {
				GivePlayerCash(playerid, -PRICE_LIC_GUN);
				SendClientMessage(playerid, COLOR_WHITE,"¡Felicidades! has conseguido una licencia para armas cortas y de caza.");
				PlayerInfo[playerid][pWepLic] = 1;
			} else {
				SendClientMessage(playerid, COLOR_YELLOW2, "¡No tienes el dinero suficiente!");
			}
		} else {
			SendClientMessage(playerid, COLOR_YELLOW2, "¡Ya tienes esta licencia!");
		}
	} else {
		SendClientMessage(playerid, COLOR_YELLOW2, "¡Debes estar en el lugar correcto de la comisaría!");
	}
	return 1;
}

CMD:intentar(playerid, params[]) {
	new
	    succeed = 1 + random(2),
	    string[128];
	    
	if(sscanf(params, "s[128]", string)) {
		SendClientMessage(playerid, COLOR_GREY, "{5CCAF1}[Sintaxis]:{C8C8C8} /intentar [texto]");
	} else {
		if(succeed == 1) {
			format(string, sizeof(string), "[Intentar] %s intentó %s y tuvo éxito.", GetPlayerNameEx(playerid), string);
			ProxDetector(10.0, playerid, string, COLOR_ACT1, COLOR_ACT2, COLOR_ACT3, COLOR_ACT4, COLOR_ACT5);
		} else if(succeed == 2)	{
			format(string, sizeof(string), "[Intentar] %s intentó %s y falló.", GetPlayerNameEx(playerid), string);
			ProxDetector(10.0, playerid, string, COLOR_ACT1, COLOR_ACT2, COLOR_ACT3, COLOR_ACT4, COLOR_ACT5);
		}
	}
	return 1;
}

CMD:dar(playerid, params[])
{
	new pWeapon, pAmmo, target, string[128];

	if(sscanf(params, "u", target))
		return SendClientMessage(playerid, COLOR_GREY, "{5CCAF1}[Sintaxis]:{C8C8C8} /dar [ID/Jugador]");
	if(PlayerInfo[playerid][pLevel] < 3)
		return SendClientMessage(playerid, COLOR_YELLOW2, "¡Debes ser al menos nivel 3 para utilizar este comando!");
	if(target == INVALID_PLAYER_ID || target == playerid || !ProxDetectorS(2.0, playerid, target))
	    return SendClientMessage(playerid, COLOR_YELLOW2, "¡Jugador inválido o se encuentra muy lejos!");
	if(GetPVarInt(playerid, "cantSaveItems") == 1)
	    return SendClientMessage(playerid, COLOR_YELLOW2, "¡Debes esperar un tiempo antes de volver a interactuar con otro item!");
    if(GetPlayerState(playerid) == 3)
        return SendClientMessage(playerid, COLOR_YELLOW2, "No puedes utilizar este comando como pasajero! sal del vehículo primero.");
	if((PlayerInfo[playerid][pFaction] == FAC_PMA && CopDuty[playerid]) || (PlayerInfo[playerid][pFaction] == FAC_SIDE && SIDEDuty[playerid]))
 		return SendClientMessage(playerid, COLOR_YELLOW2, "¡No puedes hacerlo en servicio!");
	pWeapon = GetPlayerWeapon(playerid);
 	pAmmo = GetPlayerAmmo(playerid);
  	if(!isWeaponAllowed(pWeapon))
        return SendClientMessage(playerid, COLOR_YELLOW2, "Arma inválida (/ban ^^).");
	if(pWeapon <= 0)
	    return SendClientMessage(playerid, COLOR_YELLOW2, "¡Debes tener algo en las manos!");

	GivePlayerWeapon(target, pWeapon, pAmmo);
 	RemovePlayerWeapon(playerid, pWeapon);
	format(string, sizeof(string), "le entrega un/a %s a", itemName[pWeapon]);
 	PlayerPlayerActionMessage(playerid, target, 15.0, string);
	SetPVarInt(playerid, "cantSaveItems", 1);
	SetTimerEx("cantSaveItems", 4000, false, "i", playerid);
	return 1;
}

CMD:ventanillas(playerid, params[]) {
	new
	    vehicleid;
	    
	if(IsPlayerInAnyVehicle(playerid)) {
	    vehicleid = GetPlayerVehicleID(playerid);
	   	if(GetVehicleType(vehicleid) == VTYPE_CAR) {
		    if(CarWindowStatus[GetPlayerVehicleID(playerid)] == 1) {
				PlayerActionMessage(playerid,15.0,"ha abierto las ventanillas del vehículo.");
				CarWindowStatus[GetPlayerVehicleID(playerid)] = 0;
		    } else if(CarWindowStatus[GetPlayerVehicleID(playerid)] == 0) {
				PlayerActionMessage(playerid,15.0,"ha cerrado las ventanillas del vehículo.");
				CarWindowStatus[GetPlayerVehicleID(playerid)] = 1;
		    }
		} else {
			SendClientMessage(playerid, COLOR_YELLOW2,"¡Este vehículo no tiene ventanillas!");
		}
	} else {
		SendClientMessage(playerid, COLOR_YELLOW2,"¡Debes estar en un vehículo para utilizar este comando!");
	}
	return 1;
}

//=========================NEGOCIOS TIPO CASINO=================================

#define ROULETTE_COLOR_RED    	1
#define ROULETTE_COLOR_BLACK    2
#define ROULETTE_COLOR_GREEN    3
#define CASINO_GAME_ROULETTE    1
#define CASINO_GAME_FORTUNE     2

new rouletteData[37] = {
	3,1,2,1,2,
	1,2,1,2,1,
	2,2,1,2,1,
	2,1,2,1,1,
	2,1,2,1,2,
	1,2,1,2,2,
	1,2,1,2,1,
	2,1
};

getRouletteNumberDozen(number)
{
	if(number >= 1 && number <= 12)
	    return 1;
	else
	    if(number >= 13 && number <= 24)
	        return 2;
		else
		    if(number >= 25 && number <= 36)
	        	return 3;
	return 0;
}

forward CasinoBetEnabled(playerid, game);
public CasinoBetEnabled(playerid, game)
{
	switch(game)
	{
	    case CASINO_GAME_ROULETTE:
			if(isBetingRoulette[playerid])
	    		isBetingRoulette[playerid] = false;
		case CASINO_GAME_FORTUNE:
		    if(isBetingFortune[playerid])
	    		isBetingFortune[playerid] = false;
	}
	return 1;
}

CMD:apostar(playerid, params[])
{
	return SendClientMessage(playerid, COLOR_YELLOW2, "Comandos para apostar en un casino: /apruleta, /apfortuna.");
}
CMD:apruleta(playerid, params[])
{
	for(new i = 0; i < MAX_BUSINESS; i++)
	{
		if(PlayerToPoint(100.0, playerid, Business[i][bInsideX], Business[i][bInsideY], Business[i][bInsideZ]))
		{
			if(GetPlayerVirtualWorld(playerid) == i + 17000)
			{
	    		if(Business[i][bType] == BIZ_CASINO)
	    		{
					new number, numberbet, colour[10], colourbet, dozen, dozenbet;
					if(sscanf(params, "iis[10]iii", number, numberbet, colour, colourbet, dozen, dozenbet))
					{
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /apruleta [numero] [apuesta] [rojo/negro] [apuesta] [docena] [apuesta].");
     					SendClientMessage(playerid, COLOR_WHITE, "Si en algun campo no deseas apostar, escribe '-1' en el caso del numero/docena o 'no' en el caso del color, y su apuesta escribe '0'.");
						return 1;
					}
					if(strcmp(colour, "rojo", true) != 0 && strcmp(colour, "negro", true) != 0 && strcmp(colour, "no", true) != 0)
					{
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /apruleta [numero] [apuesta] [rojo/negro] [apuesta] [docena] [apuesta].");
     					SendClientMessage(playerid, COLOR_WHITE, "Si en algun campo no deseas apostar, escribe '-1' en el caso del numero/docena o 'no' en el caso del color, y en su apuesta escribe '0'.");
						return 1;
					}
					if(isBetingRoulette[playerid] == true)
					    return SendClientMessage(playerid, COLOR_YELLOW2, "Debes esperar un minuto para volver a apostar!");
					if(number < -1 || number > 36)
					    return SendClientMessage(playerid, COLOR_YELLOW2, "Los numeros de una ruleta van del 0 al 36!");
					if(dozen < -1 || dozen > 3)
					    return SendClientMessage(playerid, COLOR_YELLOW2, "Solo puedes elegir 1ra, 2da o 3er docena! (1,2,3 o -1 para omitir esa apuesta).");
					if(numberbet < 0 || numberbet > 20000 || colourbet < 0 ||colourbet > 20000 || dozenbet < 0 || dozenbet > 20000)
					    return SendClientMessage(playerid, COLOR_YELLOW2, "La apuesta mínima es de $1 y la máxima de $20.000!");
					new totalbet = numberbet + colourbet + dozenbet;
					if(GetPlayerCash(playerid) < totalbet)
     					return SendClientMessage(playerid, COLOR_YELLOW2, "No dispones de esa cantidad en efectivo!");
					if( ( numberbet * 36 + colourbet * 2 + dozenbet * 3) > Business[i][bTill] )
					    return SendClientMessage(playerid, COLOR_YELLOW2, "El casino no dispone de tanta liquidez en efectivo en el caso de que ganes. Prueba con otra apuesta.");

	                GivePlayerCash(playerid, -totalbet );
	                Business[i][bTill] += totalbet;

                    new string[128], winnerNumber, winnerColour[10];
					winnerNumber = random(37);
					switch(rouletteData[winnerNumber])
					{
					    case 1: winnerColour = "rojo";
					    case 2: winnerColour = "negro";
					    case 3: winnerColour = "verde";
					}
					format(string, sizeof(string), "apuesta $%d en la ruleta. El croupier empieza a girarla, y tras unos segundos... ¡%s %d!", totalbet, winnerColour, winnerNumber);
                    PlayerActionMessage(playerid, 15.0, string);

					new betWin = 0;
					new betsWin[128] = "";
					if(winnerNumber == number)
					{
					    betWin += numberbet * 36;
					    format(betsWin, sizeof(betsWin), "Número %d, ganó $%d.", winnerNumber, numberbet * 36);
					}
					if(strcmp(winnerColour, colour, true) == 0)
					{
						betWin += colourbet * 2;
						format(betsWin, sizeof(betsWin), "%s Color %s, ganó $%d.", betsWin, winnerColour, colourbet * 2);
					}
					if(getRouletteNumberDozen(winnerNumber) == dozen)
					{
					    betWin += dozenbet * 3;
					    format(betsWin, sizeof(betsWin), "%s Docena Nº%d, ganó $%d.", betsWin, dozen, dozenbet * 3);
					}
					if(betWin == 0)
					    PlayerActionMessage(playerid, 15.0, "ha perdido todas sus apuestas: el casino se queda con el dinero.");
					else
					{
					    Business[i][bTill] -= betWin;
					    GivePlayerCash(playerid, betWin);
					    format(string, sizeof(string), "tuvo suerte y ganó $%d! %s", betWin, betsWin);
					    PlayerActionMessage(playerid, 15.0, string);
					}
					isBetingRoulette[playerid] = true;
					SetTimerEx("CasinoBetEnabled", 60000, false, "ii", playerid, CASINO_GAME_ROULETTE);
				}
			}
		}
	}
	return 1;
}

CMD:apfortuna(playerid, params[])
{
 	for(new i = 0; i < MAX_BUSINESS; i++)
	{
		if(PlayerToPoint(100.0, playerid, Business[i][bInsideX], Business[i][bInsideY], Business[i][bInsideZ]))
		{
			if(GetPlayerVirtualWorld(playerid) == i + 17000)
			{
	    		if(Business[i][bType] == BIZ_CASINO)
	    		{
  					new number, numberbet;
   					if(sscanf(params, "ii",number, numberbet))
						return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /apfortuna [numero] [apuesta]");
	    			if(isBetingFortune[playerid] == true)
			    		return SendClientMessage(playerid, COLOR_YELLOW2, "Debes esperar un minuto para volver a apostar!");
					if(number != 1 && number != 2 && number != 5 && number != 10 && number != 20 && number != 40)
					    return SendClientMessage(playerid, COLOR_YELLOW2, "Tienes que apostar por un valor válido: 1, 2, 5, 10, 20 o 40.");
					if(numberbet < 1 || numberbet > 20000)
					    return SendClientMessage(playerid, COLOR_YELLOW2, "La apuesta mínima es de $1 y la máxima de $20.000!");
					if(GetPlayerCash(playerid) < numberbet)
		     			return SendClientMessage(playerid, COLOR_YELLOW2, "No dispones de esa cantidad en efectivo!");
					if( number * (numberbet + 1)  > Business[i][bTill] )
					    return SendClientMessage(playerid, COLOR_YELLOW2, "El casino no dispone de tanta liquidez en efectivo en el caso de que ganes. Prueba con otra apuesta.");

                    new string[128], winnerNumber;
                    GivePlayerCash(playerid, -numberbet);
                    Business[i][bTill] += numberbet;

                    new aleatorio = random(54);
					if(aleatorio < 24) winnerNumber = 1;
						else if(aleatorio < 39) winnerNumber = 2;
						    else if(aleatorio < 46) winnerNumber = 5;
           						else if(aleatorio < 50) winnerNumber = 10;
   						        	else if(aleatorio < 52) winnerNumber = 20;
   						        	    else if(aleatorio < 54) winnerNumber = 40;

					format(string, sizeof(string), "apuesta $%d al numero %d en la rueda de la fortuna. Luego de girar, se detiene en... ¡%d!", numberbet, number, winnerNumber);
                    PlayerActionMessage(playerid, 15.0, string);
                    if(winnerNumber == number)
                    {
                        GivePlayerCash(playerid, number * (numberbet + 1));
                    	Business[i][bTill] += number * (numberbet + 1);
                    	format(string, sizeof(string), "ha ganado $%d apostandole al %d!", number * (numberbet + 1), number);
					} else
					    	format(string, sizeof(string), "ha perdido $%d apostandole al %d!", numberbet, number);
       				PlayerActionMessage(playerid, 15.0, string);
					isBetingFortune[playerid] = true;
					SetTimerEx("CasinoBetEnabled", 60000, false, "ii", playerid, CASINO_GAME_FORTUNE);
				}
			}
		}
	}
	return 1;
}

//=======================NEGOCIOS TIPO RESTAURANT===============================

CMD:comer(playerid, params[])
{
	new menu;

	if(GetPVarInt(playerid, "disabled") == DISABLE_DYING || GetPVarInt(playerid, "disabled") == DISABLE_DEATHBED)
	    return SendClientMessage(playerid, COLOR_YELLOW2, "No puedes hacerlo en este momento.");

	for(new i = 0; i < MAX_BUSINESS; i++)
	{
		if(PlayerToPoint(35.0, playerid, Business[i][bInsideX], Business[i][bInsideY], Business[i][bInsideZ]))
		{
			if(GetPlayerVirtualWorld(playerid) == i + 17000)
			{
	    		if(Business[i][bType] == BIZ_REST)
				{
	    			if(Business[i][bProducts] <= 0)
                    	return SendClientMessage(playerid, COLOR_YELLOW2, "El negocio no tiene stock de productos. Intenta volviendo mas tarde");
					if(sscanf(params, "i", menu))
					{
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /comer [item]");
						SendClientMessage(playerid, COLOR_WHITE, "1) - Milanesa con papas - Precio: $80.");
						SendClientMessage(playerid, COLOR_WHITE, "2) - Pollo al horno con verduritas - Precio: $90.");
						SendClientMessage(playerid, COLOR_WHITE, "3) - Ravioles de espinaca con salsa parisiene - Precio: $90.");
						SendClientMessage(playerid, COLOR_WHITE, "4) - Ensalada Cáesar - Precio: $70.");
						SendClientMessage(playerid, COLOR_WHITE, "5) - Bife de cerdo a la plancha - Precio: $90.");
						SendClientMessage(playerid, COLOR_WHITE, "6) - Pastel de papa casero - Precio: $75.");
						SendClientMessage(playerid, COLOR_WHITE, "7) - Asado completo con bebida - Precio: $120.");
						return 1;
					}
					switch(menu)
					{
					    case 1:
					    {
					        if(GetPlayerCash(playerid) < 80)
					            return SendClientMessage(playerid, COLOR_YELLOW2, "¡Vuelve cuando tengas el dinero suficiente!");
	       					GivePlayerCash(playerid, -80);
	       		    		Business[i][bTill] += 80;
	            	   		Business[i][bProducts]--;
					  		PlayerActionMessage(playerid, 15.0, "ordena una milanesa con papas y comienza a comer.");
                            PlayerEat(playerid, 70.0);
							saveBusiness(i);
	                    }
						case 2:
					    {
					        if(GetPlayerCash(playerid) < 90)
					            return SendClientMessage(playerid, COLOR_YELLOW2, "¡Vuelve cuando tengas el dinero suficiente!");
       						GivePlayerCash(playerid, -90);
	       		    		Business[i][bTill] += 90;
	            	   		Business[i][bProducts]--;
					  		PlayerActionMessage(playerid, 15.0, "ordena un pollo al horno con verduritas y comienza a comer.");
         					PlayerEat(playerid, 70.0);
							saveBusiness(i);
						}
						case 3:
					    {
					        if(GetPlayerCash(playerid) < 90)
					        	return SendClientMessage(playerid, COLOR_YELLOW2, "¡Vuelve cuando tengas el dinero suficiente!");
       						GivePlayerCash(playerid, -90);
	       		    		Business[i][bTill] += 90;
	            	   		Business[i][bProducts]--;
					  		PlayerActionMessage(playerid, 15.0, "ordena unos ravioles de espinaca a la parisiene y comienza a comer.");
                            PlayerEat(playerid, 70.0);
							saveBusiness(i);
						}
						case 4:
					    {
					        if(GetPlayerCash(playerid) < 70)
					        	return SendClientMessage(playerid, COLOR_YELLOW2, "¡Vuelve cuando tengas el dinero suficiente!");
	       					GivePlayerCash(playerid, -70);
	       		    		Business[i][bTill] += 70;
	            	   		Business[i][bProducts]--;
					  		PlayerActionMessage(playerid, 15.0, "ordena una ensalada Caésar y comienza a comer.");
                            PlayerEat(playerid, 60.0);
							saveBusiness(i);
						}
						case 5:
					    {
					        if(GetPlayerCash(playerid) < 90)
					            return SendClientMessage(playerid, COLOR_YELLOW2, "¡Vuelve cuando tengas el dinero suficiente!");
       						GivePlayerCash(playerid, -90);
	       		    		Business[i][bTill] += 90;
	            	   		Business[i][bProducts]--;
					  		PlayerActionMessage(playerid, 15.0, "ordena un bife de cerdo a la plancha y comienza a comer.");
							PlayerEat(playerid, 70.0);
							saveBusiness(i);
						}
						case 6:
					    {
					        if(GetPlayerCash(playerid) < 75)
					        	return SendClientMessage(playerid, COLOR_YELLOW2, "¡Vuelve cuando tengas el dinero suficiente!");
       						GivePlayerCash(playerid, -75);
	       		    		Business[i][bTill] += 75;
	            	   		Business[i][bProducts]--;
					  		PlayerActionMessage(playerid, 15.0, "ordena un pastel de papas casero y comienza a comer.");
							PlayerEat(playerid, 70.0);
							saveBusiness(i);
						}
						case 7:
					    {
					        if(GetPlayerCash(playerid) < 120)
					        	return SendClientMessage(playerid, COLOR_YELLOW2, "¡Vuelve cuando tengas el dinero suficiente!");
	       					GivePlayerCash(playerid, -120);
	       		    		Business[i][bTill] += 120;
	            	   		Business[i][bProducts]--;
					  		PlayerActionMessage(playerid, 15.0, "ordena un asado completo con bebida y comienza a comer.");
                            PlayerEat(playerid, 100.0);
                            PlayerDrink(playerid, 70.0);
							saveBusiness(i);
						}
						default:
							SendClientMessage(playerid, COLOR_YELLOW2, "¡Ese menú no se encuentra en la carta, ordena alguno de los disponibles!");
					}
				}
			}
		}
	}
	return 1;
}

//======================NEGOCIOS TIPO BAR/CASINO/DISCO==========================

CMD:beber(playerid, params[])
{
	new command[64];
	
	if(GetPVarInt(playerid, "disabled") == DISABLE_DYING || GetPVarInt(playerid, "disabled") == DISABLE_DEATHBED)
	    return SendClientMessage(playerid, COLOR_YELLOW2, "No puedes hacerlo en este momento.");

	for(new i = 0; i < MAX_BUSINESS; i++)
	{
		if(PlayerToPoint(100.0, playerid, Business[i][bInsideX], Business[i][bInsideY], Business[i][bInsideZ]))
		{
			if(GetPlayerVirtualWorld(playerid) == i + 17000)
			{
	    		if(Business[i][bType] == BIZ_CLUB || Business[i][bType] == BIZ_CASINO)
				{
	    			if(Business[i][bProducts] <= 0)
                    	return SendClientMessage(playerid, COLOR_YELLOW2, "El negocio no tiene stock de bebidas. Intenta volviendo mas tarde");
					if(sscanf(params, "s[64]", command))
					{
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /beber [item]");
						SendClientMessage(playerid, COLOR_WHITE, "Cerveza - Precio: $35.");
						SendClientMessage(playerid, COLOR_WHITE, "Vodka - Precio: $40.");
						SendClientMessage(playerid, COLOR_WHITE, "CocaCola - Precio: $25.");
						SendClientMessage(playerid, COLOR_WHITE, "Agua - Precio: $20.");
						SendClientMessage(playerid, COLOR_WHITE, "Whisky - Precio: $40.");
						SendClientMessage(playerid, COLOR_WHITE, "Brandy - Precio: $35.");
						SendClientMessage(playerid, COLOR_WHITE, "Cafe - Precio: $25.");
						return 1;
					} else {
						if(strcmp(command, "cerveza", true) == 0) {
							if(GetPlayerCash(playerid) >= 35)
							{
		       					GivePlayerCash(playerid, -35);
		            	       	Business[i][bTill] += 35;
		               		    Business[i][bProducts]--;
		               		    PlayerActionMessage(playerid, 15.0, "se ha comprado una cerveza y la bebe.");
		               		    PlayerDrink(playerid, 50.0);
							  	saveBusiness(i);
							} else {
								SendClientMessage(playerid, COLOR_YELLOW2, "¡Vuelve cuando tengas el dinero suficiente!");
							}
						} else if(strcmp(command, "vodka", true) == 0) {
							if(GetPlayerCash(playerid) >= 40)
							{
		       					GivePlayerCash(playerid, -40);
		             	       	Business[i][bTill] += 40;
		                	    Business[i][bProducts]--;
							  	PlayerActionMessage(playerid, 15.0, "se ha comprado un shot de vodka y lo bebe.");
							  	PlayerDrink(playerid, 50.0);
          						saveBusiness(i);
							} else {
							    SendClientMessage(playerid, COLOR_YELLOW2, "¡Vuelve cuando tengas el dinero suficiente!");
							}
						} else if(strcmp(command, "cocacola", true) == 0) {
							if(GetPlayerCash(playerid) >= 25)
							{
		       					GivePlayerCash(playerid, -25);
		             	       	Business[i][bTill] += 25;
		                	    Business[i][bProducts]--;
					  			PlayerActionMessage(playerid, 15.0, "se ha comprado un vaso de Coca Cola y lo bebe.");
					  			PlayerDrink(playerid, 50.0);
							  	saveBusiness(i);
							} else {
							    SendClientMessage(playerid, COLOR_YELLOW2, "¡Vuelve cuando tengas el dinero suficiente!");
							}
						} else if(strcmp(command, "agua", true) == 0) {
							if(GetPlayerCash(playerid) >= 20)
							{
		       					GivePlayerCash(playerid, -20);
		             		   	Business[i][bTill] += 20;
		                	    Business[i][bProducts]--;
							  	PlayerActionMessage(playerid, 15.0, "se ha comprado un vaso de agua y lo bebe.");
							  	PlayerDrink(playerid, 50.0);
							  	saveBusiness(i);
							} else {
							    SendClientMessage(playerid, COLOR_YELLOW2, "¡Vuelve cuando tengas el dinero suficiente!");
							}
						} else if(strcmp(command, "whisky", true) == 0) {
							if(GetPlayerCash(playerid) >= 40)
							{
		       					GivePlayerCash(playerid, -40);
		             		   	Business[i][bTill] += 40;
		                	    Business[i][bProducts]--;
							  	PlayerActionMessage(playerid, 15.0, "se ha comprado un vaso de whisky.");
							  	PlayerDrink(playerid, 50.0);
							  	saveBusiness(i);
							} else {
							    SendClientMessage(playerid, COLOR_YELLOW2, "¡Vuelve cuando tengas el dinero suficiente!");
							}
						} else if(strcmp(command, "brandy", true) == 0) {
							if(GetPlayerCash(playerid) >= 35)
							{
		       					GivePlayerCash(playerid, -35);
		             		   	Business[i][bTill] += 35;
		                	    Business[i][bProducts]--;
								PlayerActionMessage(playerid, 15.0, "se ha comprado un vaso de brandy y lo bebe.");
								PlayerDrink(playerid, 50.0);
								saveBusiness(i);
							} else {
							    SendClientMessage(playerid, COLOR_YELLOW2, "¡Vuelve cuando tengas el dinero suficiente!");
							}
						} else if(strcmp(command, "cafe", true) == 0) {
							if(GetPlayerCash(playerid) >= 25)
							{
		       					GivePlayerCash(playerid, -25);
		             	       	Business[i][bTill] += 25;
		                	    Business[i][bProducts]--;
						  		PlayerActionMessage(playerid, 15.0, "se pide una taza de café y lo bebe.");
						  		PlayerDrink(playerid, 50.0);
						  		saveBusiness(i);
							} else {
							    SendClientMessage(playerid, COLOR_YELLOW2, "¡Vuelve cuando tengas el dinero suficiente!");
							}
						}
					}
				}
				if(Business[i][bType] == BIZ_CLUB2)
				{
	    			if(Business[i][bProducts] <= 0)
                    	return SendClientMessage(playerid, COLOR_YELLOW2, "El negocio no tiene stock de bebidas. Intenta volviendo mas tarde");
					if(sscanf(params, "s[64]", command))
					{
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /beber [item]");
						SendClientMessage(playerid, COLOR_WHITE, "FernetCola - Precio: $50.");
						SendClientMessage(playerid, COLOR_WHITE, "Destornillador - Precio: $60.");
						SendClientMessage(playerid, COLOR_WHITE, "GinTonic - Precio: $60.");
						SendClientMessage(playerid, COLOR_WHITE, "CubaLibre - Precio: $70.");
						SendClientMessage(playerid, COLOR_WHITE, "Caipirinha - Precio: $80.");
						SendClientMessage(playerid, COLOR_WHITE, "Martini - Precio: $80.");
						SendClientMessage(playerid, COLOR_WHITE, "Champagne - Precio: $150.");
						return 1;
					} else {
						if(strcmp(command, "fernetcola", true) == 0) {
							if(GetPlayerCash(playerid) >= 50)
							{
		       					GivePlayerCash(playerid, -50);
		            	       	Business[i][bTill] += 50;
		               		    Business[i][bProducts]--;
					  			PlayerActionMessage(playerid, 15.0, "ha comprado un vaso de Fernet con Coca y se lo bebe.");
					  			PlayerDrink(playerid, 50.0);
							  	saveBusiness(i);
							} else {
			    				SendClientMessage(playerid, COLOR_YELLOW2, "¡Vuelve cuando tengas el dinero suficiente!");
							}
						} else if(strcmp(command, "destornillador", true) == 0) {
							if(GetPlayerCash(playerid) >= 60)
							{
		       					GivePlayerCash(playerid, -60);
		             	       	Business[i][bTill] += 60;
		                	    Business[i][bProducts]--;
							  	PlayerActionMessage(playerid, 15.0, "ha comprado una copa de Destornillador y se lo bebe.");
							  	PlayerDrink(playerid, 50.0);
							  	saveBusiness(i);
							} else {
							    SendClientMessage(playerid, COLOR_YELLOW2, "¡Vuelve cuando tengas el dinero suficiente!");
							}
						} else if(strcmp(command, "gintonic", true) == 0) {
							if(GetPlayerCash(playerid) >= 60)
							{
		       					GivePlayerCash(playerid, -60);
		             	       	Business[i][bTill] += 60;
		                	    Business[i][bProducts]--;
					  			PlayerActionMessage(playerid, 15.0, "ha comprado una copa de Gin Tonic y se lo bebe.");
					  			PlayerDrink(playerid, 50.0);
							  	saveBusiness(i);
							} else {
							    SendClientMessage(playerid, COLOR_YELLOW2, "¡Vuelve cuando tengas el dinero suficiente!");
							}
						} else if(strcmp(command, "cubalibre", true) == 0) {
							if(GetPlayerCash(playerid) >= 70)
							{
		       					GivePlayerCash(playerid, -70);
		             		   	Business[i][bTill] += 70;
		                	    Business[i][bProducts]--;
							  	PlayerActionMessage(playerid, 15.0, "ha comprado una copa de Cuba Libre y se lo bebe.");
							  	PlayerDrink(playerid, 50.0);
							  	saveBusiness(i);
							} else {
							    SendClientMessage(playerid, COLOR_YELLOW2, "¡Vuelve cuando tengas el dinero suficiente!");
							}
						} else if(strcmp(command, "caipirinha", true) == 0) {
							if(GetPlayerCash(playerid) >= 80)
							{
		       					GivePlayerCash(playerid, -80);
		             		   	Business[i][bTill] += 80;
		                	    Business[i][bProducts]--;
							  	PlayerActionMessage(playerid, 15.0, "ha comprado una copa de Caipirinha y se la bebe.");
							  	PlayerDrink(playerid, 50.0);
							  	saveBusiness(i);
							} else {
							    SendClientMessage(playerid, COLOR_YELLOW2, "¡Vuelve cuando tengas el dinero suficiente!");
							}
						} else if(strcmp(command, "martini", true) == 0) {
							if(GetPlayerCash(playerid) >= 80)
							{
		       					GivePlayerCash(playerid, -80);
		             		   	Business[i][bTill] += 80;
		                	    Business[i][bProducts]--;
								PlayerActionMessage(playerid, 15.0, "ha comprado una copa de Martini y se lo bebe.");
								PlayerDrink(playerid, 50.0);
								saveBusiness(i);
							} else {
							    SendClientMessage(playerid, COLOR_YELLOW2, "¡Vuelve cuando tengas el dinero suficiente!");
							}
						} else if(strcmp(command, "champagne", true) == 0) {
							if(GetPlayerCash(playerid) >= 150)
							{
		       					GivePlayerCash(playerid, -150);
		             	       	Business[i][bTill] += 150;
		                	    Business[i][bProducts]--;
						  		PlayerActionMessage(playerid, 15.0, "ha comprado una botella de Champagne, la descorcha, y se toma una copa.");
                                PlayerDrink(playerid, 70.0);
								saveBusiness(i);
							} else {
							    SendClientMessage(playerid, COLOR_YELLOW2, "¡Vuelve cuando tengas el dinero suficiente!");
							}
						}
					}
				}
			}
		}
	}
	return 1;
}

CMD:ayudacasa(playerid, params[]) {
	SendClientMessage(playerid,COLOR_LIGHTYELLOW2,"[Casa]: /comprarcasa - /vendercasa - /casavendera [id] - /puerta - /armario");
	return 1;
}

CMD:comprarcasa(playerid, params[]) {
    new
        name[MAX_PLAYER_NAME];

	GetPlayerName(playerid, name, sizeof(name));
	
    for(new h = 0; h < sizeof(House); h++) {
		if(PlayerToPoint(2.0, playerid, House[h][EntranceX], House[h][EntranceY], House[h][EntranceZ]) && House[h][Owned] == 0) {
		    if(House[h][HousePrice] > 0) {
				if(PlayerInfo[playerid][pHouseKey] == 0) {
					if(GetPlayerCash(playerid) >= House[h][HousePrice]) {
						PlayerInfo[playerid][pHouseKey] = h;
						House[h][Owned] = 1;
						strmid(House[h][Owner], name, 0, strlen(name), 255);
						GivePlayerCash(playerid, -House[h][HousePrice]);
						SetPlayerInterior(playerid, House[h][ExitInterior]);
						SetPlayerVirtualWorld(playerid, h + 15000);
						SetPlayerPos(playerid, House[h][ExitX], House[h][ExitY], House[h][ExitZ]);
						SendClientMessage(playerid, COLOR_WHITE, "¡Felicidades, has comprado esta propiedad! Para ver los comandos disponibles utiliza /ayudacasa.");
		   				PlayerActionMessage(playerid, 15.0, "le da un paquete lleno de dinero al agente inmobiliario y este le entrega un par de llaves.");
						saveHouse(h);
					} else {
						SendClientMessage(playerid, COLOR_YELLOW2, "¡No tienes el dinero suficiente!");
					}
				} else {
					SendClientMessage(playerid, COLOR_YELLOW2, "¡No puedes tener más de una casa!");
				}
		    } else {
		    	SendClientMessage(playerid, COLOR_YELLOW2, "¡Esta casa no tiene precio!, probablemente no está a la venta.");
		    }
		}
    }
	return 1;
}

TIMER:CancelHouseTransfer(playerid, reason) {
	if(reason == 1) {
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "La venta ha sido cancelada ya que no has respondido en 30 segundos.");
		SendClientMessage(HouseOffer[playerid], COLOR_LIGHTBLUE, "La venta ha sido cancelada ya que el comprador no ha respondido en 30 segundos.");
	} else
		if(reason == 0) {
	    	SendClientMessage(playerid, COLOR_LIGHTBLUE, "Has rechazado la oferta.");
			SendFMessage(HouseOffer[playerid], COLOR_LIGHTBLUE, "%s ha rechazado la oferta.", GetPlayerNameEx(playerid));
		}
	OfferingHouse[HouseOffer[playerid]] = false;
	HouseOfferPrice[playerid] = -1;
	HouseOffer[playerid] = INVALID_PLAYER_ID;
	return 1;
}

CMD:casavendera(playerid, params[])
{
	new house = PlayerInfo[playerid][pHouseKey], targetid, price, name[MAX_PLAYER_NAME];

	if(sscanf(params, "ui", targetid, price))
		return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /casavendera [ID/Jugador] [Precio]");
	if(house == 0)
	    return SendClientMessage(playerid, COLOR_YELLOW2, "¡Debes tener una casa para utilizar este comando!");
    if(!PlayerToPoint(2.0, playerid, House[house][EntranceX], House[house][EntranceY], House[house][EntranceZ]))
        return SendClientMessage(playerid, COLOR_YELLOW2, "Debes estar en la puerta de tu casa.");
   	if(!IsPlayerConnected(targetid) || targetid == INVALID_PLAYER_ID || targetid == playerid)
		return SendClientMessage(playerid, COLOR_YELLOW2, "Jugador inválido.");
  	if(price < 1 || price > 10000000)
   		return SendClientMessage(playerid, COLOR_YELLOW2, "El precio no puede ser menor a $1 ni mayor a $10,000,000.");
  	if(OfferingHouse[playerid])
		return SendClientMessage(playerid, COLOR_YELLOW2, "Ya te encuentras vendiendo una casa.");
	if(!ProxDetectorS(4.0, playerid, targetid))
 	    return SendClientMessage(playerid, COLOR_YELLOW2, "El sujeto no está cerca tuyo.");
 	    
	GetPlayerName(playerid, name, sizeof(name));
    if(strcmp(House[house][Owner], name, true) == 0)
    {
		OfferingHouse[playerid] = true;
		HouseOfferPrice[targetid] = price;
		HouseOffer[targetid] = playerid;
		SendFMessage(playerid, COLOR_LIGHTBLUE, "Le ofreces las llaves y escritura de tu casa a %s por $%d.",GetPlayerNameEx(targetid), price);
		SendFMessage(targetid, COLOR_LIGHTBLUE, "%s te esta ofreciendo venderte su casa por $%d.", GetPlayerNameEx(playerid), price);
		SendClientMessage(targetid, COLOR_LIGHTBLUE, "Utiliza '/aceptar casa' para aceptar la oferta o '/cancelar casa' para cancelar.");
	 	SetPVarInt(targetid, "CancelHouseTransfer", SetTimerEx("CancelHouseTransfer", 30 * 1000, 0, "ii", targetid, 1));
	} else
	    SendClientMessage(playerid, COLOR_YELLOW2, "Error, la casa no está a tu nombre (Consulta a un administrador).");
	return 1;
}

CMD:vendercasa(playerid, params[]) {
	new
	    house = PlayerInfo[playerid][pHouseKey],
	    name[MAX_PLAYER_NAME];
	    
	GetPlayerName(playerid, name, sizeof(name));
	
	if(house != 0) {
		if(PlayerToPoint(1.0, playerid, House[house][EntranceX], House[house][EntranceY], House[house][EntranceZ])) {
			if(strcmp(House[house][Owner], name, true) == 0) {
				House[house][Locked] = 1;
				House[house][Owned] = 0;
				strmid(House[house][Owner], "Ninguno", 0, strlen("Ninguno"), 255);
				GivePlayerCash(playerid, House[house][HousePrice] / 3 * 2);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				SendFMessage(playerid, COLOR_WHITE, "¡Has vendido tu casa por $%d!", House[house][HousePrice] / 3 * 2);
				PlayerInfo[playerid][pHouseKey] = 0;
				PlayerActionMessage(playerid, 15.0 , "toma las llaves de su casa y se las entrega al agente inmobiliario.");
				saveHouse(house);
 			} else {
			    SendClientMessage(playerid, COLOR_YELLOW2, "Error, la casa no está a tu nombre (Consulta a un administrador).");
			}
		} else {
		    SendClientMessage(playerid, COLOR_YELLOW2, "¡Debes estar en la entrada de tu casa para venderla!");
		}
	} else {
		SendClientMessage(playerid, COLOR_YELLOW2, "¡Debes tener una casa para utilizar este comando!");
	}
	return 1;
}

CMD:puerta(playerid, params[]) {
    new
	    house = PlayerInfo[playerid][pHouseKey],
	    name[MAX_PLAYER_NAME];

	GetPlayerName(playerid, name, sizeof(name));
	if(house != 0) {
		if(PlayerToPoint(3.0, playerid, House[house][EntranceX], House[house][EntranceY], House[house][EntranceZ]) || (PlayerToPoint(3.0, playerid, House[house][ExitX], House[house][ExitY], House[house][ExitZ]) && GetPlayerVirtualWorld(playerid) == house + 15000)) {
			if(House[house][Locked] == 1) {
				House[house][Locked] = 0;
	            PlayerActionMessage(playerid, 15.0, "toma las llaves de su casa y abre la puerta.");
	            //saveHouse(i);
			} else {
				House[house][Locked] = 1;
	            PlayerActionMessage(playerid, 15.0, "toma las llaves de su casa y cierra la puerta.");
				//saveHouse(i);
			}
		} else {
			SendClientMessage(playerid, COLOR_YELLOW2, "Debes estar junto a la puerta de tu casa.");
		}
	} else {
		SendClientMessage(playerid, COLOR_YELLOW2, "¡No tienes una casa!");
	}
	return 1;
}

//==============================COMANDOS DE MAFIAS==============================

/*
CMD:ch(playerid, params[]) {
	cmd_chino(playerid, params);
	return 1;
}

CMD:chino(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == FAC_CHIN)
	{
		new text[128];
		if(sscanf(params, "s[128]", text))
			return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} (/ch)ino [texto]");
		new name[24];
		if(isUsingMaskInSlot[playerid] == -1)
		    name = GetPlayerNameEx(playerid);
		else
			name = "Enmascarado";
		foreach(new i : Player)
		{
		    if(ProxDetectorS(15.0, playerid, i))
 			{
		    	if(PlayerInfo[i][pFaction] == FAC_CHIN || AdminDuty[i])
		        	SendFMessage(i, COLOR_WHITE, "%s dice en chino: %s", name, text);
				else
				    SendFMessage(i, COLOR_ACT1, "%s habla unas palabras en un idioma desconocido.", name);
			}
		}
	}
	return 1;
}

CMD:it(playerid, params[]) {
	cmd_italiano(playerid, params);
	return 1;
}

CMD:italiano(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == FAC_BERT)
	{
		new text[128];
		if(sscanf(params, "s[128]", text))
			return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} (/it)aliano [texto]");
		new name[24];
		if(isUsingMaskInSlot[playerid] == -1)
		    name = GetPlayerNameEx(playerid);
		else
			name = "Enmascarado";
		foreach(new i : Player)
		{
		    if(ProxDetectorS(15.0, playerid, i))
 			{
		    	if(PlayerInfo[i][pFaction] == FAC_BERT || AdminDuty[i])
		        	SendFMessage(i, COLOR_WHITE, "%s dice en italiano: %s", name, text);
				else
				    SendFMessage(i, COLOR_ACT1, "%s habla unas palabras en un idioma desconocido.", name);
			}
		}
	}
	return 1;
}

CMD:ru(playerid, params[]) {
	cmd_ruso(playerid, params);
	return 1;
}

CMD:ruso(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == FAC_FORZ)
	{
		new text[128];
		if(sscanf(params, "s[128]", text))
			return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} (/ru)so [texto]");
		new name[24];
		if(isUsingMaskInSlot[playerid] == -1)
		    name = GetPlayerNameEx(playerid);
		else
			name = "Enmascarado";
		foreach(new i : Player)
		{
		    if(ProxDetectorS(15.0, playerid, i))
 			{
		    	if(PlayerInfo[i][pFaction] == FAC_FORZ || AdminDuty[i])
		        	SendFMessage(i, COLOR_WHITE, "%s dice en ruso: %s", name, text);
				else
				    SendFMessage(i, COLOR_ACT1, "%s habla unas palabras en un idioma desconocido.", name);
			}
		}
	}
	return 1;
}
*/

CMD:ensamblar(playerid, params[])
{
	new item, mats, weapon;

	if(PlayerInfo[playerid][pRank] != 1 || PlayerInfo[playerid][pFaction] == FAC_NONE || FactionInfo[PlayerInfo[playerid][pFaction]][fType] != FAC_TYPE_ILLEGAL)
		return 1;
    if(Building[GetPlayerBuilding(playerid)][blFaction] != PlayerInfo[playerid][pFaction])
        return SendClientMessage(playerid, COLOR_YELLOW2, "Debes estar dentro de tu HQ.");
	if(sscanf(params, "d", item))
	{
		SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /ensamblar [item]");
		SendFMessage(playerid, COLOR_LIGHTYELLOW2, " 1  - 9mm.             | %d piezas", MATS_9MM);
		SendFMessage(playerid, COLOR_LIGHTYELLOW2, " 2  - 9mm c/sil.      | %d piezas", MATS_S9MM);
		SendFMessage(playerid, COLOR_LIGHTYELLOW2, " 3  - Desert Eagle  | %d piezas", MATS_DEAGLE);
		SendFMessage(playerid, COLOR_LIGHTYELLOW2, " 4  - Escopeta        | %d piezas", MATS_SHOTGUN);
		SendFMessage(playerid, COLOR_LIGHTYELLOW2, " 5  - Uzi                 | %d piezas", MATS_UZI);
		SendFMessage(playerid, COLOR_LIGHTYELLOW2, " 6  - MP-5              | %d piezas", MATS_MP5);
		SendFMessage(playerid, COLOR_LIGHTYELLOW2, " 7  - AK-47             | %d piezas", MATS_AK47);
		SendFMessage(playerid, COLOR_LIGHTYELLOW2, " 8  - M-4                | %d piezas", MATS_M4);
		SendFMessage(playerid, COLOR_LIGHTYELLOW2, " 9 - TEC-9            | %d piezas", MATS_TEC9);
		SendFMessage(playerid, COLOR_LIGHTYELLOW2, " 10 - Rifle              | %d piezas", MATS_CRIFLE);
		SendFMessage(playerid, COLOR_LIGHTYELLOW2, " 11 - Rifle Sniper  | %d piezas", MATS_SRIFLE);
		SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "Al ensamblar un arma de fuego ésta traerá 50 municiones, en caso de granadas o armas blancas será por unidad.");
		return 1;
	}
	if(item < 1 || item > 11)
	    return SendClientMessage(playerid, COLOR_YELLOW2, "Número de item incorrecto, solo puedes del 1 al 11.");

 	switch(item)
	 {
		case 1: { weapon = 22; mats = MATS_9MM; }
		case 2: { weapon = 23; mats = MATS_S9MM; }
		case 3: { weapon = 24; mats = MATS_DEAGLE; }
		case 4: { weapon = 25; mats = MATS_SHOTGUN; }
		case 5: { weapon = 28; mats = MATS_UZI; }
		case 6: { weapon = 29; mats = MATS_MP5; }
		case 7: { weapon = 30; mats = MATS_AK47; }
		case 8: { weapon = 31; mats = MATS_M4; }
		case 9: { weapon = 32; mats = MATS_TEC9; }
		case 10: { weapon = 33; mats = MATS_CRIFLE; }
		case 11: { weapon = 34; mats = MATS_SRIFLE; }
	}
 	if(FactionInfo[PlayerInfo[playerid][pFaction]][fMaterials] < mats)
        SendFMessage(playerid, COLOR_YELLOW2, "Tu facción no cuenta con los materiales suficientes, necesitas %d piezas como mínimo y tienes %d.", mats, FactionInfo[PlayerInfo[playerid][pFaction]][fMaterials]);
	else
	{
		GivePlayerWeapon(playerid, weapon, 50);
		FactionInfo[PlayerInfo[playerid][pFaction]][fMaterials] -= mats;
		SendFMessage(playerid, COLOR_WHITE, "Has ensamblado un/a %s con 50 municiones por %d piezas.", itemName[weapon], mats);
	}
	return 1;
}

//============================COMANDOS DE MECANICOS=============================

CMD:equipomec(playerid, params[])
{
	new option;

	if(PlayerInfo[playerid][pFaction] != FAC_MECH)
	    return 1;
	if(sscanf(params, "i", option))
	    return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /equipomec [ropa] (1-5)");
	if(option < 1 || option > 5)
	    return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /equipomec [ropa] (1-5)");
    if(!PlayerToPoint(3.0, playerid, 1584.5441, -1819.6831, 13.3418)) // Oficina del taller
        return SendClientMessage(playerid, COLOR_YELLOW2, "Debes estar en la oficina del taller, al lado de los estantes donde se guardan las vestimentas de trabajo.");
   	if(!jobDuty[playerid])
	    return SendClientMessage(playerid, COLOR_YELLOW2, "Debes estar en servicio");

	RemovePlayerWeapon(playerid, 41); // Evitamos acumulacion de sprays
	if(option == 5)
	{
	    SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
        PlayerActionMessage(playerid, 15.0, "devuelve su ropa de trabajo al estante y se viste con la propia.");
	} else
	    {
			switch(option)
			{
			    case 1: SetPlayerSkin(playerid, 8);
			    case 2: SetPlayerSkin(playerid, 50);
			    case 3: SetPlayerSkin(playerid, 42);
			    case 4: SetPlayerSkin(playerid, 268);
			}
			GivePlayerWeapon(playerid, 41, 500);
			PlayerActionMessage(playerid, 15.0, "toma unas vestimentas del estante y se las pone. Luego agarra un aerosol de pintura.");
		}
	return 1;
}

CMD:reparar(playerid,params[])
{
	new target, vehicleid, price;

    if(PlayerInfo[playerid][pFaction] != FAC_MECH)
        return 1;
	if(sscanf(params, "ud", target, price))
		return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /reparar [ID/Jugador] [precio]");
	if(!jobDuty[playerid])
	    return SendClientMessage(playerid, COLOR_YELLOW2, "No te encuentras en servicio.");
 	if(price < 0 || price > JOB_MECH_MAXPRICE)
	{
	    SendFMessage(playerid, COLOR_YELLOW2, "¡El precio no debe ser mayor a %d o menor a 0!", JOB_MECH_MAXPRICE);
	    return 1;
 	}
 	if(target == INVALID_PLAYER_ID || target == playerid)
		return SendClientMessage(playerid, COLOR_YELLOW2, "{FF4600}[Error]:{C8C8C8} Jugador inválido.");
 	if(!ProxDetectorS(8.0, playerid, target) || !IsPlayerInAnyVehicle(target))
 	    return SendClientMessage(playerid, COLOR_YELLOW2, "{FF4600}[Error]:{C8C8C8} el jugador no se encuentra cerca tuyo o no está dentro de un vehiculo.");
	if(IsPlayerInAnyVehicle(playerid) || GetPlayerState(target) == PLAYER_STATE_PASSENGER)
		return SendClientMessage(playerid, COLOR_YELLOW2, "No puedes reparar un vehiculo desde adentro, ni tampoco repararselo a un pasajero.");
					
    vehicleid = GetPlayerVehicleID(target);
	GetVehicleParamsEx(vehicleid, VehicleInfo[vehicleid][VehEngine], VehicleInfo[vehicleid][VehLights], VehicleInfo[vehicleid][VehAlarm], vlocked, VehicleInfo[vehicleid][VehBonnet], VehicleInfo[vehicleid][VehBoot], VehicleInfo[vehicleid][VehObjective]);
	SendFMessage(playerid, COLOR_LIGHTBLUE, "Le has ofrecido a %s reparar su auto por $%d.", GetPlayerNameEx(target), price);
	SendFMessage(target, COLOR_LIGHTBLUE, "El mecánico %s le ha ofrecido reparar su vehículo por {D30000}$%d{33CCFF}, escribe /aceptar reparacion para aceptar.", GetPlayerNameEx(playerid), price);
	RepairOffer[target] = playerid;
	RepairPrice[target] = price;
	return 1;
}

CMD:remolcar(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid), targetVehicleid = GetClosestVehicle(playerid, 7.0);
	    
    if(PlayerInfo[playerid][pFaction] != FAC_MECH && PlayerInfo[playerid][pFaction] != FAC_PMA)
        return 1;
	if(GetVehicleModel(vehicleid) != 525 || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	    return SendClientMessage(playerid, COLOR_YELLOW2, "¡Tienes que estar conduciendo una grúa!");
	if(targetVehicleid == INVALID_VEHICLE_ID)
	    return 1;

	if(IsTrailerAttachedToVehicle(vehicleid))
		DetachTrailerFromVehicle(vehicleid);
	else
		AttachTrailerToVehicle(targetVehicleid, vehicleid);
	return 1;
}

CMD:pt(playerid, params[])
{
	cmd_ptunear(playerid, params);
	return 1;
}

CMD:ptunear(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] != FAC_MECH)
		return 1;
	if(PlayerInfo[playerid][pRank] > 3) {
        SendFMessage(playerid, COLOR_YELLOW2, "Debes ser al menos un '%s' para poder utilizar este comando.", GetRankName(FAC_MECH, 3));
        return 1;
	}
 	if(PlayerToPoint(10.0, playerid, -2714.6985, 222.1743, 4.3281)) {
	 	// Wheel Arch Angels San Fierro.
 	    if(TMTune[0][0] <= 0) {
 	        TMTune[0][0] = 1;
 	    	MoveObject(TMTune[0][1], -2716.01, 217.88, 10, 1, 0.00, 0.00, 0.00);
 	    	TMTuneTimers[0] = SetTimer("CloseTuneGate0", 1000 * 60 * 5, false);
		} else {
		    KillTimer(TMTuneTimers[0]);
		    TMTune[0][0] = 0;
		    MoveObject(TMTune[0][1], -2716.01, 217.88, 5.48, 1, 0.00, 0.00, 0.00);
		}
	} else if(PlayerToPoint(10.0, playerid, 2649.7874, -2037.5381, 13.5500)) {
		// Loco Low Co. Los Santos.
 	    if(TMTune[1][0] <= 0) {
 	        TMTune[1][0] = 1;
 	    	MoveObject(TMTune[1][1], 2651.19, -2039.01, 14.32, 1, 0.00, 0.00, -73.08);
 	    	TMTuneTimers[1] = SetTimer("CloseTuneGate1", 1000 * 60 * 5, false);
		} else {
			KillTimer(TMTuneTimers[1]);
		    TMTune[1][0] = 0;
		    MoveObject(TMTune[1][1], 2644.83, -2039.06, 14.32, 1, 0.00, 0.00, -73.08);
		}
	} else if(PlayerToPoint(10.0, playerid, -1931.3779, 237.0436, 34.3470)) {
		// TransFender San Fierro.
 	    if(TMTune[2][0] <= 0) {
 	        TMTune[2][0] = 1;
 	    	MoveObject(TMTune[2][1],  -1927.87, 238.66, 33.70, 1, 0.00, 0.00, 0.00);
 	    	TMTuneTimers[2] = SetTimer("CloseTuneGate2", 1000 * 60 * 5, false);
		} else {
		    KillTimer(TMTuneTimers[2]);
		    TMTune[2][0] = 0;
		    MoveObject(TMTune[2][1], -1935.01, 238.70, 33.69, 1, 0.00, 0.00, 0.00);
		}
	} else if(PlayerToPoint(10.0, playerid, 1044.7301, -1027.6169, 32.1016)) {
		// TransFender Los Santos.
 	    if(TMTune[3][0] <= 0) {
 	        TMTune[3][0] = 1;
 	    	MoveObject(TMTune[3][1], 1050.63, -1025.82, 33.66, 1, 0.00, 0.00, 0.00);
 	    	TMTuneTimers[3] = SetTimer("CloseTuneGate3", 1000 * 60 * 5, false);
		} else {
		    KillTimer(TMTuneTimers[3]);
		    TMTune[3][0] = 0;
		    MoveObject(TMTune[3][1], 1043.17, -1025.85, 33.66, 1, 0.00, 0.00, 0.00);
		}
	} else if(PlayerToPoint(10.0, playerid, 2391.1355, 1041.8885, 10.8203)) {
		// TransFender Las Venturas.
 	    if(TMTune[4][0] <= 0) {
 	        TMTune[4][0] = 1;
 	    	MoveObject(TMTune[4][1], 2394.90, 1043.69, 11.82, 1, 0.00, 90.00, 90.00);
       		TMTuneTimers[4] = SetTimer("CloseTuneGate4", 1000 * 60 * 5, false);
		} else {
		    KillTimer(TMTuneTimers[4]);
		    TMTune[4][0] = 0;
		    MoveObject(TMTune[4][1], 2387.38, 1043.45, 11.82, 1, 0.00, 0.00, 0.00);
		}
	} else {
		SendClientMessage(playerid, COLOR_YELLOW2, "Debes estar junto a la puerta de un Transfender, Loco Low Co. o Wheel Arch Angels.");
	}
	return 1;
}

forward FinOfertaDestuning(playerid);
public FinOfertaDestuning(playerid)
{
	DestuningOffer[playerid] = 999;
}

CMD:destunear(playerid, params[])
{
	new target;
	
 	if(PlayerInfo[playerid][pFaction] != FAC_MECH)
  		return 1;
    if(sscanf(params, "u", target))
		return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /destunear [idDueño]");
 	if(!jobDuty[playerid])
	    return SendClientMessage(playerid, COLOR_YELLOW2, "Debes estar en servicio");
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
 		return SendClientMessage(playerid, COLOR_YELLOW2, "Debes estar a pie!");
  	if(target == INVALID_PLAYER_ID)
 	    return SendClientMessage(playerid, COLOR_YELLOW2, "Jugador invalido.");
  	if(!ProxDetectorS(5.0, playerid, target))
  	    return SendClientMessage(playerid, COLOR_YELLOW2, "El jugador no está cerca tuyo.");
    if(!IsPlayerInRangeOfPoint(playerid, 15.0, 1595.9249, -1840.6959, 13.4859))
        return SendClientMessage(playerid, COLOR_YELLOW2, "Debes estar en el galpon de tuning del Taller Mercury.");
	if(!IsPlayerInAnyVehicle(target))
	    return SendClientMessage(playerid, COLOR_YELLOW2, "El sujeto no esta en un vehiculo.");
	new vID = GetPlayerVehicleID(target);
    if(GetVehicleType(vID) != VTYPE_CAR)
        return SendClientMessage(playerid, COLOR_YELLOW2, "Tipo de vehículo invalido.");
    if(PlayerInfo[target][pVeh1] != vID && PlayerInfo[target][pVeh2] != vID)
	    return SendClientMessage(playerid, COLOR_YELLOW2, "El jugador no es dueño de ese vehiculo.");
	    
    DestuningOffer[target] = playerid;
    SetTimerEx("FinOfertaDestuning", 15000, false, "i", target);
    SendClientMessage(target, COLOR_WHITE, "Te han ofrecido destunear tu auto, usa /aceptar destuneo si asi lo deseas. Tienes 15 segundos para responder.");
    SendClientMessage(playerid, COLOR_WHITE, "Le has propuesto al cliente destunear su auto, espera a su respuesta. La propuesta termina en 15 segundos.");
	return 1;
}

forward FinOfertaTuning(playerid);
public FinOfertaTuning(playerid)
{
    TuningOffer[TuningClient[playerid]] = 999;
	TuningClient[playerid] = 999;
}

CMD:tunear(playerid,params[])
{
	new target, tuningVehicleID;

    if(PlayerInfo[playerid][pFaction] != FAC_MECH)
        return 1;
	if(sscanf(params, "u", target))
		return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /tunear [idDueño]");
	if(!jobDuty[playerid])
	    return SendClientMessage(playerid, COLOR_YELLOW2, "Debes estar en servicio");
 	if(PlayerInfo[playerid][pRank] > 4)
    	return SendClientMessage(playerid, COLOR_YELLOW2, "No tienes el rango suficiente.");
	if(TuningClient[playerid] < 999)
	    return SendClientMessage(playerid, COLOR_YELLOW2, "Tienes una propuesta con otro cliente!");
  	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
 		return SendClientMessage(playerid, COLOR_YELLOW2, "Debes estar de conductor en el auto que vas a tunear!");
 	if(target == INVALID_PLAYER_ID)
 	    return SendClientMessage(playerid, COLOR_YELLOW2, "Jugador invalido.");
  	if(!ProxDetectorS(5.0, playerid, target))
  	    return SendClientMessage(playerid, COLOR_YELLOW2, "El jugador no está cerca tuyo.");
	tuningVehicleID = GetPlayerVehicleID(playerid);
	if(PlayerInfo[target][pVeh1] != tuningVehicleID && PlayerInfo[target][pVeh2] != tuningVehicleID)
	    return SendClientMessage(playerid, COLOR_YELLOW2, "El jugador no es dueño de este vehiculo.");
    if(GetVehicleType(tuningVehicleID) != VTYPE_CAR && GetVehicleType(tuningVehicleID) != VTYPE_BIKE)
    	return SendClientMessage(playerid, COLOR_YELLOW2, "Tipo de vehículo invalido.");
    if(!IsPlayerInRangeOfPoint(playerid, 15.0, 1595.9249, -1840.6959, 13.4859))
        return SendClientMessage(playerid, COLOR_YELLOW2, "Debes estar en el galpon de tuning del Taller Mercury.");

    SendClientMessage(target, COLOR_LIGHTBLUE, "Te han ofrecido un tuneo, usa /aceptar tuning si asi lo deseas. La oferta y el tiempo para tunearlo terminar en 2 minutos.");
    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Has ofrecido un tuneo, el tiempo para terminar de tunearlo termina en 2 minutos.");
	SetTimerEx("FinOfertaTuning", 120000, false, "i", playerid);
	TuningOffer[target] = playerid;
	return 1;
}

CMD:tuning(playerid, params[])
{
    new clientID = TuningClient[playerid];
    
    if(PlayerInfo[playerid][pFaction] != FAC_MECH)
        return 1;
    if(!jobDuty[playerid])
		return SendClientMessage(playerid, COLOR_YELLOW2, "Debes estar en servicio.");
    if(clientID == 999)
		return SendClientMessage(playerid, COLOR_YELLOW2, "No tienes autorizacion del dueño para tunear este vehículo.");
	if(TuningOffer[clientID] != playerid)
	    return SendClientMessage(playerid, COLOR_YELLOW2, "No tienes autorizacion del dueño para tunear este vehículo.");
    if(!IsPlayerInRangeOfPoint(playerid, 15.0, 1595.9249, -1840.6959, 13.4859))
        return SendClientMessage(playerid, COLOR_YELLOW2, "Debes estar en el galpon de tuning del Taller Mercury.");
    if(PlayerInfo[playerid][pRank] > 4)
	    return SendClientMessage(playerid, COLOR_YELLOW2, "No tienes el rango suficiente.");
 	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
		return SendClientMessage(playerid, COLOR_YELLOW2, "¡Debes estar de conductor del auto que vas a tunear!");
	new vID = GetPlayerVehicleID(playerid);
  	if(PlayerInfo[clientID][pVeh1] != vID && PlayerInfo[clientID][pVeh2] != vID)
	    return SendClientMessage(playerid, COLOR_YELLOW2, "Este auto no es de tu cliente.");
   	if(GetVehicleType(vID) != VTYPE_CAR && GetVehicleType(vID) != VTYPE_BIKE)
		return SendClientMessage(playerid, COLOR_YELLOW2, "Vehiculo invalido.");

	new title[64];
	new content[256];
	format(title, sizeof(title), "Menú de tuning del Taller Mercury");
	format(content, sizeof(content), "Color 1 $1500\nColor 2 $1500\nLlantas $4000\nSuspension Hidraulica $4000\nOxido Nitroso $10000");
	TogglePlayerControllable(playerid, false);
	ShowPlayerDialog(playerid, DLG_TUNING, DIALOG_STYLE_LIST, title, content, "Seleccionar", "Cerrar");
	return 1;
}

//==========================SISTEMA DE RADIO PARA AUTOS=========================

stock PlayCarRedioForPlayer(playerid, redio)
{
	if(isHearingVehicleRedio[playerid])
 		StopAudioStreamForPlayer(playerid);
	switch(redio)
	{
	    case 1: PlayAudioStreamForPlayer(playerid, "http://buecrplb01.cienradios.com.ar/Mitre790.mp3");
	    case 2: PlayAudioStreamForPlayer(playerid, "http://184.171.254.134:9878/listen.pls");
	    case 3: PlayAudioStreamForPlayer(playerid, "http://giss.tv:8001/AltaM.mp3");
	    case 4: PlayAudioStreamForPlayer(playerid, "http://movidamix.com:8128/listen.pls");
	    case 5: PlayAudioStreamForPlayer(playerid, "http://buecrplb01.cienradios.com.ar/Palermo_2.mp3");
	    case 6: PlayAudioStreamForPlayer(playerid, "http://buecrplb01.cienradios.com.ar/fm979.mp3");
	    case 7: PlayAudioStreamForPlayer(playerid, "http://buecrplb01.cienradios.com.ar/la100_mdq.mp3");
	    case 8: PlayAudioStreamForPlayer(playerid, "http://144.76.174.181:2040/listen.pls");
	    case 9: PlayAudioStreamForPlayer(playerid, "http://188.138.33.174:12500/stream/2/listen.pls");
     	case 10: PlayAudioStreamForPlayer(playerid, "http://95.141.24.140:80/listen.pls");
     	case 11: PlayAudioStreamForPlayer(playerid, "http://95.141.24.173:80/listen.pls");
	    case 12: PlayAudioStreamForPlayer(playerid, "http://206.217.213.235:8170/listen.pls");
	    case 13: PlayAudioStreamForPlayer(playerid, "http://5.135.158.214:6316/listen.pls");
	    case 14: PlayAudioStreamForPlayer(playerid, "http://streamlky.alsolnet.com:443/fmpasion/listen.pls");
	}
	isHearingVehicleRedio[playerid] = true;
}

CMD:emisora(playerid, params[])
{
    new redio, vType, vehicleid = GetPlayerVehicleID(playerid);
	vType = GetVehicleType(vehicleid);

	if(sscanf(params, "i", redio))
		return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /emisora [1-14]. Para apagarla utiliza /emisoraoff.");
	if(!IsPlayerInAnyVehicle(playerid) || (vType != VTYPE_CAR && vType != VTYPE_HEAVY) )
		return SendClientMessage(playerid, COLOR_YELLOW2, "¡Debes estar en un auto!");
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER && GetPlayerVehicleSeat(playerid) != 1)
	    return SendClientMessage(playerid, COLOR_YELLOW2, "¡Debes estar en los asientos delanteros!");
	if(redio < 1 || redio > 14)
	    return SendClientMessage(playerid, COLOR_YELLOW2, "Debes ingresar una radio válida: del 1 al 14.");

	foreach(new i : Player)
	{
		if(IsPlayerInVehicle(i, vehicleid))
		{
			SendFMessage(i, COLOR_ACT1, "%s sintoniza una radio en el estéreo del auto.", GetPlayerNameEx(playerid));
  			PlayCarRedioForPlayer(i, redio);
		}
	}
	vehicleRedio[vehicleid] = redio;
	return 1;
}

CMD:emisoraoff(playerid, params[])
{
	new vType, vehicleid = GetPlayerVehicleID(playerid);
	vType = GetVehicleType(vehicleid);

	if(!IsPlayerInAnyVehicle(playerid) || (vType != VTYPE_CAR && vType != VTYPE_HEAVY) )
		return SendClientMessage(playerid, COLOR_YELLOW2, "¡Debes estar en un auto!");
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER && GetPlayerVehicleSeat(playerid) != 1)
	    return SendClientMessage(playerid, COLOR_YELLOW2, "¡Debes estar en los asientos delanteros!");
 	foreach(new i : Player)
	{
		if(IsPlayerInVehicle(i, vehicleid))
		{
			SendFMessage(i, COLOR_ACT1, "%s apaga la radio sintonizada en el estéreo del auto.", GetPlayerNameEx(playerid));
		    if(isHearingVehicleRedio[i])
		        StopAudioStreamForPlayer(i);
		}
	}
	vehicleRedio[vehicleid] = 0;
	return 1;
}

//=============================COMANDOS CTR-MAN=================================

CMD:n(playerid, params[]) {
	cmd_noticia(playerid, params);
	return 1;
}

CMD:noticia(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] != FAC_MAN && InterviewActive[playerid] == false)
		return SendClientMessage(playerid, COLOR_YELLOW2, "¡No eres reportero / No estás en una entrevista!");
    new string[128], text[128], closestVeh = GetClosestVehicle(playerid, 7.0);
  	if(sscanf(params, "s[128]", text))
    	return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} (/n)oticia [texto]");
	if(!IsPlayerInAnyVehicle(playerid) && (closestVeh == INVALID_VEHICLE_ID || VehicleInfo[closestVeh][VehFaction] != FAC_MAN) && GetPlayerBuilding(playerid) != BLD_MAN)
        return SendClientMessage(playerid, COLOR_YELLOW2, "¡Debes estar cerca de una furgoneta, helicóptero de reportero o en la central de CTR!");
	if(IsPlayerInAnyVehicle(playerid) && VehicleInfo[GetPlayerVehicleID(playerid)][VehFaction] != FAC_MAN)
		return SendClientMessage(playerid, COLOR_YELLOW2, "¡Debes estar en algún vehiculo de la facción para transmitir!");
	if(InterviewActive[playerid] && !ProxDetectorS(5.0, playerid, InterviewOffer[playerid]))
	    return SendClientMessage(playerid, COLOR_YELLOW2, "Para poder transmitir debes estar cerca del reportero que te ofreció la entrevista.");
	format(string, sizeof(string), "[Noticias] por %s: %s", GetPlayerNameEx(playerid), text);
	foreach(new i : Player)
	{
	    if(NewsEnabled[i])
	        SendClientMessage(i,COLOR_LIGHTGREEN, string);
	}
	return 1;
}

forward EndInterviewOffer(playerid);
public EndInterviewOffer(playerid)
{
	if(InterviewActive[playerid] == false) // Si todavia no la aceptó
	    InterviewOffer[playerid] = 999;
	return 1;
}

forward EndInterviewActive(playerid);
public EndInterviewActive(playerid)
{
	InterviewActive[playerid] = false;
	InterviewOffer[playerid] = 999;
	return 1;
}

CMD:entrevistar(playerid, params[])
{
    if(PlayerInfo[playerid][pFaction] != FAC_MAN)
		return SendClientMessage(playerid, COLOR_GREY, "¡Usted no es reportero!");
	new target;
 	if(sscanf(params, "d", target))
    	return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /entrevistar [ID/Jugador]");
	if(!ProxDetectorS(5.0, playerid, target))
	    return SendClientMessage(playerid, COLOR_YELLOW2, "El sujeto no está cerca tuyo.");
	new string[128];
	format(string, sizeof(string), "Le has ofrecido una entrevista a %s, espera su respuesta. La oferta dura 15 segundos.", GetPlayerNameEx(target));
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "El reportero %s te quiere entrevistar por la radio, si lo deseas escribe /entrevistarse. Tienes 15 segundos.", GetPlayerNameEx(playerid));
	SendClientMessage(target, COLOR_LIGHTBLUE, string);
	InterviewOffer[target] = playerid;
	SetTimerEx("EndInterviewOffer", 15000, false, "i", target);
	return 1;
}

CMD:entrevistarse(playerid, params[])
{
	if(InterviewOffer[playerid] == 999 || InterviewOffer[playerid] == INVALID_PLAYER_ID || !IsPlayerConnected(InterviewOffer[playerid]))
	    return SendClientMessage(playerid, COLOR_YELLOW2, "¡Ningún reportero te ha ofrecido una entrevista!");
	if(!ProxDetectorS(5.0, playerid, InterviewOffer[playerid]))
	    return SendClientMessage(playerid, COLOR_YELLOW2, "El reportero no está cerca tuyo.");
	if(InterviewActive[playerid] == true)
	    return SendClientMessage(playerid, COLOR_YELLOW2, "Ya te encuentras en una entrevista.");
	new string[128];
	SendClientMessage(playerid, COLOR_WHITE, "Has aceptado la entrevista, ahora podrás usar /n para hablar al aire en la radio.");
	format(string, sizeof(string), "acepta la entrevista radial ofrecida por %s. La duración es de 5 minutos.", GetPlayerNameEx(InterviewOffer[playerid]));
	PlayerActionMessage(playerid, 15.0, string);
	InterviewActive[playerid] = true;
	SetTimerEx("EndInterviewActive", 300000, false, "i", playerid);
	return 1;
}

//============================SISTEMA DE MASCARA================================

/*
new Text3D:maskedPlayerLabel[MAX_PLAYERS];

CMD:mascara(playerid, params[])
{
	if(PlayerInfo[playerid][pMask] == 0)
	    return SendClientMessage(playerid, COLOR_YELLOW2, "No tienes una mascara en tu bolsillo.");
	if(isUsingMaskInSlot[playerid] == -1)
	{
		new index = 999;
		for(new z = 0; z < MAX_PLAYER_ATTACHED_OBJECTS; z++)
		{
		    if(!IsPlayerAttachedObjectSlotUsed(playerid, z))
		    {
		        index = z;
		        break;
			}
		}
		if(index == 999)
  			return SendClientMessage(playerid, COLOR_YELLOW2, "No tienes mas espacio para equiparte items.");
		SetPlayerAttachedObject(playerid, index, PlayerInfo[playerid][pMask], 2, 0.058999, 0.026000, 0.004999, 87.400039, 159.800033, 84.100013, 1.0, 1.0, 1.0);
        PlayerActionMessage(playerid, 15.0, "agarra un pañuelo de su bolsillo y se la coloca en la cara para tapar su rostro.");
		isUsingMaskInSlot[playerid] = index;
		EditAttachedObject(playerid, index);
		foreach(new i:Player)
		{
			ShowPlayerNameTagForPlayer(i, playerid, 0);
		}
		new string[128];
		format(string, sizeof(string), "Enmascarado ID %d", (playerid * 15) + 155); // una cuenta al azar para codificar la id y que no sea obvia
		maskedPlayerLabel[playerid] = Create3DTextLabel(string, COLOR_WHITE, 30.0, 40.0, 50.0, 30.0, GetPlayerVirtualWorld(playerid), 1);
		Attach3DTextLabelToPlayer(maskedPlayerLabel[playerid], playerid, 0.0, 0.0, 0.7);
	} else
		{
		    Delete3DTextLabel(maskedPlayerLabel[playerid]);
			RemovePlayerAttachedObject(playerid, isUsingMaskInSlot[playerid]);
			PlayerActionMessage(playerid, 15.0, "quita el pañuelo que ocultaba su rostro y lo guarda en su bolsillo.");
			isUsingMaskInSlot[playerid] = -1;
		    foreach(new i:Player)
		    {
		        ShowPlayerNameTagForPlayer(i, playerid, 1);
			}
		}
	return 1;
}
*/

CMD:mascara(playerid, params[])
{
	if(PlayerInfo[playerid][pMask] == 0)
	    return SendClientMessage(playerid, COLOR_YELLOW2, "No tienes una mascara en tu bolsillo.");
	if(isUsingMaskInSlot[playerid] == -1)
	{
		new index = 999;
		for(new z = 0; z < MAX_PLAYER_ATTACHED_OBJECTS; z++)
		{
		    if(!IsPlayerAttachedObjectSlotUsed(playerid, z))
		    {
		        index = z;
		        break;
			}
		}
		if(index == 999)
  			return SendClientMessage(playerid, COLOR_YELLOW2, "No tienes mas espacio para equiparte items.");
		SetPlayerAttachedObject(playerid, index, PlayerInfo[playerid][pMask], 2, 0.058999, 0.026000, 0.004999, 87.400039, 159.800033, 84.100013, 1.0, 1.0, 1.0);
		PlayerActionMessage(playerid, 15.0, "agarra un pañuelo de su bolsillo y se la coloca en la cara para tapar su rostro.");
		isUsingMaskInSlot[playerid] = index;
  		EditAttachedObject(playerid, index);
		foreach(new i:Player)
		{
		    if(PlayerInfo[i][pAdmin] < 1) // Si el tipo es admin no se lo ocultamos
				ShowPlayerNameTagForPlayer(i, playerid, 0);
		}
	} else
		{
			RemovePlayerAttachedObject(playerid, isUsingMaskInSlot[playerid]);
			PlayerActionMessage(playerid, 15.0, "quita el pañuelo que ocultaba su rostro y lo guarda en su bolsillo.");
			isUsingMaskInSlot[playerid] = -1;
		    foreach(new i:Player)
		    {
		        ShowPlayerNameTagForPlayer(i, playerid, 1);
			}
		}
	return 1;
}

CMD:comprarmascara(playerid, params[])
{
    new idmask;
    new maskModels[9] = {18912, 18913, 18914, 18915, 18916, 18917, 18918, 18919, 18920};
    new business = GetPlayerBusiness(playerid);
    if(sscanf(params, "i", idmask))
		return SendClientMessage(playerid, COLOR_YELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /comprarmascara [modelo]. (modelos del 0 al 8) Precio: $300.");
    if(business == 0 || (Business[business][bType] != BIZ_CLOT &&  Business[business][bType] != BIZ_CLOT2))
        return SendClientMessage(playerid, COLOR_YELLOW2, "Para comprar un pañuelo debes dirigirte a algun negocio de ropa que los venda.");
	if(idmask < 0 || idmask > 8)
        return SendClientMessage(playerid, COLOR_YELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /comprarmascara [modelo]. (modelos del 0 al 8) Precio: $300.");
	if(GetPlayerCash(playerid) < 300)
	    return SendClientMessage(playerid, COLOR_YELLOW2, "No tienes el dinero suficiente, necesitas $300. ¡Vuelve cuando los tengas!");
	if(Business[business][bProducts] < 1)
	    return SendClientMessage(playerid, COLOR_YELLOW2, "La tienda no tiene productos!");
 	GivePlayerCash(playerid, -300);
 	PlayerInfo[playerid][pMask] = maskModels[idmask];
 	PlayerActionMessage(playerid, 15.0, "le paga al empleado $300 y compra un pañuelo, que luego guarda en su bolsillo.");
 	SendClientMessage(playerid, COLOR_WHITE, "Has comprado un pañuelo en la tienda. Para cubrirte/descubrirte el rostro con este usa /mascara.");
	Business[business][bTill] += 300;
	Business[business][bProducts]--;
	saveBusiness(business);
	return 1;
}

public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
    if(response)
    {
        if(isUsingMaskInSlot[playerid] == index)
        {
        	RemovePlayerAttachedObject(playerid, index);
        	SetPlayerAttachedObject(playerid, index, PlayerInfo[playerid][pMask], boneid, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ);
		}
	}
	return 1;
}

public OnPlayerStreamIn(playerid, forplayerid)
{
	if(isUsingMaskInSlot[playerid] != -1)
	{
	    if(PlayerInfo[forplayerid][pAdmin] < 1) // Si el tipo es admin no se lo ocultamos
	    	ShowPlayerNameTagForPlayer(forplayerid, playerid, 0);
	}
	return 1;
}

CMD:cambiarnombre(playerid, params[]) {
	new string[128], name[24], target;
	    
	if(PlayerInfo[playerid][pAdmin] < 3)
		return 1;
	if(sscanf(params, "us[24]", target, name)) {
	    SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /cambiarnombre [playerid/ParteDelNombre] [nombre]");
	} else if(target != INVALID_PLAYER_ID) {
	    format(PlayerInfo[target][pName], 24, "%s", name);
		format(string, sizeof(string), "[Staff] el administrador %s le ha cambiado el nombre a %s a '%s'.", GetPlayerNameEx(playerid), GetPlayerNameEx(target), name);
		AdministratorMessage(COLOR_ADMINCMD, string, 1);
		SetPlayerName(target, PlayerInfo[target][pName]);
		new
			veh1ID = PlayerInfo[target][pVeh1],
			veh2ID = PlayerInfo[target][pVeh2],
			houseID = PlayerInfo[target][pHouseKey],
			bizID = PlayerInfo[target][pBizKey];

        if(veh1ID != 0 && VehicleInfo[veh1ID][VehOwnerSQLID] == PlayerInfo[target][pID])
		{
			VehicleInfo[veh1ID][VehOwnerName] = name;
  			SaveVehicle(veh1ID);
		}
		if(veh2ID != 0 && VehicleInfo[veh2ID][VehOwnerSQLID] == PlayerInfo[target][pID])
		{
			VehicleInfo[veh2ID][VehOwnerName] = name;
			SaveVehicle(veh2ID);
		}
		if(houseID != 0)
		{
		    House[houseID][Owner] = name;
		    saveHouse(houseID);
		}
		if(bizID != 0 && Business[bizID][bOwnerSQLID] == PlayerInfo[target][pID])
		{
			Business[bizID][bOwner] = name;
			saveBusiness(bizID);
		}
		SendFMessage(target, COLOR_WHITE, "Tu nombre ha sido cambiado a %s por el administrador %s.", GetPlayerNameEx(target), GetPlayerNameEx(playerid));
	} else {
	    SendClientMessage(playerid, COLOR_YELLOW2, "Jugador inválido.");
	}
	return 1;
}

CMD:kick(playerid, params[])
{
    new targetid, reason[128];
    
    if(PlayerInfo[playerid][pAdmin] < 1)
        return 1;
	if(sscanf(params, "us[128]", targetid, reason))
		return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /kick [ID/Jugador] [razón]");
	if(!IsPlayerConnected(targetid) || targetid == INVALID_PLAYER_ID)
	    return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{FF4600}[Error]:{C8C8C8} ID inválida.");
	if(IsPlayerNPC(targetid))
        return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{FF4600}[Error]:{C8C8C8} la ID corresponde a un NPC.");
	    
    KickPlayer(targetid, GetPlayerNameEx(playerid), reason);
    return 1;
}

CMD:ban(playerid, params[]) {
	return cmd_banear(playerid, params);
}

CMD:banear(playerid, params[])
{
	new targetid, reason[128];
	
	if (PlayerInfo[playerid][pAdmin] < 2)
		return 1;
	if (sscanf(params, "us[128]", targetid, reason))
	    return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} (/ban)ear [ID/Jugador] [razón]");
   	if(!IsPlayerConnected(targetid) || targetid == INVALID_PLAYER_ID)
	    return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{FF4600}[Error]:{C8C8C8} ID inválida.");
    if(IsPlayerNPC(targetid))
        return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{FF4600}[Error]:{C8C8C8} la ID corresponde a un NPC.");
	    
	BanPlayer(targetid, playerid, reason);
	return 1;
}

CMD:desbanear(playerid, params[])
{
	new query[128], target[32];
	
	if(PlayerInfo[playerid][pAdmin] < 4)
		return 1;
	if(sscanf(params, "S(0)[32]", target))
	    return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /desbanear [IP] ó [nombre]");
	    
 	mysql_real_escape_string(target, target);
	if(strfind(target, "_", true) != -1) { // Si tiene un "_" suponemos que es un nombre, caso contrario una IP.
		format(query, sizeof(query),"SELECT * FROM `bans` WHERE `pName` = '%s' AND `banActive` = 1", target);
		mysql_function_query(dbHandle, query, true, "OnUnbanDataLoad", "iis", playerid, 0, target);
	} else {
		format(query, sizeof(query),"SELECT * FROM `bans` WHERE `pIP` = '%s' AND `banActive` = 1", target);
		mysql_function_query(dbHandle, query, true, "OnUnbanDataLoad", "iis", playerid, 1, target);
	}
	return 1;
}

CMD:money(playerid, params[])
{
	new targetid, money;

	if(PlayerInfo[playerid][pAdmin] < 20)
        return 1;
	if(sscanf(params, "ui", targetid, money))
		return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /money [ID/Jugador] [dinero]");
 	if(!IsPlayerConnected(targetid) || targetid == INVALID_PLAYER_ID)
	    return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{FF4600}[Error]:{C8C8C8} ID inválida.");

    SetPlayerCash(targetid, money);
    return 1;
}

CMD:givemoney(playerid, params[])
{
	new targetid, money;

	if(PlayerInfo[playerid][pAdmin] < 20)
        return 1;
	if(sscanf(params, "ui", targetid, money))
		return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /givemoney [ID/Jugador] [dinero]");
 	if(!IsPlayerConnected(targetid) || targetid == INVALID_PLAYER_ID)
	    return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{FF4600}[Error]:{C8C8C8} ID inválida.");

	GivePlayerCash(targetid, money);
    return 1;
}

CMD:sethp(playerid, params[])
{
   	new targetid, health;

   	if(PlayerInfo[playerid][pAdmin] < 2)
        return 1;
	if(sscanf(params, "ui", targetid, health))
		return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /sethp [ID/Jugador] [health]");
 	if(!IsPlayerConnected(targetid) || targetid == INVALID_PLAYER_ID)
	    return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{FF4600}[Error]:{C8C8C8} ID inválida.");

    SetPlayerHealthEx(targetid, health);
    if(GetPVarInt(targetid, "disabled") == DISABLE_DEATHBED)
        SetPVarInt(targetid, "disabled", DISABLE_NONE);
	return 1;
}

CMD:setarmour(playerid, params[])
{
   	new targetid, armour;

   	if(PlayerInfo[playerid][pAdmin] < 3)
        return 1;
	if(sscanf(params, "ui", targetid, armour))
		return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /setarmour [ID/Jugador] [armour]");
 	if(!IsPlayerConnected(targetid) || targetid == INVALID_PLAYER_ID)
	    return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{FF4600}[Error]:{C8C8C8} ID inválida.");

	SetPlayerArmour(targetid, armour);
	return 1;
}

CMD:givegun(playerid, params[])
{
	new targetid, weapon, ammo;

   	if(PlayerInfo[playerid][pAdmin] < 4)
        return 1;
	if(sscanf(params, "uii", targetid, weapon, ammo))
	{
		SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /givegun [ID/Jugador] [arma] [municiones]");
        SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "3(Club) 4(knife) 5(bat) 6(Shovel) 7(Cue) 8(Katana) 10-13(Dildo) 14(Flowers) 16(Grenades) 18(Molotovs) 22(Pistol) 23(SPistol)");
		return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "24(Eagle) 25(shotgun) 29(MP5) 30(AK47) 31(M4) 33(Rifle) 34(Sniper) 37(Flamethrower) 41(spray) 42(exting) 43(Camera) 46(Parachute)");
	}
	if(!IsPlayerConnected(targetid) || targetid == INVALID_PLAYER_ID)
	    return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{FF4600}[Error]:{C8C8C8} ID inválida.");
	if(ammo < 1 || ammo > 999)
	    return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{FF4600}[Error]:{C8C8C8} La munición debe ser 1-999.");
	if(weapon < 1 || weapon > 46)
	    return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{FF4600}[Error]:{C8C8C8} El ID de arma debe ser 1-46.");

    GivePlayerWeapon(targetid, weapon, ammo);
	return 1;
}

CMD:skin(playerid, params[])
{
	new targetid, skin;

	if(PlayerInfo[playerid][pAdmin] < 1)
        return 1;
    if(sscanf(params, "ui", targetid, skin))
    	return SendClientMessage(playerid, COLOR_GRAD2, "{5CCAF1}[Sintaxis]:{C8C8C8} /skin [ID/Jugador] [ID skin]");
    if(!IsPlayerConnected(targetid) || targetid == INVALID_PLAYER_ID)
	    return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{FF4600}[Error]:{C8C8C8} ID inválida.");
	if(skin < 1 || skin > 299)
	    return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{FF4600}[Error]:{C8C8C8} ID de skin incorrecto.");

    SetPlayerSkin(targetid, skin);
    PlayerInfo[targetid][pSkin] = skin;
    return 1;
}

CMD:setadmin(playerid, params[])
{
	new targetid, adminlevel, string[128];

	if(PlayerInfo[playerid][pAdmin] < 20)
        return 1;
    if(sscanf(params, "ui", targetid, adminlevel))
    	return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /setadmin [ID/Jugador] [adminlevel]");
    if(!IsPlayerConnected(targetid) || targetid == INVALID_PLAYER_ID)
	    return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{FF4600}[Error]:{C8C8C8} ID inválida.");
	if(adminlevel < 0 || adminlevel > 20)
	    return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{FF4600}[Error]:{C8C8C8} nivel de admin debe ser, 0-20.");

    PlayerInfo[targetid][pAdmin] = adminlevel;
	format(string, sizeof(string), "{878EE7}[INFO]:{C8C8C8} %s te ha hecho administrador nivel %d.", GetPlayerNameEx(playerid),adminlevel);
	SendClientMessage(targetid, COLOR_WHITE, string);
	format(string, sizeof(string), "{878EE7}[INFO]:{C8C8C8} has hecho a %s un administrador nivel %d.", GetPlayerNameEx(targetid),adminlevel);
	SendClientMessage(playerid, COLOR_WHITE, string);
    return 1;
}

CMD:advertir(playerid, params[])
{
    new targetid, reason[128], string[128];

	if(PlayerInfo[playerid][pAdmin] < 4)
        return 1;
    if(sscanf(params, "us[128]", targetid, reason))
		return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /advertir [ID/Jugador] [razón]");
    if(!IsPlayerConnected(targetid) || targetid == INVALID_PLAYER_ID)
	    return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{FF4600}[Error]:{C8C8C8} ID inválida.");

	PlayerInfo[targetid][pWarnings] += 1;
	format(string, sizeof(string), "{878EE7}[INFO]:{C8C8C8} has advertido a %s, razón: %s.", GetPlayerNameEx(targetid), reason);
	SendClientMessage(playerid, COLOR_LIGHTYELLOW2, string);
	format(string, sizeof(string), "{878EE7}[INFO]:{C8C8C8} has sido advertido por %s, razón: %s.", GetPlayerNameEx(playerid), reason);
	SendClientMessage(targetid, COLOR_LIGHTYELLOW2, string);
	SendFMessage(targetid, COLOR_LIGHTYELLOW2, "A las 5 advertencias serás baneado del servidor, ahora tienes %d.", PlayerInfo[targetid][pWarnings]);
	if(PlayerInfo[targetid][pWarnings] >= 5)
	{
		format(string, sizeof(string), "[BAN]: %s ha sido baneado por tener 5+ advertencias.", GetPlayerNameEx(targetid));
		BanPlayer(targetid, playerid, reason);
	}
	return 1;
}

CMD:mute(playerid, params[])
{
	new targetid, string[128];

	if(PlayerInfo[playerid][pAdmin] < 1)
        return 1;
    if(sscanf(params, "u", targetid))
		return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /mute [ID/Jugador]");
    if(!IsPlayerConnected(targetid) || targetid == INVALID_PLAYER_ID)
	    return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{FF4600}[Error]:{C8C8C8} ID inválida.");

	if(Muted[targetid] == 0)
	{
		Muted[targetid] = 1;
		format(string, sizeof(string), "{878EE7}[INFO]:{C8C8C8} Has muteado a %s.", GetPlayerNameEx(targetid));
		SendClientMessage(playerid, COLOR_ADMINCMD, string);
		format(string, sizeof(string), "{878EE7}[INFO]:{C8C8C8} Has sido muteado por %s.", GetPlayerNameEx(playerid));
		SendClientMessage(targetid, COLOR_ADMINCMD, string);
	} else
		{
			Muted[targetid] = 0;
			format(string, sizeof(string), "{878EE7}[INFO]:{C8C8C8} Has desmuteado a %s.", GetPlayerNameEx(targetid));
			SendClientMessage(playerid, COLOR_ADMINCMD, string);
			format(string, sizeof(string), "{878EE7}[INFO]:{C8C8C8} Has sido desmuteado por %s.", GetPlayerNameEx(playerid));
			SendClientMessage(targetid, COLOR_ADMINCMD, string);
		}
	return 1;
}

CMD:check(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 1)
		return 1;
	if(sscanf(params, "u", targetid))
	    return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /check [ID/Jugador]");
	if(!IsPlayerConnected(targetid) || targetid == INVALID_PLAYER_ID)
	    return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{FF4600}[Error]:{C8C8C8} Jugador inválido");

    ShowStats(playerid, targetid, true);
    return 1;
}

CMD:gooc(playerid, params[])
{
	new text[128], string[128];

 	if(sscanf(params, "s[128]", text))
        return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} [/go]oc [mensaje]");
    if(OOCStatus == 0 && PlayerInfo[playerid][pAdmin] < 1)
        return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{FF4600}[Error]:{C8C8C8} OOC global desactivado.");
	if(Muted[playerid])
	    return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{FF4600}[Error]:{C8C8C8} Usted se encuentra muteado.");

	if(PlayerInfo[playerid][pAdmin] >= 1 && AdminDuty[playerid])
	{
		format(string, sizeof(string), "(( [Global] {3CB371}%s{87CEFA}: %s ))", GetPlayerNameEx(playerid), text);
		SendClientMessageToAll(COLOR_GLOBALOOC, string);
		log(playerid, LOG_CHAT, string);
	} else
		{
			format(string, sizeof(string), "(( [Global] %s: %s ))", GetPlayerNameEx(playerid), text);
			SendClientMessageToAll(COLOR_GLOBALOOC, string);
			log(playerid, LOG_CHAT, string);
		}
	return 1;
}

CMD:susurrar(playerid, params[])
{
	new targetid, text[128], string[128];

	if(sscanf(params, "us[128]", targetid, text))
		return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /susurrar [ID/Jugador] [mensaje]");
	if(!IsPlayerConnected(targetid) || targetid == INVALID_PLAYER_ID)
	    return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{FF4600}[Error]:{C8C8C8} ID inválida.");
    if(!ProxDetectorS(1.5, playerid, targetid))
        return SendClientMessage(playerid, COLOR_YELLOW2, "Estás demasiado lejos.");
	if(playerid == targetid)
	    return SendClientMessage(playerid, COLOR_YELLOW2, "No puedes susurrarte a tí mismo.");

 	if(isUsingMaskInSlot[playerid] == -1)
		format(string, sizeof(string), "%s susurra: %s", GetPlayerNameEx(playerid), text);
	else
	    format(string, sizeof(string), "Enmascarado susurra: %s", text);
	SendClientMessage(targetid, COLOR_YELLOW, string);
	SendClientMessage(playerid, COLOR_YELLOW, string);
	PlayerPlayerActionMessage(playerid, targetid, 5.0, "ha susurrado algo al oído de");
	return 1;
}

CMD:me(playerid, params[])
{
	new text[128], string[128];

	if(sscanf(params, "s[128]", text))
	    return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /me [acción]");

	format(string, sizeof(string), "%s", text);
	PlayerActionMessage(playerid, 15.0, text);
	return 1;
}

CMD:local(playerid, params[])
{
	new text[128], string[128];

	if(sscanf(params, "s[128]", text))
	    return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /local [mensaje]");

	if(isUsingMaskInSlot[playerid] == -1)
		format(string, sizeof(string), "%s dice: %s", GetPlayerNameEx(playerid), text);
	else
	    format(string, sizeof(string), "Enmascarado dice: %s", text);
	ProxDetector(15.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
	return 1;
}

CMD:vb(playerid, params[])
{
	new text[128], string[128];

	if(sscanf(params, "s[128]", text))
	    return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /vb [mensaje]");

	if(isUsingMaskInSlot[playerid] == -1)
		format(string, sizeof(string), "[Voz baja] %s dice: %s", GetPlayerNameEx(playerid), text);
	else
		format(string, sizeof(string), "[Voz baja] Enmascarado dice: %s", text);
	ProxDetector(3.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
	return 1;
}

CMD:b(playerid, params[])
{
	new text[128], string[128];

	if(sscanf(params, "s[128]", text))
	    return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /b [mensaje]");

	if(PlayerInfo[playerid][pMuteB] > 0)
	{
	    if(PlayerInfo[playerid][pMuteB] > 60)
			SendFMessage(playerid, COLOR_YELLOW2, "No puedes hablar por /b por %d minutos.", PlayerInfo[playerid][pMuteB] / 60);
		else
		    SendFMessage(playerid, COLOR_YELLOW2, "No puedes hablar por /b por %d segundos.", PlayerInfo[playerid][pMuteB]);
		return 1;
	}
	format(string, sizeof(string), "%s", text);
	PlayerLocalMessage(playerid, 15.0, string);
	return 1;
}

CMD:mp(playerid, params[])
{
	new targetid, text[128];

	if(sscanf(params, "us[128]", targetid, text))
	    return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /mp [ID/Jugador] [mensaje]");
	if(!IsPlayerConnected(targetid) || targetid == INVALID_PLAYER_ID || targetid == playerid)
	    return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{FF4600}[Error]:{C8C8C8} Jugador inválido");

    OnPlayerPrivmsg(playerid, targetid, text);
    return 1;
}

CMD:mps(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 2) return 1;
	
	if(GetPVarInt(playerid, "pms") == 0) {
		SetPVarInt(playerid, "pms", 1);
		SendClientMessage(playerid, COLOR_GREEN, "Lector de whispers activado.");
		return 1;
	}
	if(GetPVarInt(playerid, "pms") == 1) {
		SetPVarInt(playerid, "pms", 0);
		SendClientMessage(playerid, COLOR_GREEN, "Lector de whispers desactivado.");
		return 1;
	}
	return 1;
}

CMD:rerollplates(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 20) return 1;
	
	setVehicleRandomPlates();
	return 1;
}

CMD:sacar(playerid, params[]) {
	new
	    vehicleid = GetPlayerVehicleID(playerid),
		target;

	if(sscanf(params, "u", target)) {
	    SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /sacar [ID/Jugador]");
	} else if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
	    if(vehicleid == GetPlayerVehicleID(target) && target != INVALID_PLAYER_ID) {
	        RemovePlayerFromVehicle(target);
	        SendFMessage(playerid, COLOR_WHITE, "Has sacado a %s del vehículo.", GetPlayerNameEx(target));
	        SendFMessage(target, COLOR_WHITE, "%s te ha sacado del vehículo.", GetPlayerNameEx(playerid));
	    } else {
	        SendClientMessage(playerid, COLOR_YELLOW2, "Jugador inválido o no se encuentra en tu vehículo.");
	    }
	} else {
	    SendClientMessage(playerid, COLOR_YELLOW2, "Debes ser el conductor del vehículo.");
	}

	return 1;
}

CMD:set(playerid, params[]) {
	new
	    string[128],
	    target,
	    param[16],
	    value[64];
	    
	if(PlayerInfo[playerid][pAdmin] < 2)
	    return 1;
	    
	if(sscanf(params, "us[16]S(null)[64]", target, param, value)) {
	    SendClientMessage(playerid, COLOR_GREY, "{5CCAF1}[Sintaxis]:{C8C8C8} /set [IDJugador/ParteDelNombre] [stat] [value]");
	    SendClientMessage(playerid, COLOR_WHITE, "Stats: sexo | edad");
	} else if(strcmp(param, "sexo", true) == 0) {
	    if(strval(value) == 0) {
	        SendFMessage(target, COLOR_LIGHTYELLOW2, "{878EE7}[INFO]:{C8C8C8} %s te ha seteado el sexo a femenino.", GetPlayerNameEx(playerid));
			format(string, sizeof(string), "[Staff]: %s ha seteado el sexo de %s a femenino.", GetPlayerNameEx(playerid), GetPlayerNameEx(target));
			AdministratorMessage(COLOR_ADMINCMD, string, 1);
	        PlayerInfo[target][pSex] = 0;
	        format(string, sizeof(string), "%s ha seteado el sexo de %s a femenino.", GetPlayerNameEx(playerid), GetPlayerNameEx(target));
	        log(playerid, LOG_ADMIN, string);
	    } else if(strval(value) == 1) {
	        SendFMessage(target, COLOR_LIGHTYELLOW2, "{878EE7}[INFO]:{C8C8C8} %s te ha seteado el sexo a masculino.", GetPlayerNameEx(playerid));
			format(string, sizeof(string), "[Staff]: %s ha seteado el sexo de %s a masculino.", GetPlayerNameEx(playerid), GetPlayerNameEx(target));
			AdministratorMessage(COLOR_ADMINCMD, string, 1);
	        PlayerInfo[target][pSex] = 1;
	        format(string, sizeof(string), "%s ha seteado el sexo de %s a masculino.", GetPlayerNameEx(playerid), GetPlayerNameEx(target));
	        log(playerid, LOG_ADMIN, string);
	    } else {
	        SendClientMessage(playerid, COLOR_WHITE, "Solo se admite un valor igual a 0 (femenino) o 1 (masculino).");
	    }
	} else if(strcmp(param, "edad", true) == 0) {
	    if(strval(value) >= 1 && strval(value) <= 100) {
	        SendFMessage(target,COLOR_LIGHTYELLOW2,"{878EE7}[INFO]:{C8C8C8} %s te ha seteado la edad a %d años.", GetPlayerNameEx(playerid), strval(value));
			format(string, sizeof(string), "[Staff]: %s ha seteado la edad de %s a %d años.", GetPlayerNameEx(playerid), GetPlayerNameEx(target), strval(value));
			AdministratorMessage(COLOR_ADMINCMD, string, 1);
	        PlayerInfo[target][pAge] = strval(value);
	        format(string, sizeof(string), "%s ha seteado la edad de %s %d.", GetPlayerNameEx(playerid), GetPlayerNameEx(target), PlayerInfo[target][pAge]);
	        log(playerid, LOG_ADMIN, string);
	    } else {
	        SendClientMessage(playerid, COLOR_WHITE, "Solo se admite un valor mayor o igual a 1 y menor o igual a 100.");
	    }
	}
	return 1;
}

CMD:reglas(playerid, params[]) {
	ShowPlayerDialog(playerid,DLG_RULES,DIALOG_STYLE_LIST,"Terminos RP","DeathMatch\nPowerGaming\nCarJacking\nMetaGaming\nRevengeKill\nBunnyHop\nCarKill\nZigZag\nHeliKill\nDriveBy\nOOC\nIC\n/ME\n/DO\n/INTENTAR","Seleccionar","Cancelar");
	return 1;
}

CMD:a(playerid, params[])
	return cmd_admin(playerid, params);

CMD:admin(playerid, params[]) {
	new
		text[256],
		string[128],
		string2[128];

	if(PlayerInfo[playerid][pAdmin] < 1) return 1;

	if(sscanf(params, "s[256]", text)) {
    	SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} (/a)dmin [mensaje]");
	} else {
		format(string, sizeof(string), "[Admin n. %d] %s: %s", PlayerInfo[playerid][pAdmin], GetPlayerNameEx(playerid), text);
		if(strlen(string) > 128) {
		    strmid(string2, string, 128, 256);
		    strdel(string, 128, 256);
		    AdministratorMessage(COLOR_ACHAT, string, 1);
		    AdministratorMessage(COLOR_ACHAT, string2, 1);
		} else {
		    AdministratorMessage(COLOR_ACHAT, string, 1);
		}
	}
	return 1;
}

CMD:ao(playerid, params[]) {
	new
		text[256],
		string[128],
		string2[128];
		
	if(PlayerInfo[playerid][pAdmin] < 1) return 1;

	if(sscanf(params, "s[256]", text)) {
    	SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} (/a)ooc [mensaje]");
	} else {
	    if(PlayerInfo[playerid][pAdmin] < 4) {
			format(string, sizeof(string), "(( [Anuncio] Mod %s: %s ))", GetPlayerNameEx(playerid), text);
		} else {
		    format(string, sizeof(string), "(( [Anuncio] Admin %s: %s ))", GetPlayerNameEx(playerid), text);
		}
		if(strlen(string) > 128) {
		    strmid(string2, string, 128, 256);
		    strdel(string, 128, 256);
		    SendClientMessageToAll(COLOR_AOOC, string);
		    SendClientMessageToAll(COLOR_AOOC, string2);
		} else {
		    SendClientMessageToAll(COLOR_AOOC, string);
		}
	}
	return 1;
}

CMD:bidon(playerid, params[]) {
	SendClientMessage(playerid, COLOR_WHITE, "Info: para llenar el bidón deberás estar a pie en una estación de servicio y escribir '/llenar', para usarlo deberás...");
	SendClientMessage(playerid, COLOR_WHITE, "situarte junto al tanque del vehículo y tipear '/usarbidon', el estado del bidón lo puedes ver usando '/inv'.");
	return 1;
}

CMD:fumar(playerid, params[])
{
    if(GetPlayerState(playerid) != 1)
		return SendClientMessage(playerid, COLOR_YELLOW2, "Solo puedes utilizarlo estando parado.");
	if(GetPVarInt(playerid, "disabled") != DISABLE_NONE)
		return SendClientMessage(playerid, COLOR_YELLOW2, "¡No puedes utilizar esto estando incapacitado/congelado!");
	if(smoking[playerid])
		return SendClientMessage(playerid, COLOR_YELLOW2, "Ya estás fumando, utiliza /apagarcigarro para terminar.");
	if(!PlayerInfo[playerid][pLighter])
		return SendClientMessage(playerid, COLOR_YELLOW2, "Necesitas un encendedor, intenta conseguir uno.");
	if(PlayerInfo[playerid][pCigarettes] <= 0)
		return SendClientMessage(playerid, COLOR_YELLOW2, "No tienes más cigarrillos, vé y compra un paquete.");
 	if(PlayerCuffed[playerid] == 1)
		return SendClientMessage(playerid, COLOR_YELLOW2, "No puedes fumar estando esposado.");
	
    PlayerActionMessage(playerid, 15.0, "saca un encendedor y un cigarrillo de su bolsillo, lo enciende y comienza a fumar.");
	smoking[playerid] = true;
	PlayerInfo[playerid][pCigarettes]--;
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
	return 1;
}

CMD:apagarcigarro(playerid, params[]) {
	if(!smoking[playerid])
		return SendClientMessage(playerid, COLOR_YELLOW2, "Debes estar fumando...");

	if(GetPVarInt(playerid, "disabled") == DISABLE_NONE && GetPlayerState(playerid) == 1) {
		if(GetPlayerInterior(playerid) > 0) {
		    PlayerActionMessage(playerid, 15.0, "apaga el cigarrillo y lo arroja al cenicero.");
		} else {
	 		PlayerActionMessage(playerid, 15.0, "apaga el cigarrillo y lo arroja al suelo.");
		}
		smoking[playerid] = false;
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	} else {
		SendClientMessage(playerid, COLOR_YELLOW2, "¡No puedes utilizar esto estando incapacitado/congelado!");
	}
	return 1;
}

//===================================SIDE=======================================

CMD:servicio(playerid, params[]) {
	new
	    string[128];

    if(PlayerInfo[playerid][pFaction] != FAC_SIDE) return 1;

	if(PlayerToPoint(5.0, playerid, POS_SIDE_DUTY_X, POS_SIDE_DUTY_Y, POS_SIDE_DUTY_Z)) {
		if(SIDEDuty[playerid] == 0) {
			PlayerActionMessage(playerid, 15.0, "toma algunas herramientras del casillero.");
			SIDEDuty[playerid] = 1;
			format(string, sizeof(string), "[S.I.D.E]: %s se encuentra ahora en servicio.", GetPlayerNameEx(playerid));
			SendFactionMessage(FAC_SIDE, COLOR_PMA, string);
		} else {
			PlayerActionMessage(playerid, 15.0, "guarda las herramientas en su casillero.");
			ResetPlayerWeapons(playerid);
			SetPlayerArmour(playerid, 0);
			SIDEDuty[playerid] = 0;
   			SetPVarInt(playerid, "cantSaveItems", 1);
			SetTimerEx("cantSaveItems", 4000, false, "i", playerid);
		}
	} else {
		SendClientMessage(playerid, COLOR_YELLOW2, "¡Debes estar junto a los casilleros!");
	}
	return 1;
}

CMD:chaleco(playerid, params[]) {
	new
	    Float:armour;

    if(PlayerInfo[playerid][pFaction] != FAC_SIDE) return 1;

	if(PlayerToPoint(5.0, playerid, POS_SIDE_DUTY_X, POS_SIDE_DUTY_Y, POS_SIDE_DUTY_Z)) {
	    if(SIDEDuty[playerid] <= 0) {
	        SendClientMessage(playerid, COLOR_YELLOW2, "Debes estar en servicio.");
	        return 1;
	    }
	    GetPlayerArmour(playerid, armour);
		if(armour == 0) {
			PlayerActionMessage(playerid, 15.0, "toma un chaleco antibalas de su casillero.");
			SetPlayerArmour(playerid, 100);
		} else {
			PlayerActionMessage(playerid, 15.0, "deja el chaleco antibalas en su casillero.");
			SetPlayerArmour(playerid, 0);
		}
	} else {
		SendClientMessage(playerid, COLOR_YELLOW2, "¡Debes estar junto a los casilleros!");
	}
	return 1;
}

CMD:stars(playerid, params[]) {
	new
	    toggle,
	    string[128];

    if(PlayerInfo[playerid][pFaction] != FAC_SIDE) return 1;

    if(PlayerInfo[playerid][pRank] != 1) {
        SendClientMessage(playerid, COLOR_YELLOW2, "No tienes el rango suficiente.");
		return 1;
	}

    if(SIDEDuty[playerid] != 1) {
        SendClientMessage(playerid, COLOR_YELLOW2, "Debes estar en servicio.");
        return 1;
    }

    if(sscanf(params, "i", toggle)) {
	    SendClientMessage(playerid, COLOR_GREY, "{5CCAF1}[Sintaxis]:{C8C8C8} /stars [0-1]");
	    switch(STARS) {
	        case 0: SendClientMessage(playerid, COLOR_WHITE, "Estado S.T.A.R.S.: {D40000}desautorizado");
	        case 1: SendClientMessage(playerid, COLOR_WHITE, "Estado S.T.A.R.S.: {00D41C}autorizado");
	    }
	} else if(toggle == 1 && STARS != 1) {
	    format(string, sizeof(string), "¡Atención! el S.T.A.R.S. ha sido autorizado por %s.", GetPlayerNameEx(playerid));
		SendFactionMessage(FAC_PMA, COLOR_PMA, string);
        STARS = 1;
	} else if(toggle == 0 && STARS != 0) {
	    format(string, sizeof(string), "¡Atención! el S.T.A.R.S. ha sido desautorizado por %s.", GetPlayerNameEx(playerid));
		SendFactionMessage(FAC_PMA, COLOR_PMA, string);
        STARS = 0;
	} else {
	    SendClientMessage(playerid, COLOR_GREY, "{5CCAF1}[Sintaxis]:{C8C8C8} /stars [0-1]");
	    switch(STARS) {
	        case 0: SendClientMessage(playerid, COLOR_WHITE, "Estado S.T.A.R.S.: {D40000}desautorizado");
	        case 1: SendClientMessage(playerid, COLOR_WHITE, "Estado S.T.A.R.S.: {00D41C}autorizado");
	    }
	}
	return 1;
}

CMD:porton(playerid, params[]) {
    if(PlayerInfo[playerid][pFaction] != FAC_SIDE) return 1;

	if(PlayerToPoint(15.0, playerid, 1286.0300, -1652.1801, 14.3000)) {
		if(SIDEGate[0] <= 0) {
		    SIDEGate[0] = 1;
			MoveObject(SIDEGate[1], 1286.31, -1654.82, 22.28, 1, 0.00, 0.00, 0.00);
			MoveObject(SIDEGate[2], 1286.30, -1645.22, 25.77, 1, 0.00, 0.00, 0.00);
			MoveObject(SIDEGate[3], 1286.32, -1645.22, 22.28, 1, 0.00, 0.00, 0.00);
			MoveObject(SIDEGate[4], 1286.28, -1654.82, 25.75, 1, 0.00, 0.00, 0.00);
			MoveObject(SIDEGate[5], 1286.30, -1654.10, 25.87, 1, 180.00, 0.00, 90.00);
			MoveObject(SIDEGate[6], 1286.30, -1642.65, 25.87, 1, 180.00, 0.00, 90.00);
			SIDEGateTimer = SetTimer("CloseSIDEGate", 1000 * 60 * 5, false);
		} else {
		    SIDEGate[0] = 0;
			MoveObject(SIDEGate[1], 1286.31, -1654.82, 14.28, 1, 0.00, 0.00, 0.00);
			MoveObject(SIDEGate[2], 1286.30, -1645.22, 17.77, 1, 0.00, 0.00, 0.00);
			MoveObject(SIDEGate[3], 1286.32, -1645.22, 14.28, 1, 0.00, 0.00, 0.00);
			MoveObject(SIDEGate[4], 1286.28, -1654.82, 17.75, 1, 0.00, 0.00, 0.00);
			MoveObject(SIDEGate[5], 1286.30, -1654.10, 17.87, 1, 180.00, 0.00, 90.00);
			MoveObject(SIDEGate[6], 1286.30, -1642.65, 17.87, 1, 180.00, 0.00, 90.00);
			KillTimer(SIDEGateTimer);
		}
		PlayerActionMessage(playerid, 15.0, "toma el mando a distancia del portón y presiona un botón.");
	}
	return 1;
}

CMD:ropero(playerid, params[]) {
	new
		item;
	
    if(PlayerInfo[playerid][pFaction] != FAC_SIDE) return 1;

	if(SIDEDuty[playerid] != 1) {
        SendClientMessage(playerid, COLOR_YELLOW2, "Debes estar en servicio.");
        return 1;
	}
	
	if(PlayerToPoint(5.0, playerid, POS_SIDE_DUTY_X, POS_SIDE_DUTY_Y, POS_SIDE_DUTY_Z)) {
		if(sscanf(params, "i", item)) {
		    SendClientMessage(playerid, COLOR_GREY, "{5CCAF1}[Sintaxis]:{C8C8C8} /ropero [0-10]");
		} else if(item >= 0 && item <= 10) {
		    switch(item) {
		        case 0: SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
				case 1: SetPlayerSkin(playerid, 163);
				case 2: SetPlayerSkin(playerid, 164);
				case 3: SetPlayerSkin(playerid, 165);
				case 4: SetPlayerSkin(playerid, 166);
				case 5: SetPlayerSkin(playerid, 186);
				case 6: SetPlayerSkin(playerid, 295);
				case 7: SetPlayerSkin(playerid, 286);
				case 8: SetPlayerSkin(playerid, 70);
				case 9: SetPlayerSkin(playerid, 141);
				case 10: SetPlayerSkin(playerid, 150);
			}
		    PlayerActionMessage(playerid, 15.0, "toma ropa del casillero y se la viste.");
		}
	} else {
		SendClientMessage(playerid, COLOR_YELLOW2, "¡Debes estar junto a los casilleros!");
	}
	return 1;
}

CMD:aprender(playerid,params[]) {
	new
		text[128];
		
	if(PlayerToPoint(3.0, playerid, 766.3723, 13.8237, 1000.7015)){
	    if(GetPlayerCash(playerid) >= PRICE_FIGHTSTYLE){
			if(sscanf(params, "s[128]", text)) {
				SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /aprender [comando]");
				SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[Comandos]: normal - boxeo - kungfu - patadas - codazos");
				SendFMessage(playerid, COLOR_LIGHTYELLOW2, "{878EE7}[INFO]:{C8C8C8} El costo de aprendizaje de cada estilo de pelea es de %d (aviso: el estilo normal es gratuito).", PRICE_FIGHTSTYLE);
			} else if(strcmp(text, "normal", true) == 0) {
     		    SetPlayerFightingStyle(playerid, 4); // FIGHT_STYLE_NORMAL
    		    PlayerInfo[playerid][pFightStyle] = 4; // FIGHT_STYLE_NORMAL
   				SendClientMessage(playerid, 0xFFFFFFAA, "Tu nuevo estilo de pelea es normal.");
			} else if(strcmp(text, "boxeo", true) == 0) {
    		    SetPlayerFightingStyle(playerid, 5); // FIGHT_STYLE_BOXING
    		    PlayerInfo[playerid][pFightStyle] = 5; // FIGHT_STYLE_BOXING
    		    GivePlayerCash(playerid, -PRICE_FIGHTSTYLE);
   		 		SendClientMessage(playerid, 0xFFFFFFAA, "Tu nuevo estilo de pelea es boxeo.");
			} else if(strcmp(text, "kungfu", true) == 0) {
				SetPlayerFightingStyle(playerid, 6); // FIGHT_STYLE_KUNGFU
				PlayerInfo[playerid][pFightStyle] = 6; // FIGHT_STYLE_KUNGFU
				GivePlayerCash(playerid, -PRICE_FIGHTSTYLE);
				SendClientMessage(playerid, 0xFFFFFFAA, "Tu nuevo estilo de pelea es kung fu.");
			} else if(strcmp(text, "patadas", true) == 0) {
	      	    SetPlayerFightingStyle(playerid, 15); // FIGHT_STYLE_GRABKICK
 	   	        PlayerInfo[playerid][pFightStyle] = 15; // FIGHT_STYLE_GRABKICK
 	   	        GivePlayerCash(playerid, -PRICE_FIGHTSTYLE);
    	    	SendClientMessage(playerid, 0xFFFFFFAA, "Tu nuevo estilo de pelea es patadas.");
			} else if(strcmp(text, "codazos", true) == 0) {
				SetPlayerFightingStyle(playerid, 16); // FIGHT_STYLE_ELBOW
    	        PlayerInfo[playerid][pFightStyle] = 16; // FIGHT_STYLE_ELBOW
    	        GivePlayerCash(playerid, -PRICE_FIGHTSTYLE);
				SendClientMessage(playerid, 0xFFFFFFAA, "Tu nuevo estilo de pelea es codazos.");
			}
		} else {
			SendFMessage(playerid, COLOR_YELLOW2, "No tienes el dinero suficiente para pagarle al instructor (%d).", PRICE_FIGHTSTYLE);
	 	}
	} else {
		SendClientMessage(playerid, COLOR_YELLOW2, "No estás en el gimnasio con el instructor.");
	}
	return 1;
}

CMD:exp10de(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 6)
		return 1;

	new
	    string[128],
		target,
		Float:boom[3];

	if(sscanf(params, "u", target)) {
		SendClientMessage(playerid, COLOR_GREY, "{5CCAF1}[Sintaxis]:{C8C8C8} /exp10de [IDJugador/ParteDelNombre]");
	} else {
		format(string, sizeof(string), "[Staff]: %s ha explotado a %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(target));
		AdministratorMessage(COLOR_ADMINCMD, string, 1);
		SetPlayerHealth(target, 10);
		GetPlayerPos(target, boom[0], boom[1], boom[2]);
		CreateExplosion(boom[0], boom[1] , boom[2], 7, 10);
		printf("[Comando] %s ha usado /exp10de para explotar a %s", GetPlayerNameEx(playerid), GetPlayerNameEx(target));
	}
	return 1;
}

CMD:cin(playerid, params[])
	return cmd_cinturon(playerid, params);
	
CMD:cinturon(playerid, params[]) {
	new
		vType,
		vID;
		
	vID = GetPlayerVehicleID(playerid);
	vType = GetVehicleType(vID);
	if(!IsPlayerInAnyVehicle(playerid) || vType != VTYPE_CAR && vType != VTYPE_HEAVY && vType != VTYPE_MONSTER) {
		return SendClientMessage(playerid, COLOR_YELLOW2, "¡Debes estar en un auto!");
	}
	
	if(!SeatBelt[playerid]) {
		SeatBelt[playerid] = true;
		PlayerActionMessage(playerid, 15.0, "se pone el cinturón de seguridad.");
	} else {
		SeatBelt[playerid] = false;
		PlayerActionMessage(playerid, 15.0, "se saca el cinturón de seguridad.");
	}
	return 1;
}

CMD:cas(playerid, params[])
	return cmd_casco(playerid, params);

CMD:casco(playerid, params[]) {
	new
		vType,
		vID;

	vID = GetPlayerVehicleID(playerid);
	vType = GetVehicleType(vID);
	if(!IsPlayerInAnyVehicle(playerid) || vType != VTYPE_BIKE && vType != VTYPE_BMX && vType != VTYPE_QUAD) {
		return SendClientMessage(playerid, COLOR_YELLOW2, "¡Debes estar en una moto, bicicleta o cuatriciclo!");
	}

	if(!SeatBelt[playerid]) {
		SeatBelt[playerid] = true;
		PlayerActionMessage(playerid, 15.0, "se pone el casco.");
	} else {
		SeatBelt[playerid] = false;
		PlayerActionMessage(playerid, 15.0, "se saca el casco.");
	}
	return 1;
}
stock Float:modulus(Float:a, Float:b)
{
    while(a > b)
        a -= b;
    return a;
}

//=======================SISTEMA DE BARRERAS PARA LOS ADMIN=====================

#define MAX_ADMIN_OBJECTS       300
new adminServerObjectsCant = 0;
new adminServerObjects[MAX_ADMIN_OBJECTS];

CMD:abarreracrear(playerid, params[])
{
	new orientation, Float:x, Float:y, Float:z, Float:facingAngle;

	if(PlayerInfo[playerid][pAdmin] < 2)
        return 1;
	if(sscanf(params, "i", orientation))
		return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /abarreracrear [1-2] (1:derecha, 2:izquierda)");
	if(orientation != 1 && orientation != 2)
	    return SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} /abarreracrear [1-2] (1:derecha, 2:izquierda)");

	if(adminServerObjectsCant >= MAX_ADMIN_OBJECTS)
		return SendClientMessage(playerid, COLOR_YELLOW2, "No hay mas espacio para objetos.");
	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, facingAngle);
	adminServerObjectsCant ++;
	switch(orientation)
	{
	    case 1: adminServerObjects[adminServerObjectsCant-1] = CreateDynamicObject(978, x, y, z-0.7, 0.0, 0.0, facingAngle + 180.0);
	    case 2: adminServerObjects[adminServerObjectsCant-1] = CreateDynamicObject(979, x, y, z-0.7, 0.0, 0.0, facingAngle + 180.0);
	}
	SetPlayerPosFindZ(playerid, x, y-0.7, z);
    return 1;
}

CMD:abarreraquitar(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 2)
        return 1;

	if(adminServerObjectsCant > 0)
	{
		DestroyDynamicObject(adminServerObjects[adminServerObjectsCant-1]);
		adminServerObjectsCant --;
        SendClientMessage(playerid, COLOR_WHITE, "[DEBUG]: Has borrado la ultima barrera puesta por un administrador.");
	}
	return 1;
}

CMD:abarreraquitartodo(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 2)
        return 1;

	if(adminServerObjectsCant > 0)
	{
	    for(new i = 0; i < adminServerObjectsCant; i++) {
			DestroyDynamicObject(adminServerObjects[i]);
		}
		adminServerObjectsCant = 0;
		SendClientMessage(playerid, COLOR_WHITE, "[DEBUG]: Has borrado todas las barreras del servidor puestas por los administradores.");
	}
	return 1;
}

//===============================SISTEMA DE AFK=================================

public AFKc(playerid)
{
    GetPlayerCameraPos(playerid, cAFKPos[playerid][0], cAFKPos[playerid][1], cAFKPos[playerid][2]);
	if(cAFKPos[playerid][0] == cAFKPos[playerid][3] && cAFKPos[playerid][1] == cAFKPos[playerid][4] && cAFKPos[playerid][2] == cAFKPos[playerid][5])
    {
        if(cAFK[playerid] == 0)
        {
	    	cTomarVW[playerid] = GetPlayerVirtualWorld(playerid);
			SetPlayerVirtualWorld(playerid, 100);
	    	cAFK[playerid] = 1;
	    	TAFKT[playerid] = SetTimerEx("AFKText", 3000, 1, "i", playerid);
	        return 1;
		}
		else
		{
		    cAFKPos[playerid][3] = cAFKPos[playerid][0];
			cAFKPos[playerid][4] = cAFKPos[playerid][1];
			cAFKPos[playerid][5] = cAFKPos[playerid][2];
		    KillTimer(cAFKTimer[playerid]);
		    cAFKTimer[playerid] = SetTimerEx("AFKc", cAFKTime, 1, "i", playerid);
	    	return 1;
		}
	}
	else
	{
	    cAFKPos[playerid][3] = cAFKPos[playerid][0];
		cAFKPos[playerid][4] = cAFKPos[playerid][1];
		cAFKPos[playerid][5] = cAFKPos[playerid][2];
	    KillTimer(cAFKTimer[playerid]);
	    cAFKTimer[playerid] = SetTimerEx("AFKc", cAFKTime, 1, "i", playerid);
	    return 1;
	}
}

public AFKText(playerid)
{
	if(cAFK[playerid] == 1)
	{
		new string[15];
	    format(string, sizeof(string), "MODO AUSENTE");
	    GameTextForPlayer(playerid, string, 3000, 3);
		return 1;
	}
	return 1;
}

//===========================SISTEMA DE DROGAS==================================

TIMER:CancelDrugTransfer(playerid, timer) {
	if(timer == 1)
	{
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "La oferta ha sido cancelada ya que no has respondido en 15 segundos.");
		SendClientMessage(DrugOffer[playerid], COLOR_LIGHTBLUE, "La oferta ha sido cancelada ya que el sujeto no ha respondido en 15 segundos.");
	}
	SellingDrugs[DrugOffer[playerid]] = false;
	DrugOffer[playerid] = INVALID_PLAYER_ID;
	DrugOfferType[playerid] = 0;
	DrugOfferAmount[playerid] = 0;
	return 1;
}

CMD:dardroga(playerid, params[])
{

	new string[128], targetid, type[32], amount;

	if(sscanf(params, "usd", targetid, type, amount))
	{
		SendClientMessage(playerid, COLOR_GREY, "{5CCAF1}[Sintaxis]:{C8C8C8} /dardroga [ID/Jugador] [tipo] [cantidad]");
		return SendClientMessage(playerid, COLOR_YELLOW2, "Tipos: marihuana - lsd - extasis - cocaina");
	}
	if(SellingDrugs[playerid] == true)
	     return SendClientMessage(playerid, COLOR_YELLOW2, "Ya te encuentras ofreciendo droga a otro sujeto, aguarda 15 segundos a que termine el intercambio.");
	if(targetid == INVALID_PLAYER_ID || targetid == playerid || !IsPlayerConnected(targetid))
        return SendClientMessage(playerid, COLOR_YELLOW2, "Jugador inválido.");
	if(GetDistanceBetweenPlayers(playerid, targetid) > 4.0)
		return SendClientMessage(playerid, COLOR_YELLOW2, "La persona se encuentra demasiado lejos.");
	if(DrugOffer[targetid] != INVALID_PLAYER_ID)
	    return SendClientMessage(playerid, COLOR_YELLOW2, "La persona está con otra oferta en este momento.");
	if(amount <= 0 || amount > 5000)
		return SendClientMessage(playerid, COLOR_YELLOW2, "La cantidad no puede ser menor a 1 o mayor que 5000.");

	if(strcmp(type, "marihuana", true) == 0)
	{
 		if(PlayerInfo[playerid][pMarijuana] < amount)
   			return SendClientMessage(playerid, COLOR_YELLOW2, "No tienes esa cantidad.");
      	SendFMessage(playerid, COLOR_LIGHTBLUE, "Le has ofrecido %d gramos de marihuana a %s. La oferta termina en 15 segundos.", amount, GetPlayerNameEx(targetid));
		format(string, sizeof(string), "%s quiere darte %d gramos de marihuana. Escribe '/aceptar droga' para aceptar. La oferta termina en 15 segundos.",GetPlayerNameEx(playerid), amount);
		DrugOfferType[targetid] = 1;
  	} else
		if(strcmp(type, "lsd", true) == 0)
		{
	       	if(PlayerInfo[playerid][pLSD] < amount)
	           	return SendClientMessage(playerid, COLOR_YELLOW2, "No tienes esa cantidad.");
	        SendFMessage(playerid, COLOR_LIGHTBLUE, "Le has ofrecido %d gramos de LSD a %s. La oferta termina en 15 segundos.", amount, GetPlayerNameEx(targetid));
        	format(string, sizeof(string), "%s quiere darte %d dosis de LSD. Escribe '/aceptar droga' para aceptar. La oferta termina en 15 segundos.",GetPlayerNameEx(playerid), amount);
			DrugOfferType[targetid] = 2;
	    } else
			if(strcmp(type, "extasis", true) == 0)
			{
	       		if(PlayerInfo[playerid][pEcstasy] < amount)
	           		return SendClientMessage(playerid, COLOR_YELLOW2, "No tienes esa cantidad.");
	       		SendFMessage(playerid, COLOR_LIGHTBLUE, "Le has ofrecido %d pastillas de éxtasis a %s. La oferta termina en 15 segundos.", amount, GetPlayerNameEx(targetid));
	    		format(string, sizeof(string), "%s quiere darte %d pastillas de éxtasis. Escribe '/aceptar droga' para aceptar. La oferta termina en 15 segundos.",GetPlayerNameEx(playerid), amount);
				DrugOfferType[targetid] = 3;
	    	} else
				if(strcmp(type, "cocaina", true) == 0)
				{
	       			if(PlayerInfo[playerid][pCocaine] < amount)
	           			return SendClientMessage(playerid, COLOR_YELLOW2, "No tienes esa cantidad.");
					SendFMessage(playerid, COLOR_LIGHTBLUE, "Le has ofrecido %d gramos de cocaína a %s. La oferta termina en 15 segundos.", amount, GetPlayerNameEx(targetid));
	    			format(string, sizeof(string), "%s quiere darte %d gramos de cocaina. Escribe '/aceptar droga' para aceptar. La oferta termina en 15 segundos.",GetPlayerNameEx(playerid), amount);
					DrugOfferType[targetid] = 4;
	   			 } else
					{
           				SendClientMessage(playerid, COLOR_GREY, "{5CCAF1}[Sintaxis]:{C8C8C8} /dardroga [IDJugador/ParteDelNombre] [tipo] [cantidad]");
						return SendClientMessage(playerid, COLOR_YELLOW2, "Tipos: marihuana - lsd - extasis - cocaina");
	    			}

   	SetPVarInt(targetid, "CancelDrugTransfer", SetTimerEx("CancelDrugTransfer", 15 * 1000, false, "ii", targetid, 1));
	SendClientMessage(targetid, COLOR_LIGHTBLUE, string);
	DrugOffer[targetid] = playerid;
	DrugOfferAmount[targetid] = amount;
	SellingDrugs[playerid] = true;
	return 1;
}

SetDruggedPlayerGunSkills(playerid)
{
    SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 998);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL_SILENCED, 999);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, 999);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, 999);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 998);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, 999);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, 999);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, 999);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_SNIPERRIFLE, 999);
}

forward RestartPlayerEffectCocaine(playerid);
public  RestartPlayerEffectCocaine(playerid)
{
    if(DrugEffectCocaine[playerid] == true)
    {
		SetNormalPlayerGunSkills(playerid);
		DrugEffectCocaine[playerid] = false;
		SendClientMessage(playerid, COLOR_YELLOW2, "El efecto de la cocaina se ha ido.");
	}
	return 1;
}

forward RestartPlayerEffectLSD(playerid);
public  RestartPlayerEffectLSD(playerid)
{
	if(DrugEffectLSD[playerid] == true)
	{
		new Float:playerhp;
		GetPlayerHealthEx(playerid, playerhp);
		if(playerhp > 100.0 && playerhp <= 115.0)
		    SetPlayerHealthEx(playerid, 100.0);
	    DrugEffectLSD[playerid] = false;
	    SendClientMessage(playerid, COLOR_YELLOW2, "El efecto del LSD se ha ido.");
	}
	return 1;
}

forward RestartPlayerEffectEcstasy(playerid);
public  RestartPlayerEffectEcstasy(playerid)
{
	if(DrugEffectEcstasy[playerid] == true)
    {
		DrugEffectEcstasy[playerid] = false;
		SendClientMessage(playerid, COLOR_YELLOW2, "El efecto del éxtasis se ha ido.");
	}
	return 1;
}

forward RestartPlayerEffectMarijuana(playerid);
public RestartPlayerEffectMarijuana(playerid)
{
	if(DrugEffectMarijuana[playerid] == true)
    {
		DrugEffectMarijuana[playerid] = false;
		SendClientMessage(playerid, COLOR_YELLOW2, "El efecto de la marihuana se ha ido.");
	}
	return 1;
}

CMD:consumir(playerid, params[]) {
	new type[32];
	new weathers[4] = {234, 22, 401, -234};
	if(sscanf(params, "s[32]", type)) {
	    SendClientMessage(playerid, COLOR_GREY, "{5CCAF1}[Sintaxis]:{C8C8C8} /consumir [tipo de droga]");
	    SendClientMessage(playerid, COLOR_YELLOW2, "Tipo s: marihuana - lsd - extasis - cocaina");
	    SendClientMessage(playerid, COLOR_YELLOW2, "Para ver cuánta droga tienes, utiliza '/bolsillo'.");
	} else if(strcmp(type, "marihuana", true) == 0) {

		if(PlayerInfo[playerid][pMarijuana] < 1)
			return SendClientMessage(playerid, COLOR_YELLOW2, "No tienes gramos de marihuana!");
		PlayerInfo[playerid][pMarijuana] -= 1;
		SetPlayerWeather(playerid, weathers[random(4)]);
		SetPVarInt(playerid, "drugEffect", 600);
		PlayerActionMessage(playerid, 15.0, "fuma algo de marihuana.");
		AddPlayerAdiction(playerid, ADICTION_MARIJUANA);
		if(DrugEffectMarijuana[playerid] == false)
		{
   			DrugEffectMarijuana[playerid] = true;
			SetTimerEx("RestartPlayerEffectMarijuana", 600000, false, "i", playerid);
		}

	} else if(strcmp(type, "lsd", true) == 0) {

		if(PlayerInfo[playerid][pLSD] < 1)
			return SendClientMessage(playerid, COLOR_YELLOW2, "No tienes dosis de LSD!");
		PlayerInfo[playerid][pLSD] -= 1;
		SetPlayerWeather(playerid, weathers[random(4)]);
		SetPVarInt(playerid, "drugEffect", 600);
		PlayerActionMessage(playerid, 15.0, "toma una dosis de LSD.");
		AddPlayerAdiction(playerid, ADICTION_LSD);
        if(DrugEffectLSD[playerid] == false)
        {
			if(PlayerInfo[playerid][pHealth] == 100.0)
			{
		    	SetPlayerHealthEx(playerid, 115.0);
		    	DrugEffectLSD[playerid] = true;
		    	SetTimerEx("RestartPlayerEffectLSD", 600000, false, "i", playerid);
			} else
			    SendClientMessage(playerid, COLOR_YELLOW2, "La droga no ha surtido efecto ya que no estabas en la plenitud de tu salud!");
		}

	} else if(strcmp(type, "extasis", true) == 0) {

		if(PlayerInfo[playerid][pEcstasy] < 1)
		    return SendClientMessage(playerid, COLOR_YELLOW2, "No tienes pastillas de éxtasis!");
		PlayerInfo[playerid][pEcstasy] -= 1;
		SetPlayerWeather(playerid, weathers[random(4)]);
		SetPVarInt(playerid, "drugEffect", 600);
		PlayerActionMessage(playerid, 15.0, "toma una pastilla de éxtasis.");
		AddPlayerAdiction(playerid, ADICTION_ECSTASY);
		if(DrugEffectEcstasy[playerid] == false)
		{
   			DrugEffectEcstasy[playerid] = true;
			SetTimerEx("RestartPlayerEffectEcstasy", 600000, false, "i", playerid);
		}

	} else if(strcmp(type, "cocaina", true) == 0) {

		if(PlayerInfo[playerid][pCocaine] < 1)
		    return SendClientMessage(playerid, COLOR_YELLOW2, "No tienes gramos de cocaína!");
		PlayerInfo[playerid][pCocaine] -= 1;
		SetPlayerWeather(playerid, weathers[random(4)]);
		SetPVarInt(playerid, "drugEffect", 600);
		PlayerActionMessage(playerid, 15.0, "aspira algo de cocaína mediante un tubo de papel.");
		AddPlayerAdiction(playerid, ADICTION_COCAINE);
		if(DrugEffectCocaine[playerid] == false)
		{
			SetDruggedPlayerGunSkills(playerid);
			DrugEffectCocaine[playerid] = true;
			SetTimerEx("RestartPlayerEffectCocaine",600000, false, "i", playerid);
		}

	}
	return 1;
}

CMD:llenar(playerid, params[])
{
	new refillprice, refillamount, refilltype, preamount, vehicleid, validslot = -1;

	if(!IsAtGasStation(playerid))
		return SendClientMessage(playerid, COLOR_YELLOW2, "Debes estar cerca de un dispenser de combustible en alguna estación de servicio.");
	if(GetPlayerCash(playerid) < 6) // Lo mínimo para llenar
	   	return SendClientMessage(playerid, COLOR_YELLOW2, "Vuelve cuando tengas el dinero suficiente.");
	if(fillingFuel[playerid])
	    return SendClientMessage(playerid, COLOR_YELLOW2, "Ya te encuentras cargando nafta.");
    if(IsPlayerInAnyVehicle(playerid))
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	    	return SendClientMessage(playerid, COLOR_YELLOW2, "Debes estar como conductor del vehículo.");
		vehicleid = GetPlayerVehicleID(playerid);
		preamount = VehicleInfo[vehicleid][VehFuel];
		if(preamount > 99)
  			return SendClientMessage(playerid, COLOR_YELLOW2, "El tanque se encuentra lleno.");
		refilltype = 1;
        PlayerActionMessage(playerid, 15.0, "comienza a cargar nafta en el tanque del vehículo.");
	} else
		{
			for(new i = 0; i < INV_MAX_SLOTS; i++) {
			    if(getInvItem(playerid, i) == 48) {
			    	preamount = getInvParam(playerid, i);
					validslot = i;
					break;
			    }
			}
			if(validslot == -1)
   				return SendClientMessage(playerid, COLOR_YELLOW2, "Debes estar dentro de un vehículo o tener un bidón con nafta para utilizar este comando.");
			else
			{
				refilltype = 2;
				PlayerActionMessage(playerid, 15.0, "comienza a cargar nafta en el bidón de combustible.");

			}
		}
	refillprice = PRICE_FULLTANK / 100 * (100 - preamount); // precio para llenar el tanque
	if(GetPlayerCash(playerid) < refillprice)
	{
        refillamount = GetPlayerCash(playerid) / 6; // en porcentaje
    	refillprice = GetPlayerCash(playerid);
	} else
		refillamount = 100 - preamount; // le llenamos lo que le falta, en porcentaje
 	TogglePlayerControllable(playerid, false);
	GameTextForPlayer(playerid, "~w~Cargando nafta", 6000, 4);
	fillingFuel[playerid] = true;
	SetPVarInt(playerid, "fuelCar", SetTimerEx("fuelCar", 6000, false, "iiiii", playerid, refillprice, refillamount, refilltype, validslot));
	return 1;
}

//===========================ARMARIOS PARA LAS CASAS============================

new LockerStatus[MAX_HOUSES];
new LockerInfo[MAX_HOUSES][MAX_LOCKER_SLOTS][SlotInfo];

stock getItemType(itemid)
{
	switch(itemid) {
		case 1 .. 15, 16 .. 38, 41, 43:
			return ITEM_WEAPON;
		case 47, 48, 49, 50, 51, 52, 53, 54:
			return ITEM_OTHER;
		case -1, 0:
			return ITEM_NONE;
	}
	return ITEM_NONE;
}

stock getLockerItem(lockerid, lockerslot)
{
	new itemid = -1;

	if(lockerslot >= 0 && lockerslot < MAX_LOCKER_SLOTS)
		itemid = LockerInfo[lockerid][lockerslot][Item];
	return itemid;
}

stock getLockerParam(lockerid, lockerslot)
{
	new param = -1;

	if(lockerslot >= 0 && lockerslot < MAX_LOCKER_SLOTS)
		param = LockerInfo[lockerid][lockerslot][Amount];
	return param;
}

stock setLockerItemAndParam(lockerid, lockerslot, itemid, param)
{
	if(lockerslot >= 0 && lockerslot < MAX_LOCKER_SLOTS)
	{
	    if(getLockerItem(lockerid, lockerslot) > 0) // Si quiere sobreescribir el slot teniendo algo dentro
	    {
			LockerInfo[lockerid][lockerslot][Item] = 0;
			LockerInfo[lockerid][lockerslot][Amount] = 0;
			SaveSlotInfo(SLOT_TYPE_LOCKER, lockerid, lockerslot); // Borramos el anterior
		}
		LockerInfo[lockerid][lockerslot][Item] = itemid;
		LockerInfo[lockerid][lockerslot][Amount] = param;
		SaveSlotInfo(SLOT_TYPE_LOCKER, lockerid, lockerslot);
	}
	return 1;
}

stock resetLocker(lockerid)
{
	for(new i = 0; i < MAX_LOCKER_SLOTS; i++)
	{
	    if(LockerInfo[lockerid][i][Item] > 0)
	    {
	    	LockerInfo[lockerid][i][Item] = 0;
		    LockerInfo[lockerid][i][Amount] = 0;
		    SaveSlotInfo(SLOT_TYPE_LOCKER, lockerid, i);
		} else
		    {
	    		LockerInfo[lockerid][i][Item] = 0;
		    	LockerInfo[lockerid][i][Amount] = 0;
			}
	}
	return 1;
}

GetHouseMaxLockerSlots(houseid)
{
	if(houseid == 0) return 0;
	new hprice = House[houseid][HousePrice];
	if(hprice < 100000) return 8;
	if(hprice < 200000) return 10;
	if(hprice < 300000) return 12;
	if(hprice < 400000) return 14;
	if(hprice < 500000) return 16;
	if(hprice < 600000) return 17;
	if(hprice < 700000) return 18;
	if(hprice < 800000) return 19;
	if(hprice < 900000) return 20;
	if(hprice < 1000000) return 21;
	if(hprice >= 1000000) return 22;
	return 0;
}

CMD:arm(playerid, params[])
{
 	cmd_armario(playerid, params);
	return 1;
}

CMD:armario(playerid, params[])
{
	new text[128], param1, param2[32], itemid, paramcant, houseid = GetPlayerHouse(playerid);

	if(houseid == 0)
	    return SendClientMessage(playerid, COLOR_YELLOW2, "¡Debes estar dentro de una casa!");

	if(sscanf(params, "s[128]I(-1)S(-1)[32]", text, param1, param2))
	{
        SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Sintaxis]:{C8C8C8} (/arm)ario [comando]");
		SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Comandos]:{C8C8C8} usar (para abrirlo o cerrarlo) - tomar [slot de item] - guardar [slot, opcional] - tomardinero [cantidad]");
        SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "{5CCAF1}[Comandos]:{C8C8C8} guardardinero [cantidad] - tomardroga [cantidad] [tipo de droga] - guardardroga [cantidad] [tipo de droga]");

		if(LockerStatus[houseid] == 0)
		    return SendClientMessage(playerid, COLOR_YELLOW2, "El armario se encuentra cerrado con llave.");

        SendClientMessage(playerid, COLOR_WHITE, "=======================[Armario]=======================");
		for(new i = 0; i < GetHouseMaxLockerSlots(houseid); i++) {
            itemid = getLockerItem(houseid, i);
            paramcant = getLockerParam(houseid, i);
            if(getItemType(itemid) == ITEM_WEAPON)
				SendFMessage(playerid, COLOR_WHITE, " - %d- Arma: %s - Munición: %d", i, itemName[itemid], paramcant);
			else
				if(getItemType(itemid) == ITEM_OTHER)
					SendFMessage(playerid, COLOR_WHITE, " - %d- Item: %s - Cantidad: %d", i, itemName[itemid], paramcant);
			 	else
				 	SendFMessage(playerid, COLOR_WHITE, " - %d- Nada", i);
        }
        if(House[houseid][Money] > 0) {
        	SendFMessage(playerid, COLOR_WHITE, " - Dinero en efectivo: $%d", House[houseid][Money]);
		}
		if(House[houseid][Marijuana] > 0) {
		    SendFMessage(playerid, COLOR_WHITE, " - Marihuana: %d gramos.", House[houseid][Marijuana]);
		}
		if(House[houseid][LSD] > 0) {
		    SendFMessage(playerid, COLOR_WHITE, " - LSD: %d dosis.", House[houseid][LSD]);
		}
		if(House[houseid][Ecstasy] > 0) {
		    SendFMessage(playerid, COLOR_WHITE, " - Extasis: %d dosis.", House[houseid][Ecstasy]);
		}
		if(House[houseid][Cocaine] > 0) {
		    SendFMessage(playerid, COLOR_WHITE, " - Cocaína: %d gramos.", House[houseid][Cocaine]);
		}
        SendClientMessage(playerid, COLOR_WHITE, "=====================================================");
		return 1;

	}
	if(strcmp(text, "usar", true) == 0) {

	    if(houseid != PlayerInfo[playerid][pHouseKey] && !AdminDuty[playerid])
	        return SendClientMessage(playerid, COLOR_YELLOW2, "¡No tienes las llaves de este armario!");

		if(LockerStatus[houseid] != 1)
		{
		    PlayerActionMessage(playerid, 15.0, "abre con su llave las puertas del armario.");
		    LockerStatus[houseid] = 1;
		} else
			{
		    	PlayerActionMessage(playerid, 15.0, "cierra las puertas del armario con su llave.");
		    	LockerStatus[houseid] = 0;
			}

	} else if(strcmp(text, "tomardinero", true) == 0) {

 		if(LockerStatus[houseid] == 0)
			return SendClientMessage(playerid, COLOR_YELLOW2, "El armario se encuentra cerrado con llave.");
		if(param1 < 1 || param1 > 200000)
            return SendClientMessage(playerid, COLOR_YELLOW2, "No puedes retirar menos de $1 o mas de $200.000 por vez.");
		if(param1 > House[houseid][Money])
		   return SendClientMessage(playerid, COLOR_YELLOW2, "No hay esa cantidad de dinero.");

        House[houseid][Money] -= param1;
        GivePlayerCash(playerid, param1);
        saveHouse(houseid);
		PlayerActionMessage(playerid, 15.0, "toma algo de dinero del armario.");

	} else if(strcmp(text, "guardardinero", true) == 0) {

 		if(LockerStatus[houseid] == 0)
      		return SendClientMessage(playerid, COLOR_YELLOW2, "El armario se encuentra cerrado con llave.");
 		if(PlayerInfo[playerid][pHealth] < 25)
			return SendClientMessage(playerid, COLOR_YELLOW2, "No puedes usar este comando agonizando");
        if(PlayerInfo[playerid][pLevel] < 3)
            return SendClientMessage(playerid, COLOR_YELLOW2, "¡Debes ser al menos nivel 3 para utilizar este comando!");
		if(param1 < 1 || param1 > 200000)
 			return SendClientMessage(playerid, COLOR_YELLOW2, "No puedes guardar menos de $1 o mas de $200.000 por vez.");
		if((House[houseid][Money] + param1) > 10000000)
   			return SendClientMessage(playerid, COLOR_YELLOW2, "¡El armario solo puede contener hasta $10.000.000!");
		if(GetPlayerCash(playerid) < param1)
 			return SendClientMessage(playerid, COLOR_YELLOW2, "No tienes esa cantidad de dinero.");

		House[houseid][Money] += param1;
        GivePlayerCash(playerid, -param1);
        saveHouse(houseid);
        PlayerActionMessage(playerid, 15.0, "guarda algo de dinero en el armario.");

	} else if(strcmp(text, "tomar", true) == 0) {

 		if(LockerStatus[houseid] == 0)
			return SendClientMessage(playerid, COLOR_YELLOW2, "El armario se encuentra cerrado con llave.");
   		if(getItemType(getLockerItem(houseid, param1)) != ITEM_WEAPON)
		    return SendClientMessage(playerid, COLOR_YELLOW2, "¡Item inválido o inexistente!");

   		GivePlayerWeapon(playerid, getLockerItem(houseid, param1), getLockerParam(houseid, param1));
   		setLockerItemAndParam(houseid, param1, 0 ,0);

	} else if(strcmp(text, "guardar", true) == 0) {

		if(LockerStatus[houseid] == 0)
			return SendClientMessage(playerid, COLOR_YELLOW2, "El armario se encuentra cerrado con llave.");
 		if(PlayerInfo[playerid][pHealth] < 25)
			return SendClientMessage(playerid, COLOR_YELLOW2, "No puedes usar este comando agonizando");
        if(PlayerInfo[playerid][pLevel] < 3)
            return SendClientMessage(playerid, COLOR_YELLOW2, "¡Debes ser al menos nivel 3 para utilizar este comando!");
		if((PlayerInfo[playerid][pFaction] == FAC_PMA && CopDuty[playerid]) || (PlayerInfo[playerid][pFaction] == FAC_SIDE && SIDEDuty[playerid]))
    		return SendClientMessage(playerid, COLOR_YELLOW2, "¡No puedes hacer esto en servicio!");
		if(GetPVarInt(playerid, "cantSaveItems") == 1)
	    	return SendClientMessage(playerid, COLOR_YELLOW2, "¡Debes esperar un tiempo antes de volver a interactuar con otro item!");
		if(GetPlayerWeapon(playerid) < 1 || (GetPlayerWeapon(playerid) > 34 && GetPlayerWeapon(playerid) != 43))
		    return SendClientMessage(playerid, COLOR_YELLOW2, "¡Item inválido o inexistente!");
		if(param1 == -1) // Si no eligió donde guardarlo
		{
			for(new i = 0; i < GetHouseMaxLockerSlots(houseid); i++) {
			    if(getItemType(getLockerItem(houseid, i)) == ITEM_NONE) {
			        param1 = i; // Encontramos un slot libre
			        break;
				}
			}
			if(param1 == -1)
			    return SendClientMessage(playerid, COLOR_YELLOW2, "¡El armario se encuentra lleno!");
		} else // Si nos dijo donde guardarlo
			{
			    if(param1 < 0 || param1 >= GetHouseMaxLockerSlots(houseid))
			        return SendClientMessage(playerid, COLOR_YELLOW2, "Slot inválido.");
				if(getItemType(getLockerItem(houseid, param1)) != ITEM_NONE)
				    return SendClientMessage(playerid, COLOR_YELLOW2, "Ya tienes un item en ese slot.");
			}

     	SetPVarInt(playerid, "cantSaveItems", 1);
		SetTimerEx("cantSaveItems", 4000, false, "i", playerid);
		setLockerItemAndParam(houseid, param1, GetPlayerWeapon(playerid), GetPlayerAmmo(playerid));
		RemovePlayerWeapon(playerid, GetPlayerWeapon(playerid));

	} else if(strcmp(text, "tomardroga", true) == 0) {

		if(LockerStatus[houseid] == 0)
			return SendClientMessage(playerid, COLOR_YELLOW2, "El armario se encuentra cerrado con llave.");
		if(param1 < 1 || param1 > 10000)
		    return SendClientMessage(playerid, COLOR_YELLOW2, "No puedes retirar menos de 1 o mas de 10.000.");

		if(strcmp(param2, "marihuana", true) == 0) {
		    if(param1 > House[houseid][Marijuana])
		        return SendClientMessage(playerid, COLOR_YELLOW2, "No hay esa cantidad de droga.");

            House[houseid][Marijuana] -= param1;
            PlayerInfo[playerid][pMarijuana] += param1;
            saveHouse(houseid);
            PlayerActionMessage(playerid, 15.0, "toma un paquete desconocido del armario.");

		} else if(strcmp(param2, "LSD", true) == 0) {
  			if(param1 > House[houseid][LSD])
		        return SendClientMessage(playerid, COLOR_YELLOW2, "No hay esa cantidad de droga.");

            House[houseid][LSD] -= param1;
            PlayerInfo[playerid][pLSD] += param1;
            saveHouse(houseid);
            PlayerActionMessage(playerid, 15.0, "toma un paquete desconocido del armario.");

		} else if(strcmp(param2, "cocaina", true) == 0) {

		    if(param1 > House[houseid][Cocaine])
		        return SendClientMessage(playerid, COLOR_YELLOW2, "No hay esa cantidad de droga.");

            House[houseid][Cocaine] -= param1;
            PlayerInfo[playerid][pCocaine] += param1;
            saveHouse(houseid);
            PlayerActionMessage(playerid, 15.0, "toma un paquete desconocido del armario.");

		} else if(strcmp(param2, "extasis", true) == 0) {

		    if(param1 > House[houseid][Ecstasy])
		        return SendClientMessage(playerid, COLOR_YELLOW2, "No hay esa cantidad de droga.");

            House[houseid][Ecstasy] -= param1;
            PlayerInfo[playerid][pEcstasy] += param1;
            saveHouse(houseid);
            PlayerActionMessage(playerid, 15.0, "toma un paquete desconocido del armario.");

        } else
			return SendClientMessage(playerid, COLOR_YELLOW2, "Ingrese un típo de droga válido.");

	} else if(strcmp(text, "guardardroga", true) == 0) {

		if(LockerStatus[houseid] == 0)
			return SendClientMessage(playerid, COLOR_YELLOW2, "El armario se encuentra cerrado con llave.");
 		if(PlayerInfo[playerid][pHealth] < 25)
			return SendClientMessage(playerid, COLOR_YELLOW2, "No puedes usar este comando agonizando");
        if(PlayerInfo[playerid][pLevel] < 3)
            return SendClientMessage(playerid, COLOR_YELLOW2, "¡Debes ser al menos nivel 3 para utilizar este comando!");
		if(param1 < 1 || param1 > 10000)
		    return SendClientMessage(playerid, COLOR_YELLOW2, "No puedes guardar menos de 1 o mas de 10.000.");

		if(strcmp(param2, "marihuana", true) == 0) {

		    if(param1 > PlayerInfo[playerid][pMarijuana])
		        return SendClientMessage(playerid, COLOR_YELLOW2, "No tienes esa cantidad de droga.");
		    if((House[houseid][Marijuana] + param1) > 10000)
		        return SendClientMessage(playerid, COLOR_YELLOW2, "Solo puedes almacenar hasta 10.000 en el armario.");

            House[houseid][Marijuana] += param1;
            PlayerInfo[playerid][pMarijuana] -= param1;
            saveHouse(houseid);
            PlayerActionMessage(playerid, 15.0, "guarda un paquete desconocido en el armario.");

		} else if(strcmp(param2, "LSD", true) == 0) {

  			if(param1 > PlayerInfo[playerid][pLSD])
		        return SendClientMessage(playerid, COLOR_YELLOW2, "No tienes esa cantidad de droga.");
		    if((House[houseid][LSD] + param1) > 10000)
		        return SendClientMessage(playerid, COLOR_YELLOW2, "Solo puedes almacenar hasta 10.000 en el armario.");

            House[houseid][LSD] += param1;
            PlayerInfo[playerid][pLSD] -= param1;
            saveHouse(houseid);
            PlayerActionMessage(playerid, 15.0, "guarda un paquete desconocido en el armario.");

		} else if(strcmp(param2, "cocaina", true) == 0) {

		    if(param1 > PlayerInfo[playerid][pCocaine])
		        return SendClientMessage(playerid, COLOR_YELLOW2, "No tienes esa cantidad de droga.");
		    if((House[houseid][Cocaine] + param1) > 10000)
		        return SendClientMessage(playerid, COLOR_YELLOW2, "Solo puedes almacenar hasta 10.000 en el armario.");

            House[houseid][Cocaine] += param1;
            PlayerInfo[playerid][pCocaine] -= param1;
            saveHouse(houseid);
            PlayerActionMessage(playerid, 15.0, "guarda un paquete desconocido en el armario.");

		} else if(strcmp(param2, "extasis", true) == 0) {

		    if(param1 > PlayerInfo[playerid][pEcstasy])
		        return SendClientMessage(playerid, COLOR_YELLOW2, "No tienes esa cantidad de droga.");
		    if((House[houseid][Ecstasy] + param1) > 10000)
		        return SendClientMessage(playerid, COLOR_YELLOW2, "Solo puedes almacenar hasta 10.000 en el armario.");

            House[houseid][Ecstasy] += param1;
            PlayerInfo[playerid][pEcstasy] -= param1;
            saveHouse(houseid);
            PlayerActionMessage(playerid, 15.0, "guarda un paquete desconocido en el armario.");

        } else
			return SendClientMessage(playerid, COLOR_YELLOW2, "Ingrese un típo de droga válido.");
	}
	return 1;
}

stock LoadLockersSlotsInfo() {
	new
		query[128],
		id = 1;

	while(id < MAX_HOUSES) {
	    format(query, sizeof(query), "SELECT * FROM `slots_info` WHERE `Type`= %d AND `Id` = %d", SLOT_TYPE_LOCKER, id);
  		mysql_function_query(dbHandle, query, true, "OnSlotsInfoDataLoad", "ii", SLOT_TYPE_LOCKER, id);
		id++;
	}
	return 1;
}

stock LoadTrunksSlotsInfo() {
	new
		query[128],
		id = 1;

	while(id < MAX_VEH) {
	    format(query, sizeof(query), "SELECT * FROM `slots_info` WHERE `Type`= %d AND `Id` = %d", SLOT_TYPE_TRUNK, id);
  		mysql_function_query(dbHandle, query, true, "OnSlotsInfoDataLoad", "ii", SLOT_TYPE_TRUNK, id);
		id++;
	}
	return 1;
}

forward OnSlotsInfoDataLoad(type, id);
public OnSlotsInfoDataLoad(type, id) {
   	new
   	    result[128],
		rows,
		fields,
		aux = 0, // Desde el primer registro obtenido que se almacena en posicion cero dentro de los resultados
		slot;

	cache_get_data(rows, fields);

	if(rows) {
	    switch(type) {
	        case SLOT_TYPE_LOCKER: {
			    while(aux < rows) {
			    	cache_get_field_content(aux, "Slot", result); slot = strval(result); 
					cache_get_field_content(aux, "Item", result); LockerInfo[id][slot][Item] = strval(result);
					cache_get_field_content(aux, "Amount", result); LockerInfo[id][slot][Amount] = strval(result);
					aux ++;
				}
			}
			case SLOT_TYPE_TRUNK: {
				while(aux < rows) {
			    	cache_get_field_content(aux, "Slot", result); slot = strval(result);
					cache_get_field_content(aux, "Item", result); TrunkInfo[id][slot][Item] = strval(result);
					cache_get_field_content(aux, "Amount", result); TrunkInfo[id][slot][Amount] = strval(result);
					aux ++;
				}
			}
		}
	}
	return 1;
}

stock SaveSlotInfo(type, id, slot) {
    new
		query[256];

	if(dontsave) return 1;
	
	switch(type)
	{
	    case SLOT_TYPE_LOCKER:
	    {
			if(LockerInfo[id][slot][Item] > 0) // Si el llamado a esta funcion fue porque guardo un arma, guardamos el registro (antes inexistente en db por estar vacio)
		 	{
				format(query, sizeof(query), "INSERT INTO `slots_info` (Type, Id, Slot, Item, Amount) VALUES (%d, %d, %d, %d, %d)",
					type,
					id,
					slot,
					LockerInfo[id][slot][Item],
					LockerInfo[id][slot][Amount]
				);
			} else // Caso contrario, si tomaron el arma, entonces el registro existia en DB ya que no era vacio, por ende lo borramos
			    {
		 	   		format(query, sizeof(query), "DELETE FROM `slots_info` WHERE `Type`= %d AND `Id` = %d AND `Slot` = %d",
				    	type,
				    	id,
				    	slot
					);
				}
		}
		case SLOT_TYPE_TRUNK:
  		{
			if(TrunkInfo[id][slot][Item] > 0) // Si el llamado a esta funcion fue porque guardo un arma, guardamos el registro (antes inexistente en db por estar vacio)
		 	{
				format(query, sizeof(query), "INSERT INTO `slots_info` (Type, Id, Slot, Item, Amount) VALUES (%d, %d, %d, %d, %d)",
					type,
					id,
					slot,
					TrunkInfo[id][slot][Item],
					TrunkInfo[id][slot][Amount]
				);
			} else // Caso contrario, si tomaron el arma, entonces el registro existia en DB ya que no era vacio, por ende lo borramos
			    {
		 	   		format(query, sizeof(query), "DELETE FROM `slots_info` WHERE `Type`= %d AND `Id` = %d AND `Slot` = %d",
				    	type,
				    	id,
				    	slot
					);
				}
		}
	}
  	mysql_function_query(dbHandle, query, false, "", "");
	return 1;
}
